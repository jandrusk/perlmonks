<?xml version="1.0" encoding="windows-1252"?>
<node id="368198" title="pmdev wiki through 2004-06-18" created="2001-08-22 02:44:52" updated="2005-08-02 09:43:26">
<type id="68046">
wiki</type>
<author id="979">
vroom</author>
<data>
<field name="doctext">
&lt;!-- ## DONT DELETE THIS TEMPLATE.
## New stuff always comes at the top, even replies.

&lt;p&gt;[name], 2004-0X-XX&lt;br /&gt;
&lt;/p&gt;&lt;hr /&gt;
(some of the bottom of this was accidentally cut off. And not by [demerphq|me] either :-)
--&gt;
&lt;p&gt;[demerphq], 2004-06-18&lt;br /&gt;
From the cb:&lt;br /&gt;
[tye] the "/tell author" link would take you to message inbox with the why-don't-we-have- this-yet send-to field prepopulated with the node author's name and the "reply" text (to be renamed "message" text) box prefilled with "Re [id://....]"
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-17&lt;br /&gt;
That's why [demerphq] create [sitedoclet]s. Patients! (:
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[davido], 2004-06-17&lt;br /&gt;
Thanks [demerphq] for converting [Guide to the Monastery] to [SiteDocClan]'s jurisdiction.  Another node that should be considered for such treatment is [Voting/Experience System].  That one will take a little more work however, and I'm not sure if it's even possible since it requires code to calculate the current average node rep.  Maybe knowing the average node rep isn't all that important, or maybe the document could be modified to show a link to a node-rep-average page, rather than incorporate the actual number in the document's body.  I'm not clear on what the implementation would entail.  Thoughts?
&lt;hr /&gt;
&lt;p&gt;[ysth], 2004-06-16&lt;br /&gt;
If someone could apply my Wiki Maintenance superdoc ([id://360756]), you can
see the text sizes there.  But having it on the edit/display pages would also
be nice. 
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-16&lt;br /&gt;
Just so folks know, the test server CB has slightly different behaviour from here. It isnt restricted to 10 messages, and it isnt restricted to a short duration. This is because when several people are working on pmdev they may be much slower to respond to things in the CB. if you add "max_in_cb=50" to the GET url youll get the last 50 messages in the last 24 hours displayed in the cb.
&lt;/p&gt;
&lt;p&gt;
But I agree that chatting via pmdev can be a bit of a pain. One thing that does work however is katterbox. As for creating a PM dev note/node mechanism (blah), sounds like a good idea to me.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-16&lt;br /&gt;
Here's a fairly easy project for someone to claim.  [theorbtwo] took a whack at it but his solution required javascript and so never got applied.
&lt;/p&gt;&lt;p&gt;
Step 1 is almost trivial so might make a good "first project" if anyone is looking for such.  Just display "text size" on the [wiki] display and edit pages.
&lt;/p&gt;&lt;p&gt;
Step 2 is a bit trickier.  Have [wiki editpage] (BTW, we edit wikis with displaytype=editpage because canUpdateNode() hasn't been fixed to handle wiki permission -- this needs to change so [Super Search] can handle wikis -- but don't get distracted by the htmlpage used for wikis when displaytype=edit) append something like &lt;code&gt;\n&lt;!-- END OF TEXT (DO NOT REMOVE) --&gt;\n&lt;/code&gt; and, when text is submitted, remove something like &lt;code&gt;s#(\r*\n\r*)?&lt;!-- END OF TEXT (DO NOT REMOVE) --&gt;\s*$##&lt;/code&gt; from the text and if that fails, don't apply the update and tell the user that their browser has likely truncated the text.
&lt;/p&gt;&lt;p&gt;
Something to check for the 64kB limit on regular nodes would also be nice (they'll look fine in preview but will get truncated when committed to the database).
&lt;/p&gt;&lt;p&gt;
A more automated wiki archiver would be nice as well.
&lt;/p&gt;&lt;p&gt;
I personally don't find that the test server makes a good place to carry on conversations but the wikis won't scale for discussions like this with the level of activity growing the way it is.  PMD and note replies are current options (depending on how public you want something to be).  A new node type that gets pmdev notes as replies and a page for creating them might be wise at this point.  I don't mind skipping or postponing the whole 'create a section' and related tripe.
&lt;/p&gt;&lt;p&gt;
Back to my day job...
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[tye], 2004-06-16&lt;br /&gt;
I think replacing documentation in code node (mostly superdocs) with a call to an htmlcode to fetch node contents that sitdocclan can edit is a good idea.  It might be worth creating a new node type so that these embedded faqlets don't get indexed with the other faqlets.  But I don't see much point in any new fields (so just decending from faqlet makes sense to me).
&lt;/p&gt;&lt;p&gt;
The htmlcode could even take a hash or list of template parameters to be substituted into the faqlet contents.
&lt;/p&gt;&lt;p&gt;
I'd considered also allowing sitedocclan to directly edit the comments for groups, but the Everything security model makes providing multiple htmlpages that can modify a node likely to introduce unexpected security problems, so I never did it.  A non-"edit" htmlpage for group nodes that checks sitedocclan membership by hand and applies the changes to only the doctext field using 'root' privileges is probably the best route in this case (but be careful as such a page will be accessible to the world so you are a little restricted on how you use Everything templating -- putting it all inside of a single &amp;#91;% ... %&amp;#93; is often best).
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-16&lt;br /&gt;
[davido] on the contrary this is exactly why I thought you would be good for the role. :-). Anyway, yes there is a real problem with embedded documentation in superdocs and other executable nodes that require [pmdev] rights to inspect and [gods|god] rights to apply. 
&lt;/p&gt;
&lt;p&gt;
It seems a common approach has been to '?' link to a site faqlet. Personally im not a huge fan of this approach (except on crowded pages like [User Settings]) as it means that users have to go elsewhere to read the documentation. [theorbtwo], [castaway], [corion] and I discussed this recently (over a damn fine cup of coffee I will say, thanks corion!) and we had the idea that we could create an "embedded faqlet" type/mechanism. This way documentation could actually exist in a sitefaqlet but be also rendered directly by the node. A new display mode ("sdcedit" maybe?) would allow SDC access to edit this faqlets in place.
&lt;/p&gt;
&lt;p&gt;
My original thoughts were to create a new nodetype for this with special information like programmer notes for what the faqlet should explain etc etc. But recent disucssions with tye over the new PN stuff suggest that maybe a cruder, but much simpler technique of offering an htmlcode node that knows how to fetch the appropriate 
faqlet, and provide context specific links for the SDC to enable editing the appropriate box.
&lt;/p&gt;
&lt;p&gt;
Anyway, all of this is sortof bubbling around my TODO list. Other ideas and thoughts are very much welcomed.
&lt;/p&gt;
&lt;hr /&gt;
&lt;P&gt;[davido], 2004-06-16&lt;br /&gt;
Me again.  Aren't you all sorry you let me in the door?&lt;br /&gt;
[Guide to the Monastery] is hard-coded content.  It should (IMHO) be released into the hands of [SiteDocClan].  How do people here feel about it?  And what other nodes around here would be candidates for conversion to [SiteDocClan] ownership?
&lt;hr /&gt;
&lt;p&gt;[davido], 2004-06-16&lt;br /&gt;
I've submitted [id://367130]; a minor tweak to the [Newest Nodes] page TOC.  The issue was that "2 Patches" will be singularized to "1 Patche".  I couldn't just do a &lt;code&gt;s/es\b//g&lt;/code&gt; because that would foul up singularization of "Notes"  (Not? haha).  So the patch focuses on the specific case of 'Patches' with &lt;code&gt;s/(Patch)es\b/$1/&lt;/code&gt;.  If it meets with approval hopefully someone can apply it.
&lt;hr /&gt;
&lt;p&gt;[davido], 2004-06-16&lt;br /&gt;
[BigLug]: Welcome.  I believe I'm one of the newest members of [PMDev] before you came along, so I'm certanly not an experienced authority.  However, as a newcomer, I may have a few thoughts that will help you along the first few hours of the learning curve.
&lt;/p&gt;&lt;p&gt;
The first thing you want to do is visit your [Nodelet Settings], and turn on the [Cabal] nodelet, the [PmDev] nodelet, and the Synch nodelet.  They are a few of the tools of the trade.  You should also ask [demerphq] or [Corion] for an account on the [http://pmdev.flux8.com:8081|test server].  The Synch Nodelet needs you to give it your test server accountname and password (enter that on the Perlmonks website's synch nodelet).  The Synch Nodelet on the test server needs the same info, but for your Perlmonks account.  This will enable you to pull code from PM to the test server, and push patches from the test server back over to PM (as well as reviewing differences between the two sites' code, and a few other nice tricks).  
&lt;/p&gt;
&lt;p&gt;
You should also take the time to start looking at the code behind many of the different types of nodes and gadgets at the Monastery.  That will help you to become familiar with how things work behind the scenes.  You use the links on the PmDev nodelet to look at site code.  Do your browsing here on the main site, and when you get ready to write a patch, do it on the test site first.  Once it's gone though enough of the testing process there, it can be pushed to the main site, where it may or may not ever get applied. ;)
&lt;/p&gt;
&lt;p&gt;
Besides this brief discussion, be sure to read the various links in the PmDev wiki, ask questions, pitch in, etc.  HTH - Dave.
&lt;hr /&gt;
&lt;p&gt;[BigLug], 2004-06-16&lt;br /&gt;
Thanks for the welcome people.  Are there any procedure docs around? How/where do I post patches for review? I know where the code is and I can get to the edit parts where I change code. However should I be doing that on a test server? Once I do something do I post it here, or do I post it here and then if there's no objections then I do it? Once people say they like what I've done, do I need to contact Gods about applying, or do I just assume that enough of them are reading this that they'll know about it already? If this isn't yet documented anywhere, are there any objections to me creating docs (as FAQlets that aren't indexed on the [PerlMonks FAQ].)
&lt;/p&gt;&lt;hr /&gt;


&lt;p&gt;[ysth], 2004-06-16&lt;br /&gt;
Update: patched: [id://367061], but I can't try it on the test server without
reversing a lot of other changes I'm working on.&lt;p&gt;
Oops, it isn't created "correctly" in that the user it is for doesn't have user_scratchpad set.  I'll try to patch this now.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-15&lt;br /&gt;
The scratch pad viewer will currently create scratch pads for other users if you put scratchpad_privatetext or _doctext params on the url.  The scratch pad is created correctly, and the text fields are not actually set, so I don't see
this as a critical problem, but wanted to mention it anyway. I'll fix it in the next day or two along with some other changes. 
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-14&lt;br /&gt;
Please welcome [biglug] to our big happy family. :-)
&lt;/p&gt;&lt;hr /&gt;
&lt;p&gt;[davido], 2004-06-14&lt;br /&gt;
I have to admit, [tye] mentioned something about that but I didn't get the gyst of it; it was kind of a hint in passing.  I should have investigated further.  I was actually just thinking about the subject tonight; that it is unfortunate that the patch doesn't preserve whatever people typed in.  A kludge would be to tell people to be sure to cut-n-paste. ;)  That's so 90's.  *grin*  Feel free to update the patch, since it sounds like you know how to implement it.
&lt;/p&gt;
&lt;p&gt;[ysth], 2004-06-14&lt;br /&gt;
In [href://index.pl?diff_against=357609&amp;node_id=363878|davido's preview page patch], should those links have target=_new?  Seems like without that we are
setting people up to enter text and then loose it.  (Yes, I know there's always
the back button, but people can't always seem to figure that out.)  But the warning is a great idea, [davido].
&lt;p&gt;
Thanks for dealing with the scratchpad stuff, [demerphq].
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-13&lt;br /&gt;
I have rolled out the new scratchpad code. All of the old stuff is gone now. (Well its backed up, [gods] can do a restore with instructions from the [gods wiki].)
&lt;/p&gt;
&lt;p&gt;
Currently the new approach is no public flag. There is a private document and a public document in each. Currently the rendering of this is a bit odd, and [castaway] and [theorbtwo] have expressed reservations about the changes. However as the modifications resolved a wide range of issues I have applied them anyway. We can always morph them into something else if its decided its needed or better or whatever. I am going to write a PM Discussion outlining how it works for folks to be able to interface with it. I am of the opinion that regardless how this particular implementation works out that we wont have to make much if any changes to the current API. Possibly we would extend it, but we shouldnt need a major revamp from this point on.
&lt;/p&gt;
&lt;p&gt;
There are certainly hanging chads in this rollout. So feel free to patch and etc. I think there are only a few things that are really necessary to be done.
&lt;/p&gt;
&lt;p&gt;
[id://366368] has details of the changes i made. Some not so important loose ends: Styling sucks on the display page. [scratchpad_link] can take advantage of user.user_scratchpad and be more efficient. We could create a [scratchpad create maintenance] and have it automatically update the user table as necessary instead of using [createscratchpad] to do so instead. Ah, i think thats really about it. 
&lt;/p&gt;
&lt;p&gt;
Also i applied [davido]s preview patch. Thats all for me now tonite folks. Cheers.
&lt;/p&gt;
&lt;hr /&gt;
[davido], 2004-06-13&lt;br /&gt;
Ok, now that the synch nodelet is working again I've pushed a patch over here: [id://363878].  Its purpose is to add a nonobtrusive message to the 'preview page' if the poster is [Anonymous Monk].  The message is "You are not logged in.  [Login], [Create a new user], or hit 'create' to proceed in posting your node."  It's been on the test server a couple of days, and I've played around with it enough to know it works great.  It doesn't add any annoying "Are you sure?" stuff; just a message on a page that the user would be seeing anyway.  The goal is to help newcomers in figuring out how to post with a name, and to be one additional alert to longtime users who have inadvertantly logged out (in addition to the visual theme clue they should be using).  If it meets with general approval I'd like to see it get applied.  -- Thanks!
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[demerphq], 2004-06-13&lt;br /&gt;
Could be yeah. Ill take a look.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[davido], 2004-06-12&lt;br /&gt;
I'm finding that I'm unable to push patch 324110 (preview page - (patch)) from the test server to PM.  I've pinned it to [id://11911], but when I hit "Patch to PM" it silently fails (nothing ever shows up on the PM patch lister).  I also am unable to diff to PM.  The failure is "No code to diff with" (or something to that effect).  Could this be one of those glitches?  ;)
&lt;/p&gt;
&lt;p&gt;[demerphq], 2004-06-12&lt;br /&gt;
the [Synch Nodelet] has been ported and synchronized with the test server. It used to be called the "Perl Monks Nodelet" but that didnt make sense once it was renamed. Anyway, there were a few nits caused by different versions of the XML handling code so there may still be bugs that i havent found, but from what I can tell it works.
Have fun.
&lt;/p&gt;&lt;hr /&gt;
&lt;p&gt;[Corion], 2004-06-12&lt;br /&gt;
In the robot playground, pages &lt;i&gt;really&lt;/i&gt; look the same, so there Etag headers might make sense, but they will at best save bandwidth, not CPU. I (currently) imagine an Etag scheme &lt;tt&gt;NodeId-UserId-PageMD5&lt;/tt&gt;, which would take different settings into account. For the Anonymous Monk, I've already implemented &lt;tt&gt;Cache-Control: public&lt;/tt&gt;, so that an aggressive caching proxy can serve the page to two customers.
&lt;/p&gt;&lt;p&gt;If a page is not marked as (HTTP) cacheable for a robot, it will discard it, at least that's how I understand that search engines organize their search space, so making pages appear highly cacheable should let them stay longer in the search space of the engines.&lt;/p&gt;
&lt;p&gt;I have clicked around somewhat in the robot playground, and did not notice that the pages displayed failed my expectations, but I did notice that already visited pages came directly from disk instead of hitting the server. This might be interesting to have for the main part of the site too - so what I want here are some testers that click around, maybe even post using the robot playgroun, and who tell me which headers also need to be added.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-11&lt;br /&gt;
I don't think it is important that robot pages be highly cacheable.  w/o nodelets, they will be low-load pages and we have (had) more real visitors than robots so optimizing caching there makes little difference to load.
&lt;/p&gt;&lt;p&gt;
The important things are forcing robots into a single view and making that view appropriate.
&lt;/p&gt;&lt;p&gt;
So, no, robot hits should not be forced into being anonymous.
&lt;/p&gt;&lt;p&gt;
For most pages (that is, not CSS pages), the main reason I want some decent cache control headers is reduce user frustration with their browser refetching a node when should really just load from its cache.
&lt;/p&gt;&lt;p&gt;
I don't expect this to reduce load much. Even the CSS pages are extremely low load fetches so even dropping tens of thousands of hits isn't going to be as dramatic as it sounds -- but it will also make pages load faster for visitors.
&lt;/p&gt;&lt;p&gt;
I thought etags should only match when two fetches of the same page are identical.  That's pretty unlikely around here so I'm not sure they'll be much use (unless modern browser can't be made to behave reasonably about refetching w/o them).
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[Corion], 2004-06-12&lt;br /&gt;
At the additional price of 15 more lines in Everything::HTML, the world now seems flat to robots, as all resp. many links in the robot playground are now 
of the form &lt;tt&gt;/robots/\d+&lt;/tt&gt; or &lt;tt&gt;/robots/Corion&lt;/tt&gt;. I'm not sure if there is much benefit in this, other than putting a &lt;tt&gt;.html&lt;/tt&gt; at the end of each node_id and making all look like a static site. &lt;tt&gt;Etag&lt;/tt&gt; headers become more important as [Corion] and [id://5348] now truly point to the same page and we should tell the search engines so. The problem how to calculate a node checksum for the header remains. Maybe a simple post-processing step that &lt;i&gt;always&lt;/i&gt; adds this header ...
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[Corion], 2004-06-11&lt;br /&gt;
&lt;p&gt;&lt;i&gt;(moved from the pmdev version of this wiki)&lt;/i&gt;&lt;/p&gt;
The [http://pmdev.flux8.com:8081/robots/5348|robots playground] now has proper &lt;tt&gt;Last-Modified:&lt;/tt&gt; headers generated from &lt;tt&gt;createtime&lt;/tt&gt;, but they are wrong respectively misleading for truly dynamic pages like [Newest Nodes].
&lt;/p&gt;
&lt;p&gt;Also this evening, I added proper aliasing and interpretation of &lt;tt&gt;$query-&amp;gt;path_info&lt;/tt&gt;, so that the link to the playground actually looks nice and the internal links still work. I'm setting &lt;tt&gt;$q-&amp;gt;param('node', $path_info)&lt;/tt&gt;, so that even [http://pmdev.flux8.com:8081/robots/Newest Nodes] does work. This feature came at the small cost of 5 additional lines to Everything::HTML, again, and one line in &lt;tt&gt;httpd.conf&lt;/tt&gt; ...&lt;/p&gt;
&lt;p&gt;The next thing I'd like to tackle is some policy about user/cookie handling for the robots playground. Should every user be forced into being [Anonymous Monk] when visiting it? Having this would allow to add even more caching headers to the responses, like &lt;tt&gt;Cache-Control: public&lt;/tt&gt; - on the other hand, I can make that a special case depending on the UID of the current user...&lt;br /&gt;Should every &lt;tt&gt;text/html&lt;/tt&gt; page have a META redirect to its real counterpart? Having this would force all humans onto the main site, separate from the robots, unless there are robots that follow META redirects ...&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;[davido], 2004-06-11&lt;br /&gt;
A minor patch has been applied to [The Monastery Gates].  If you visit the Monastery as [Anonymous Monk], the [Create a new user] link will be displayed in a more visible location, right beneath the [PerlMonks FAQ] link.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[demerphq], 2004-06-11&lt;br/&gt;
I've just been working on creating a "Settings Nodelet" as mentioned by tye. However ive encountered a problem. Currently [Nodelet Settings] seems to use a [nodeletgroup] object to store the "normal" nodelets in. I think this is a bad idea.  First off the editor for nodelet groups is broken. Second off the approach lacks flexibility, third off, it requires more database activity than is needed (as it must query the nodegroups table every time). Also it appears that there are caching problems involved with adding a new node to the nodeletgroup via the SQL prompt.
&lt;/p&gt;
&lt;p&gt;
What I think is the best is to use a settings based framework much like used in Newest Nodes (via [get_nn_settings]) this would allow one setting to be used for all of the required info. Would minimize DB fetches (only a single record would be returned), and would provide for far more flexibility in the implementation. Currently non-normal nodelets are added by hand, which means that a patch is required for every new group/user that is added. By having an NN style setting 
we could use the one setting for all of that and would rarely have to modify nodelet settings or anything but the setting to add new behaviour.
&lt;/p&gt;

&lt;p&gt;[demerphq], 2004-06-11 (copied and slightly modified from test server wiki)&lt;br /&gt;
Ok, ive applied some changes towards getting rid of the public/private flag on scratchpads. It looks like we are going with some form of [ysth]s solution with the a seperate public/private text field. This means that the public flag is unneccessary. [createnewpatch] will now take the old patch stuff (if its there) and put in the correct slot public/private based on the old style flag. Ive also done crude patches to the display handlers, and a couple of other places where either 'scratchpublic' or 'public' were being used.
&lt;/p&gt;
&lt;p&gt;
This work is intended to be part of a single session of patch applications that will utterly remove any traces of the old (in user table, using scratchpublic or public) implementations, thus dont worry about handling migrating data or these flags. Assume they wont exist by the time any new scratchpad related patches are applied.
&lt;/p&gt;
&lt;p&gt;
Part of this rollout will involve adding the user_scratchpad column to the user table, and renaming the user_id column in the scratchpad table to foruser_id. So those fields can be used. 
&lt;/p&gt;
&lt;p&gt;
WRT: the display handlers. I personally think there are two approaches to this. The first is to make the current handler smarter with flags to determine what is showed (for the users own pad, these choices are clear for other users pads). But i think possibly a smarter approach is to make a parameter of the handlers be a field name. So that way we can set up a "scratchpad displayprivate page" and a "scratchpad editprivate page" that call the handlers with the "privatetext" field as the param, and the normal display handlers pages would call the handlers with the normal "doctext" fieldname (actually the handler should default to using this and the the current display pages need not be touched). This means flipping between them is a simple matter of using different displaymodes and thus is simple to utilize and link to appropriately. 
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[demerphq], 2004-06-11&lt;br /&gt;
/me gently reminds folks that all the logic involving old scratchpads should disappear BEFORE I run that that script. Thats the whole idea of it. First we patch all the relevent code to rid ourselves of any old display logic. Then we run the script. Part of what the script does (by virtue of [creatnewscratchpad] already beeing patched on test) is that when a new scratchpad is created from an old one it puts the text in the privatetext field if the old one is private. Furthermore the script i posted fixes any existing "private" scratchpads by moving any text in the doctext field over to the newly create privatetext field prior to dropping the scratchpad.public column.
&lt;/p&gt;
&lt;p&gt;
End result [ysth] is that i think the issue you mention needing thepublic flag disappears once that script is run.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-10&lt;br /&gt;
Talk about a confusing interface.  We don't need to duplicate the older interface, especially in ways that make the new interface confusing.  People will have two scratchpads, let them edit two at once.  Don't pretent that they still have one that is either public or private. *shrug*
&lt;/p&gt;&lt;p&gt;
Since a scratchpad can be many screensful of stuff, being able to view just one of them is a bigger deal.  Having to move to the second text box isn't a hardship. (:
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-10&lt;br /&gt;
I'm going to be working on the public/private stuff offline.  I'll probably check in later and let you know how far I've gotten.
&lt;p&gt;
I rememebered the reason I thought a public field was still needed:  Display/edit of a pad will bring up whichever of public/private have content, or public if both do.  To mirror the existing functionality, if neither has content, we need to remember which the user would like to have show up by default.  Otherwise, users with private but empty pads may add content expecting it to stay private (though there will be a checkbox on the edit page clueing them in that it will be public).
&lt;p&gt;
[demerphq], I'm afraid I'm going to prioritize getting the changes made over reviewing your conversion code :) but after I'm done I'll look at it.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-10&lt;br /&gt;
Ok, i wrote [id://363259] which is meant to be run from within [Dumper Prompt] by a god (aka myself). Its purpose is to rename scratchpad.user_id to scratchpad.foruser_id, add and populate user.user_scratchpad, add scratchpad.privatetext, convert old scratchpads to new ones, remove user.scratchpad, move private text into the new field, and finally drop the public field entirely (The more I thought about it the less sense it made, sorry guys i was being thick there.)
&lt;/p&gt;
&lt;p&gt;
As you can see the porpoise is to apply the new code in one swell foop. Which means that the required changes to the nodes involved need to be made and applied _first_. This means that in the small amount of time between applying the patches until the fixit script finishes some parts of the scratchpad will be broken. I dont see much way around it tho. Anyway, im way too tired to finish this up now, but i hope that with all of your help ([ysth] since some of this involves your code im counting on you specifically here) we can get this sorted tomorrow. Which means getting [ysth]s public/private patches applied.
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-10&lt;br /&gt;
Ysth: Synched and Added. If someone feels like a quick hack then that setting could be redone to display nicer looking names. I think you have to use the $query object by hand to do it thought.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[ysth], 2004-06-10&lt;br /&gt;
I added a counted_banner style to newest nodes.  If someone else works on the user settings part, please add it as one of the nn_toc_style options.  If no one else does, I'll try to get to it tonight.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-10&lt;br /&gt;
Perhaps database changes chould always be noted (with the explicit SQL statment used) in the wiki to better keep in sync?
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-10&lt;br /&gt;
Re. lastupdate: ok, thats cool. We need to synch it over. It was a bit of a shock to discover. What was involved in changing it?
&lt;/p&gt;
&lt;p&gt;
Re. Other things: NN stuff is applied, please feel free to enhance or modify. Patch lister stuff from test is more or less ported over. The version here actually is a little different becuase of user requests and becuase of the table differences.
&lt;/p&gt;
&lt;p&gt;
We still need to finish up the stuff with the scratchpads though. [ysth] i havent forgotten your patches. 
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-10&lt;br /&gt;
lastupdate was renamed because its name collided with the names of fields in the user and nodelet tables.  nodeupdated is meant to tell when a node was updated, for use in cache-control headers.  lastedit is meant to tell when a node's content was modified, for display in the title chooser.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-10&lt;br /&gt;
The new patch lister/listpatches diff stuff has been ported over here now. You can configure various aspects as you like via [User Settings]. Patches welcome.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[demerphq], 2004-06-10&lt;br /&gt;
Grinder:Well, i dont agree they are fluff. I stuck em in cause I thought they were both useful and made it read better. As for davido: dont let me having ideas stop you from going ahead. Come to the test server and well chat about what ive already done and if your interested finishing it.
&lt;/p&gt;
&lt;p&gt;
I'd &lt;b&gt;really&lt;/b&gt; like to know what the story is with "lastupdate"/"nodeupdated" field in the node table. On the test server we have it as lastupdate on production its nodeupdated. Yet, when i do code search on production for that field name nothing comes up, but if i dont a code search on lastupdate I find multiple hits.
&lt;/p&gt;
&lt;p&gt;[grinder], 2004-06-10&lt;br /&gt;
The numbers are just fluff, serving more to show of one's skill as a programmer more than helping the reader. Who cares if there's 1 or 101? If you're interested in only Poetry it doesn't matter how many new posts there are, just that there's something new out there.&lt;/p&gt;
&lt;p&gt;I've pondered this question of Newest Nodes for a long time, and something like [http://grinder.perlmonk.org/sidebar.html|my sidebar] packs a lot of information into a small amount of space.&lt;/p&gt;
&lt;p&gt;which reminds me, I have to go and see jc to determine why I can't log into perlmonk.org any more. I've got to update the script to remove the htmlcode and patch categories from the display...&lt;/p&gt;

&lt;p&gt;[davido], 2004-06-09&lt;br /&gt;
Regarding the [Newest Nodes] TOC, here is the format that I envisioned (it should look familiar, as it is quite similar to the Perl Monks menu).
&lt;/p&gt;&lt;p&gt;
| 21 Questions | 12 Discussions | 11 Meditations | 10 Cool Uses for Perl | 9 Catagorized Questions | 8 Catagorized Answers | 7 Snippets | 6 Code | 5 Patches | 4 Geese a Laying | 3 Turtle Doves | 1 Partridge in a Pear Tree |
&lt;/p&gt;&lt;p&gt;
I was getting ready to work on and hopefully submit a patch (thinking the dust had settled) but in reading the wiki today, it looks like [demerphq] already has a plan, and I don't want to cloud it up.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[demerphq], 2004-06-09&lt;br /&gt;
My personal preference is to leave the node links line as it is. OTOH, i think it annoys [tye] much more than changing it would annoy me so insofar as those kinds of considerations go id say make [tye] happy. :-) Think of keeping the lion whose cage you share well fed....
&lt;/p&gt;
&lt;p&gt;
Also I'd like to humbly request that when patches are produced that folks ensure that lines do not exceed ~80 chars. Imo a viewer displaying a patch should still be able to see their nodelets without scrolling.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-09&lt;br /&gt;
I'd also remove node types (admin nodelet, node status); but leave both in the pmdev nodelet, as they go along nicely with the node display page.  I'd actually remove the pmdev-specific stuff such as link to a [nodetype] and 'code' and such from the title chooser (the node type in the title chooser should be a 'friendly' node type like "Re:[Seekers of Perl Wisdom|SoPW]", not cryptic stuff like "[perlquestion]").  I want both types of links, even though I'm in pmdev, and don't want two links cluttering the title chooser (which is already 2/3 of the line in this window and takes 3 lines on my Zaurus because of too many &amp;amp;nbsp;s).
&lt;/p&gt;&lt;p&gt;
I'd also go for cutting the text in pmdev nodelet in half.  Such as s/Dump Fields/Dump/, s/Show Container/Containers/, s/View Code/Code/, s/Dev Wiki/Wiki/, s/Todo Wiki/To-do/.  Remove "Cabal Wiki" links from all nodelets (I've got in like 5 nodelets now) and/or don't include any wiki links if you've got the wiki nodelet turned on.  But add Cabal Wiki link to the [Gods' Arcade].
&lt;/p&gt;&lt;p&gt;
But others should weigh in on such points, of course.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[Corion], 2004-06-10&lt;br /&gt;
On an unrelated note, I've patched the [Editors nodelet] so it doesn't show the
current node id, as that id is shown on every page now anyway. I'll continue looking through the other nodelets and removing the node ids from there as well, unless somebody tells me reasons why not to :-)
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[Corion], 2004-06-10&lt;br /&gt;
I've renamed (on the test server) the [css] nodetype to "cacheable", and the corresponding [CSS display page] to [Cacheable node display page]. As soon as [tye] or another shell-access-god patches the Perl modules to allow custom headers for arbitrary nodes, this will allow browsers to cache the CSS pages served with almost every displayed page.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[tye], 2004-06-09&lt;br /&gt;
[Super search] should use canReadNode(), similar to how regular search already does.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-09&lt;br /&gt;
[tye], I see a difference between wiki permissions (which let you read or write the doctext) and canUpdateNode, which should let you change the text and the permissions.  AFAICT, we don't need or want canUpdateNode to understand wiki permissions.  But I will defer to your superior knowledge on this point.
&lt;p&gt;
[super search] doesn't pull up wikis at all now; does it have any filter
mechanism other than knowing what node types (or root node types) are
supposed to be public?  I had done some work on adding wikis to it and
wasn't sure if it was a problem to be able to (for instance) search wikis
for "ysth" and see whether I was being talked about on the god's wiki.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[tye], 2004-06-09&lt;br /&gt;
Re: [wikipermissionmenu].  The problem is that there is code all over the place that checks whether you are authorized to read or 'edit' stuff.  That code is broken for wikis.  We fix this by making canReadNode() and canUpdateNode() know how to check wiki permissions.  A tiny number of wiki-specific location such as [wikipermissionmenu] will need to check for what used to be returned for canUpdateNode() for wikis (or just check for "is authorized" based on the wiki author_user).
&lt;/p&gt;&lt;p&gt;
Otherwise, we have to fix tons of places the use canReadNode() so that search and [super search] and xml display and dump node fields and who knows what else don't break wiki security.
&lt;/p&gt;&lt;p&gt;
I don't want user-defined groups in the sense of how groups are currently implemented.  Alternate implementation might work, but I think such work would be premature.
&lt;/p&gt;&lt;p&gt;
But wiki permission not implemented in canReadNode() would just lead to lots of patching as we find yet another place that doesn't special case wikis yet.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-09&lt;br /&gt;
belg: while a healthy dose of scepticism is always useful, i wonder if you arent a little on the nonconstructive side in your comments.  They seem to amount to "I wouldn't want to do this so why would anyone else". I mean do you actually see a problem with such functionality? I just dont understand the attitude of "we have vanilla and strawberry ice cream, and i like vanilla ice cream so we dont need to provide any other kind of icecream."  I mean its not like anyone has asked you to write any code, so what the source of the negativity?
&lt;/p&gt;
&lt;p&gt;
I personally can see such a wiki being useful for folks to work through problems together from the CB. Instead of several people altering their scratchpad and saying "check my pad, blah" all the time they could just alter each others work directly. I also think that for various reasons setting on a bar on who gets the functionality is useful, and since [abbot] has no powers and most regulars who would take advantage of it are abbot or above it seemed a natural demarcation.
&lt;/p&gt;
&lt;p&gt;
tye: I hear you about the NN, so i suppose i might as well give a status update on what where im going with the NN stuff. Basically my approach will be to provide three styles, Long, Banner and None. Long is more or less what we have now, Banner is what youve described as being your preference (no counts) and None is, well, obvious. In addition consider how many folks dont like the new users section I figured id just provide a way for folks to determine which sections should show up for them in the NN viewer. Im also considering changing the way the page is displayed, so that the page is more amenable to CSS styling, and doesnt use tables. I suspect that that will end up being decided by a user setting as well.  Anyway, this all is about 30% finished on the test server. Besides my commitments to resolving various scratchpad issues (which i hope you will agree are a higher priority) the NN stuff is priority #2.
&lt;/p&gt;
&lt;p&gt;
ysth: while i am not an artiste like [Petruchio] i think i can handle simplifying the page such that the CSS folks can go crazy. :-)
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-09&lt;br /&gt;
Misremembered; [wikipermissionmenu] doesn't call canUpdateNode, it just does
what I think is the equivalent check itself.  (Though canUpdateNode would have also checked
wiki authorized updaters, this isn't set for the wiki nodetype.)
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-09&lt;br /&gt;
In the conversion of old scratchpad stuff, I think those set as public should
get new ones created even if empty, so the flag isn't lost.  (Though there may be none of these.)
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[ysth], 2004-06-09&lt;br /&gt;
I have to say, that despite the comments from people on PMD, I don't really expect many people to set up wikis (or use them on an ongoing basis once set up).  I hadn't thought about the actual implementation but had imagined that
people would be able to create automatically one wiki, and maintain a read/write permissions for it as a simple list of user name, ids or usergroups
(or the existing minimum-level wiki permissions).  I had envisioned widening
the wiki.readers and wiki.writers fields, not messing with user-defined user
groups or with changes to can(Read/Update)Node().  IIRC, wikis use canUpdateNode to determine who can change the permissions, not who can change the content, and this should be just the owner.
&lt;/p&gt;
&lt;p&gt;
Last I read through the suggestions, it sounded like someone with some clue
about CSS needs to fix [newest nodes], and document how monks can tailor it to
their own needs.
&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;[tye], 2004-06-09&lt;br /&gt;
I don't see much point in limited read access to (hypothetical) personal wikis, but included it in my proposal because it was less work than excluding it.
&lt;/p&gt;&lt;p&gt;
The main point I see in allowing the restriction of write access to personal wikis is so you can pick what *level* of user you consider trustworthy enough that you won't have a big headache undoing malicious changes.
&lt;/p&gt;&lt;p&gt;
If I saw a strong point in allowing people to set up a private list of people to restrict access to, then it needs to implemented canReadNode() and canUpdateNode() and done efficiently.  I find this a great example of where to reduce scope and produce a first release of personal wikis w/o this feature.
&lt;/p&gt;&lt;p&gt;
I don't consider personal wikis to be sub-forums. *shrug* I also don't consider them a high-priority feature.  I'd much rather get the [Newest Nodes] TOC shrunk, for example.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[belg4mit], 2004-06-09&lt;br /&gt;
Is that just a hypothetical example? What could abbot's possibly have to collaborate on? Do we have enough various sub-forums to divert our attentions?
&lt;/p&gt;&lt;hr /&gt;
&lt;p&gt;[davido], 2004-06-09&lt;br /&gt;
A wiki for Abbots and above gets my positive vote.  However, it shouldn't involve [Cabal] devoting ongoing time to creating, and maintaining group lists.  If it could be worked out so that the end user could add/drop people from his wiki group list himself, that's fine.  But if it requires the act of [Cabal] to manage such lists, it is just too much work to mess with.  Should there be a limit to how many people can be on a group list?  Does it matter? ;)
&lt;/p&gt;
&lt;p&gt;I would think that the wiki creation process should be automated (not requiring an act of the [gods]), but that there should be an approval process, possibly relegated to either [gods] or [janitors].  Because of the fact that there could potentially be a 64k footprint for each wiki, perhaps users should be limited to owning one wiki.  If they fill it up, they can archive it to their own personal off-site webspace themselves and then clear it out for re-use.  Of course users can be on multiple group lists for wiki owned by other users.  [Anonymous Monk] shouldn't be elgible for addition to the group lists.  Should Scribes?  Initiates (everyone)?

&lt;p&gt;[ysth], 2004-06-09&lt;br /&gt;
After thinking about it more, I don't see adding multiple (more than the public &amp; private two) pads as being worthwhile.  I could see granting abbots a wiki
(which they could set permissions on for themselves).  Wiki permissions are better suited to the kind of collaboration capability people seem to be wanting.  And [gods] could create wikis by request if people have a specific
purpose in mind for one.  If the gods agree with this last statement, perhaps
they could mention it in that [id://362220|thread].
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-09&lt;br /&gt;
WRT XML, my thought is that displaytype=xml should just do what it does now (allowing scraping of the actual doctext of the superdoc).  If a superdoc
needs to allow xml output, a new xml ticker should be created for that
(or possibly have the superdoc modified to take a xmlout=1 param or some such--I have wished for this in super search before).  But for the scratchpad
viewer, I don't see the need; post-conversion, xml should be displayable for
the scratchpad node (displaying both public and private for the user him/herself, displaying only public otherwise).
&lt;p&gt;
Searching for "s scratchpad" turns up [user hack page] (displaytype=sanitize, created 2002/3/20), [user myedit page] (displaytype=myedit, created 2003/1/24), [user scratchpad page] (displaytype=scratchpad, created by ar0n 2002/7/17).  I don't know if any of these are actually used.
&lt;p&gt;
Before applying my stuff (and possibly even before converting the old pads),
I need to change so private pads always go in scratchpad.privatetext and
public ones always go in document.doctext.  Other changes to my stuff based
on [tye]'s comments:&lt;ul&gt;&lt;li&gt;personal nodelet add-to links per [tye]'s suggestion&lt;/li&gt;&lt;li&gt;make display/edit have
only one of the two, with a link to go to the other.  If both have content,
bring up the public one initially.  If neither, do whichever is indicated
by the private field (this becomes the only actual use of that field).  Unless both have content, the existing "make public" box will be there and changing it will move the text from one place to the other.  Sound ok?
&lt;/li&gt;&lt;/ul&gt;
&lt;/p&gt;&lt;hr /&gt;
&lt;p&gt;[demerphq], 2004-06-09&lt;br /&gt;
Hmm. Ok some good points here. Ill get the conversion done tonite probably and then we can just jettison all the old stuff.  Which will cut down on my work list a bit. The public/private thing isnt an issue if we do the conversion (at least the point i was making which was a touch different from [ysth]s work).
&lt;/p&gt;
&lt;p&gt;
But the real info i need to make things easier is the XML question below. Is there a way I can make a superdoc display XML instead of HTML without messing with the display page it uses?
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;[tye], 2004-06-09&lt;br /&gt;
Why should user xml display include scratchpad text?  Just include user_scratchpad and they can fetch that node ID if they want the scratchpad.
&lt;/p&gt;&lt;p&gt;
Several of those work items just go away after the batch convert of all old non-empty pads.  Concentrate on conversion and forget making the transition period perfect.
&lt;/p&gt;&lt;p&gt;
As for public/private decisions, I'd just add a field as [ysth] did and stop having to worry about it.
&lt;/p&gt;&lt;p&gt;
I think that cuts your scratchpad to-do list down quite a lot.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[Petruchio], 2004-06-09&lt;br /&gt;
&lt;code&gt;s/ here//;&lt;/code&gt; (-;
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-09&lt;br /&gt;
Please welcome [sporty] to [pmdev]. And no [sporty] Java code isnt useful here. ;-)
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-09&lt;br /&gt;
Well i do have some ideas for a framework for multiple pads, but it isnt sufficiently advanced to propose to anyone yet. [ysth] i like the scratchpad stuff you have done in principle and once the other stuff is sorted I will certainly be looking at applying it.
&lt;/p&gt;
&lt;p&gt;
WRT outstanding scratchpad related issues. 
&lt;ul&gt;
&lt;li&gt;I dont know if all places that should be using [scratchpad_link] are actually doing so. Ive been meaning to do a search for all mentions of 'scratchpad' to identify them.
&lt;/li&gt;
&lt;li&gt;
scratchpads should never be created if the contents is empty. This means we need to change the way the scratchpad viewer functions a little. 
&lt;/li&gt;
&lt;li&gt;
Adding a field (already done on the test server) called user_scratchpad to the usertable forcing the migration of the all of the scratchpad content from the user table to scratchpad nodes. Once this is done user.author_user==scratchpad.user_id and user.user_scratchpad==scratchpad.scratchpad_id and the field "scratchpad" can be removed. This value then needs to be what is used by [scratchpad_link] in normal operation.
&lt;/li&gt;
&lt;li&gt;
We need a way to determine if a users scratchpad is public. Currently this should DWIM regardless of whether they have an old style pad or a newstyle pad. Ideally this would exist in and independent htmlcode node so that when we do the migration we only need to modify that and not all the places where it is checked. This is particularly important as we currently put a "view" link on the user display page regardless of whether the user has a scratchpad, has old style scratch contents or whether the pad is private. This means that probably we getting a lot of empty scratchpads being created by people following the link from the homepage only to see an empty scratchpad.
&lt;/li&gt;

&lt;li&gt;
We need to make the XML view of a user node do a fetch for the appropriate scratchpad (making the user_scratchpad field all the more appropriate) and return its contents as a "pseudo-field". This needs to reflect whatever public/private stuff ends up being applied.
&lt;/li&gt;
&lt;li&gt;
We need to make sure that the scratchpad objects themselves are rendered properly in XML view (on the test server I have refactored the node xml display page into [handle_xml_view])
&lt;/li&gt;
&lt;li&gt;
We need to make sure that the scratchpad viewer can display xml as well. I started looking into this last night, but i wasnt able to work out how to make a superdoc display itself in XML without hacking [handle_xml_view] to special case that node. Since this is to me totally the wrong design approach im really hoping someone can suggest a better route. We shouldnt have to hack special cases into the [handle_xml_view]er, but rather put special logic in the [scratch pad viewer] to reuse the functionality in [handle_xml_view].
&lt;/li&gt;
&lt;li&gt;
On a more forward looking note, it would be nice to hack [scratchpad_link] so that it somehow can return links to all of the scratchpads owned by a user. Compared to eveything above tho this is low priority.

&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-08&lt;br /&gt;
As for multiple scratchpads, adding a text field to the scratchpad table as you did certainly has some advantages as you point out.  It makes [super search] trivial to fix.  I like it for those reasons.  It makes one user task more difficult: flipping a pad between public and private.  But with both text fields on the same form, it is still easy enough.
&lt;/p&gt;&lt;p&gt;
As for display, I haven't looked at what you put together.  I think I'd prefer to see one or the other not both, but I think I like making that an option of the scratchpad display code rather than adding still more links to the "Scratchpad:" field on the user display page.
&lt;/p&gt;&lt;p&gt;
As for "add to scratchpad", I could go for having 3 links in the personal nodelet, just more compactly:
&lt;/p&gt;&lt;p&gt;
add "pmdev wiki" to [nodelet], [public], [private]
&lt;/p&gt;&lt;p&gt;
As for having multiple scratchpad nodes per user, I just don't see the need nor the design.  I appreciate that [demerphq] appears to see some design here, but I don't "get" it.  I see a lot of complications to such a proposal and little value and my route would be to just avoid them.  But if someone else has the vision on this, more power to them.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-07&lt;br /&gt;
Feel free to wipe out my multipad changes on the test server if you are working
on cleanup.&lt;p&gt;
[demerphq] do you have a scratchpad cleanup todo list?  Are there still things
that need to be changed to use [scrachpad_link]?
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-07&lt;br /&gt;
No problem, [demerphq].&lt;p&gt;
[tye], that's a good point re: add to scratchpad.  What did you think of the
user interface (of showing both private and public on the edit and display
pages.)  I did this more hoping that the desired interface could be worked
out than that the internals would be (or at least expecting the user interface
to be settled first.)
&lt;p&gt;
On the internals front, if a separate field rather than a separate node is
the chosen way, I think a private-only scratchpad would live in the private
field, not document.doctext.  This would fix concerns about super-searching.
&lt;p&gt;
Speaking of which, is anyone working on [super search] of scratchpads now?  I could handle that, I think.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-07&lt;br /&gt;
For the record I'm &lt;i&gt;sure&lt;/i&gt; that we &lt;i&gt;haven't&lt;/i&gt; finished addressing problems with the other scratchpad changes yet. I havent reviewed [ysth]s patches yet but i definately want some more time to work out all the kinks in the current code. I know there are stil a few outstanding, and some extra time to find the others would be good. So [ysth] i hope you arent too disappointed that we will wait on that work for a bit?
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-08&lt;br /&gt;
And where is the [user settings] patch to control whether "add to scratchpad" goes to the public or private (part of the) scratchpad?  I think more care and thought is required before opening up multiple scratchpads per user (especially considering that I'm not exactly sure that we've finished addressing problems with the other scratchpad changes yet).
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[ysth], 2004-06-07&lt;br /&gt;
Added patches [id://362489] and [id://362491] to allow pads an extra private text area if you have a public one.  I've tested on the test server and all
seems to work.  Requires a privatetext text field to be added to scratchpad.
&lt;p&gt;
The &lt;code&gt;&lt;hr /&gt;Private pad:&lt;hr /&gt;&lt;/code&gt; is kind of ugly but I
couldn't come up with anything else that was as visually obvious.
&lt;p&gt;
I tried to set up a scratchpad displaycode page on the test server that
would switch to displaying code from the private area if $query-&gt;param('private') and done by the author_user, but it was coming out
in proportional font instead of monospaced; I'm not sure why.  You can try
it with &lt;code&gt;;displaytype=displaycodetest[;private=1]&lt;/code&gt;.
&lt;p&gt;
Note that this is all subject to other's opinions; in the long run, using
a separate scratchpad node might be better, but doing it this way was very
easy.  (Thanks for the nice refactoring, [demerphq]!)
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-07&lt;br /&gt;
Regarding [biglug]s messages: The one about commented text coming out wrong in the edit mode was my fault, i left some debugging code in intended for me personally which would cause trouble for folks whit scratchpads with comments in them (essentially becuase the result would be comments embedded in comments.&lt;br /&gt;
As for the other comment about the edit text displaying parsed links, well it does for me. Are you sure this hasnt already been fixed [biglug]?
&lt;/p&gt;
&lt;p&gt;[demerphq], 2004-06-07&lt;br /&gt;
Sorry, i was pretty tired when I wrote that and probably wasnt clear. When i said &lt;ol&gt;&lt;em&gt;Currently if you linkto a scratchpad or go through any normal mechanism the scratchpad will be created correctly.&lt;/em&gt;&lt;/ol&gt; I should have added "insofar as that link is followed".
&lt;/p&gt;
&lt;p&gt;
To make it clear here is the logic of the modifications I have made:
&lt;ul&gt;
&lt;li&gt;There are now two ways to lookup a users scratchpad. One is intended for relatively easy reuse and one is intended for "heavy lifting" as it were. [scratchpad_link] is used to obtain a link to a scratchpad it is called with five arguments: &lt;code&gt; $user, $title, $linkhash, $idonly, $create &lt;/code&gt;. $user is expected to be a $USER object, $title is the title for the new link (if left empty it defaults to "$user\'s scratchpad"), $Linkhash is a normal hash as would be provided to linkNode(), $idonly if true causes only the scratchpad_id of the first scratchpad of a user to be returned. False return means something is really wrong. [get_user_scratchpads] handles more complicated scenarios and is internally used by [scratchpad_link] it can handle multiple pads for a user without getting confused.
&lt;/li&gt;
&lt;li&gt;
Under normal cicumstances scratchpad_link does not create a new scratchpad if one doesnt exist. Instead it returns a link to the sratchpad viewer for the user in question. IFF this link is followed then the scratchpad viewer will cause the creation of the new node. 
&lt;/li&gt;
&lt;li&gt;
If the "addtoscratchpad" link is followed then scratchpad_link will be called with the create flag set to ensure that a scratchpad object exists.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
What all of this means is that [scratchpad_link] should be the primary way to link a scratchpad, under normal circumstances it should not be called with $idonly or $create set. Im not entirely happy with the structure of all of this but the original design decisions werent made by me and ive tried to not to make signifigant structural changes.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[tye], 2004-06-06&lt;br /&gt;
Thanks, [demerphq]. Sorry you ended up staying up so late.
&lt;/p&gt;&lt;p&gt;
Did someone delete author_user from [restricted fields], perhaps as part of the scratchpad work?  I thought it was there before and the bugs prompted me to notice that it wasn't.  I tested and was able to change the owner of one of my nodes (not using [gods]ly powers) so I added it (back?) in.
&lt;/p&gt;&lt;p&gt;
Correct, there are currently no node types that use both 'user' and 'scratchpad'  tables, so it wasn't strictly broken.
&lt;/p&gt;&lt;p&gt;
You said "Currently if you linkto a scratchpad &amp;#91;...&amp;#93; the scratchpad will be created correctly", so I'm glad my interpretation was incorrect.
&lt;/p&gt;&lt;p&gt;
I also disallowed 'delete' of scratchpads.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[demerphq], 2004-06-06&lt;br /&gt;
Ok, I get you now. Changes made. The group is 'developers' the user i use is root (113). Hopefully case closed. Anyway gnight.
&lt;/p&gt;
&lt;p&gt;
As for user_id breaking the node system, actually i dont think in this case it actually does as everything is keyed off of the table system. But whatever, ill remove/rename it. Im not wedded to the idea. As for creating scratchpads if they are empty, yes we create them if someone asks to see it even if it is empty. Soon it will be harder to ask to see an empty/nonexistant scractchpad and then it wont be so big a deal. But we dont currently create one just by linking to it. If it doesnt exist then a link to the scratchpad viewer will be returned. if you follow that link then it gets created before it is displayed. Anywas, its waay late. im going to be for real.
&lt;/p&gt;&lt;hr /&gt;

&lt;p&gt;[tye], 2004-06-06&lt;br /&gt; 
A user ID in the scratchpad table doesn't make sense to me since it would/should just be a copy of the author_user field for the scratchpad node. 
&lt;/p&gt;&lt;p&gt; 
We use the node ID in the user table for monk images and it worked out well.  I don't like having to do an extra query just to display a link to something.  I expect we'll eventually have the "look up title" for id:// links cached so it doesn't bother me (also because I see real value in the feature). 
&lt;/p&gt;&lt;p&gt; 
It also allows us to find all users needing to have their pad convert w/o subqueries (which we don't have). 
&lt;/p&gt;&lt;p&gt; 
But I'm not dead set on pad ID in the user table.  You didn't describe any problems with. 
&lt;/p&gt;&lt;hr /&gt; 

&lt;p&gt;[ysth], 2004-06-06&lt;br /&gt; 
[demerphq] added a user-id to the scratchpad table (I think because the test 
site was already set that way for some reason).  For some reason a scratchpad-id field in the user table bothers me more.  For efficient lookup 
you do need one or the other (or by-title lookup as there is now in some places, which I 
dislike even more.)  Do you have reasons to prefer an id in the user table? 
&lt;/p&gt; 
&lt;hr /&gt; 
&lt;p&gt;[tye], 2004-06-06&lt;br /&gt; 
BTW, I used 'clone2type' to archive this wiki (because what I needed to add was important so I didn't want to delay it until I got to a system with reasonable cut'n'paste) and the clone (linked at the bottom of this wiki) must have the wrong creation time (one of the two creation time fields) because it doesn't show up correctly in the gods' nodelet of most recently created nodes.  I've left it that way in case anyone wants to look at it (though there might be a cron job that eventually fixes that). 
&lt;/p&gt;&lt;hr /&gt; 

&lt;p&gt;[tye], 2004-06-06&lt;br /&gt; 
Using $q-&gt;param(op=&gt;"new") to create scratchpads is a mistake for several reasons. 
&lt;/p&gt;&lt;p&gt; 
First, it requires global variables to be modified that result in bugs like the mysterious redirect L~R reported. 
&lt;/p&gt;&lt;p&gt; 
Next, it requires hacks like passing in an alternate owner ID to create the node for.  This is bad because it adds extra code that can break and so now we have scratchpads owned by the wrong person. 
&lt;/p&gt;&lt;p&gt; 
It is also bad because this alternate owner ID is passed in via CGI params which means that anyone can fake up a URL to create scratchpads owned by whoever they want. 
&lt;/p&gt;&lt;p&gt; 
If there is significant code in opNew() then it needs to be factored out to avoid this method of reusing it. 
&lt;/p&gt;&lt;p&gt; 
Note that whoever fixes this bug need to *delete* any scratchpads that are owned by the wrong person as their contents and public/private flag should not be trusted (the real user could not have changed them) -- revert back to the safe values for these from user and settings. 
&lt;/p&gt;&lt;p&gt; 
I think we should add a field to the user record which is the ID of the user's scratchpad.  This allows this to be efficiently reported in the user xml ticker.  It also allows other actions to be more efficient. 
&lt;/p&gt; 

&lt;hr /&gt; 
Continued in [id://361810] </field>
</data>
</node>
