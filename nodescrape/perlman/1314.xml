<?xml version="1.0" encoding="windows-1252"?>
<node id="1314" title="perlman:lib:Config:3" created="1999-12-22 21:52:57" updated="2005-06-28 09:29:15">
<type id="116">
perlman</type>
<author id="113">
root</author>
<data>
<field name="doctext">
&lt;H2&gt;&lt;A NAME="o"&gt;o&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_o_nonblock"&gt;o_nonblock&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;nblock_io.U&lt;/EM&gt;:

&lt;P&gt;
This variable bears the symbol value to be used during 
&lt;CODE&gt;open()&lt;/CODE&gt; or 
&lt;CODE&gt;fcntl()&lt;/CODE&gt; to turn on non-blocking
 &lt;EM&gt;I/O&lt;/EM&gt; for a file descriptor. If you wish to switch between blocking and non-blocking, you may try 
&lt;CODE&gt;ioctl(&lt;/CODE&gt;
&lt;CODE&gt;FIOSNBIO&lt;/CODE&gt;) instead, but that is only supported by some devices.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_obj_ext"&gt;obj_ext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This is an old synonym for _o.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_optimize"&gt;optimize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ccflags.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains any &lt;EM&gt;optimizer/debugger&lt;/EM&gt; flag that should be used. It is up to the Makefile to use it.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_orderlib"&gt;orderlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;orderlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable is &lt;CODE&gt;true&lt;/CODE&gt; if the components of libraries must be ordered (with `lorder $* | tsort`)
before placing them in an archive. Set to
&lt;CODE&gt;false&lt;/CODE&gt; if ranlib or ar can generate random libraries.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_osname"&gt;osname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Oldconfig.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the operating system name (e.g. sunos, solaris,
hpux, &lt;EM&gt;etc.&lt;/EM&gt;). It can be useful later on for setting defaults. Any spaces are replaced
with underscores. It is set to a null string if we can't figure it out.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_osvers"&gt;osvers&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Oldconfig.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the operating system version (e.g. 4.1.3, 5.2, &lt;EM&gt;etc.&lt;/EM&gt;). It is primarily used for helping select an appropriate hints file, but
might be useful elsewhere for setting defaults. It is set to '' if we can't
figure it out. We try to be flexible about how much of the version number
to keep, e.g. if 4.1.1, 4.1.2, and 4.1.3 are essentially the same for this
package, hints files might just be &lt;EM&gt;os_4.0&lt;/EM&gt; or
&lt;EM&gt;os_4.1&lt;/EM&gt;, &lt;EM&gt;etc.&lt;/EM&gt;, not keeping separate files for each little release.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="p"&gt;p&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_package"&gt;package&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;package.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the name of the package being constructed. It is
primarily intended for the use of later Configure units.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_pager"&gt;pager&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;pager.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the name of the preferred pager on the system. Usual
values are (the full pathnames of) more, less, pg, or cat.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_passcat"&gt;passcat&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;nis.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a command that produces the text of the
&lt;EM&gt;/etc/passwd&lt;/EM&gt; file. This is normally ``cat &lt;EM&gt;/etc/passwd&lt;/EM&gt;'', but can be ``ypcat passwd'' when &lt;CODE&gt;NIS&lt;/CODE&gt; is used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_patchlevel"&gt;patchlevel&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;patchlevel.U&lt;/EM&gt;:

&lt;P&gt;
The patchlevel level of this package. The value of patchlevel comes from
the &lt;EM&gt;patchlevel.h&lt;/EM&gt; file.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_path_sep"&gt;path_sep&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This is an old synonym for p_ in &lt;EM&gt;Head.U&lt;/EM&gt;, the character used to separate elements in the command shell search [perlman:perlrun#item_PATH|perlrun#item_PATH].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_perl"&gt;perl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the perl program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;perl&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_perladmin"&gt;perladmin&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;perladmin.U&lt;/EM&gt;:

&lt;P&gt;
Electronic mail address of the perl5 administrator.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_perlpath"&gt;perlpath&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;perlpath.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;PERLPATH&lt;/CODE&gt; symbol, which contains the name of the perl interpreter to be used in shell
scripts and in the ``eval [perlfunc:exec|exec]'' idiom.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_pg"&gt;pg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the pg program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;pg&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_phostname"&gt;phostname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;myhostname.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;PHOSTNAME&lt;/CODE&gt; symbol, which is a command that can be fed to 
&lt;CODE&gt;popen()&lt;/CODE&gt; to get the host name.
The program should probably not presume that the domain is or isn't there
already.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_pidtype"&gt;pidtype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;pidtype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines &lt;CODE&gt;PIDTYPE&lt;/CODE&gt; to be something like pid_t, int, ushort, or whatever type is used to
declare process ids in the kernel.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_plibpth"&gt;plibpth&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;libpth.U&lt;/EM&gt;:

&lt;P&gt;
Holds the private path used by Configure to find out the libraries. Its
value is prepend to libpth. This variable takes care of special machines,
like the mips. Usually, it should be empty.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_pmake"&gt;pmake&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_pr"&gt;pr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_prefix"&gt;prefix&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;prefix.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the name of the directory below which the user will
install the package. Usually, this is &lt;EM&gt;/usr/local&lt;/EM&gt;, and executables go in &lt;EM&gt;/usr/local/bin&lt;/EM&gt;, library stuff in &lt;EM&gt;/usr/local/lib&lt;/EM&gt;, man pages in &lt;EM&gt;/usr/local/man&lt;/EM&gt;, etc. It is only used to set defaults for things in &lt;EM&gt;bin.U&lt;/EM&gt;, &lt;EM&gt;mansrc.U&lt;/EM&gt;, &lt;EM&gt;privlib.U&lt;/EM&gt;, or &lt;EM&gt;scriptdir.U&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_prefixexp"&gt;prefixexp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;prefix.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the full absolute path of the directory below which the
user will install the package. Derived from prefix.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_privlib"&gt;privlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;privlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;PRIVLIB&lt;/CODE&gt; symbol, which is the name of the private library for this package. It may
have a &lt;EM&gt;~&lt;/EM&gt; on the front. It is up to the makefile to eventually create this directory
while performing installation (with &lt;EM&gt;~&lt;/EM&gt; substitution).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_privlibexp"&gt;privlibexp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;privlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable is the &lt;EM&gt;~name&lt;/EM&gt; expanded version of privlib, so that you may use it directly in Makefiles
or shell scripts.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_prototype"&gt;prototype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;prototype.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the eventual value of &lt;CODE&gt;CAN_PROTOTYPE&lt;/CODE&gt;, which indicates the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler can handle funciton prototypes.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ptrsize"&gt;ptrsize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ptrsize.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the value of the &lt;CODE&gt;PTRSIZE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program how many bytes there are in a pointer.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="r"&gt;r&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_randbits"&gt;randbits&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;randbits.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;RANDBITS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program how many bits of random number the 
&lt;CODE&gt;rand()&lt;/CODE&gt; function produces.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ranlib"&gt;ranlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;orderlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable is set to the pathname of the ranlib program, if it is needed
to generate random libraries. Set to &lt;CODE&gt;:&lt;/CODE&gt; if ar can generate random libraries or if random libraries are not
supported

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_rd_nodata"&gt;rd_nodata&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;nblock_io.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the return code from 
&lt;CODE&gt;read()&lt;/CODE&gt; when no data is present.
It should be -1, but some systems return 0 when &lt;CODE&gt;O_NDELAY&lt;/CODE&gt; is used, which is a shame because you cannot make the difference between no
data and an &lt;EM&gt;EOF.&lt;/EM&gt;. Sigh!

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_rm"&gt;rm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the rm program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;rm&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_rmail"&gt;rmail&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_runnm"&gt;runnm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usenm.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains &lt;CODE&gt;true&lt;/CODE&gt; or &lt;CODE&gt;false&lt;/CODE&gt; depending whether the nm extraction should be performed or not, according
to the value of usenm and the flags on the Configure command line.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="s"&gt;s&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_scriptdir"&gt;scriptdir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;scriptdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the name of the directory in which the user wants to
put publicly scripts for the package in question. It is either the same
directory as for binaries, or a special one that can be mounted across
different architectures, like &lt;EM&gt;/usr/share&lt;/EM&gt;. Programs must be prepared to deal with &lt;EM&gt;~name&lt;/EM&gt; expansion.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_scriptdirexp"&gt;scriptdirexp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;scriptdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable is the same as scriptdir, but is filename expanded at
configuration time, for programs not wanting to bother with it.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sed"&gt;sed&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the sed program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;sed&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_selecttype"&gt;selecttype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;selecttype.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the type used for the 2nd, 3rd, and 4th arguments to
select. Usually, this is &lt;CODE&gt;fd_set *&lt;/CODE&gt;, if &lt;CODE&gt;HAS_FD_SET&lt;/CODE&gt;
is defined, and [perlfunc:int#item_int_|int#item_int_] otherwise. This is only useful if you have 
&lt;CODE&gt;select(),&lt;/CODE&gt; naturally.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sendmail"&gt;sendmail&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the sendmail program. After Configure runs, the value
is reset to a plain &lt;CODE&gt;sendmail&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sh"&gt;sh&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sh.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the full pathname of the shell used on this system
to execute Bourne shell scripts. Usually, this will be
&lt;EM&gt;/bin/sh&lt;/EM&gt;, though it's possible that some systems will have &lt;EM&gt;/bin/ksh&lt;/EM&gt;,
&lt;EM&gt;/bin/pdksh&lt;/EM&gt;, &lt;EM&gt;/bin/ash&lt;/EM&gt;, &lt;EM&gt;/bin/bash&lt;/EM&gt;, or even something such as 
&lt;FONT SIZE=-1&gt;D:&lt;/FONT&gt;&lt;EM&gt;/bin/sh.exe&lt;/EM&gt;. This unit comes before &lt;EM&gt;Options.U&lt;/EM&gt;, so you can't set sh with a &lt;CODE&gt;-D&lt;/CODE&gt;
option, though you can override this (and startsh) with &lt;CODE&gt;-O -Dsh=&amp;lt;EM&amp;gt;/bin/whatever&amp;lt;/EM&amp;gt; -Dstartsh=whatever&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_shar"&gt;shar&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sharpbang"&gt;sharpbang&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;spitshell.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the string #! if this system supports that
construct.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_shmattype"&gt;shmattype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_shmat.U&lt;/EM&gt;:

&lt;P&gt;
This symbol contains the type of pointer returned by 
&lt;CODE&gt;shmat().&lt;/CODE&gt; It can be [perlman:perlguts#item_void_|perlguts#item_void_] or &lt;CODE&gt;char *&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_shortsize"&gt;shortsize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;intsize.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the value of the &lt;CODE&gt;SHORTSIZE&lt;/CODE&gt; symbol which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program how many bytes there are in a short.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_shrpenv"&gt;shrpenv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;libperl.U&lt;/EM&gt;:

&lt;P&gt;
If the user builds a shared &lt;EM&gt;libperl.so&lt;/EM&gt;, then we need to tell the
&lt;CODE&gt;perl&lt;/CODE&gt; executable where it will be able to find the installed &lt;EM&gt;libperl.so&lt;/EM&gt;. One way to do this on some systems is to set the environment variable
&lt;CODE&gt;LD_RUN_PATH&lt;/CODE&gt; to the directory that will be the final location of the shared &lt;EM&gt;libperl.so&lt;/EM&gt;. The makefile can use this with something like

&lt;P&gt;
&lt;PRE&gt;        $shrpenv $(C&amp;lt;CC&amp;gt;) -o perl F&amp;lt;perlmain.o&amp;gt; $libperl $libs
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        Typical values are
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        shrpenv=&amp;quot;env C&amp;lt;LD_RUN_PATH&amp;gt;=$F&amp;lt;archlibexp/C&amp;lt;CORE&amp;gt;&amp;gt;&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        or
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        shrpenv=''
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        See the main perl F&amp;lt;Makefile.SH&amp;gt; for actual working usage.
Alternatively, we might be able to use a command line option such
as -R $F&amp;lt;archlibexp/C&amp;lt;CORE&amp;gt;&amp;gt; (Solaris, NetBSD) or -Wl,-rpath
$F&amp;lt;archlibexp/C&amp;lt;CORE&amp;gt;&amp;gt; (Linux).
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_shsharp"&gt;shsharp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;spitshell.U&lt;/EM&gt;:

&lt;P&gt;
This variable tells further Configure units whether your sh can handle #
comments.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sig_name"&gt;sig_name&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sig_name.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the signal names, space separated. The leading
&lt;CODE&gt;SIG&lt;/CODE&gt; in signal name is removed. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; &lt;CODE&gt;ZERO&lt;/CODE&gt; is prepended to the list. This is currently not used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sig_name_init"&gt;sig_name_init&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sig_name.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the signal names, enclosed in double quotes and
separated by commas, suitable for use in the &lt;CODE&gt;SIG_NAME&lt;/CODE&gt; definition below. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; &lt;CODE&gt;ZERO&lt;/CODE&gt; is prepended to the list, and the list is terminated with a plain 0. The
leading &lt;CODE&gt;SIG&lt;/CODE&gt; in signal names is removed. See sig_num.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sig_num"&gt;sig_num&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sig_name.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the signal numbers, comma separated. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; 0 is prepended to the list (corresponding to the
fake &lt;CODE&gt;SIGZERO&lt;/CODE&gt;), and the list is terminated with a 0. Those numbers correspond to the
value of the signal listed in the same place within the sig_name list.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_signal_t"&gt;signal_t&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_voidsig.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the type of the signal handler (void or int).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sitearch"&gt;sitearch&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sitearch.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;SITEARCH&lt;/CODE&gt; symbol, which is the name of the private library for this package. It may
have a &lt;EM&gt;~&lt;/EM&gt; on the front. It is up to the makefile to eventually create this directory
while performing installation (with &lt;EM&gt;~&lt;/EM&gt; substitution).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sitearchexp"&gt;sitearchexp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sitearch.U&lt;/EM&gt;:

&lt;P&gt;
This variable is the &lt;EM&gt;~name&lt;/EM&gt; expanded version of sitearch, so that you may use it directly in Makefiles
or shell scripts.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sitelib"&gt;sitelib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sitelib.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;SITELIB&lt;/CODE&gt; symbol, which is the name of the private library for this package. It may
have a &lt;EM&gt;~&lt;/EM&gt; on the front. It is up to the makefile to eventually create this directory
while performing installation (with &lt;EM&gt;~&lt;/EM&gt; substitution).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sitelibexp"&gt;sitelibexp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sitelib.U&lt;/EM&gt;:

&lt;P&gt;
This variable is the &lt;EM&gt;~name&lt;/EM&gt; expanded version of sitelib, so that you may use it directly in Makefiles
or shell scripts.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sizetype"&gt;sizetype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sizetype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines sizetype to be something like size_t, unsigned long,
or whatever type is used to declare length parameters for string functions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sleep"&gt;sleep&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_smail"&gt;smail&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_small"&gt;small&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;models.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a flag which will tell the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler and loader to produce a program running
with a small memory model. It is up to the Makefile to use this.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_so"&gt;so&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;so.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the extension used to identify shared libraries (also
known as shared objects) on the system. Usually set to &lt;CODE&gt;so&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sockethdr"&gt;sockethdr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_socket.U&lt;/EM&gt;:

&lt;P&gt;
This variable has any cpp &lt;CODE&gt;-I&lt;/CODE&gt; flags needed for socket support.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_socketlib"&gt;socketlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_socket.U&lt;/EM&gt;:

&lt;P&gt;
This variable has the names of any libraries needed for socket support.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sort"&gt;sort&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the sort program. After Configure runs, the value is
reset to a plain [perlfunc:sort|sort] and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_spackage"&gt;spackage&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;package.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the name of the package being constructed, with the
first letter uppercased, &lt;EM&gt;i.e&lt;/EM&gt;. suitable for starting sentences.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_spitshell"&gt;spitshell&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;spitshell.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the command necessary to spit out a runnable shell
on this system. It is either cat or a grep &lt;CODE&gt;-v&lt;/CODE&gt; for # comments.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_split"&gt;split&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;models.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a flag which will tell the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler and loader to produce a program that will run in separate 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; and 
&lt;FONT SIZE=-1&gt;D&lt;/FONT&gt; space, for those machines that support separation of instruction and data space. It is up to the Makefile to use this.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_src"&gt;src&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;src.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the path to the package source. It is up to the
Makefile to use this variable and set &lt;CODE&gt;VPATH&lt;/CODE&gt; accordingly to find the sources remotely.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ssizetype"&gt;ssizetype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ssizetype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines ssizetype to be something like ssize_t, long or int. It is used by functions that return a count of bytes or an error condition. It must be a signed type. We will pick a type such that 
&lt;CODE&gt;sizeof(SSize_t)&lt;/CODE&gt; == 
&lt;CODE&gt;sizeof(Size_t).&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_startperl"&gt;startperl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;startperl.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the string to put on the front of a perl script to
make sure (hopefully) that it runs with perl and not some shell. Of course,
that leading line must be followed by the classical perl idiom:

&lt;P&gt;
&lt;PRE&gt;        eval 'exec perl -S $0 ${1+C&amp;lt;$@&amp;gt;}'
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        if $running_under_some_shell;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        to guarantee perl startup should the shell execute the script. Note
that this magic incatation is not understood by csh.
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_startsh"&gt;startsh&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;startsh.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the string to put on the front of a shell script to
make sure (hopefully) that it runs with sh and not some other shell.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_static_ext"&gt;static_ext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Extensions.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds a list of [perlman:perlguts#item_XS|perlguts#item_XS] extension files we want to link statically into the package. It is used by
Makefile.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_stdchar"&gt;stdchar&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;stdchar.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;STDCHAR&lt;/CODE&gt; to be the type of char used in &lt;EM&gt;stdio.h&lt;/EM&gt;. It has the values ``unsigned char'' or &lt;CODE&gt;char&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_stdio_base"&gt;stdio_base&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines how, given a &lt;CODE&gt;FILE&lt;/CODE&gt; pointer, fp, to access the _base field (or equivalent) of &lt;EM&gt;stdio.h&lt;/EM&gt;'s &lt;CODE&gt;FILE&lt;/CODE&gt; structure. This will be used to define the macro 
&lt;CODE&gt;FILE_base(fp).&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_stdio_bufsiz"&gt;stdio_bufsiz&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines how, given a &lt;CODE&gt;FILE&lt;/CODE&gt; pointer, fp, to determine the number of bytes store in the &lt;EM&gt;I/O&lt;/EM&gt; buffer pointer to by the _base field (or equivalent) of &lt;EM&gt;stdio.h&lt;/EM&gt;'s &lt;CODE&gt;FILE&lt;/CODE&gt; structure. This will be used to define the macro 
&lt;CODE&gt;FILE_bufsiz(fp).&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_stdio_cnt"&gt;stdio_cnt&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines how, given a &lt;CODE&gt;FILE&lt;/CODE&gt; pointer, fp, to access the _cnt field (or equivalent) of &lt;EM&gt;stdio.h&lt;/EM&gt;'s &lt;CODE&gt;FILE&lt;/CODE&gt; structure. This will be used to define the macro 
&lt;CODE&gt;FILE_cnt(fp).&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_stdio_filbuf"&gt;stdio_filbuf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines how, given a &lt;CODE&gt;FILE&lt;/CODE&gt; pointer, fp, to tell stdio to refill it's internal buffers (?). This will be used to define the macro 
&lt;CODE&gt;FILE_filbuf(fp).&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_stdio_ptr"&gt;stdio_ptr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines how, given a &lt;CODE&gt;FILE&lt;/CODE&gt; pointer, fp, to access the _ptr field (or equivalent) of &lt;EM&gt;stdio.h&lt;/EM&gt;'s &lt;CODE&gt;FILE&lt;/CODE&gt; structure. This will be used to define the macro 
&lt;CODE&gt;FILE_ptr(fp).&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_strings"&gt;strings&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_string.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the full path of the string header that will be used.
Typically &lt;EM&gt;/usr/include/string.h&lt;/EM&gt; or &lt;EM&gt;/usr/include/strings.h&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_submit"&gt;submit&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_subversion"&gt;subversion&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;patchlevel.U&lt;/EM&gt;:

&lt;P&gt;
The subversion level of this package. The value of subversion comes from
the &lt;EM&gt;patchlevel.h&lt;/EM&gt; file. This is unique to perl.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sysman"&gt;sysman&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sysman.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the place where the manual is located on this system.
It is not the place where the user wants to put his manual pages. Rather it
is the place where Configure may look to find manual for unix commands
(section 1 of the manual usually). See mansrc.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="t"&gt;t&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_tail"&gt;tail&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_tar"&gt;tar&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_tbl"&gt;tbl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_tee"&gt;tee&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the tee program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;tee&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_test"&gt;test&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the test program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;test&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_timeincl"&gt;timeincl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_time.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the full path of the included time 
&lt;CODE&gt;header(s).&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_timetype"&gt;timetype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_time.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the type returned by 
&lt;CODE&gt;time().&lt;/CODE&gt; It can be long, or
time_t on &lt;CODE&gt;BSD&lt;/CODE&gt; sites (in which case &amp;lt;sys/types.h&amp;gt; should be included). Anyway, the
type Time_t should be used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_touch"&gt;touch&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the touch program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;touch&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_tr"&gt;tr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the tr program. After Configure runs, the value is
reset to a plain [perlman:perlop#item_tr|perlop#item_tr] and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_trnl"&gt;trnl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;trnl.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the value to be passed to the 
&lt;CODE&gt;tr(1)&lt;/CODE&gt; command to transliterate
a newline. Typical values are
&lt;CODE&gt;\012&lt;/CODE&gt; and &lt;CODE&gt;\n&lt;/CODE&gt;. This is needed for &lt;CODE&gt;EBCDIC&lt;/CODE&gt; systems where newline is not necessarily &lt;CODE&gt;\012&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_troff"&gt;troff&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="u"&gt;u&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_uidtype"&gt;uidtype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;uidtype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines Uid_t to be something like uid_t, int, ushort, or
whatever type is used to declare user ids in the kernel.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_uname"&gt;uname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the uname program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;uname&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_uniq"&gt;uniq&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the uniq program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;uniq&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_usedl"&gt;usedl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;dlsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable indicates if the the system supports dynamic loading of some
sort. See also dlsrc and dlobj.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_usemymalloc"&gt;usemymalloc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;mallocsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains y if the malloc that comes with this package is
desired over the system's version of malloc. People often include special
versions of malloc for effiency, but such versions are often less portable.
See also mallocsrc and mallocobj. If this is [perlman:perlop#item_y|perlop#item_y], then -lmalloc is removed from $libs.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_usenm"&gt;usenm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usenm.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains &lt;CODE&gt;true&lt;/CODE&gt; or &lt;CODE&gt;false&lt;/CODE&gt; depending whether the nm extraction is wanted or not.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_useopcode"&gt;useopcode&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Extensions.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds either &lt;CODE&gt;true&lt;/CODE&gt; or &lt;CODE&gt;false&lt;/CODE&gt; to indicate whether the Opcode extension should be used. The sole use for
this currently is to allow an easy mechanism for users to skip the Opcode
extension from the Configure command line.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_useperlio"&gt;useperlio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;useperlio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;USE_PERLIO&lt;/CODE&gt; symbol, and indicates that the PerlIO abstraction should be used
throughout.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_useposix"&gt;useposix&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Extensions.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds either &lt;CODE&gt;true&lt;/CODE&gt; or &lt;CODE&gt;false&lt;/CODE&gt; to indicate whether the &lt;CODE&gt;POSIX&lt;/CODE&gt; extension should be used. The sole use for this currently is to allow an
easy mechanism for hints files to indicate that &lt;CODE&gt;POSIX&lt;/CODE&gt; will not compile on a particular system.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_usesfio"&gt;usesfio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_sfio.U&lt;/EM&gt;:

&lt;P&gt;
This variable is set to true when the user agrees to use sfio. It is set to false when sfio is not available or when the user explicitely requests not to use sfio. It is here primarily so that command-line settings can override the auto-detection of d_sfio without running into a 
&lt;FONT SIZE=-1&gt;``WHOA&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;THERE''.&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_useshrplib"&gt;useshrplib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;libperl.U&lt;/EM&gt;:

&lt;P&gt;
This variable is set to &lt;CODE&gt;yes&lt;/CODE&gt; if the user wishes to build a shared libperl, and [perlfunc:no|no] otherwise.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_usethreads"&gt;usethreads&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usethreads.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;USE_THREADS&lt;/CODE&gt; symbol, and indicates that Perl should be built to use threads.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_usevfork"&gt;usevfork&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_vfork.U&lt;/EM&gt;:

&lt;P&gt;
This variable is set to true when the user accepts to use vfork. It is set
to false when no vfork is available or when the user explicitely requests
not to use vfork.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_usrinc"&gt;usrinc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usrinc.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the path of the include files, which is usually &lt;EM&gt;/usr/include&lt;/EM&gt;. It is mainly used by other Configure units.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_uuname"&gt;uuname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="v"&gt;v&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_version"&gt;version&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;patchlevel.U&lt;/EM&gt;:

&lt;P&gt;
The full version number of this package. This combines baserev, patchlevel, and subversion to get the full version number, including any possible subversions. Care is taken to use the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; locale in order to get something like 5.004 instead of 5,004. This is unique to perl.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_vi"&gt;vi&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_voidflags"&gt;voidflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;voidflags.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;VOIDFLAGS&lt;/CODE&gt; symbol, which indicates how much support of the void type is given by this
compiler. See &lt;CODE&gt;VOIDFLAGS&lt;/CODE&gt; for more info.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="z"&gt;z&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_zcat"&gt;zcat&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_zip"&gt;zip&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the zip program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;zip&lt;/CODE&gt; and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="NOTE"&gt;NOTE&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
This module contains a good example of how to use tie to implement a cache
and an example of how to make a tied variable readonly to those outside of
it.

&lt;HR&gt;
&lt;H1&gt;DISCLAIMER&lt;/H1&gt; 
We are painfully aware that these documents may contain incorrect links and
misformatted HTML.  Such bugs lie in the automatic translation process
that automatically created the hundreds and hundreds of separate documents that you find here.  Please &lt;B&gt;do
not report&lt;/B&gt; link or formatting bugs, because we cannot fix
per-document problems.  The only bug reports that will help us are those
that supply working patches to the &lt;I&gt;installhtml&lt;/I&gt; or &lt;I&gt;pod2html&lt;/I&gt;
programs, or to the &lt;TT&gt;Pod::HTML&lt;/TT&gt; module itself, for which I and the entire
Perl community will shower you with thanks and praises.  
&lt;P&gt;
If rather than formatting bugs, you encounter substantive content errors in these documents, such as mistakes in
the explanations or code, please use the &lt;I&gt;perlbug&lt;/I&gt; utility included
with the Perl distribution.
&lt;P&gt;
&lt;DL&gt;&lt;DD&gt;--Tom Christiansen, Perl Documentation Compiler and Editor&lt;/DL&gt; 
&lt;P&gt;
&lt;HR&gt;
Return to the [perlman:lib:index|index].
&lt;BR&gt;
Return to the &lt;A HREF="http://www.perl.com/"&gt;Perl Home Page&lt;/A&gt;.
&lt;/BODY&gt;

&lt;/HTML&gt;</field>
</data>
</node>
