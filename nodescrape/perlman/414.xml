<?xml version="1.0" encoding="windows-1252"?>
<node id="414" title="perlman:perldebug2" created="1999-08-25 03:02:08" updated="2005-08-15 12:21:53">
<type id="116">
perlman</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="Compile_time_output"&gt;Compile-time output&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
The debugging output for the compile time looks like this:

&lt;P&gt;
&lt;PRE&gt;  compiling RE `&amp;#091;bc&amp;#093;d(ef*g)+h&amp;#091;ij&amp;#093;k$'
  size 43 first at 1
     1: ANYOF(11)
    11: EXACT &amp;lt;d&amp;gt;(13)
    13: CURLYX {1,32767}(27)
    15:   OPEN1(17)
    17:     EXACT &amp;lt;e&amp;gt;(19)
    19:     STAR(22)
    20:       EXACT &amp;lt;f&amp;gt;(0)
    22:     EXACT &amp;lt;g&amp;gt;(24)
    24:   CLOSE1(26)
    26:   WHILEM(0)
    27: NOTHING(28)
    28: EXACT &amp;lt;h&amp;gt;(30)
    30: ANYOF(40)
    40: EXACT &amp;lt;k&amp;gt;(42)
    42: EOL(43)
    43: END(0)
  anchored `de' at 1 floating `gh' at 3..2147483647 (checking floating)
                                    stclass `ANYOF' minlen 7
&lt;/PRE&gt;
&lt;P&gt;
The first line shows the pre-compiled form of the regexp, and the second
shows the size of the compiled form (in arbitrary units, usually 4-byte
words) and the label &lt;EM&gt;id&lt;/EM&gt; of the first node which does a match.

&lt;P&gt;
The last line (split into two lines in the above) contains the optimizer
info. In the example shown, the optimizer found that the match should
contain a substring &lt;CODE&gt;de&lt;/CODE&gt; at the offset 1, and substring &lt;CODE&gt;gh&lt;/CODE&gt;
at some offset between 3 and infinity. Moreover, when checking for these
substrings (to abandon impossible matches quickly) it will check for the
substring &lt;CODE&gt;gh&lt;/CODE&gt; before checking for the substring &lt;CODE&gt;de&lt;/CODE&gt;. The optimizer may also use the knowledge that the match starts (at the
&lt;CODE&gt;first&lt;/CODE&gt;  &lt;EM&gt;id&lt;/EM&gt;) with a character class, and the match cannot be shorter than 7 chars.

&lt;P&gt;
The fields of interest which may appear in the last line are

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_anchored"&gt;anchored STRING at POS&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_floating"&gt;floating STRING at POS1..POS2&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
see above;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_matching"&gt;matching floating/anchored&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
which substring to check first;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_minlen"&gt;minlen&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
the minimal length of the match;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_stclass"&gt;stclass TYPE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The type of the first matching node.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_noscan"&gt;noscan&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
which advises to not scan for the found substrings;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_isall"&gt;isall&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
which says that the optimizer info is in fact all that the regular expression contains (thus one does not need to enter the 
&lt;FONT SIZE=-1&gt;RE&lt;/FONT&gt; engine at all);

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_GPOS"&gt;GPOS&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
if the pattern contains &lt;CODE&gt;\G&lt;/CODE&gt;;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_plus"&gt;plus&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
if the pattern starts with a repeated char (as in &lt;CODE&gt;x+y&lt;/CODE&gt;);

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_implicit"&gt;implicit&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
if the pattern starts with &lt;CODE&gt;.*&lt;/CODE&gt;;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_with"&gt;with eval&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
if the pattern contain eval-groups (see [perlman:perlre]);

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_anchored"&gt;anchored(TYPE)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
if the pattern may match only at a handful of places (with &lt;CODE&gt;TYPE&lt;/CODE&gt; being
&lt;CODE&gt;BOL&lt;/CODE&gt;, &lt;CODE&gt;MBOL&lt;/CODE&gt;, or &lt;CODE&gt;GPOS&lt;/CODE&gt;, see the table below).

&lt;/DL&gt;
&lt;P&gt;
If a substring is known to match at end-of-line only, it may be followed by &lt;CODE&gt;$&lt;/CODE&gt;, as in &lt;CODE&gt;floating `k'$&lt;/CODE&gt;.

&lt;P&gt;
The optimizer-specific info is used to avoid entering (a slow) 
&lt;FONT SIZE=-1&gt;RE&lt;/FONT&gt; engine on strings which will definitely not match.
If &lt;CODE&gt;isall&lt;/CODE&gt; flag is set, a call to the 
&lt;FONT SIZE=-1&gt;RE&lt;/FONT&gt; engine may be avoided even when optimizer found an
appropriate place for the match.

&lt;P&gt;
The rest of the output contains the list of &lt;EM&gt;nodes&lt;/EM&gt; of the compiled form of the 
&lt;FONT SIZE=-1&gt;RE.&lt;/FONT&gt; Each line has format 

&lt;P&gt;
&lt;CODE&gt;&amp;lt;PRE&amp;gt;   
&amp;lt;/PRE&amp;gt;
&lt;/CODE&gt;&lt;EM&gt;id&lt;/EM&gt;: &lt;EM&gt;TYPE&lt;/EM&gt;  &lt;EM&gt;OPTIONAL-INFO&lt;/EM&gt; (&lt;EM&gt;next-id&lt;/EM&gt;)

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="Types_of_nodes"&gt;Types of nodes&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Here is the list of possible types with short descriptions:

&lt;P&gt;
&lt;PRE&gt;    # TYPE arg-description &amp;#091;num-args&amp;#093; &amp;#091;longjump-len&amp;#093; DESCRIPTION
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Exit points
    END         no      End of program.
    SUCCEED     no      Return from a subroutine, basically.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Anchors:
    BOL         no      Match &amp;quot;&amp;quot; at beginning of line.
    MBOL        no      Same, assuming multiline.
    SBOL        no      Same, assuming singleline.
    EOS         no      Match &amp;quot;&amp;quot; at end of string.
    EOL         no      Match &amp;quot;&amp;quot; at end of line.
    MEOL        no      Same, assuming multiline.
    SEOL        no      Same, assuming singleline.
    BOUND       no      Match &amp;quot;&amp;quot; at any word boundary
    BOUNDL      no      Match &amp;quot;&amp;quot; at any word boundary
    NBOUND      no      Match &amp;quot;&amp;quot; at any word non-boundary
    NBOUNDL     no      Match &amp;quot;&amp;quot; at any word non-boundary
    GPOS        no      Matches where last m//g left off.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # &amp;#091;Special&amp;#093; alternatives
    ANY         no      Match any one character (except newline).
    SANY        no      Match any one character.
    ANYOF       sv      Match character in (or not in) this class.
    ALNUM       no      Match any alphanumeric character
    ALNUML      no      Match any alphanumeric char in locale
    NALNUM      no      Match any non-alphanumeric character
    NALNUML     no      Match any non-alphanumeric char in locale
    SPACE       no      Match any whitespace character
    SPACEL      no      Match any whitespace char in locale
    NSPACE      no      Match any non-whitespace character
    NSPACEL     no      Match any non-whitespace char in locale
    DIGIT       no      Match any numeric character
    NDIGIT      no      Match any non-numeric character
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # BRANCH    The set of branches constituting a single choice are hooked
    #           together with their &amp;quot;next&amp;quot; pointers, since precedence prevents
    #           anything being concatenated to any individual branch.  The
    #           &amp;quot;next&amp;quot; pointer of the last BRANCH in a choice points to the
    #           thing following the whole choice.  This is also where the
    #           final &amp;quot;next&amp;quot; pointer of each individual branch points; each
    #           branch starts with the operand node of a BRANCH node.
    #
    BRANCH      node    Match this alternative, or the next...
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # BACK      Normal &amp;quot;next&amp;quot; pointers all implicitly point forward; BACK
    #           exists to make loop structures possible.
    # not used
    BACK        no      Match &amp;quot;&amp;quot;, &amp;quot;next&amp;quot; ptr points backward.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Literals
    EXACT       sv      Match this string (preceded by length).
    EXACTF      sv      Match this string, folded (prec. by length).
    EXACTFL     sv      Match this string, folded in locale (w/len).
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Do nothing
    NOTHING     no      Match empty string.
    # A variant of above which delimits a group, thus stops optimizations
    TAIL        no      Match empty string. Can jump here from outside.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # STAR,PLUS '?', and complex '*' and '+', are implemented as circular
    #           BRANCH structures using BACK.  Simple cases (one character
    #           per match) are implemented with STAR and PLUS for speed
    #           and to minimize recursive plunges.
    #
    STAR        node    Match this (simple) thing 0 or more times.
    PLUS        node    Match this (simple) thing 1 or more times.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    CURLY       sv 2    Match this simple thing {n,m} times.
    CURLYN      no 2    Match next-after-this simple thing 
    #                   {n,m} times, set parenths.
    CURLYM      no 2    Match this medium-complex thing {n,m} times.
    CURLYX      sv 2    Match this complex thing {n,m} times.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # This terminator creates a loop structure for CURLYX
    WHILEM      no      Do curly processing and see if rest matches.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # OPEN,CLOSE,GROUPP ...are numbered at compile time.
    OPEN        num 1   Mark this point in input as start of #n.
    CLOSE       num 1   Analogous to OPEN.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    REF         num 1   Match some already matched string
    REFF        num 1   Match already matched string, folded
    REFFL       num 1   Match already matched string, folded in loc.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # grouping assertions
    IFMATCH     off 1 2 Succeeds if the following matches.
    UNLESSM     off 1 2 Fails if the following matches.
    SUSPEND     off 1 1 &amp;quot;Independent&amp;quot; sub-RE.
    IFTHEN      off 1 1 Switch, should be preceeded by switcher .
    GROUPP      num 1   Whether the group matched.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Support for long RE
    LONGJMP     off 1 1 Jump far away.
    BRANCHJ     off 1 1 BRANCH with long offset.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # The heavy worker
    EVAL        evl 1   Execute some Perl code.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Modifiers
    MINMOD      no      Next operator is not greedy.
    LOGICAL     no      Next opcode should set the flag only.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # This is not used yet
    RENUM       off 1 1 Group with independently numbered parens.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # This is not really a node, but an optimized away piece of a &amp;quot;long&amp;quot; node.
    # To simplify debugging output, we mark it as if it were a node
    OPTIMIZED   off     Placeholder for dump.
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="Run_time_output"&gt;Run-time output&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
First of all, when doing a match, one may get no run-time output even if debugging is enabled. this means that the 
&lt;FONT SIZE=-1&gt;RE&lt;/FONT&gt; engine was never entered, all of the job was done by the optimizer.

&lt;P&gt;
If 
&lt;FONT SIZE=-1&gt;RE&lt;/FONT&gt; engine was entered, the output may look like this:

&lt;P&gt;
&lt;PRE&gt;  Matching `&amp;#091;bc&amp;#093;d(ef*g)+h&amp;#091;ij&amp;#093;k$' against `abcdefg__gh__'
    Setting an EVAL scope, savestack=3
     2 &amp;lt;ab&amp;gt; &amp;lt;cdefg__gh_&amp;gt;    |  1: ANYOF
     3 &amp;lt;abc&amp;gt; &amp;lt;defg__gh_&amp;gt;    | 11: EXACT &amp;lt;d&amp;gt;
     4 &amp;lt;abcd&amp;gt; &amp;lt;efg__gh_&amp;gt;    | 13: CURLYX {1,32767}
     4 &amp;lt;abcd&amp;gt; &amp;lt;efg__gh_&amp;gt;    | 26:   WHILEM
                                0 out of 1..32767  cc=effff31c
     4 &amp;lt;abcd&amp;gt; &amp;lt;efg__gh_&amp;gt;    | 15:     OPEN1
     4 &amp;lt;abcd&amp;gt; &amp;lt;efg__gh_&amp;gt;    | 17:     EXACT &amp;lt;e&amp;gt;
     5 &amp;lt;abcde&amp;gt; &amp;lt;fg__gh_&amp;gt;    | 19:     STAR
                             EXACT &amp;lt;f&amp;gt; can match 1 times out of 32767...
    Setting an EVAL scope, savestack=3
     6 &amp;lt;bcdef&amp;gt; &amp;lt;g__gh__&amp;gt;    | 22:       EXACT &amp;lt;g&amp;gt;
     7 &amp;lt;bcdefg&amp;gt; &amp;lt;__gh__&amp;gt;    | 24:       CLOSE1
     7 &amp;lt;bcdefg&amp;gt; &amp;lt;__gh__&amp;gt;    | 26:       WHILEM
                                    1 out of 1..32767  cc=effff31c
    Setting an EVAL scope, savestack=12
     7 &amp;lt;bcdefg&amp;gt; &amp;lt;__gh__&amp;gt;    | 15:         OPEN1
     7 &amp;lt;bcdefg&amp;gt; &amp;lt;__gh__&amp;gt;    | 17:         EXACT &amp;lt;e&amp;gt;
       restoring \1 to 4(4)..7
                                    failed, try continuation...
     7 &amp;lt;bcdefg&amp;gt; &amp;lt;__gh__&amp;gt;    | 27:         NOTHING
     7 &amp;lt;bcdefg&amp;gt; &amp;lt;__gh__&amp;gt;    | 28:         EXACT &amp;lt;h&amp;gt;
                                    failed...
                                failed...
&lt;/PRE&gt;
&lt;P&gt;
The most significant information in the output is about the particular &lt;EM&gt;node&lt;/EM&gt;
of the compiled 
&lt;FONT SIZE=-1&gt;RE&lt;/FONT&gt; which is currently being tested against the target
string. The format of these lines is

&lt;P&gt;
&lt;CODE&gt;&amp;lt;PRE&amp;gt;    
&amp;lt;/PRE&amp;gt;
&lt;/CODE&gt;&lt;EM&gt;STRING-OFFSET&lt;/EM&gt; &amp;lt;&lt;EM&gt;PRE-STRING&lt;/EM&gt;&amp;gt; &amp;lt;&lt;EM&gt;POST-STRING&lt;/EM&gt;&amp;gt; |&lt;EM&gt;ID&lt;/EM&gt;:  &lt;EM&gt;TYPE&lt;/EM&gt;

&lt;P&gt;
The &lt;EM&gt;TYPE&lt;/EM&gt; info is indented with respect to the backtracking level. Other incidental
information appears interspersed within.

&lt;HR&gt;
&lt;BR&gt;Return to the [Library]&lt;BR&gt;</field>
</data>
</node>
