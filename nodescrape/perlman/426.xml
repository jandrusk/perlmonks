<?xml version="1.0" encoding="windows-1252"?>
<node id="426" title="perlman:perlguts3" created="1999-08-25 03:34:55" updated="2005-06-26 06:45:30">
<type id="116">
perlman</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_chop"&gt;sv_chop&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Efficient removal of characters from the beginning of the string buffer. 
&lt;CODE&gt;SvPOK(sv)&lt;/CODE&gt; must be true and
the &lt;CODE&gt;ptr&lt;/CODE&gt; must be a pointer to somewhere inside the string buffer. The &lt;CODE&gt;ptr&lt;/CODE&gt; becomes the first character of the adjusted string.

&lt;P&gt;
&lt;PRE&gt;        void    sv_chop(SV* sv, char *ptr)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_cmp"&gt;sv_cmp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Compares the strings in two SVs. Returns -1, 0, or 1 indicating whether the
string in &lt;CODE&gt;sv1&lt;/CODE&gt; is less than, equal to, or greater than the string in
&lt;CODE&gt;sv2&lt;/CODE&gt;.

&lt;P&gt;
&lt;PRE&gt;        I32     sv_cmp (SV* sv1, SV* sv2)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvCUR"&gt;SvCUR&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the length of the string which is in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        int     SvCUR (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvCUR_set"&gt;SvCUR_set&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set the length of the string which is in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    SvCUR_set (SV* sv, int val )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_dec"&gt;sv_dec&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Auto-decrement of the value in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    sv_dec (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_derived_from"&gt;sv_derived_from&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is a subclass of the specified class.

&lt;P&gt;
&lt;PRE&gt;        int     sv_derived_from(SV* sv, char* class)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;sv_derived_from&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is derived from the specified class. This is the
function that implements &lt;CODE&gt;UNIVERSAL::isa&lt;/CODE&gt;. It works for class names as well as for objects.

&lt;P&gt;
&lt;PRE&gt;        bool    sv_derived_from _((SV* sv, char* name));
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvEND"&gt;SvEND&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a pointer to the last character in the string which is in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; See [perlman:perlguts]. Access the character as

&lt;P&gt;
&lt;PRE&gt;        char*   SvEND(sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_eq"&gt;sv_eq&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the strings in the two SVs are
identical.

&lt;P&gt;
&lt;PRE&gt;        I32     sv_eq (SV* sv1, SV* sv2)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvGETMAGIC"&gt;SvGETMAGIC&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Invokes [perlman:perlguts] on an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; if it has 'get' magic. This macro evaluates its
argument more than once.

&lt;P&gt;
&lt;PRE&gt;        void    SvGETMAGIC( SV *sv )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvGROW"&gt;SvGROW&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Expands the character buffer in the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; so that it has room for the indicated number of bytes (remember to reserve space for an extra trailing 
&lt;FONT SIZE=-1&gt;NUL&lt;/FONT&gt; character). Calls
 [perlman:perlguts] to perform the expansion if necessary. Returns a pointer to the character
buffer.

&lt;P&gt;
&lt;PRE&gt;        char*   SvGROW( SV* sv, int len )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_grow"&gt;sv_grow&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Expands the character buffer in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; This will use [perlman:perlguts] and will upgrade the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; to [perlman:perlguts]. Returns a pointer to the character buffer. Use [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_inc"&gt;sv_inc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Auto-increment of the value in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    sv_inc (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_insert"&gt;sv_insert&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Inserts a string at the specified offset/length within the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; Similar to the Perl 
&lt;CODE&gt;substr()&lt;/CODE&gt; function.

&lt;P&gt;
&lt;PRE&gt;        void    sv_insert(SV *sv, STRLEN offset, STRLEN len,
                          char *str, STRLEN strlen)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvIOK"&gt;SvIOK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; contains an integer.

&lt;P&gt;
&lt;PRE&gt;        int     SvIOK (SV* SV)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvIOK_off"&gt;SvIOK_off&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Unsets the 
&lt;FONT SIZE=-1&gt;IV&lt;/FONT&gt; status of an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    SvIOK_off (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvIOK_on"&gt;SvIOK_on&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tells an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; that it is an integer.

&lt;P&gt;
&lt;PRE&gt;        void    SvIOK_on (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvIOK_only"&gt;SvIOK_only&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tells an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; that it is an integer and disables all other 
&lt;FONT SIZE=-1&gt;OK&lt;/FONT&gt; bits.

&lt;P&gt;
&lt;PRE&gt;        void    SvIOK_only (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvIOKp"&gt;SvIOKp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; contains an integer. Checks the
&lt;STRONG&gt;private&lt;/STRONG&gt; setting. Use [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        int     SvIOKp (SV* SV)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_isa"&gt;sv_isa&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is blessed into the specified class. This does not
check for subtypes; use [perlman:perlguts] to verify an inheritance relationship.

&lt;P&gt;
&lt;PRE&gt;        int     sv_isa (SV* sv, char* name)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_isobject"&gt;sv_isobject&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is an 
&lt;FONT SIZE=-1&gt;RV&lt;/FONT&gt; pointing to a blessed object. If the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is not an 
&lt;FONT SIZE=-1&gt;RV,&lt;/FONT&gt; or if the object is not blessed, then this will return false.

&lt;P&gt;
&lt;PRE&gt;        int     sv_isobject (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvIV"&gt;SvIV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the integer which is in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        int SvIV (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvIVX"&gt;SvIVX&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the integer which is stored in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        int     SvIVX (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvLEN"&gt;SvLEN&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the size of the string buffer in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        int     SvLEN (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_len"&gt;sv_len&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the length of the string in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; Use [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        STRLEN  sv_len (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_magic"&gt;sv_magic&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Adds magic to an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    sv_magic (SV* sv, SV* obj, int how, char* name, I32 namlen)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_mortalcopy"&gt;sv_mortalcopy&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Creates a new 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; which is a copy of the original 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The new 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is marked as mortal.

&lt;P&gt;
&lt;PRE&gt;        SV*     sv_mortalcopy (SV* oldsv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_newmortal"&gt;sv_newmortal&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Creates a new 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; which is mortal. The reference count of the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is set to 1.

&lt;P&gt;
&lt;PRE&gt;        SV*     sv_newmortal (void)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNIOK"&gt;SvNIOK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; contains a number, integer or double.

&lt;P&gt;
&lt;PRE&gt;        int     SvNIOK (SV* SV)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNIOK_off"&gt;SvNIOK_off&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Unsets the 
&lt;FONT SIZE=-1&gt;NV/IV&lt;/FONT&gt; status of an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    SvNIOK_off (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNIOKp"&gt;SvNIOKp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; contains a number, integer or double. Checks the &lt;STRONG&gt;private&lt;/STRONG&gt; setting. Use [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        int     SvNIOKp (SV* SV)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_PL_sv_no"&gt;PL_sv_no&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This is the &lt;CODE&gt;false&lt;/CODE&gt; 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; See [perlman:perlguts]. Always refer to this as [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNOK"&gt;SvNOK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; contains a double.

&lt;P&gt;
&lt;PRE&gt;        int     SvNOK (SV* SV)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNOK_off"&gt;SvNOK_off&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Unsets the 
&lt;FONT SIZE=-1&gt;NV&lt;/FONT&gt; status of an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    SvNOK_off (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNOK_on"&gt;SvNOK_on&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tells an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; that it is a double.

&lt;P&gt;
&lt;PRE&gt;        void    SvNOK_on (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNOK_only"&gt;SvNOK_only&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tells an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; that it is a double and disables all other 
&lt;FONT SIZE=-1&gt;OK&lt;/FONT&gt; bits.

&lt;P&gt;
&lt;PRE&gt;        void    SvNOK_only (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNOKp"&gt;SvNOKp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; contains a double. Checks the
&lt;STRONG&gt;private&lt;/STRONG&gt; setting. Use [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        int     SvNOKp (SV* SV)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNV"&gt;SvNV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the double which is stored in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        double  SvNV (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvNVX"&gt;SvNVX&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the double which is stored in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        double  SvNVX (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvOK"&gt;SvOK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the value is an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        int     SvOK (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvOOK"&gt;SvOOK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the SvIVX is a valid offset value for
the SvPVX. This hack is used internally to speed up removal of characters
from the beginning of a SvPV. When SvOOK is true, then the start of the
allocated string buffer is really (SvPVX - SvIVX).

&lt;P&gt;
&lt;PRE&gt;        int     SvOOK(SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvPOK"&gt;SvPOK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; contains a character string.

&lt;P&gt;
&lt;PRE&gt;        int     SvPOK (SV* SV)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvPOK_off"&gt;SvPOK_off&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Unsets the 
&lt;FONT SIZE=-1&gt;PV&lt;/FONT&gt; status of an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    SvPOK_off (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvPOK_on"&gt;SvPOK_on&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tells an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; that it is a string.

&lt;P&gt;
&lt;PRE&gt;        void    SvPOK_on (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvPOK_only"&gt;SvPOK_only&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tells an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; that it is a string and disables all other 
&lt;FONT SIZE=-1&gt;OK&lt;/FONT&gt; bits.

&lt;P&gt;
&lt;PRE&gt;        void    SvPOK_only (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvPOKp"&gt;SvPOKp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; contains a character string. Checks the &lt;STRONG&gt;private&lt;/STRONG&gt; setting. Use [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        int     SvPOKp (SV* SV)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvPV"&gt;SvPV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a pointer to the string in the 
&lt;FONT SIZE=-1&gt;SV,&lt;/FONT&gt; or a stringified form of the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; if the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; does not contain a string. If
 &lt;CODE&gt;len&lt;/CODE&gt; is [perlman:perlguts] then Perl will handle the length on its own. Handles 'get' magic.

&lt;P&gt;
&lt;PRE&gt;        char*   SvPV (SV* sv, int len )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvPV_force"&gt;SvPV_force&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like &amp;lt;SvPV&amp;gt; but will force the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; into becoming a string (SvPOK). You want force if
you are going to update the SvPVX directly.

&lt;P&gt;
&lt;PRE&gt;        char*   SvPV_force(SV* sv, int len)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvPVX"&gt;SvPVX&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a pointer to the string in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; must contain a string.

&lt;P&gt;
&lt;PRE&gt;        char*   SvPVX (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvREFCNT"&gt;SvREFCNT&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the value of the object's reference count.

&lt;P&gt;
&lt;PRE&gt;        int     SvREFCNT (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvREFCNT_dec"&gt;SvREFCNT_dec&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Decrements the reference count of the given 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    SvREFCNT_dec (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvREFCNT_inc"&gt;SvREFCNT_inc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Increments the reference count of the given 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    SvREFCNT_inc (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvROK"&gt;SvROK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tests if the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is an 
&lt;FONT SIZE=-1&gt;RV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        int     SvROK (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvROK_off"&gt;SvROK_off&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Unsets the 
&lt;FONT SIZE=-1&gt;RV&lt;/FONT&gt; status of an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    SvROK_off (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvROK_on"&gt;SvROK_on&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tells an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; that it is an 
&lt;FONT SIZE=-1&gt;RV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        void    SvROK_on (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvRV"&gt;SvRV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Dereferences an 
&lt;FONT SIZE=-1&gt;RV&lt;/FONT&gt; to return the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        SV*     SvRV (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvSETMAGIC"&gt;SvSETMAGIC&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Invokes [perlman:perlguts] on an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; if it has 'set' magic. This macro evaluates its
argument more than once.

&lt;P&gt;
&lt;PRE&gt;        void    SvSETMAGIC( SV *sv )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setiv"&gt;sv_setiv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies an integer into the given 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; Does not handle 'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_setiv (SV* sv, IV num)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setiv_mg"&gt;sv_setiv_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setiv_mg (SV* sv, IV num)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setnv"&gt;sv_setnv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies a double into the given 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; Does not handle 'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_setnv (SV* sv, double num)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setnv_mg"&gt;sv_setnv_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setnv_mg (SV* sv, double num)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setpv"&gt;sv_setpv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies a string into an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The string must be null-terminated. Does not
handle 'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpv (SV* sv, char* ptr)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setpv_mg"&gt;sv_setpv_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpv_mg (SV* sv, char* ptr)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setpviv"&gt;sv_setpviv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies an integer into the given 
&lt;FONT SIZE=-1&gt;SV,&lt;/FONT&gt; also updating its string value. Does not handle
'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpviv (SV* sv, IV num)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setpviv_mg"&gt;sv_setpviv_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpviv_mg (SV* sv, IV num)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setpvn"&gt;sv_setpvn&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies a string into an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The &lt;CODE&gt;len&lt;/CODE&gt; parameter indicates the number of bytes to be copied. Does not handle 'set'
magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpvn (SV* sv, char* ptr, STRLEN len)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setpvn_mg"&gt;sv_setpvn_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpvn_mg (SV* sv, char* ptr, STRLEN len)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setpvf"&gt;sv_setpvf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Processes its arguments like [perlfunc:sprintf|sprintf] and sets an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; to the formatted output. Does not handle 'set'
magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpvf (SV* sv, const char* pat, ...)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setpvf_mg"&gt;sv_setpvf_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpvf_mg (SV* sv, const char* pat, ...)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setref_iv"&gt;sv_setref_iv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies an integer into a new 
&lt;FONT SIZE=-1&gt;SV,&lt;/FONT&gt; optionally blessing the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The
 &lt;CODE&gt;rv&lt;/CODE&gt;
argument will be upgraded to an 
&lt;FONT SIZE=-1&gt;RV.&lt;/FONT&gt; That 
&lt;FONT SIZE=-1&gt;RV&lt;/FONT&gt; will be modified to point to the new 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The
 &lt;CODE&gt;classname&lt;/CODE&gt; argument indicates the package for the blessing. Set &lt;CODE&gt;classname&lt;/CODE&gt; to [perlman:perlguts] to avoid the blessing. The new 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; will be returned and will have a reference count of
1.

&lt;P&gt;
&lt;PRE&gt;        SV*     sv_setref_iv (SV *rv, char *classname, IV iv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setref_nv"&gt;sv_setref_nv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies a double into a new 
&lt;FONT SIZE=-1&gt;SV,&lt;/FONT&gt; optionally blessing the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The
 &lt;CODE&gt;rv&lt;/CODE&gt;
argument will be upgraded to an 
&lt;FONT SIZE=-1&gt;RV.&lt;/FONT&gt; That 
&lt;FONT SIZE=-1&gt;RV&lt;/FONT&gt; will be modified to point to the new 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The
 &lt;CODE&gt;classname&lt;/CODE&gt; argument indicates the package for the blessing. Set &lt;CODE&gt;classname&lt;/CODE&gt; to [perlman:perlguts] to avoid the blessing. The new 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; will be returned and will have a reference count of
1.

&lt;P&gt;
&lt;PRE&gt;        SV*     sv_setref_nv (SV *rv, char *classname, double nv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setref_pv"&gt;sv_setref_pv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies a pointer into a new 
&lt;FONT SIZE=-1&gt;SV,&lt;/FONT&gt; optionally blessing the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The
 &lt;CODE&gt;rv&lt;/CODE&gt;
argument will be upgraded to an 
&lt;FONT SIZE=-1&gt;RV.&lt;/FONT&gt; That 
&lt;FONT SIZE=-1&gt;RV&lt;/FONT&gt; will be modified to point to the new 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; If the
 &lt;CODE&gt;pv&lt;/CODE&gt; argument is 
&lt;FONT SIZE=-1&gt;NULL&lt;/FONT&gt; then [perlman:perlguts] will be placed into the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The &lt;CODE&gt;classname&lt;/CODE&gt; argument indicates the package for the blessing. Set &lt;CODE&gt;classname&lt;/CODE&gt; to [perlman:perlguts] to avoid the blessing. The new 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; will be returned and will have a reference count of
1.

&lt;P&gt;
&lt;PRE&gt;        SV*     sv_setref_pv (SV *rv, char *classname, void* pv)
&lt;/PRE&gt;
&lt;P&gt;
Do not use with integral Perl types such as 
&lt;FONT SIZE=-1&gt;HV,&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;AV,&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;SV,&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;CV,&lt;/FONT&gt; because those objects will become corrupted by the pointer copy process.

&lt;P&gt;
Note that [perlman:perlguts] copies the string while this copies the pointer.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setref_pvn"&gt;sv_setref_pvn&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies a string into a new 
&lt;FONT SIZE=-1&gt;SV,&lt;/FONT&gt; optionally blessing the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The length of the string must be specified with
 &lt;CODE&gt;n&lt;/CODE&gt;. The &lt;CODE&gt;rv&lt;/CODE&gt; argument will be upgraded to an 
&lt;FONT SIZE=-1&gt;RV.&lt;/FONT&gt; That 
&lt;FONT SIZE=-1&gt;RV&lt;/FONT&gt; will be modified to point to the new 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; The
 &lt;CODE&gt;classname&lt;/CODE&gt;
argument indicates the package for the blessing. Set &lt;CODE&gt;classname&lt;/CODE&gt; to
[perlman:perlguts] to avoid the blessing. The new 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; will be returned and will have a reference count of
1.

&lt;P&gt;
&lt;PRE&gt;        SV*     sv_setref_pvn (SV *rv, char *classname, char* pv, I32 n)
&lt;/PRE&gt;
&lt;P&gt;
Note that [perlman:perlguts] copies the pointer while this copies the string.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvSetSV"&gt;SvSetSV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Calls [perlman:perlguts] if dsv is not the same as ssv. May evaluate arguments more than once.

&lt;P&gt;
&lt;PRE&gt;        void    SvSetSV (SV* dsv, SV* ssv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvSetSV_nosteal"&gt;SvSetSV_nosteal&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Calls a non-destructive version of [perlman:perlguts] if dsv is not the same as ssv. May evaluate arguments more than once.

&lt;P&gt;
&lt;PRE&gt;        void    SvSetSV_nosteal (SV* dsv, SV* ssv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setsv"&gt;sv_setsv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies the contents of the source 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; &lt;CODE&gt;ssv&lt;/CODE&gt; into the destination 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; &lt;CODE&gt;dsv&lt;/CODE&gt;. The source 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; may be destroyed if it is mortal. Does not handle
'set' magic. See the macro forms [perlman:perlguts], [perlman:perlguts] and [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_setsv (SV* dsv, SV* ssv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setsv_mg"&gt;sv_setsv_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setsv_mg (SV* dsv, SV* ssv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setuv"&gt;sv_setuv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copies an unsigned integer into the given 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; Does not handle 'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_setuv (SV* sv, UV num)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_setuv_mg"&gt;sv_setuv_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setuv_mg (SV* sv, UV num)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvSTASH"&gt;SvSTASH&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the stash of the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        HV*     SvSTASH (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvTAINT"&gt;SvTAINT&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Taints an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; if tainting is enabled

&lt;P&gt;
&lt;PRE&gt;        void    SvTAINT (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvTAINTED"&gt;SvTAINTED&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Checks to see if an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; is tainted. Returns 
&lt;FONT SIZE=-1&gt;TRUE&lt;/FONT&gt; if it is, 
&lt;FONT SIZE=-1&gt;FALSE&lt;/FONT&gt; if not.

&lt;P&gt;
&lt;PRE&gt;        int     SvTAINTED (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvTAINTED_off"&gt;SvTAINTED_off&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Untaints an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; Be &lt;EM&gt;very&lt;/EM&gt; careful with this routine, as it short-circuits some of Perl's fundamental security features. 
&lt;FONT SIZE=-1&gt;XS&lt;/FONT&gt; module authors should not use this function unless they fully understand all the implications of unconditionally untainting the value. Untainting should be done in the standard perl fashion, via a carefully crafted regexp, rather than directly untainting variables.

&lt;P&gt;
&lt;PRE&gt;        void    SvTAINTED_off (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvTAINTED_on"&gt;SvTAINTED_on&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Marks an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; as tainted.

&lt;P&gt;
&lt;PRE&gt;        void    SvTAINTED_on (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SVt_IV"&gt;SVt_IV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Integer type flag for scalars. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SVt_PV"&gt;SVt_PV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Pointer type flag for scalars. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SVt_PVAV"&gt;SVt_PVAV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Type flag for arrays. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SVt_PVCV"&gt;SVt_PVCV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Type flag for code refs. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SVt_PVHV"&gt;SVt_PVHV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Type flag for hashes. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SVt_PVMG"&gt;SVt_PVMG&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Type flag for blessed scalars. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SVt_NV"&gt;SVt_NV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Double type flag for scalars. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvTRUE"&gt;SvTRUE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a boolean indicating whether Perl would evaluate the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; as true or false, defined or undefined. Does not
handle 'get' magic.

&lt;P&gt;
&lt;PRE&gt;        int     SvTRUE (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvTYPE"&gt;SvTYPE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the type of the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        svtype  SvTYPE (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_svtype"&gt;svtype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
An enum of flags for Perl types. These are found in the file &lt;STRONG&gt;sv.h&lt;/STRONG&gt; in the
[perlman:perlguts] enum. Test these flags with the [perlman:perlguts] macro.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_PL_sv_undef"&gt;PL_sv_undef&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This is the [perlfunc:undef|undef] 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; Always refer to this as [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_unref"&gt;sv_unref&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Unsets the 
&lt;FONT SIZE=-1&gt;RV&lt;/FONT&gt; status of the 
&lt;FONT SIZE=-1&gt;SV,&lt;/FONT&gt; and decrements the reference count of whatever was being referenced by the 
&lt;FONT SIZE=-1&gt;RV.&lt;/FONT&gt; This can almost be thought of as a reversal of
 [perlman:perlguts]. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_unref (SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvUPGRADE"&gt;SvUPGRADE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Used to upgrade an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; to a more complex form. Uses [perlman:perlguts] to perform the upgrade if necessary. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        bool    SvUPGRADE (SV* sv, svtype mt)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_upgrade"&gt;sv_upgrade&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Upgrade an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; to a more complex form. Use [perlman:perlguts]. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_usepvn"&gt;sv_usepvn&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Tells an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; to use &lt;CODE&gt;ptr&lt;/CODE&gt; to find its string value. Normally the string is stored inside the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; but sv_usepvn allows the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; to use an outside string. The
 &lt;CODE&gt;ptr&lt;/CODE&gt; should point to memory that was allocated by &lt;CODE&gt;malloc&lt;/CODE&gt;. The string length, &lt;CODE&gt;len&lt;/CODE&gt;, must be supplied. This function will realloc the memory pointed to by &lt;CODE&gt;ptr&lt;/CODE&gt;, so that pointer should not be freed or used by the programmer after
giving it to sv_usepvn. Does not handle 'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        void    sv_usepvn (SV* sv, char* ptr, STRLEN len)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_usepvn_mg"&gt;sv_usepvn_mg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Like [perlman:perlguts], but also handles 'set' magic.

&lt;P&gt;
&lt;PRE&gt;        void    sv_usepvn_mg (SV* sv, char* ptr, STRLEN len)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_vcatpvfn"&gt;sv_vcatpvfn(sv, pat, patlen, args, svargs, svmax, used_locale)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Processes its arguments like &lt;CODE&gt;vsprintf&lt;/CODE&gt; and appends the formatted output to an 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; Uses an array of SVs if the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; style variable argument list is missing 
&lt;FONT SIZE=-1&gt;(NULL).&lt;/FONT&gt; Indicates if locale information has been used for formatting.

&lt;P&gt;
&lt;PRE&gt;        void    sv_catpvfn _((SV* sv, const char* pat, STRLEN patlen,
                              va_list *args, SV **svargs, I32 svmax,
                              bool *used_locale));
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_sv_vsetpvfn"&gt;sv_vsetpvfn(sv, pat, patlen, args, svargs, svmax, used_locale)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Works like &lt;CODE&gt;vcatpvfn&lt;/CODE&gt; but copies the text into the 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; instead of appending it.

&lt;P&gt;
&lt;PRE&gt;        void    sv_setpvfn _((SV* sv, const char* pat, STRLEN patlen,
                              va_list *args, SV **svargs, I32 svmax,
                              bool *used_locale));
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvUV"&gt;SvUV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the unsigned integer which is in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        UV      SvUV(SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_SvUVX"&gt;SvUVX&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the unsigned integer which is stored in the 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        UV      SvUVX(SV* sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_PL_sv_yes"&gt;PL_sv_yes&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This is the &lt;CODE&gt;true&lt;/CODE&gt; 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt; See [perlman:perlguts]. Always refer to this as [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_THIS"&gt;THIS&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Variable which is setup by &lt;CODE&gt;xsubpp&lt;/CODE&gt; to designate the object in a 
&lt;FONT SIZE=-1&gt;C++&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;XSUB.&lt;/FONT&gt; This is always the proper type for the 
&lt;FONT SIZE=-1&gt;C++&lt;/FONT&gt; object. See
 [perlman:perlguts] and
[perlman:perlxs].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_toLOWER"&gt;toLOWER&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Converts the specified character to lowercase.

&lt;P&gt;
&lt;PRE&gt;        int     toLOWER (char c)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_toUPPER"&gt;toUPPER&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Converts the specified character to uppercase.

&lt;P&gt;
&lt;PRE&gt;        int     toUPPER (char c)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_warn"&gt;warn&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This is the XSUB-writer's interface to Perl's [perlman:perlguts] function. Use this function the same way you use the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; [perlfunc:printf|printf] function. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XPUSHi"&gt;XPUSHi&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Push an integer onto the stack, extending the stack if necessary. Handles
'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XPUSHi(int d)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XPUSHn"&gt;XPUSHn&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Push a double onto the stack, extending the stack if necessary. Handles
'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XPUSHn(double d)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XPUSHp"&gt;XPUSHp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Push a string onto the stack, extending the stack if necessary. The &lt;CODE&gt;len&lt;/CODE&gt;
indicates the length of the string. Handles 'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XPUSHp(char *c, int len)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XPUSHs"&gt;XPUSHs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Push an 
&lt;FONT SIZE=-1&gt;SV&lt;/FONT&gt; onto the stack, extending the stack if necessary.
Does not handle 'set' magic. See [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XPUSHs(sv)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XPUSHu"&gt;XPUSHu&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Push an unsigned integer onto the stack, extending the stack if necessary.
See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XS"&gt;XS&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Macro to declare an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; and its 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; parameter list. This is handled by

&lt;CODE&gt;xsubpp&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XSRETURN"&gt;XSRETURN&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return from 
&lt;FONT SIZE=-1&gt;XSUB,&lt;/FONT&gt; indicating number of items on the stack. This is
usually handled by &lt;CODE&gt;xsubpp&lt;/CODE&gt;.

&lt;P&gt;
&lt;PRE&gt;        XSRETURN(int x)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XSRETURN_EMPTY"&gt;XSRETURN_EMPTY&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return an empty list from an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; immediately.

&lt;P&gt;
&lt;PRE&gt;        XSRETURN_EMPTY;
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XSRETURN_IV"&gt;XSRETURN_IV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return an integer from an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; immediately. Uses [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XSRETURN_IV(IV v)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XSRETURN_NO"&gt;XSRETURN_NO&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return [perlman:perlguts] from an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; immediately. Uses [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XSRETURN_NO;
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XSRETURN_NV"&gt;XSRETURN_NV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return an double from an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; immediately. Uses [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XSRETURN_NV(NV v)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XSRETURN_PV"&gt;XSRETURN_PV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return a copy of a string from an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; immediately. Uses [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XSRETURN_PV(char *v)
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XSRETURN_UNDEF"&gt;XSRETURN_UNDEF&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return [perlman:perlguts] from an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; immediately. Uses [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XSRETURN_UNDEF;
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XSRETURN_YES"&gt;XSRETURN_YES&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return [perlman:perlguts] from an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; immediately. Uses [perlman:perlguts].

&lt;P&gt;
&lt;PRE&gt;        XSRETURN_YES;
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XST_mIV"&gt;XST_mIV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Place an integer into the specified position &lt;CODE&gt;i&lt;/CODE&gt; on the stack. The value is stored in a new mortal 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        XST_mIV( int i, IV v )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XST_mNV"&gt;XST_mNV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Place a double into the specified position &lt;CODE&gt;i&lt;/CODE&gt; on the stack. The value is stored in a new mortal 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        XST_mNV( int i, NV v )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XST_mNO"&gt;XST_mNO&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Place [perlman:perlguts] into the specified position &lt;CODE&gt;i&lt;/CODE&gt; on the stack.

&lt;P&gt;
&lt;PRE&gt;        XST_mNO( int i )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XST_mPV"&gt;XST_mPV&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Place a copy of a string into the specified position &lt;CODE&gt;i&lt;/CODE&gt; on the stack. The value is stored in a new mortal 
&lt;FONT SIZE=-1&gt;SV.&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;        XST_mPV( int i, char *v )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XST_mUNDEF"&gt;XST_mUNDEF&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Place [perlman:perlguts] into the specified position &lt;CODE&gt;i&lt;/CODE&gt; on the stack.

&lt;P&gt;
&lt;PRE&gt;        XST_mUNDEF( int i )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XST_mYES"&gt;XST_mYES&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Place [perlman:perlguts] into the specified position &lt;CODE&gt;i&lt;/CODE&gt; on the stack.

&lt;P&gt;
&lt;PRE&gt;        XST_mYES( int i )
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XS_VERSION"&gt;XS_VERSION&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The version identifier for an 
&lt;FONT SIZE=-1&gt;XS&lt;/FONT&gt; module. This is usually handled automatically by &lt;CODE&gt;ExtUtils::MakeMaker&lt;/CODE&gt;. See [perlman:perlguts].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_XS_VERSION_BOOTCHECK"&gt;XS_VERSION_BOOTCHECK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Macro to verify that a 
&lt;FONT SIZE=-1&gt;PM&lt;/FONT&gt; module's &lt;CODE&gt;$VERSION&lt;/CODE&gt; variable matches the 
&lt;FONT SIZE=-1&gt;XS&lt;/FONT&gt; module's

[perlman:perlguts] variable. This is usually handled automatically by
&lt;CODE&gt;xsubpp&lt;/CODE&gt;. See [perlman:perlxs].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_Zero"&gt;Zero&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The XSUB-writer's interface to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; &lt;CODE&gt;memzero&lt;/CODE&gt; function. The &lt;CODE&gt;d&lt;/CODE&gt; is the destination, &lt;CODE&gt;n&lt;/CODE&gt; is the number of items, and &lt;CODE&gt;t&lt;/CODE&gt; is the type.

&lt;P&gt;
&lt;PRE&gt;        void    Zero( d, n, t )
&lt;/PRE&gt;
&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="AUTHORS"&gt;AUTHORS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Until May 1997, this document was maintained by Jeff Okamoto &amp;lt;&lt;A
HREF="mailto:okamoto@corp.hp.com"&gt;okamoto@corp.hp.com&lt;/A&gt;&amp;gt; It is now
maintained as part of Perl itself.

&lt;P&gt;
With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil Bowers,
Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer, Stephen
McCamant, and Gurusamy Sarathy.

&lt;P&gt;

&lt;FONT SIZE=-1&gt;API&lt;/FONT&gt; Listing originally by Dean Roehrich &amp;lt;&lt;A
HREF="mailto:roehrich@cray.com"&gt;roehrich@cray.com&lt;/A&gt;&amp;gt;
&lt;HR&gt;
&lt;BR&gt;Return to the [Library]&lt;BR&gt;</field>
</data>
</node>
