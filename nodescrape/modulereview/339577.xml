<?xml version="1.0" encoding="windows-1252"?>
<node id="339577" title="Proc::Background" created="2004-03-24 17:40:02" updated="2005-07-27 11:48:46">
<type id="31663">
modulereview</type>
<author id="313535">
flyingmoose</author>
<data>
<field name="doctext">
&lt;P&gt;

&lt;h2&gt;Review of [cpan://Proc::Background]&lt;/h2&gt;

&lt;P&gt;

&lt;P&gt;Ah, the subject of processes and forking.  This brings up many questions in the monastery, so I decided I would add this to the module reviews section each time it came up.  Yes, folks, spawning processes and waiting on them doesn't have to be so complicated.   Let's look at the problem-space  a bit and we will understand why [cpan://Proc::Background] is so cool to have.

&lt;HR&gt;

&lt;h4&gt;The Problem&lt;/h4&gt;

&lt;P&gt;&lt;u&gt;unix&lt;/u&gt;: There are several ways to background a process on Unix, one can fork and exec a system call, one can make a system call using &amp;, and so on.  There are also things like [cpan://Proc::ProcessTable], but again, this can get complicated.

&lt;P&gt;&lt;u&gt;windows:&lt;/u&gt; There are also several ways to background a process on Windows, but forking is often implemented wrong on your particular version and should be avoided.  There is [cpan://Win32::Process], but it requires an absolute path to the executable you are trying to run, which can sometimes be hard to acquire when you don't know where that program lies in your path.

&lt;HR&gt;

&lt;h4&gt;The Solution&lt;/h4&gt;

&lt;P&gt;The above problems can get ugly in a hurry, especially if you are new to Unix (and don't understand fork well), don't want to deal with Win32 modules, or if you want code that works in something other than Unixy environments.   This is where Proc::Background comes in.  It allows one to not worry about Unix or Windows and to (effectively) manage processes without all of the gory details.  In addition, it allows waiting on arbitrary processes and checking on the status of each.   Very cool, and even cooler because it is cross platform.

&lt;HR&gt;

&lt;h4&gt;Example Code (borrowed from CPAN)&lt;/h4&gt;

&lt;P&gt;
&lt;code&gt;
 use Proc::Background;
    my $proc1 = Proc::Background-&gt;new($command, $arg1, $arg2);
    my $proc2 = Proc::Background-&gt;new("$command $arg1 1&gt;&amp;2");
    $proc1-&gt;alive;
    $proc1-&gt;die;
    $proc1-&gt;wait;
&lt;/code&gt;

&lt;P&gt;see CPAN for the full list of functions, but those are the basics.  Easy, no?

&lt;HR&gt;

&lt;h4&gt;When To Use It&lt;/h4&gt;

&lt;P&gt;
&lt;UL&gt;
&lt;LI&gt;When you want clean code that is very short and understandable
&lt;LI&gt;When you must execute processes in cross-platform code for Windows and Unix
&lt;LI&gt;When you don't have enough tylenol/advil/beer to deal with [cpan://Win32::Process]
&lt;LI&gt;When you have to inquire about the status of arbitrary processes or must act upon their states (is process A up?  How about B?  Now wait for C to finish!)
&lt;/UL&gt;

&lt;h4&gt;When Not To Use It&lt;/h4&gt;

&lt;P&gt;
&lt;UL&gt;
&lt;LI&gt;When you have Unix buddies you are trying to impress
&lt;LI&gt;When you have Win32 buddies you are trying to impress
&lt;LI&gt;When you are trying to keep up your job security by keeping code hard to read :)
&lt;LI&gt;When you need to execute arbitrary Perl code and not seperate executables
&lt;LI&gt;If you are using solaris or cygwin.  It appears that (per CPAN reports) this may not work there.  Your mileage may vary.  (I use Linux and Win32 most of the time).
&lt;LI&gt;Foreground processes?  NO, WAIT!  It works there too, just use 'wait' method on your process after you invoke it and you have something a little more spiffy than the stock system call.  This is at your discretion, of course, this isn't really required.
&lt;/UL&gt;

&lt;HR&gt;

&lt;h4&gt;The Final Word&lt;/h4&gt;

This module is very useful and is currently in my top 10. It efficiently allows management of any number of processes and allows me to forget (when I feel like it) how fork, exec, and [cpan://Win32::Process] work in Perl -- saving me pain and frustration.  It also makes code much more legible due to a clean API, and that is always a good thing in a module.  

&lt;P&gt;You can remember how to use it without looking things up, since the API is so basic -- this is goodness.  Try it out, unless you are a Unix purist who must always write their own fork code to spawn processes, this should work great for you.


&lt;P&gt;&lt;br&gt;&lt;br&gt;</field>
<field name="itemdescription">
Create and manage processes on Windows &amp; Unix</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
