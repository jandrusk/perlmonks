<?xml version="1.0" encoding="windows-1252"?>
<node id="353439" title="DBD::Anydata" created="2004-05-14 14:04:55" updated="2005-08-15 15:26:29">
<type id="31663">
modulereview</type>
<author id="195379">
idsfa</author>
<data>
<field name="doctext">
&lt;h4&gt;Module Author: Jeff Zucker &amp;lt;jeff@vpservices.com&amp;gt;&lt;br/&gt;
[http://search.cpan.org/~jzucker/DBD-AnyData-0.08/AnyData.pm|Documentation]&lt;/h4&gt;
&lt;h3&gt;Abstract&lt;/h3&gt;
&lt;p&gt;Excellent tool for developing programs with limited "database" needs, prototyping full-on RDBMS applications and pulling in common data interchange formats.  If you don't need /want the SQL baggage, try [cpan://AnyData] instead.&lt;/p&gt;
&lt;h4&gt;Pre-Requisites&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[cpan://SQL::Statement]&lt;/li&gt;
&lt;li&gt;[cpan://DBD::File]&lt;/li&gt;
&lt;li&gt;[cpan://AnyData]&lt;/li&gt;
&lt;li&gt;[cpan://DBI]&lt;/li&gt;
&lt;li&gt;various others for some data formats&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;[cpan://DBD::AnyData] is a DBI/SQL wrapper around [cpan://AnyData] which
allows the author to use many SQL constructs on traditionally non-SQL data
sources.  Descendant from [id://44114|DBD::RAM], DBD::AnyData also implements
that module's ability to load data from multiple formats and treat them as
if they were SQL tables.  This table can be held entirely in memory or tied
to the underlying data file.  Tables can also be exported in any format which
the module supports.&lt;/p&gt;
&lt;h4&gt;Review&lt;/h4&gt;
&lt;p&gt;The variety and number of [http://www.wotsit.org/|file formats] in use
is staggeringly large and continues to grow.  Perl hackers are often faced
with the job of being syntactic glue between applications, translating output
from one program into the necessary input for another.  Abstracting the exact
format of these data allows the programmer to rise above mere hacking and
actually craft something (re)usable.  Separating the logic from the
presentation improves the clarity of both.&lt;/p&gt;
&lt;p&gt;DBD::AnyData attempts to provide this abstraction by presenting a DBI/SQL
interface.  It layers over the required/companion AnyData module, which
presents a tied hash interface.  The perl purist will most likely prefer
to stick with AnyData, minus the DBD.  The extra layer of abstraction will
be most useful if you are more comfortable with SQL or your application
design requires it.  To my mind, the niftiest use of this module is the
ability to prototype your code as if you had a whole relational database,
but have the ease of a few simple CSVs actually holding the data.&lt;/p&gt;
&lt;p&gt;The list of supported formats is impressive, and continues to expand.  CPAN
currently lists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;perl data structures and __DATA__ segments&lt;/li&gt;
&lt;li&gt;Delimited text (Comma/Pipe/Tab/Colon/whatever separated)&lt;/li&gt;
&lt;li&gt;Fixed length records&lt;/li&gt;
&lt;li&gt;HTML Tables&lt;/li&gt;
&lt;li&gt;INI Files&lt;/li&gt;
&lt;li&gt;passwd Files&lt;/li&gt;
&lt;li&gt;MP3 Files (specifically, their ID3 tags)&lt;/li&gt;
&lt;li&gt;[http://search.cpan.org/~jzucker/AnyData-0.10/AnyData/Format/Paragraph.pm|Paragraph] Files&lt;/li&gt;
&lt;li&gt;Web Server Logs&lt;/li&gt;
&lt;li&gt;XML Files&lt;/li&gt;
&lt;li&gt;DBI Connections (to leverage existing modules)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With [http://www.vpservices.com/jeff/programs/AnyData/AnyData-API.html|more
on the way].&lt;/p&gt;
&lt;p&gt;DBD::AnyData has three basic modes of operation: file access, in-memory
access and format conversion.  These modes are implemented as five extension
methods over a standard DBD.&lt;/p&gt;
&lt;p&gt;In file access mode, the data file is read on each request and written
on each change.  The entire file is never read into memory (unless requested)
and so this method is suitable for large data files.  Be aware that these
are &lt;b&gt;not&lt;/b&gt; atomic commits, so your database could end up in an
inconsistent state.  This mode is not supported for remote files or
certain formats (DBI, XML, HTMLtable, MP3 or perl ARRAYs).&lt;/p&gt;
&lt;p&gt;In-Memory mode loads the entire data source into memory.  Obviously a
problem for huge data sets, but then you probably have those in a relational
database already.  This method is ideal for querying a remote data source,
handled in the background by good old [cpan://LWP].&lt;/p&gt;
&lt;p&gt;Conversion mode takes data from an input (which can be local or remote,
and in any supported format) and writes it to a local file, perl string or
perl array.  This function alone would be reason enough for the module to
exist, and it's really more of an afterthought.&lt;/p&gt;
&lt;h4&gt;Caveats&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Again, if you don't need SQL, use AnyData instead&lt;/li&gt;
&lt;li&gt;&lt;strike&gt;Currently, DBD::AnyData will not allow SQL against multiple
tables in the same SQL statement (no JOINs)&lt;/strike&gt; &lt;b&gt;Updated:&lt;/b&gt; per [id://395695|jZed] this feature is now available&lt;/li&gt;
&lt;li&gt;It isn't a real RDBMS.  Don't expect atomicity, journals, etc etc&lt;/li&gt;
&lt;li&gt;Not all formats are fully featured, and most require more modules&lt;/a&gt;
&lt;/ul&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;DBD::AnyData is one of those fun modules that lets you shove the crud
work off on someone else (the author of the AnyData::Format:: module) and
get on with crafting good code.  I've found it especially helpful when
putting together tiny web apps that might end up getting huge (and thus
require a moving to a true database).  Anything that lets me stop writing
file format converters is worth checking out in my book.&lt;/p&gt;
</field>
<field name="itemdescription">
The DBD::AnyData module provides a DBI/SQL interface to data in many formats and from many sources.</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
