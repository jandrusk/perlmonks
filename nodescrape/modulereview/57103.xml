<?xml version="1.0" encoding="windows-1252"?>
<node id="57103" title="diagnostics.pm" created="2001-02-07 23:57:23" updated="2005-07-27 11:49:42">
<type id="31663">
modulereview</type>
<author id="29772">
damian1301</author>
<data>
<field name="doctext">
&lt;BR&gt;&lt;b&gt;Note&lt;/b&gt;: The only reason I put the title as 'use diagnostics' is because I didn't want it to be confused with the Perl documentation page [diagnostics]. &lt;BR&gt;&lt;BR&gt;

As many of the [use diagnostics rules.|monks] out there already know, there is a module that catches errors and can potentially help you solve them by giving you examples and explanations of what, possibly, could go wrong. &lt;BR&gt;&lt;BR&gt;
Just to explain this to you a little more clearly, here is an example that can commonly fail and cause a load of unneeded problems, which no one needs :). This is quite easy though.
&lt;code&gt;
#!/usr/bin/perl
use diagnostics;
my ($q,$w) = 1,2;
&lt;/code&gt; Obviously enough, this is a simple error to most Perl users. For those that don't know, the diagnostics module provides some quidelines for you. &lt;code&gt;

Useless use of a constant in void context at c:\windows\TEMP\DzTemp.pl line 3 (#1)
    
    (W void) You did something without a side effect in a
context that does nothing with the return value, such as a
statement that doesn't return a value from a block, or the
left side of a scalar comma operator.  Very often this 
points not to stupidity on your part, but a failure of Perl
to parse your program the way you thought it would.  For 
example, you'd get this if you mixed up your C precedence
with Python precedence and said 
 
        $one, $two = 1, 2;
    
    when you meant to say
    
        ($one, $two) = (1, 2);
    
Another common error is to use ordinary parentheses to construct a 
list reference when you should be using square or curly brackets, 
         for example, if you say
    
        $array = (1,2);
    
    when you should have said
    
        $array = [1,2];
    
    The square brackets explicitly turn a list value into a
scalar value, while parentheses do not.  So when a 
parenthesized list is evaluated in a scalar context, the
comma is treated like C's comma operator, which
throws away the left argument, which is not what you want.  
See perlref for more on this.&lt;/code&gt;


As you can see this gives great help and most of the time will solve the problem. There are also alot of other good warning modules that you should use to solve an unknown error in your script or just help you maintain it. Some of these are. &lt;BR&gt;&lt;BR&gt;
1. [CGI::Carp]&lt;BR&gt;
2. [warnings]&lt;BR&gt;
3. [strict]&lt;Br&gt;

&lt;BR&gt;&lt;BR&gt;In conclusion, this is a great module that should be put at the top of your script next to &lt;pre&gt;&lt;font size=1
&gt;use [strict];&lt;/font&gt;&lt;/pre&gt;. Great stuff. I recommend it.


</field>
<field name="itemdescription">
A great module for catching and possibly telling you how to fix and error</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
