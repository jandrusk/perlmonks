<?xml version="1.0" encoding="windows-1252"?>
<node id="44112" title="Memoize" created="2000-11-30 11:06:08" updated="2005-08-14 17:02:45">
<type id="31663">
modulereview</type>
<author id="43894">
ariels</author>
<data>
<field name="doctext">
&lt;h4&gt;Description&lt;/h4&gt;
Memoization speeds up calculation of a function by storing its previously-computed values.  [Dominus|MJD]'s excellent &lt;code&gt;Memoize&lt;/code&gt; module memoizes (&lt;small&gt;almost&lt;/small&gt;) &lt;em&gt;any&lt;/em&gt; function you ask it to.  If you &lt;code&gt;use Memoize;&lt;/code&gt;, applying this optimisation can be as simple as saying &lt;code&gt;memoize 'slow_function';&lt;/code&gt;.
&lt;p&gt;
Additional methods exist, allowing such things as persistant storage of memoized values.

&lt;h4&gt;Why should I use it?&lt;/h4&gt;
Memoization is not a technique for everyday use.  Only &lt;em&gt;pure&lt;/em&gt; functions (functions which are executed only for their return values, not for any side effects) can be memoized.  It's the sort of module you should [cpan://Memoize|download] and learn how (and when) to use.
&lt;p&gt;
Eventually you'll write a slow routine that gets called in a slow loop.  If only a small number of different argument combinations get passed to the routine, it's an excellent candidate for memoization.
&lt;p&gt;
The documentation contains several examples, some of which can serve as ideas for usage.  The section on persistant storage of the cache is particularly noteworthy.

&lt;h4&gt;Why should I read it?&lt;/h4&gt;
The &lt;a href="http://search.cpan.org/doc/MJD/Memoize-0.62/Memoize.pm"&gt;documentation&lt;/a&gt;, code and &lt;a href="http://www.plover.com/~mjd/perl/MiniMemoize/"&gt;a Perl Journal article&lt;/a&gt; make excellent associated reading, sure to improve your Perl.  Both explain in detail what memoization is, and how (and when!) to use it.  In particular, the article explains how the module performs its magic, by giving a very short (but complete!) implementation of the principle routine, memoize.
&lt;p&gt;
Ways to use the module are mentioned, with examples:
&lt;ul&gt;
&lt;li&gt;Simple memoization
&lt;li&gt;Using a batch process to "pre-memoize" some values persistantly
&lt;li&gt;Memoizing list and scalar context together (normally the module keeps the contexts separate).
&lt;li&gt;Support for [cpan://Memoize::Expire].
&lt;li&gt;Memoization as a lightweight substitute for dynamic programming.
&lt;li&gt;Memoization as a clearer replacement for the Orcish maneuver.
&lt;/ul&gt;
&lt;p&gt;
You should also read the documentation (or the article), paying attention to the routine's limitation regarding functions taking multiple arguments which may contain the contents of [perlvar:$;|$;] (see "Why shouldn't I use it", below).
&lt;p&gt;
Finally, the [ariels|author] of this review is mentioned in the module's documentation.  This gives at least one person an additional reason to read the documentation.

&lt;h4&gt;Why shouldn't I use it?&lt;/h4&gt;
Most likely, because your problem doesn't need it.
&lt;p&gt;
If your problem &lt;em&gt;does&lt;/em&gt; need memoization, you might still need to help the module a bit.
&lt;ul&gt;
&lt;li&gt;If your routine takes multiple arguments, &lt;code&gt;Memoize&lt;/code&gt; codes them using the single key &lt;code&gt;join $; , @_&lt;/code&gt;; if your arguments may contain the contents of $; (in particular, if one of the arguments is binary data), you might need to do some extra work.
&lt;li&gt;If your routine takes a complex data structure as argument, you'll probably also need to do some extra work to use the module.
&lt;/ul&gt;
The documentation describes both problems and how to solve them.  Neither is a showstopper, but it is probably worth your while to know about these problems &lt;em&gt;before&lt;/em&gt; you run into them.
&lt;p&gt;
Probably the single biggest drawback of memoization is that it doesn't work for functions with side effects.  This is nothing to do with &lt;code&gt;Memoize&lt;/code&gt;, and everything to do with the technique.  Unfortunately, there is no way the module can check this for you.  &lt;big&gt;Blindly applying &lt;code&gt;memoize&lt;/code&gt; to every slow function in your program &lt;em&gt;will not work&lt;/em&gt;, and will cause your program to fail without warnings!  Make sure to understand what you are doing, before you do it.&lt;/big&gt;
&lt;p&gt;&lt;small&gt;2001-03-15 Edit by [Corion] : Removed spurious links&lt;/small&gt;&lt;/p&gt;</field>
<field name="itemdescription">
Make your functions faster by trading space for time</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
