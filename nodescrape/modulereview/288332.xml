<?xml version="1.0" encoding="windows-1252"?>
<node id="288332" title="Tree::DAG_Node" created="2003-09-02 11:13:01" updated="2005-07-27 11:48:58">
<type id="31663">
modulereview</type>
<author id="247807">
bm</author>
<data>
<field name="doctext">
I work in release management, and am constantly dealing with tree's of many different types, such as projects, file system, releases, versions of a file, class diagrams,etc. I have grown used to managing these through a variety of different ways, such as hashes, or rolling my own "tree structure" by adding parent/child or predecessor/successor properties and methods to my classes. &lt;p&gt;
But Perl being Perl, well, CPAN being CPAN, you can always take advantage of other's experience. A few searches later, I found &lt;a href="http://search.cpan.org/author/SBURKE/Tree-DAG_Node-1.04/DAG_Node.pm"&gt;Tree::DAG_Node&lt;/a&gt;.&lt;p&gt;
This class represents tree structures in OO Perl. Specifically, this class manages the relationships between a set of "nodes". There is only one type of relationship you can create: the mother node and the daughter node. The daughter list of a node is ordered, but this is of course ignoreable.&lt;p&gt;While a node can contain whatever data you would like it to (through the 'attributes' property), not every relationship can be created - for example, a node may only have one mother. &lt;p&gt;
The author, prolific CPAN contributor Sean M. Burke, encourages inheriting off Tree::DAG_Node. This exposes a seriously large number of tree related methods to your class, such as: &lt;br&gt;
  &lt;li&gt; $node-&gt;daughters or $node-&gt;mother
  &lt;li&gt; $node-&gt;add_daughter or $node-&gt;add_daughter_left  
  &lt;li&gt; $node-&gt;attributes-&gt;{'version'} = '1.1.3.4' (defines the attribute 'version' in the node)
  &lt;li&gt; $node-&gt;ancestors (returns a list of nodes)
  &lt;li&gt; $node-&gt;walk_down ({ callback =&gt; \&amp;foo, callbackback =&gt; \&amp;foo, ... })  (a depth first traversal of the tree, executes the passed callback)
  &lt;li&gt; various list of list to tree conversion methods
  &lt;li&gt; $node-&gt;draw_ascii_tree (ASCII pretty print of the tree)
&lt;p&gt;
And that is just the summary! To quote the doco &lt;i&gt; In fact, I'd be very surprised if any one user ever had use for more that even a third of the methods in this class. And remember: an atomic sledgehammer will kill that fly. 
&lt;/i&gt;, this is a very large class. Perhaps too over the top for some solutions (hence the atomic sledgehammer analogy!). Autoloader is not implemented, so some might find this a little slow for their needs, and there lies the biggest problem with this class. &lt;p&gt;The other thing I don't get is where he gets the DAG in DAG_Node from!&lt;p&gt;
In summary though, and excellent class that provides a vast array of sophistication to a tree structure. Adding:
&lt;code&gt;
use Tree::DAG_Node;
@ISA = qw(Tree::DAG_Node);
&lt;/code&gt;
to the top of your class can open many doors that would not of otherwise existed (just look at the walk_down method alone). I highly recommend this class for implementing tree structures.  

</field>
<field name="itemdescription">
Represents nodes in a tree, and their relationships</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
