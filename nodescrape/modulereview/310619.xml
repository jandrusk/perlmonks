<?xml version="1.0" encoding="windows-1252"?>
<node id="310619" title="desift" created="2003-11-27 19:07:19" updated="2005-08-04 19:01:59">
<type id="31663">
modulereview</type>
<author id="10395">
princepawn</author>
<data>
<field name="doctext">

&lt;p&gt;&lt;a name="__index__"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- INDEX BEGIN --&gt;

&lt;ul&gt;

	&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#read_in_the_data"&gt;Read in the data&lt;/a&gt;&lt;/li&gt;
	&lt;ul&gt;

		&lt;li&gt;&lt;a href="#filtering"&gt;Filtering&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;

	&lt;li&gt;&lt;a href="#transform_the_data"&gt;Transform the data&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#outputting_the_data"&gt;Outputting the data&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#assessment"&gt;Assessment&lt;/a&gt;&lt;/li&gt;
	&lt;ul&gt;

		&lt;li&gt;&lt;a href="#desift's_limitations"&gt;desift's limitations&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="#desift_and_the_future"&gt;desift and the Future&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="#splitting_(a_common_form_of_input_transformation):"&gt;splitting (a common form of input transformation):&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="#filtering"&gt;filtering&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="#formatting"&gt;formatting&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;

	&lt;li&gt;&lt;a href="#obtaining_desift"&gt;Obtaining desift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- INDEX END --&gt;

&lt;hr /&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h1&gt;&lt;a name="overview"&gt;Overview&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;desift&lt;/code&gt; is a Perl program for data munging. What is data munging? According
to Dave Cross, author of ``Data Munging in Perl'', data munging has 3 phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name="item_read_in_the_data"&gt;Read in the data&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name="item_transform_the_data"&gt;Transform the data&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name="item_output_the_data"&gt;Output the data&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since &lt;code&gt;desift&lt;/code&gt; is a data munging program, we can describe it via this
framework.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;&lt;a name="read_in_the_data"&gt;Read in the data&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;desift&lt;/code&gt; reads in your data from &lt;code&gt;STDIN&lt;/code&gt; or from files specified on the
command-line after the option switches. It &lt;code&gt;split&lt;/code&gt;s your data into a Perl
array for you. You control the split via the &lt;code&gt;-d&lt;/code&gt; switch:&lt;/p&gt;
&lt;pre&gt;
  -d REGEX      Field delimiter in input-file(s). Default is &amp;quot;\t&amp;quot; (tab)&lt;/pre&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name="filtering"&gt;Filtering&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A common phase of reading in data is filtering out what you don't want. To
specify input lines that you want to skip, supply the 
&lt;code&gt;-s&lt;/code&gt; option to &lt;code&gt;desift&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
  -s REGEX      Skip rows in input-file(s) matching REGEX.&lt;/pre&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;&lt;a name="transform_the_data"&gt;Transform the data&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In &lt;code&gt;desift&lt;/code&gt;, the input data is transformed via a template string which may
be supplied on the command-line or in a file. There are two elements to the
template string: plain text and positional tags indexing into the array
built from splitting your input data.&lt;/p&gt;
&lt;p&gt;If your template string is in a file, use the &lt;code&gt;-t&lt;/code&gt; option. If you want to
supply the template string on the command-line, then use the &lt;code&gt;-T&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;Here is a sample &lt;code&gt;desift&lt;/code&gt; command using flags we have seen so far:&lt;/p&gt;
&lt;pre&gt;
   ls -l | desift -d&amp;quot;\s+&amp;quot; -T&amp;quot;File: %9        Permissions: %1&amp;quot; -s&amp;quot;^total&amp;quot;&lt;/pre&gt;
&lt;p&gt;It's not a completely perfect example, because filenames with spaces will only
have the part listed before the space in the filename. Here is some sample
output:&lt;/p&gt;
&lt;pre&gt;
   File: chessgames-dotcom        Permissions: -rwxr-xr-x
   File: desift        Permissions: -rwxrwxrwx
   File: desift.pod        Permissions: -rw-r--r--
   File: gerbold        Permissions: drwxr-xr-x+
   File: upload-cpan.pl        Permissions: -rwxr-xr-x
   File: xemacs.bat        Permissions: -rwxr-xr-x&lt;/pre&gt;
&lt;p&gt;We can learn some things from looking at this output. First of all, the word
&lt;code&gt;Permissions&lt;/code&gt; does not always start at the same column. My first attempt to
fix this was to put a tab in the template string. To do so, you must manually
put a tab in the string: &lt;code&gt;\t&lt;/code&gt; or &lt;code&gt;\\t&lt;/code&gt; or changing the string from single to
double-quote does not work. Even so, the output is still not lined up:&lt;/p&gt;
&lt;pre&gt;
   File: chessgames-dotcom      Permissions: -rwxr-xr-x
   File: desift Permissions: -rwxrwxrwx
   File: desift.pod     Permissions: -rw-r--r--
   File: gerbold        Permissions: drwxr-xr-x+
   File: upload-cpan.pl Permissions: -rwxr-xr-x&lt;/pre&gt;
&lt;p&gt;And this makes output hard to read. I envision two possble solutions to this
problem. 
One possible fix is to have a template flag which takes a numeric argument
indicating at which column the output should be written.
Another fix is more time and compute-consuming. Sift could read in all the
lines and then output them with just enough space for the columns to line
up... sort of like a database does when you SELECT data.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;&lt;a name="outputting_the_data"&gt;Outputting the data&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In a sense, transformation and output are one step in &lt;code&gt;desift&lt;/code&gt;. Once a line of
data is transformed, it is then output.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;&lt;a name="assessment"&gt;Assessment&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;desift&lt;/code&gt; is a cleanly written module which simplifies and abstracts the
&lt;code&gt;split&lt;/code&gt;, &lt;code&gt;array-slice&lt;/code&gt;, &lt;code&gt;print-and-join&lt;/code&gt; cycle of programming leading to one
succinct command-line instead of a series of function calls.&lt;/p&gt;
&lt;p&gt;In looking back at a recent project of mine, I find &lt;code&gt;desift&lt;/code&gt; to be inadequate
for what I had to do. I had a CSV-file with name, email, phone, etc. I had to
filter this file for profanity and invalid email addresses and then output the
new file in a tab separated format for import into a database.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name="desift's_limitations"&gt;desift's limitations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all, the input phase. Parsing CSV is not easy. I
could not pass &lt;code&gt;desift&lt;/code&gt; a regexp to do such a split and field-massage
properly. Also, some of the data 
was in Unicode format and only [cpan://Text::CSV_XS] with its &lt;code&gt;Binary&lt;/code&gt;
option was robust enough for this task. Also I was dealing
with 4 files of  25 million lines each, so using a c-based module such as
&lt;code&gt;CSV_XS&lt;/code&gt; was desirable for speed reasons as well.&lt;/p&gt;
&lt;p&gt;For the transformation phase *of this project*, &lt;code&gt;desift&lt;/code&gt; was
adequate. However, what if I wanted apply the Perl &lt;code&gt;lc&lt;/code&gt; function to a field
instead of just writing it? That is a very likely operation and impossible with
&lt;code&gt;desift&lt;/code&gt;. Now, what if the template for desift were passed off to &lt;code&gt;sprintf&lt;/code&gt;
instead of its own custom sprintf-like formatter? And what if access to the
split array were via a localized variable such &lt;code&gt;@_split&lt;/code&gt;? Then we could do
&lt;code&gt;lc&lt;/code&gt; if we wished:&lt;/p&gt;
&lt;p&gt;&amp;lt;code&amp;gt;
   ls -l | desift  -s``^total'' -d``\s+'' \
      --sprintf-string=``File: %s        Permissions: %s''
      --sprintf-args=``lc($_split[8]), $_split[0]''
&amp;lt;/code&amp;gt;&lt;/p&gt;
&lt;p&gt;Also why is there not possibility of filtering data after it is split? Perhaps
we can only determine if data should be transformed or output after a test of
some sort. A test such as adding
two fields together, doing a SQL SELECT on a database or grepping a file, or
seeing if a certain or all fields were in the line.
Thus we can conclude that filtering callbacks should be available at each stage
as executable Perl subroutines and not limited to regular expressions at any
stage.&lt;/p&gt;
&lt;p&gt;As mentioned earlier, the output phase is wed to the transformation phase. Thus
it is up to you use I/O redirection to capture &lt;code&gt;desift&lt;/code&gt; output. For example,
it is not (and 
perhaps should not be?) possible to commit &lt;code&gt;desift&lt;/code&gt; results directly to a
database on a line-by-line basis. But in my experience, c-based SQL loaders
supplied with databases are 8-fold faster than isolated inserts via
Perl/DBI. So, complete of control over channeling output may or may not be a
Bad Thing.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name="desift_and_the_future"&gt;desift and the Future&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a number of splitting and filtering and formatting modules available
on CPAN:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name="splitting_(a_common_form_of_input_transformation):"&gt;splitting (a common form of input transformation):&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;[cpan://Parse::FixedLength], [cpan://Parse::FixedDelimiter],
[cpan://Text::xSV], [cpan://Text::CSV_XS], [cpan://DBD::AnyData],
[cpan://Spreadsheet::ParseExcel].&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name="filtering"&gt;filtering&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Core Perl provide &lt;code&gt;grep&lt;/code&gt; which is extremely adequate in a large number of
cases. Common
CPAN modules for doing so are [cpan://Regexp::Common::profanity_us] and
[cpan://Email::Valid].&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name="formatting"&gt;formatting&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Core perl provides HERE documents, sprintf. And then on CPAN, there are very
few options for formatting a data model (hah!). Need I list any?
[cpan://Template], [cpan://Data::Table], [cpan://Data::Presenter],
[cpan://HTML::Template], [cpan://Text::MagicTemplate]&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;&lt;a name="obtaining_desift"&gt;Obtaining desift&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;desift&lt;/code&gt; is available at &lt;a href="http://desift.sourceforge.net"&gt;http://desift.sourceforge.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It was written by James Shimada.&lt;/p&gt;

</field>
<field name="itemdescription">
a module for simple data munging</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
