<?xml version="1.0" encoding="windows-1252"?>
<node id="98809" title="Quantum::Superpositions" created="2001-07-22 11:35:27" updated="2005-08-03 13:08:48">
<type id="31663">
modulereview</type>
<author id="25235">
larsen</author>
<data>
<field name="doctext">
&lt;table border="0"&gt;
&lt;tr&gt;
&lt;td width="50%"&gt;&amp;nbsp;&lt;/td&gt;
&lt;td width="50%"&gt;&lt;blockquote&gt;
&amp;lt;[larsen]&amp;gt; I think I'll add a disclaimer...&lt;br&gt;
&amp;lt;[larsen]&amp;gt; &lt;i&gt;"No cat has been hurt to write this review"&lt;/i&gt;&lt;br&gt;
&amp;lt;[neshura]&amp;gt; lol&lt;br&gt;
&amp;lt;[neshura]&amp;gt; IMPOSSIBLE&lt;br&gt;
&lt;p&gt;
&amp;lt;[larsen]&amp;gt; hi neshura, I didn't noticed you&lt;br&gt;
&amp;lt;[larsen]&amp;gt; :)&lt;br&gt;
&amp;lt;[neshura]&amp;gt; now that you have noticed, bet you can't tell what my velocity is&lt;br&gt;
&lt;p align="right"&gt;-- Two monks on IRC :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;h2&gt;Quantum computing in a nutshell&lt;/h2&gt;
One of the possible formulations of Church-Turing's thesis
(actually it's not equivalent: is a reinforcement also known as 
&lt;i&gt;thesis of sequential computing&lt;/i&gt;) says that every computing
model is simulable by a Turing Machine with at most a
polynomial overhead.&lt;p&gt;

Quantum computing theory provides a model that seems to
violate this assertion. Particularly, using a quantum
computer (whatever it will be), it could be possible to efficiently solve
classes of problems that are intractable nowadays using a classical 
computer, such as factorization.&lt;p&gt;

How is this possible? Quantum computing relies on some
strange properties of quantum mechanics, called &lt;i&gt;superpositions,
entanglement, quantum parallelism&lt;/i&gt;.&lt;p&gt;

In order to take a brief look to these concepts, let's introduce quantum
bits, a.k.a. &lt;i&gt;qubits&lt;/i&gt;. They behave in part like classical bit, but
they can also present "almost ghostly overlays of many 
different states", commonly known as
superpositions of states. For example, it's possible for a qubit
to be at the same time in its two states 1 and 2. Better, qubit is
in a state where an observer has 1/2 probability to measure state
1 and 1/2 probability to measure state 0. With the notation
commonly used in quantum theory:&lt;p&gt;

&lt;center&gt;1/2(|0&amp;gt; + |1&amp;gt;)&lt;/center&gt;&lt;p&gt;

Unfortunately, measuring the state of a quantum bit alters its
state. So if we measure the state of the qubit considered, we
could measure state |1&amp;gt; or |0&amp;gt; with the same probability 1/2,
but after the measurement the qubit will be in state |1&amp;gt; or |0&amp;gt;,
depending on our measurement.&lt;p&gt;

You could say this is not so useful. Yes. And no. Juxtaposing
many qubits we can obtain quantum registers. For example, using
8 qubits in the state 1/2(|0&amp;gt; + |1&amp;gt;) we obtain a register where
&lt;strong&gt;every&lt;/strong&gt; state (0..2&lt;sup&gt;8&lt;/sup&gt;-1) can be
measured, with the same probability. Every integer that can be
expressed with 8 bits is "contained" (in the sense explained above) 
in this quantum register.&lt;p&gt;

The interesting thing is that if we apply an operator to this
register and we put the result in a second register, this
register will contain &lt;strong&gt;every&lt;/strong&gt; result that can
be obtained applying the operator to the values that are contained in 
the first register.&lt;p&gt;

As I said for qubits, the act of measuring alters the state of the registers.
But if we measure the value of the second register, even the state
of the first register will collapse to the correspondig value.
This is called &lt;i&gt;entanglement&lt;/i&gt;.
So if we measure &lt;i&gt;f(x)&lt;/i&gt; from the second register, we will measure
&lt;i&gt;x&lt;/i&gt; from the firsti one.&lt;p&gt; 

There's no quantum measurement possible to
extract from the second register all the information about the
function &lt;i&gt;f&lt;/i&gt;. But note that the operator &lt;b&gt;performed an
exponential quantity of operations in an unitary time&lt;/b&gt;. 
This is called &lt;i&gt;quantum parallelism&lt;/i&gt;. And, fortunately, 
there are other methods
to obtain useful information about &lt;i&gt;f&lt;/i&gt;. One of these methods (Discrete 
Fourier Transform, DFT) has been used by
Shor to obtain a probabilistic quantum algorithm for
factorization, that is known as an intractable problem in classical
complexity theory. I think this is not the place to give other explanations: 
there's a lot of infos available on the net. I put some link at the end
of this node.


&lt;h2&gt;Quantum::Superpositions&lt;/h2&gt;

I've shown that Quantum Computing model permits to perform multiple
operations in a single step by mean of superpositions. 
[cpan://Quantum::Superpositions] adds new linguistic tools to
Perl (&lt;code&gt;any&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;) inspired to 
quantum mechanics.&lt;p&gt;

They both produce Superpositions, i.e. scalars that can partecipate
to any arithmetic or logic operations due to their nature, but with
"parallel semantic": when a Superposition partecipate to an
arithmetic operation, this operation if perfomed in parallel on
every element of the Superposition; when the Superposition partecipate
in a logical operation, its truth value is true or false depending
on the truth value of its elements, in a disjuntive or conjuntive
way, depending on the operator used to build the Superposition
(respectively: &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;). I've said "parallel 
semantic" but internals of this module actually cycle trough every value of 
the Superposition to perform the operation.&lt;p&gt;

So, one could write this program using [cpan://Quantum::Superpositions]:

&lt;code&gt;
$product = any(1, 2, 3) * any( 2, 3, 4);
print eigenvalues( $product );
&lt;/code&gt;&lt;p&gt;

&lt;code&gt;$product&lt;/code&gt; is a new Superposition that contain every
possible result of the multiplication of the numbers (1, 2, 3) and
the numbers (2, 3, 4) (&lt;code&gt;$product&lt;/code&gt; is &lt;code&gt;any(8,9,2,3,4,12,6)&lt;/code&gt;). 
&lt;code&gt;eigenvalues&lt;/code&gt; is a useful function
that returns all the states that our Superposition represent (&lt;i&gt;In this
context&lt;/i&gt;. See the documentation for details).&lt;p&gt;

Superpositions can also be passed to subroutines. The subroutine 
&lt;strong&gt;has not to know&lt;/strong&gt; that what is going to be passed will 
be a superposition, but it will return a superposition of the results 
(as in the example of the operator applied to the quantum register).&lt;p&gt;

Quantum::Superpositions also allows to express succinctly
complex logical conditions. From the examples found in the
documentation:&lt;p&gt;

&lt;code&gt;
$ideal = any(  
 all("tall", "rich", "handsome"),
 all("rich", "old"),
 all("smart","Australian","rich")
);

while (@features = get_description) {
 if (any(@features) eq $ideal) {
  print "True love";
 }
}
&lt;/code&gt;&lt;p&gt;

Here we build a disjunctive superposition of conjunctive superpositions
(note the clarity with the concept of being the ideal is expressed).
Then we cycle through a group of descriptions of (I guess :)) men,
we build a superposition from the description (&lt;code&gt;any(@features)&lt;/code&gt;)
and we compare it disjunctively against our &lt;code&gt;$ideal&lt;/code&gt;. In this
case, is like cycling and comparing against our set of ideals: i.e.
&lt;code&gt;if (any(@features) eq all( "tall", "rich", "handsome"))&lt;/code&gt;.
We want that a subset of @features is equal to set ("tall", "rich", "handsome"). 

&lt;h2&gt;Using Quantum::Superpositions&lt;/h2&gt;
First of all, a word about performance.&lt;br&gt;
[cpan://Quantum::Superpositions] has not to be intended as a 
practical way to do things in Perl. While it provides very
succinct and smart idioms, their implementations are easily 
less efficient than a "hand-made" solution, because Quantum::Superpositions 
actually  &lt;strong&gt;emulates&lt;/strong&gt; a quantum computer. It isn't, of
course, true quantum parallelism. So, this apparently 
very efficient factorization algorithm (from the examples of module
documentation):&lt;p&gt;

&lt;table border="0"&gt;
&lt;tr&gt;
&lt;td width="60%"&gt;
&lt;code&gt;
sub factors 
{
 my ($n) = @_;
 my $q = $n / any(2..$n-1);
 return eigenstates(floor($q)==$q);
}
&lt;/code&gt;&lt;p&gt;

...will be comparable to this one
from the point of view of efficiency:&lt;p&gt;

&lt;code&gt;
sub factors 
{
 my ($n) = @_;

 my @q = map { $n / $_ } (2..$n-1);
 return grep {
  floor( $_ ) == $_
 } @q;
}
&lt;/code&gt;
&lt;/td&gt;
&lt;td valign="top"&gt;
Beware!, the output differ, because in &lt;code&gt;floor($q)==$q&lt;/code&gt; we are asking
for a numerical value of the superposition &lt;code&gt;$q&lt;/code&gt;, that is generated
by this code &lt;code&gt;my @states = $_[0]-&gt;eigenstates; return $states[rand @states]&lt;/code&gt;.
As I stated above, is in a state where we can measure with the 
same probability every value. Very funny, isn't it? :)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;

Also, [cpan://Quantum::Superpositions] provides some, let's say, extra-physics
functions that have no counterpart in nature, such as the function 
&lt;code&gt;eigenstates&lt;/code&gt; (remember, &lt;i&gt;"there's no quantum measurement possible to
extract all the information..."&lt;/i&gt;). So this module should be carefully
used if you want to study quantum computing (but there are better tools).&lt;p&gt;

[cpan://Quantum::Superpositions] is very useful to express, shortly, complex
conditions that should be coded with &lt;code&gt;grep&lt;/code&gt;/&lt;code&gt;map&lt;/code&gt;
combinations, as in the example of the ideal man.
And it has great value, providing a good example of use of 
[cpan://Class::Multimethods].

&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;i&gt;"Quantum Theory, the Church-Turing principle and the universal quantum computer"&lt;/i&gt;.
This classical paper could be find on 
[http://www.qubit.org/people/david/David.html|David Deutsch's Home Page]
&lt;li&gt;Adriano Barenco, &lt;i&gt;Quantum physics and computers&lt;/i&gt;. Contemporary Physics, 1996,
volume 37, number 5, pages 375-389. I don't know if this article is available on the net.
&lt;li&gt;[http://www.imsa.edu/~matth/cs299/papertex.html|Quantum Computing and Shor's Algorithm] 
illustrates in detail Shor's factorization algorithm and contains a C++
implementation of the algorithm. Original paper is 
&lt;i&gt;Shor, P.W., 1994, Proceedings of the 35th Annual Symposium on the Foundations of
Computer Science, p.124&lt;/i&gt;.
&lt;li&gt;&lt;i&gt;The Emperor's New Mind&lt;/i&gt; by Roger Penrose. This book does not directly concern
quantum computing, but provides a good introduction to foundations of computer science
like Turing machines and recursive functions. It contains also a large section about
quantum theory.
&lt;li&gt;There's another module on CPAN inspired to Quantum theory: [cpan://Quantum::Entanglement]
&lt;/ol&gt;</field>
<field name="itemdescription">
QM-like superpositions in Perl</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
