<?xml version="1.0" encoding="windows-1252"?>
<node id="32791" title="File::Find" created="2000-09-16 08:48:36" updated="2005-08-09 14:20:48">
<type id="31663">
modulereview</type>
<author id="5348">
Corion</author>
<data>
<field name="doctext">
File::Find is the way if you want to look at all files in one or more directories.

&lt;TT&gt;File::Find&lt;/TT&gt; exports one function, &lt;TT&gt;find()&lt;/TT&gt;, which takes two parameters, a hash or a code reference, and a list of directories where the search starts.

&lt;H2&gt;Why use File::Find&lt;/H2&gt;
&lt;P&gt;
File::Find protects you from a lot of nasty things that happen on filesystems. In its standard configuration it ensures that your code reference is called once for each file encountered, even if there are more symlinks pointing to it, and it also prevents nasty loops for symlinked directories.
&lt;/P&gt;
&lt;H2&gt;Why avoid File::Find&lt;/H2&gt;
&lt;P&gt;
There is not much reason to avoid [cpan://File::Find] - you
could want to avoid it if you want to read files in a single directory, without recursing, when you are explicitly sure that there can be no symlinks in that directory (for example, if the filesystem dosen't allow symlinks). Then, your code could load faster. But I'd file that under premature optimization.
&lt;/P&gt;
&lt;H2&gt;Caveats&lt;/H2&gt;
&lt;P&gt;
If you are starting to first use File::Find, you have to deal with some idiosyncrasies.
&lt;/P&gt;
&lt;p&gt;First of all, File::Find uses some "optimization" by default to speed up searches under certain filesystems under Unix. Unfortunately, this "optimization" fails to work under other filesystems, such as the &lt;tt&gt;iso9600&lt;/tt&gt; filesystem used for cdroms. [ncw] tells you below what to do about it - in fact, you should always use the code [ncw] proposes.&lt;/p&gt;
&lt;P&gt;
In the default configuration, the directory is changed to the recursed directory, and all returned filenames are relative to the current directory. Use &lt;TT&gt;$File::Find::name&lt;/TT&gt; to get a fully specified filename.
&lt;/P&gt;
&lt;P&gt;
If you don't want to recurse below a certain directory, there is the (not-so-well-documented) &lt;TT&gt;$File::Find::prune&lt;/TT&gt; variable, which you can set to 1 in your code reference to stop recursing into the current directory.&lt;/P&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;By popular demand, here are some examples on how to use
the module. The [perlman:File::Find|documentation] shows off some interesting code, but it's not helpful if you're looking for something to get started.&lt;/p&gt;
&lt;p&gt;A first example, printing the filename and the filename with the path to the file. The code was stolen from a 
[id://1317|node] by [nate].&lt;/p&gt;
&lt;code&gt;
use strict;
use File::Find;

sub eachFile {
  my $filename = $_;
  my $fullpath = $File::Find::name;
  #remember that File::Find changes your CWD, 
  #so you can call open with just $_

  if (-e $filename) { 
    print "$filename exists!"
          . " The full name is $fullpath\n"; 
  }
}

find (\&amp;eachFile, "mydir/");
&lt;/code&gt;

</field>
<field name="itemdescription">
Enumerate files and directories in a directory tree</field>
<field name="usercomment">
Use this module instead of globbing or readdir()</field>
<field name="identifier">
</field>
</data>
</node>
