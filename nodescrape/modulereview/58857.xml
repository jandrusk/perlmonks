<?xml version="1.0" encoding="windows-1252"?>
<node id="58857" title="HTML::TreeBuilder" created="2001-02-16 12:56:17" updated="2005-08-15 15:55:00">
<type id="31663">
modulereview</type>
<author id="3306">
Nooks</author>
<data>
<field name="doctext">
I've been happily using this module for a few months.  If you dislike code that (ab)uses regular
expressions to parse HTML, this module could be what you're looking for!
&lt;p&gt;
TreeBuilder uses &lt;code&gt;HTML::Parser&lt;/code&gt; under the hood, and at the moment is fairly tightly coupled to
&lt;code&gt;HTML::Element&lt;/code&gt;, since it builds a tree of those objects if the parse is successful.  (The author
spoke recently on the libwww mailing list about making the module capable of building a tree of,
say, subclassed &lt;code&gt;HTML::Element&lt;/code&gt;s.)
&lt;p&gt;
The killer feature of this module is that it tries to parse HTML as a browser would, rather than treating
all input HTML as supposedly perfectly compliant documents---which the majority of them are &lt;b&gt;not&lt;/b&gt;!
This is extremely useful.  I have not seen a HTML parser for any other language that does anything like this.
&lt;p&gt;
Even though you'll &lt;code&gt;use HTML::TreeBuilder&lt;/code&gt;, most of the functionality you'll want to use
is in &lt;code&gt;HTML::Element&lt;/code&gt;.  The &lt;code&gt;look_down()&lt;/code&gt; method is very useful---called on an
Element, it searches down the tree looking for Elements that match a list of criteria.  It's possible
to specify a code reference as an argument (other forms of arguments are supported); Elements that
pass the sub are returned (actually, in scalar context the first such Element is returned).  Since
&lt;code&gt;look_down&lt;/code&gt; (and its sister, &lt;code&gt;look_up&lt;/code&gt;, among many others) returns an Element, it's
easy to search on successively more specific criteria for &lt;b&gt;just&lt;/b&gt; what you want, and the code (written
correctly) will &lt;i&gt;keep working even if the HTML changes&lt;/i&gt; (I've used this pretty successfully to deduce
the form contents required to fake
a HTTPS login to HotMail---I'd post it here but there is too much &lt;code&gt;LWP&lt;/code&gt; clutter in the way of
what should be presented to show how this module shines).
&lt;p&gt;
The module also provides Tree cloning, cutting, and splicing functionality, much like you'd expect from
a Document Object Model in other languages (or even Perl!).  TreeBuilder objects can be converted to and
from HTML and XML Element trees using the &lt;code&gt;HTML::DOMbo&lt;/code&gt; module, by the same author.  (I haven't
used this functionality myself...yet.)
&lt;p&gt;
There are a few slight downsides to the module---at the moment it can't be usefully subclassed (a very 
minor problem); it's probably not as fast as searching your HTML with a regex; it may not even be as
fast as `grepping' through parsed HTML via &lt;code&gt;HTML::Parser&lt;/code&gt; directly.  However I had to work
with it quite extensively before I found any of these things even slightly problematic.
&lt;p&gt;
The author, Sean M. Burke &amp;lt;sburke@spinn.net&amp;gt;, maintains the code well, and is ready to answer questions
on the LWP mailing list.
&lt;p&gt;
An excellent module that anyone dealing with HTML should become familiar with.
</field>
<field name="itemdescription">
Parser that builds a HTML syntax tree</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
