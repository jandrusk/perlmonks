<?xml version="1.0" encoding="windows-1252"?>
<node id="324591" title="Number::Spell" created="2004-01-27 20:07:47" updated="2005-08-05 19:13:06">
<type id="31663">
modulereview</type>
<author id="243154">
PERLscienceman</author>
<data>
<field name="doctext">
&lt;b&gt;CPAN LINK: &lt;/b&gt;[cpan://Number::Spell]&lt;BR&gt;
&lt;b&gt;CPAN ABSTRACT:&lt;/b&gt; Number::Spell provides functionality for spelling out numbers. Currently only integers are supported.&lt;BR&gt;
&lt;b&gt;Introduction:&lt;/b&gt;&lt;BR&gt;
Every so often I get the urge to troll around the CPAN Module Repository to see what is interesting.  This module caught my eye as a 'Cool Use for Perl', so I thought I would download it and give it a try.&lt;BR&gt;
&lt;b&gt;Functionality:&lt;/b&gt;&lt;BR&gt;
Number::Spell, upon initial tinkering does what it says spells out integers into english words.  I tested it out on some 'smaller' numbers (see demo below) and it seemed to work fine.  So... I thought to myself lets see if we can break it, after all the documentation say it can go into the &lt;i&gt;'vigintillions'&lt;/i&gt; Unfortunately, I was successful at breaking it.  I hit the ceiling at 100 trillion, after adding one more zero, which would then be one quadrillion, it only returned 'one'.&lt;BR&gt;
&lt;b&gt;Demo Code:&lt;/b&gt;
&lt;code&gt;
#!/usr/bin/perl -w
use strict;
use Number::Spell;
my $string=spell_number(8597);
print "$string\n";
-----
Result:
eight thousand five hundred ninety seven
&lt;/code&gt;
&lt;b&gt;Bug(s) Found:&lt;/b&gt;
Stops working properly after 100 Trillion.&lt;BR&gt;
&lt;b&gt;Final Thoughts:&lt;/b&gt;&lt;BR&gt;
I think this would be a really cool module if it worked properly past 100 Trillion.  Has anyone else tried it and had the same result?  Another possiblity would be for interpreting reals, although that would probably be pretty dicey to implement especially with a number like 1.09873532 .  The author did mention this possibility in the original version.&lt;BR&gt;
&lt;b&gt;UPDATE:&lt;/b&gt;&lt;BR&gt;
I did a little digging into the module and determined that when you go one place above 100 Trillon (1000000000000000),
the number then get interpreted or changed into exponential
format by the interpreter so instead of 1 Quadrillion as 10000000000000000, it is 1e16, which is not recognized/proper split by the regex inside the if statement on line 83 of spell.pm .
&lt;code&gt;
  if($data=~/(\-?)\s*(\d+)/){
&lt;/code&gt;

With a little more tinkering/experimentation with the demo script I have determined that such a large number will work with the module if you send it as a quoted string.
&lt;code&gt;
my $string=spell_number('1000000000000000'); #this works
my $string=spell_number(1000000000000000); #this doesNOT
&lt;/code&gt;
The ultimate solution would be to fix the regex on line 83 in spell.pm to deal with the exponential format.  Unfortunately a regex wizard I am not.  So.... I would be inclined to leave that in the hands of the author or someone who knows more of regexes than I do.    :)</field>
<field name="itemdescription">
Perl extension for spelling out numbers.</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
