<?xml version="1.0" encoding="windows-1252"?>
<node id="51001" title="Text::CSV" created="2001-01-10 21:27:39" updated="2005-08-15 08:47:51">
<type id="31663">
modulereview</type>
<author id="21156">
TStanley</author>
<data>
<field name="doctext">
Author: &lt;A HREF="alan@mfgrtl.com"&gt;Alan Citterman&lt;/A&gt;&lt;BR&gt;
&lt;BR&gt;
I had a project where I needed to extract data from a file and send&lt;BR&gt;
it to a customer. The file in question was from a database, and it&lt;BR&gt;
had been exported to a CSV text file.&lt;BR&gt;
&lt;BR&gt;
I would have tried to write my own regular expression to handle this,&lt;BR&gt;
but my overall knowledge of Perl isn't that good. However, after some&lt;BR&gt;
research, I found a reference to this module.&lt;BR&gt;
&lt;BR&gt;
&lt;CODE&gt;
#!/usr/bin/perl
use strict;
use Text::CSV;
&lt;/CODE&gt;
I knew that the text file had lines of data that I didn't need, and&lt;BR&gt;
that there was an easily recognizable pattern in those lines, so I could&lt;BR&gt;
use a regular expression to put those lines into a trash file.&lt;BR&gt;
&lt;BR&gt;
&lt;CODE&gt;
my $input="input.csv";
my $output="output.txt";
my $trash="trashfile";
my $csv=Text::CSV-&gt;new();     #Creates a new Text::CSV object

open(INFILE,$input) || die "Can't open file $input";
open(OUTFILE,"&gt;$output") || die "Can't open file $output";
open(TRASH,"&gt;$trash") || die "Can't open file $trash";
&lt;/CODE&gt;
&lt;BR&gt;
Now to start reading the data from the file, store it in the $_ variable&lt;BR&gt;
and print it to the trash file if its not good, or parse the variable, and&lt;BR&gt;
print it to the output file if it is.&lt;BR&gt;
&lt;BR&gt;
&lt;CODE&gt;
while (&lt;INFILE&gt;) {
if (/"X"/) {   #The trash data has these 3 characters in it
  print TRASH "$_\n";
}
else {  #Now to deal with the data I want to keep
  if($csv-&gt;parse($_)) {       #checks to see if data exists in $_ and parses it if it does
    my @fields=$csv-&gt;fields;  # puts the values from each field in an array
    my $elements=@fields;     #gets the number of elements in the array
    for ($x=0;$x&lt;$elements;$x++) {
      print OUTFILE "$fields[$x]\t";
    }
  }
}
}
&lt;/CODE&gt;
Now that the files have been written to, I can close them up, and remove&lt;BR&gt;
the trash file&lt;BR&gt;
&lt;BR&gt;
&lt;CODE&gt;
close INFILE;
close OUTFILE;
close TRASH;

unlink $trash;
&lt;/CODE&gt;

All in all, a very useful module.</field>
<field name="itemdescription">
Manipulation routines for comma-separated values</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
