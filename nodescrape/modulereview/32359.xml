<?xml version="1.0" encoding="windows-1252"?>
<node id="32359" title="CGI::Carp" created="2000-09-13 20:56:56" updated="2005-08-15 08:49:17">
<type id="31663">
modulereview</type>
<author id="8656">
redcloud</author>
<data>
<field name="doctext">
&lt;P&gt;
If you're trying to debug a CGI script, 
&lt;A HREF="http://search.cpan.org/search?mode=module&amp;query=CGI%3A%3ACarp"&gt;
CGI::Carp&lt;/A&gt; could be your best friend.
It makes getting error messages from CGI scripts with a browser practically
as easy as from other scripts at the command line.
&lt;P&gt;
My favorite feature is also the easiest to use.  Import the special symbol
&lt;TT&gt;fatalsToBrowser&lt;/TT&gt; like this:
&lt;CODE&gt;        use CGI::Carp qw(fatalsToBrowser);
&lt;/CODE&gt;
&lt;P&gt;

Now, if have a syntax error in your script that would abort execution
due to compilation errors, say, instead of getting a server error from
your HTTP server that isn't very informative, you get a message
telling you that there are compilation errors.  If I used &lt;TT&gt;perl
-c&lt;/TT&gt; more often, I probably wouldn't be so attached to this
feature.
&lt;P&gt;

On the downside, information about what line the error is at doesn't
show up in your browser.  It would be nice if it did.  However, you
&lt;EM&gt;can&lt;/EM&gt; retrieve that information from your HTTP server's error
log.

&lt;P&gt;

Once you get past syntax errors, anything that you want to 
&lt;TT&gt;die()&lt;/TT&gt; or
&lt;TT&gt;croak()&lt;/TT&gt; about will go to the browser, too, if you've imported &lt;TT&gt;fatalsToBrowser&lt;/TT&gt;.  If you want warnings to go to the browser as well, import the &lt;TT&gt;carpout()&lt;/TT&gt; function and use it to redirect STDERR.

&lt;P&gt;

You can also use &lt;TT&gt;carpout()&lt;/TT&gt; to redirect STDERR to your own log
file, instead of the server's error log.  Here's the example from
[CGI::Carp|&lt;TT&gt;perldoc CGI::Carp&lt;/TT&gt;]:
&lt;CODE&gt;        BEGIN {
          use CGI::Carp qw(carpout);
          open(LOG, "&gt;&gt;/usr/local/cgi-logs/mycgi-log") or
            die("Unable to open mycgi-log: $!\n");
          carpout(LOG);
        }
&lt;/CODE&gt;

&lt;P&gt;

These conveniences make CGI programming a lot easier, and they make
CGI::Carp one of my favorite modules.
&lt;/P&gt;
</field>
<field name="itemdescription">
CGI routines for reporting errors</field>
<field name="usercomment">
An excellent debugging tool for CGI scripts</field>
<field name="identifier">
</field>
</data>
</node>
