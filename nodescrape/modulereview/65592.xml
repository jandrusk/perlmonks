<?xml version="1.0" encoding="windows-1252"?>
<node id="65592" title="Coordinate" created="2001-03-19 23:14:32" updated="2005-08-15 13:34:07">
<type id="31663">
modulereview</type>
<author id="64428">
orbital</author>
<data>
<field name="doctext">
&lt;p&gt;I just recently started using the &lt;a href="http://search.cpan.org/search?dist=perl-GPS"&gt;GPS::Garmin&lt;/a&gt; module by Joao Pedro B Gonçalves , &lt;a href="mailto:joaop@iscsp.utl.pt"&gt;joaop@iscsp.utl.pt&lt;/a&gt; to dump my GPS data directly into my perl scripts. This module works great but unfortantly the Module gave me Lat. and Long. in degrees.minutes and I wanted it in UTM (&lt;a href="http://www.maptools.com/UsingUTM/index.html"&gt;Universal Transverse Mercator&lt;/a&gt;). &lt;p&gt;&lt;ul&gt;&lt;li&gt;UTM is the standard used by multiple organizations around the world to locate a specific point on earth. UTM is calculated by one central orgin on earth, everything thing from that point is represent in meters. The first set of numbers is refered to as the Easting (East-West postion) and the second number is refered to as the Northing (North-South position).&lt;p&gt;Advantages of having your data in UTM is that you are able to use USGS data in conjuction with your newly aquired data. You can obtain the data at &lt;a href="http://edc.usgs.gov/doc/edchome/ndcdb/ndcdb.html"&gt;EROS&lt;/a&gt; The DEM (Digital Elevation Models) data in my opinion the most useful, it allows you to grab a 3D snap shot of an area, in which you can then overlay your data on top of it.( here are the file specs for &lt;a href="http://mcmcweb.er.usgs.gov/sdts/standard.html"&gt;SDTS dem data&lt;/a&gt; Unfortantly there is no perl modules that will convert sdts information, but there are some great C libraries and programs already avaliable.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;&lt;h2&gt;Coordinate Module&lt;/h2&gt;&lt;/b&gt;&lt;hr&gt;&lt;p&gt;
This little gem by Curtis Mills is not on CPAN, however you can download it from his site at: &lt;a href="http://www.eskimo.com/~archer"&gt;http://www.eskimo.com/~archer&lt;/a&gt; or &lt;a href="ftp://ftp.eskimo.com/u/a/archer/aprs/xastir/"&gt;ftp://ftp.eskimo.com/u/a/archer/aprs/xastir/&lt;/a&gt;&lt;br&gt;Curtis has converted several C GNU libraries into pure perl code with this module. However be aware that this is still a work in progress and has some small errors:&lt;code&gt;
Please note that I didn't pay a lot of attention to
keeping the "double" notation in the form of higher
precision floating point routines.  This means that
the Perl5 code won't be as accurate as the original
C-code.  It doesn't matter for my purposes.  If
anyone converts to Math::BigFloat for higher precision,
please send me the changes.  As it is I did a
quick check and found a difference of only 1.4 meters
between my Perl results and the results from a web-based
datum-shift calculator on the 'net.  -- Curt.&lt;/code&gt;&lt;br&gt;
If you want to check the accuracy of the results generated by &lt;b&gt;Coordinate&lt;/b&gt; I suggest submiting your data to this &lt;a href="http://www.geod.nrcan.gc.ca/products/html-public/GSDapps/English/gsrug.html#GSRUGdemo"&gt;web form&lt;/a&gt;&lt;p&gt;

&lt;h3&gt;What does it exactly do?&lt;/h3&gt;&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Creating and manipulating Coordinate objects&lt;/li&gt;
&lt;li&gt;Translating coordinates between UTM and Latitude/Longitude&lt;/li&gt;
&lt;li&gt;Translating coordinates between ~231 different datums (Datums are used to "describe" the surface of Earth since its not a perfect Geometric shape, its Geodetic.&lt;/li&gt;
&lt;li&gt;Formatting coordinates into decimal degrees, degrees/minutes, and degrees/minutes/seconds.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;

Here is a chunk of sample code provided by Curtis:&lt;p&gt;
&lt;code&gt;
  use Coordinate;	

  my $position = Coordinate-&gt;new();


  $position-&gt;latitude(48.125);
  $position-&gt;longitude(-122.500);
  $position-&gt;datum("NAD27 CONUS MEAN:W of Mississippi/Except Louisiana/Minnesota/Missouri"); 	# Datum


  printf("Starting position(Lat, Long):  %s   %s\n",
	$position-&gt;latitude(),
	$position-&gt;longitude() );

  $position-&gt;degrees_minutes_seconds();		# Convert to DD MM SS format
  printf("Starting position(Lat, Long):  %s   %s\n",
	$position-&gt;formatted_latitude(),
	$position-&gt;formatted_longitude() );

  $position-&gt;lat_lon_to_utm();
  printf("Calculated UTM position(Easting, Northing, Zone):  %f   %f   %s\n",
	$position-&gt;easting(),
	$position-&gt;northing(),
	$position-&gt;zone() );
	
  $position-&gt;utm_to_lat_lon();
  printf("Calculated Lat, Long position(Lat, Long):  %f   %f\n",
	$position-&gt;latitude(),
	$position-&gt;longitude() );


  print "Changing from NAD27 to WGS84 datum...\n";
  $position = $position-&gt;datum_shift_to_wgs84();
  printf("Calculated Lat, Long position(Lat, Long):  %f   %f\n",
        $position-&gt;latitude(),
        $position-&gt;longitude() );

  $position-&gt;degrees_minutes_seconds();		# Convert to DD MM SS
  printf("Calculated Lat, Long position(Lat, Long):  %s   %s\n",
	$position-&gt;formatted_latitude(),
	$position-&gt;formatted_longitude() );

  print "Changing from WGS84 to NAD27 datum...\n";
  $position = $position-&gt;datum_shift_from_wgs84_to( "NAD27 CONUS MEAN:W of Mississippi/Except Louisiana/Minnesota/Missouri" );
  printf("Calculated Lat, Long position(Lat, Long):  %f   %f\n",
        $position-&gt;latitude(),
        $position-&gt;longitude() );

  print "\n0\n";
  my $temp = CoordinateFormat-&gt;new( "0" );
  printf("        decimal_degrees: %s\n",   $temp-&gt;decimal_degrees( ) );
  printf("        degrees_minutes: %s\n",   $temp-&gt;degrees_minutes( ) );
  printf("degrees_minutes_seconds: %s\n\n", $temp-&gt;degrees_minutes_seconds() );

  print "180\n";
  $temp-&gt;raw( "180" );
  printf("        decimal_degrees: %s\n",   $temp-&gt;decimal_degrees( "180") );
  printf("        degrees_minutes: %s\n",   $temp-&gt;degrees_minutes( "180") );
  printf("degrees_minutes_seconds: %s\n\n", $temp-&gt;degrees_minutes_seconds("180") );

  print "180 30\n";
  $temp-&gt;raw( "180 30" );
  printf("        decimal_degrees: %s\n",   $temp-&gt;decimal_degrees( "180 30") );
  printf("        degrees_minutes: %s\n",   $temp-&gt;degrees_minutes( "180 30") );
  printf("degrees_minutes_seconds: %s\n\n", $temp-&gt;degrees_minutes_seconds("180 30") );

  print "180.50\n";
  $temp-&gt;raw( "180.50" );
  printf("        decimal_degrees: %s\n",   $temp-&gt;decimal_degrees( "180.50") );
  printf("        degrees_minutes: %s\n",   $temp-&gt;degrees_minutes( "180.50") );
  printf("degrees_minutes_seconds: %s\n\n", $temp-&gt;degrees_minutes_seconds("180.50") );

  $temp-&gt;raw( "180 30.50" );
  print "180 30.50\n";
  printf("        decimal_degrees: %s\n",   $temp-&gt;decimal_degrees( "180 30.50") );
  printf("        degrees_minutes: %s\n",   $temp-&gt;degrees_minutes( "180 30.50") );
  printf("degrees_minutes_seconds: %s\n\n", $temp-&gt;degrees_minutes_seconds("180 30.50") );

  $temp-&gt;raw( "180 30 30" );
  print "180 30 30\n";
  printf("        decimal_degrees: %s\n",   $temp-&gt;decimal_degrees( "180 30 30") );
  printf("        degrees_minutes: %s\n",   $temp-&gt;degrees_minutes( "180 30 30") );
  printf("degrees_minutes_seconds: %s\n\n", $temp-&gt;degrees_minutes_seconds("180 30 30") );

  $temp-&gt;raw( "180 30 30.5" );
  print "180 30 30.5\n";
  printf("        decimal_degrees: %s\n", $temp-&gt;decimal_degrees("180 30 30.5") );
  printf("        degrees_minutes: %s\n", $temp-&gt;degrees_minutes("180 30 30.5") );
  printf("degrees_minutes_seconds: %s\n\n", $temp-&gt;degrees_minutes_seconds("180 30 30.5") );

  $temp-&gt;raw( "-180 30 30.5" );
  print "-180 30 30.5\n";
  printf("        decimal_degrees: %s\n", $temp-&gt;decimal_degrees("-180 30 30.5") );
  printf("        degrees_minutes: %s\n", $temp-&gt;degrees_minutes("-180 30 30.5") );
  printf("degrees_minutes_seconds: %s\n\n", $temp-&gt;degrees_minutes_seconds("-180 30 30.5") );&lt;/code&gt;
The output from this looks like following:&lt;p&gt;
&lt;code&gt;
Starting position(Lat, Long):  48.125   -122.5
Starting position(Lat, Long):  48 07 30.00000000   -122 30 0.00000000
Calculated UTM position(Easting, Northing, Zone):  537208.685551   5330095.589079   10U
Calculated Lat, Long position(Lat, Long):  48.124997   -122.500000
Changing from NAD27 to WGS84 datum...
Calculated Lat, Long position(Lat, Long):  48.124789   -122.501238
Calculated Lat, Long position(Lat, Long):  48 07 29.23995960   -122 30 4.45751911
Changing from WGS84 to NAD27 datum...
Calculated Lat, Long position(Lat, Long):  48.124997   -122.500000

0
        decimal_degrees: 0
        degrees_minutes: 00 0.00000000
degrees_minutes_seconds: 00 00 0.00000000

180
        decimal_degrees: 180
        degrees_minutes: 180 0.00000000
degrees_minutes_seconds: 180 00 0.00000000

180 30
        decimal_degrees: 180.50000000
        degrees_minutes: 180 30
degrees_minutes_seconds: 180 30 0.00000000

180.50
        decimal_degrees: 180.50
        degrees_minutes: 180 30.00000000
degrees_minutes_seconds: 180 30 0.00000000

180 30.50
        decimal_degrees: 180.50833333
        degrees_minutes: 180 30.50
degrees_minutes_seconds: 180 30 30.00000000

180 30 30
        decimal_degrees: 180.50833333
        degrees_minutes: 180 30.50000000
degrees_minutes_seconds: 180 30 30

180 30 30.5
        decimal_degrees: 180.50847222
        degrees_minutes: 180 30.50833333
degrees_minutes_seconds: 180 30 30.5

-180 30 30.5
        decimal_degrees: -180.50847222
        degrees_minutes: -180 30.50833333
degrees_minutes_seconds: -180 30 30.5&lt;/code&gt;
&lt;p&gt;
Curtis has also provide a few other methods that maybe useful,
&lt;code&gt;
EllipsoidTable-&gt;enumerate();
DatumTable-&gt;enumerate();
&lt;/code&gt;
Both of these methods display the data tables that the program is basing its calculations on.
</field>
<field name="itemdescription">
Creating and manipulating Coordinate objects</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
