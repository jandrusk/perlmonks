<?xml version="1.0" encoding="windows-1252"?>
<node id="451644" title="Class::DBI" created="2005-04-26 11:56:55" updated="2005-08-12 11:06:05">
<type id="31663">
modulereview</type>
<author id="203787">
dhoss</author>
<data>
<field name="doctext">
[cpan://Class::DBI] is quite a simple module really, mainly you inherit it's methods and go off about your business.  

&lt;br /&gt;

SQL is no longer a problem in the way of causing minor issues with your code, so you can retrieve, create, update or do any other database modifications necessary with the greatest of ease.

&lt;br /&gt;

The only requirements are to set up your primary index columns, and the columns you need to use for the &lt;code&gt;select&lt;/code&gt;s in a module that inherit's from [cpan://Class::DBI], and then you have total access to [cpan://Class::DBI]'s magic.
&lt;br /&gt;
(example of setup)
&lt;br /&gt;
&lt;readmore&gt;
&lt;code&gt;
## Main class
package My::DBI;
use base 'Class::DBI';

my $dsn      = "dbi:mysql:***";
my $user     = "****";
my $passwd   = "****";

__PACKAGE__-&gt;set_db('Main', $dsn, $user, $passwd);

## Second class
package My::Tables;

use base 'My::DBI';

__PACKAGE__-&gt;columns( Primary =&gt; qw[id] );
__PACKAGE__-&gt;columns( All =&gt;
			qw [ id       author 
			     title    date       
                 content  ip   ] );
				
__PACKAGE__-&gt;table('entries');
&lt;/code&gt;
&lt;/readmore&gt;  

&lt;br /&gt;

&lt;b&gt;Other useful methods:&lt;/b&gt;&lt;br /&gt;
&lt;code&gt;add_constructor&lt;/code&gt; 
&lt;br /&gt;
Allows you to construct an SQL query snippet and call it through your object.
&lt;br /&gt;
&lt;code&gt;
Music::CD-&gt;add_constructor(new_music =&gt; 'year &gt; ?');
	my @recent = Music::CD-&gt;new_music(2000);
&lt;/code&gt;
&lt;br /&gt;

&lt;code&gt;retrieve_from_sql&lt;/code&gt;
&lt;br /&gt;
Allows you to consruct your own SQL query like so:
&lt;br /&gt;
&lt;em&gt;(NOTE: You inlining the entire WHERE clause)&lt;/em&gt;
&lt;code&gt;
my @cds = Music::CD-&gt;retrieve_from_sql(qq{
		artist = 'Ozzy Osbourne' AND
		title like "%Crazy"      AND
		year &lt;= 1986
		ORDER BY year
		LIMIT 2,3
	});
&lt;/code&gt;

&lt;br /&gt;
[cpan://Class::DBI::AbstractSearch]
A search class provided by [cpan://Class::DBI] that allows you to write arbitrarily complex
searches using perl data structures, rather than SQL.
&lt;br /&gt;
&lt;code&gt;
my @music = Music::CD-&gt;search_where(
		artist =&gt; [ 'Ozzy', 'Kelly' ],
		status =&gt; { '!=', 'outdated' },
	);
&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
These are just a few of the features of [cpan://Class::DBI] that I have found quite useful.  Check the module out for yourself, it cut my development time in at &lt;em&gt;least&lt;/em&gt; half.


</field>
<field name="itemdescription">
A Simple Database Abstraction</field>
<field name="usercomment">
</field>
<field name="identifier">
</field>
</data>
</node>
