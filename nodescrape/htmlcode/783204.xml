<?xml version="1.0" encoding="windows-1252"?>
<node id="783204" title="getNodeTree" created="2009-07-25 14:50:36" updated="2009-07-25 14:50:36">
<type id="4">
htmlcode</type>
<author id="518801">
Co-Rion</author>
<data>
<field name="code">
=head2 getNodeTree

Accepts a node id or an array ref of node ids, a depth, threshold, and order by clause.

Typical usage is

    my $data = htmlcode('getNodeTree', '', $NODE-&gt;{node_id}, 0, $notedepth, $orderby);

Returns a node tree of hash references

The returned structure is an AoH. The hashes have the following
keys:

    id       - node_id of the current node
    children - AoH of the children of this node

The results will respect the "Show Reaped Nodes" setting of the current user.

=cut

my( $id, $depth, $threshold, $orderby )= @_;
$id= [ getId( $id )] unless ref $id eq 'ARRAY';

$orderby ||= "createtime";

return [] unless (@$id);
for( @$id ) {
    $_= getId($_); # all our node ids must be numbers
};
for( @$id ) {
    $_= 0+$_; # all our node ids must be numbers
};

my $nodereaper= $HTMLVARS{NodeReaperID};
my $exclude_reaper= 
       $VARS-&gt;{showreapednotes} 
       ? ''
       : " and (author_user &lt;&gt; $nodereaper)";

my $id_str= join ",",@$id;

# Now, find all children of @$id
my $csr= $DB-&gt;sqlSelectMany(
   "note_id, parent_node",
   "note left join node on note_id=node_id",
   "parent_node in ($id_str)",
   "order by parent_node, $orderby",
);
my $tree= $csr-&gt;fetchall_arrayref;

# and fetch their content
my $children;
if( $depth &lt; $threshold ) {
    $children= htmlcode('getNodeTree', '', [ map { $_-&gt;[0] } @$tree ], $depth +1, $threshold, $orderby );
};

# Now, distribute all children to their relevant @$id
my %parent_node = map { @$_ } @$tree;
for my $c ( @$children ) {
    $c-&gt;{parent_node} = $parent_node{ $c-&gt;{id} };
};

# Now fill the requested nodes with the data and their children
for my $requested_node ( @$id ) {
    $requested_node = { 
	id =&gt; $requested_node,
	children =&gt; [ grep { $_-&gt;{parent_node} == $requested_node } @$children ] 
    };
};

return $id
</field>
</data>
</node>
