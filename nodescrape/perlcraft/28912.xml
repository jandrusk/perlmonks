<?xml version="1.0" encoding="windows-1252"?>
<node id="28912" title="Find files older than x days and delete them" created="2000-08-21 20:42:15" updated="2005-08-05 03:31:26">
<type id="121">
perlcraft</type>
<author id="21786">
OzzyOsbourne</author>
<data>
<field name="doctext">
# Deletes all files older than the number if days input
# Written by Jonathan E. Dyer 4/18/00
# Server varibale is hard coded and named $dir1, b/c this script can be dangerous

# *********************************
# Call Modules
# *********************************

use File::Find;
use File::Copy;
use Getopt::Std;
getopts('d:h');

# *********************************
# Initialize variables
# *********************************

$server='server1';
$dir1='\\\\'."$server".'\\e$\\clients';
$out="c:/$server.txt";
$agedays=60; #defaults agedays to 60

# *********************************
# Process arguments ([h]elp,[d]ays)
# *********************************

if ($opt_h){
	die "\agecmd.pl -d[days to age]\n";
}

if ($opt_d){
	if ($opt_d gt 9){ #tests for strings
		die "Error: days option must be a number.  Use agecmd.pl -d[days to age]\n";
	}else{
	$agedays=$opt_d;
	}
}

# *********************************
# Do date calculations
# *********************************

@xtime=localtime(time);
$day=$xtime[3]+1;
$month=$xtime[4]+1;
$year=$xtime[5]+1900;
$hours=$xtime[2];
$mins=$xtime[1];
$secs=$xtime[0];
$logname='//mfa3e04/e$/'."ftp$month$day$year$hours$mins$secs".'.log';

$agesecs=60*60*24*$agedays;	#converts $agedays to seconds
$daysago=time-$agesecs;		#the time stamp of $agedays ago in seconds
$daysago2=localtime($daysago);	#the time stamp of $agedays ago in words - mainly for printing


# *********************************
# Find the files (no dir) on the server
# *********************************

print "finding files to be aged\.\.\.\n";
find(\&amp;wanted, $dir1);

sub wanted {
	$filesecs = (stat("$File::Find::dir/$_"))[9]; #GETS THE 9TH ELEMENT OF file STAT - THE MODIFIED TIME
	$filesecs2=localtime($filesecs);
	if ($filesecs&lt;$daysago &amp;&amp; -f){ #-f=regular files, eliminates DIR p.367 
		push (@files,"$File::Find::dir/$_");
		push (@files,"$filesecs2");
	}
	print'.';
}

# *********************************
# replace '/' with '\' in file names
# *********************************

foreach (@files){
	s/\//\\/g;
}

# *********************************
# Write to Log
# *********************************

%filehash=@files; #puts the array into a hash for easy printing.  Key=file, Value=date
open OUT, "&gt;$logname" or die "Cannot open $out for write :$!";
print OUT "FTP server aging log generated by PERL script\n";
print OUT "Script written by Jonathan E. Dyer on 4/18/00\n";
print OUT "Files deleted from \\\\$server on ".localtime(time)."\n";
print OUT "Files deleted before $daysago2\n";
print OUT "Files were aged $agedays days\n\n";
print OUT "File Listing:\n\n";
foreach $filename (sort keys %filehash){
	print OUT "$filename	$filehash{$filename}\n";
}
close OUT;
#!/usr/bin/perl -w

# *********************************
# Delete files
# *********************************

print "\nDeleting all files before $daysago2";
unlink %filehash;
print "\nScript complete.";
</field>
</data>
</node>
