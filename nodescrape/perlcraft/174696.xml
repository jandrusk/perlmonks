<?xml version="1.0" encoding="windows-1252"?>
<node id="174696" title="Catchall Soundex mail handler" created="2002-06-14 15:13:00" updated="2005-07-21 01:31:46">
<type id="121">
perlcraft</type>
<author id="5993">
Beatnik</author>
<data>
<field name="doctext">
#!/usr/bin/perl

#This code is designed to be used in mail handling on a catch all account
#It basically uses a list of Soundex checksums to match the actual recipient
#header.txt is the header part
#footer.txt is teh footer part
#soundex.txt is the list of soundex checksums

#This was a project for OS Class
#This is dirty enough :)
#Note: This app written for local names.
#For example: Jean-Pierre Van Den Bossche
#I translasted variable names from dutch, so if I made a typo... :)

use Mail::Header;
use Mail::Mailer;
use Text::Soundex;
use strict;
#Yihaaa

my $domain = 'foo.bar'; #Domain
my $type = 'sendmail';
#Mail::Mailer types:   sendmail, mail, smtp, qmail, test
my $mailprog = Mail::Mailer-&gt;new($type);

my $head = new Mail::Header \*STDIN;
my $subject = $head-&gt;get("subject");
my $from = $head-&gt;get("from");
my $to = $head-&gt;get("delivered-to") || $head-&gt;get("to");
chomp $subject,$from,$to;

my %headers = (
  'To' =&gt; $from,
  'From' =&gt; "Dolly\@$domain",
  #the original script I based this on was named Debby
  'Subject' =&gt; 'Reply to: '.$subject
);

$mailprog-&gt;open(\%headers);
my @email = qw();
my ($name) = $to =~ /^([\w\.]*)\@$domain$/;
my ($firstname,$lastname) = split(/\./,$name,2);
my ($sfirstname,$slastname) = soundex($firstname,$lastname);
open(SOUNDEX,"&lt;soundex.txt") || die "Oops: $!";
while(&lt;SOUNDEX&gt;)
{ chomp;
  my ($checksum,$email) = split(/\=\&gt;/,$_,2);
  my (@list) = split(/ /,$email);
  my ($sfname,$slname) = split(/\./,$checksum,2);
  if ($sfname eq $sfirstname &amp;&amp; $slname eq $slastname)
  { push(@email,@list); }

}
close(SOUNDEX);

open(HEADER,"&lt;header.txt") || die "Oops: $!";
open(FOOTER,"&lt;footer.txt") || die "Oops: $!";
my ($header,$footer);
{ local $/; $header = &lt;HEADER&gt;; $footer = &lt;FOOTER&gt;; }
#Magic
#To my professor anyway

my (@firstnames) = split(/\-/,$firstname);
for (@firstnames) { $_ = ucfirst $_ }
$firstname = join(" ",@firstnames);
my (@lastnames) = split(/\./,$lastname);
for (@lastnames) { $_ = ucfirst $_ }
$lastname = join(" ",@lastnames);

for my $wanted (@email)
{ print $mailprog $header;
  print $mailprog "For: $firstname $lastname I found the following e-mail addresses:\n\n";
  print $mailprog "$wanted\n";
  print $mailprog $footer;
}

$mailprog-&gt;close;

#The program to generate checksums
#!/usr/bin/perl

#use Text::Soundex;
#use strict;
#Yihaaa

#my %Soundex;

#open(NAMES,"&lt;names.txt") || die "Oops: $!";
#names.txt contains a list of names in the firstname:lastname format
#while(&lt;NAMES&gt;)
#{ chomp;
#  my ($firstname,$lastname) = split(/\:/,$_,2);
#  my ($sfirstname,$slastname) = ($firstname,$lastname);

#  $sfirstname =~ s/\s+//g; $slastname =~ s/\s+//g;
#  $sfirstname =~ s/\-+//g; $slastname =~ s/\-+//g;
#  $sfirstname =~ s/\.+//g; $slastname =~ s/\.+//g; 
#  my $key = join(".",soundex($sfirstname), #soundex($slastname));
#  if (exists $Soundex{$key})
#  { $Soundex{$key} .=" "; }
#  $Soundex{$key} = join(".",$firstname, $lastname);
#}
#close(NAMES);
#open(SOUNDEX,"&gt;soundex.txt") || die "Oops: $!";
#foreach ( sort keys %Soundex ) 
#{ print SOUNDEX $_,"=&gt;",$Soundex{$_},"\n" if $_ ne "." }
#close(SOUNDEX);
</field>
</data>
</node>
