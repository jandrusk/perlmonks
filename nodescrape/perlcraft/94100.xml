<?xml version="1.0" encoding="windows-1252"?>
<node id="94100" title="XML2HTML" created="2001-07-05 13:46:35" updated="2005-07-27 01:02:11">
<type id="121">
perlcraft</type>
<author id="90713">
holygrail</author>
<data>
<field name="doctext">
&lt;!-- 

XML2HTML

Author : HolyGrail
Version: 0.1

This TemplateToolkit template  takes the same inputformat as XML2PDF
(look there for the DTD...) and outputs HTML that looks just like the
PDFfile.

I know, it's not spectacular, but now we have a media-independent
DTD, with a conversiontool to HTML and to PDF :)

Use the following one-liner to process this HTML-Template
(and save this file as template.html)

perl -MTemplate -e'$t=Template-&gt;new({EVAL_PERL =&gt; 1});$t-&gt;process("template.html") ||die $t-&gt;error'

--&gt;
&lt;html&gt;
&lt;body&gt;
[% USE xpath = XML.XPath(file =&gt; "./filename.xml") %]
[% FOREACH section1 = xpath.findnodes('document/section1') %]
&lt;h1&gt;[% section1.getAttribute('title') %]&lt;/h1&gt;
[% FOREACH node = section1.findnodes('*') %]
[% IF node.getName() == 'section2' %]
&lt;h2&gt;[% node.getAttribute('title') %]&lt;/h2&gt;
[% FOREACH p = node.findnodes('p') %]
[% pvalue = p.string_value %]
&lt;p&gt;[% PERL %] &lt;!-- use Perl to convert the \n into &lt;br&gt; --&gt;
my $p = $stash-&gt;get('pvalue');
$p=~s/\n/&lt;br \/&gt;\n/gs;
print $p;
[% END %]&lt;/p&gt;
[% END %]
[% ELSE %]
[% pvalue = node.string_value %]
&lt;p&gt;[% PERL %] &lt;!-- use Perl to convert the \n into &lt;br&gt; --&gt;
my $p = $stash-&gt;get('pvalue');
$p=~s/\n/&lt;br \/&gt;\n/gs;
print $p;
[% END %]&lt;/p&gt;
[% END %]
[% END %]
[% END %]
&lt;/body&gt;
&lt;/html&gt;</field>
</data>
</node>
