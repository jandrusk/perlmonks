<?xml version="1.0" encoding="windows-1252"?>
<node id="162123" title="Inline::TT" created="2002-04-25 18:19:40" updated="2005-08-05 16:40:18">
<type id="121">
perlcraft</type>
<author id="88162">
miyagawa</author>
<data>
<field name="doctext">
Fun thing, or module for (by) nut.&lt;P&gt;

Inline::TT allows you to define your Perl code with Template Toolkit's BLOCK syntax. You can get the tarball &lt;A href="http://bulknews.net/lib/archives/"&gt;here&lt;/A&gt;.&lt;P&gt;
&lt;READMORE&gt;
&lt;CODE&gt;
package Inline::TT;

use strict;
use vars qw($VERSION);
$VERSION = 0.01;

use base qw(Inline);
use IO::File;
use Template::Parser;

sub croak { require Carp; Carp::croak(@_) }

#--------------------------------------------------
# Inline APIs
#--------------------------------------------------

sub register {
    return {
	language =&gt; 'TT',
	aliases  =&gt; [ qw(tt) ],
	type     =&gt; 'interpreted',
	suffix   =&gt; 'tt',
    };
}

sub validate { }



sub build {
    my $self = shift;
    my $code = $self-&gt;__compile($self-&gt;{API}-&gt;{code});
    my $path = "$self-&gt;{API}-&gt;{install_lib}/auto/$self-&gt;{API}-&gt;{modpname}";
    $self-&gt;mkpath($path) unless -d $path;

    my $obj = $self-&gt;{API}-&gt;{location};
    my $out = IO::File-&gt;new("&gt; $obj") or die "$obj: $!";
    $out-&gt;print($code);
    $out-&gt;close;
}


sub load {
    my $self = shift;
    my $obj  = $self-&gt;{API}-&gt;{location};
    my $in   = IO::File-&gt;new($obj) or die "$obj: $!";
    my $code = do { local $/; &lt;$in&gt; };
    $in-&gt;close;

    eval "package $self-&gt;{API}-&gt;{pkg};$code;";
    croak $@ if $@;
}

sub info { }

#--------------------------------------------------
# private methods
#--------------------------------------------------

sub __compile {
    my($self, $text) = @_;
    my $parser   = Template::Parser-&gt;new({ PRE_CHOMP =&gt; 1, POST_CHOMP =&gt; 1 });
    my $content  = $parser-&gt;parse($text) or croak $parser-&gt;error;
    my $document = $self-&gt;__document($content);

    my $subs;
    for my $block (keys %{$content-&gt;{DEFBLOCKS}}) {
	$subs .= &lt;&lt;BLOCK;
sub $block {
    my(\%args) = \@_;
     \$Context-&gt;include(\$Context-&gt;template('$block'), \\\%args);
}

BLOCK
    }

    return &lt;&lt;CODE;
#------------------------------------------------------------------------
# Compiled template generated by the Inline::TT version $VERSION
#------------------------------------------------------------------------

use Template::Context;
use Template::Document;

my \$Doc = $document
my \$Context = Template::Context-&gt;new;
\$Context-&gt;visit(\$Doc-&gt;{_DEFBLOCKS});

$subs
CODE
    ;
}

sub __document {
    my($self, $content) = @_;

    # just pasted from Template::Document::write_perl_file
    my ($block, $defblocks, $metadata) =
        @$content{ qw( BLOCK DEFBLOCKS METADATA ) };
    my $pkg = "'Template::Document'";

    $defblocks = join('',
                      map { "'$_' =&gt; $defblocks-&gt;{ $_ },\n" }
                      keys %$defblocks);

    $metadata = join('',
		     map {
			 my $x = $metadata-&gt;{ $_ };
			 $x =~ s/(['\\])/\\$1/g;
			 "'$_' =&gt; '$x',\n";
		     } keys %$metadata);

    return  &lt;&lt;EOF;
bless {
$metadata
_HOT       =&gt; 0,
_BLOCK     =&gt; $block,
_DEFBLOCKS =&gt; {
$defblocks
},
}, $pkg;
EOF
    ;
}

1;
__END__

=head1 NAME

Inline::TT - use TT BLOCK as your Perl sub

=head1 SYNOPSIS

  use Inline 'TT';

  print add(args =&gt; [ 0, 1 ]);                      # 1
  print rubyish(str =&gt; "Just another Perl Hacker"); # "Just/another/Ruby/hacker"

  __END__
  __TT__
  [% BLOCK add %]
  [% result = 0 %]
  [% FOREACH arg = args %]
    [% result = result + arg %]
  [% END %]
  [% result %]
  [% END %]

  [% BLOCK rubyish %]
  [% strings = str.split(' ')
     strings.2 = "Ruby"
  %]
  [% strings.join('/') %]
  [% END %]

=head1 DESCRIPTION

Template-Toolkit is not just a Templating Engine. It's a
B&lt;language&gt;. Yep, Inline::TT is a Inline plugin to aloow you to code
your Perl subs in TT.

=head1 AUTHOR

Tatsuhiko Miyagawa E&lt;lt&gt;miyagawa@bulknews.netE&lt;gt&gt;

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 SEE ALSO

L&lt;Template&gt;, L&lt;Inline&gt;

=cut
&lt;/CODE&gt;
&lt;PRE&gt;--
Tatsuhiko Miyagawa
&lt;A href="mailto:miyagawa@cpan.org"&gt;miyagawa@cpan.org&lt;/A&gt;&lt;/PRE&gt;</field>
</data>
</node>
