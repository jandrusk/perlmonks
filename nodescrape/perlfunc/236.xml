<?xml version="1.0" encoding="windows-1252"?>
<node id="236" title="perlfunc:do" created="1999-08-24 18:42:24" updated="2005-08-15 12:50:52">
<type id="119">
perlfunc</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
do - turn a 
&lt;FONT SIZE=-1&gt;BLOCK&lt;/FONT&gt; into a 
&lt;FONT SIZE=-1&gt;TERM&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
do 
&lt;FONT SIZE=-1&gt;BLOCK&lt;/FONT&gt;

&lt;P&gt;
do 
&lt;CODE&gt;SUBROUTINE(LIST)&lt;/CODE&gt;

&lt;P&gt;
do 
&lt;FONT SIZE=-1&gt;EXPR&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
Not really a function. Returns the value of the last command in the sequence of commands indicated by 
&lt;FONT SIZE=-1&gt;BLOCK.&lt;/FONT&gt; When modified by a loop modifier, executes the 
&lt;FONT SIZE=-1&gt;BLOCK&lt;/FONT&gt; once before testing the loop condition. (On other statements the loop modifiers test the conditional first.)

&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; deprecated form of subroutine call. See [perlman:perlsub|the perlsub manpage].

&lt;P&gt;
Uses the value of 
&lt;FONT SIZE=-1&gt;EXPR&lt;/FONT&gt; as a filename and executes the contents of the
file as a Perl script. Its primary use is to include subroutines from a
Perl subroutine library.

&lt;P&gt;
&lt;PRE&gt;    do 'stat.pl';
&lt;/PRE&gt;
&lt;P&gt;
is just like

&lt;P&gt;
&lt;PRE&gt;    scalar eval `cat stat.pl`;
&lt;/PRE&gt;
&lt;P&gt;
except that it's more efficient and concise, keeps track of the current
filename for error messages, and searches all the &lt;STRONG&gt;-I&lt;/STRONG&gt;
libraries if the file isn't in the current directory (see also the
&lt;CODE&gt;@INC&lt;/CODE&gt; array in [%linkNodeTitle "perlman:perlvar|Predefined Names", $NODE, "Predefined Names",{anchor=&gt;"Predefined_Names"};%]). It is also different in how code evaluated with &lt;CODE&gt;do FILENAME&lt;/CODE&gt; doesn't see lexicals in the enclosing scope like &lt;CODE&gt;eval STRING&lt;/CODE&gt; does. It's the same, however, in that it does reparse the file every time
you call it, so you probably don't want to do this inside a loop.

&lt;P&gt;
If [perlfunc:do|do] cannot read the file, it returns undef and sets &lt;CODE&gt;$!&lt;/CODE&gt; to the error. If [perlfunc:do|do] can read the file but cannot compile it, it returns undef and sets an error
message in &lt;CODE&gt;$@&lt;/CODE&gt;. If the file is successfully compiled, [perlfunc:do|do] returns the value of the last expression evaluated.

&lt;P&gt;
Note that inclusion of library modules is better done with the
[perlfunc:use|use()] and [perlfunc:require|require()] operators, which also do automatic error checking and raise an exception if
there's a problem.

&lt;P&gt;
You might like to use [perlfunc:do|do] to read in a program configuration file. Manual error checking can be done
this way:

&lt;P&gt;
&lt;PRE&gt;    # read in config files: system first, then user 
    for $file (&amp;quot;/share/prog/defaults.rc&amp;quot;,
               &amp;quot;$ENV{HOME}/.someprogrc&amp;quot;) {
        unless ($return = do $file) {
            warn &amp;quot;couldn't parse $file: $@&amp;quot; if $@;
            warn &amp;quot;couldn't do $file: $!&amp;quot;    unless defined $return;
            warn &amp;quot;couldn't run $file&amp;quot;       unless $return;
        }
    }
&lt;/PRE&gt;
&lt;HR&gt;
</field>
</data>
</node>
