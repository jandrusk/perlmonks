<?xml version="1.0" encoding="windows-1252"?>
<node id="355" title="perlfunc:waitpid" created="1999-08-24 18:43:36" updated="2005-08-15 07:42:08">
<type id="119">
perlfunc</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
waitpid - wait for a particular child process to die

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
waitpid 
&lt;FONT SIZE=-1&gt;PID,FLAGS&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
Waits for a particular child process to terminate and returns the pid of
the deceased process, or &lt;CODE&gt;-1&lt;/CODE&gt; if there is no such child process. The status is returned in &lt;CODE&gt;$?&lt;/CODE&gt;. If you say

&lt;P&gt;
&lt;PRE&gt;    use POSIX &amp;quot;:sys_wait_h&amp;quot;;
    #...
    waitpid(-1,&amp;amp;WNOHANG);
&lt;/PRE&gt;
&lt;P&gt;
then you can do a non-blocking wait for any process. Non-blocking wait is available on machines supporting either the 
&lt;CODE&gt;waitpid(2)&lt;/CODE&gt; or 
&lt;CODE&gt;wait4(2)&lt;/CODE&gt; system calls. However, waiting for a particular pid with 
&lt;FONT SIZE=-1&gt;FLAGS&lt;/FONT&gt; of
 &lt;CODE&gt;0&lt;/CODE&gt; is implemented everywhere. (Perl emulates the system call by remembering
the status values of processes that have exited but have not been harvested
by the Perl script yet.)

&lt;P&gt;
See [perlman:perlipc|the perlipc manpage] for other examples.

&lt;HR&gt;
</field>
</data>
</node>
