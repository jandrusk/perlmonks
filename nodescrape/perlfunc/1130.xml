<?xml version="1.0" encoding="windows-1252"?>
<node id="1130" title="perlman:lib:Thread" created="1999-12-22 19:49:29" updated="2005-08-12 02:33:37">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
Thread - multithreading

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;    use Thread;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    my $t = new Thread \&amp;amp;start_sub, @start_args;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $t-&amp;gt;join;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    my $tid = Thread-&amp;gt;self-&amp;gt;tid; 
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    my $tlist = Thread-&amp;gt;list;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    lo</field>
<field name="description">

&lt;P&gt;
The &lt;CODE&gt;Thread&lt;/CODE&gt; module provides multithreading support for perl.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="FUNCTIONS"&gt;FUNCTIONS&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_new"&gt;new \&amp;amp;start_sub&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;new \&amp;amp;start_sub, LIST&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
&lt;CODE&gt;new&lt;/CODE&gt; starts a new thread of execution in the referenced subroutine. The optional
list is passed as parameters to the subroutine. Execution continues in both
the subroutine and the code after the &lt;CODE&gt;new&lt;/CODE&gt; call.

&lt;P&gt;
&lt;CODE&gt;new Thread&lt;/CODE&gt; returns a thread object representing the newly created thread.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_lock"&gt;lock VARIABLE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
&lt;CODE&gt;lock&lt;/CODE&gt; places a lock on a variable until the lock goes out of scope. If the
variable is locked by another thread, the &lt;CODE&gt;lock&lt;/CODE&gt; call will block until it's available. &lt;CODE&gt;lock&lt;/CODE&gt; is recursive, so multiple calls to &lt;CODE&gt;lock&lt;/CODE&gt; are safe--the variable will remain locked until the outermost lock on the
variable goes out of scope.

&lt;P&gt;
Locks on variables only affect &lt;CODE&gt;lock&lt;/CODE&gt; calls--they do &lt;EM&gt;not&lt;/EM&gt; affect normal access to a variable. (Locks on subs are different, and
covered in a bit) If you really, &lt;EM&gt;really&lt;/EM&gt; want locks to block access, then go ahead and tie them to something and
manage this yourself. This is done on purpose. While managing access to
variables is a good thing, perl doesn't force you out of its living room...

&lt;P&gt;
If a container object, such as a hash or array, is locked, all the elements
of that container are not locked. For example, if a thread does a &lt;CODE&gt;lock
@a&lt;/CODE&gt;, any other thread doing a &lt;CODE&gt;lock($a&amp;#091;12&amp;#093;)&lt;/CODE&gt; won't block.

&lt;P&gt;
You may also &lt;CODE&gt;lock&lt;/CODE&gt; a sub, using &lt;CODE&gt;lock &amp;amp;sub&lt;/CODE&gt;. Any calls to that sub from another thread will block until the lock is
released. This behaviour is not equvalent to &lt;CODE&gt;use attrs qw(locked)&lt;/CODE&gt; in the sub. &lt;CODE&gt;use attrs qw(locked)&lt;/CODE&gt;
serializes access to a subroutine, but allows different threads
non-simultaneous access. &lt;CODE&gt;lock &amp;amp;sub&lt;/CODE&gt;, on the other hand, will not allow
&lt;EM&gt;any&lt;/EM&gt; other thread access for the duration of the lock.

&lt;P&gt;
Finally, &lt;CODE&gt;lock&lt;/CODE&gt; will traverse up references exactly &lt;EM&gt;one&lt;/EM&gt; level.
&lt;CODE&gt;lock(\$a)&lt;/CODE&gt; is equivalent to &lt;CODE&gt;lock($a)&lt;/CODE&gt;, while &lt;CODE&gt;lock(\\$a)&lt;/CODE&gt; is not.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_async"&gt;async BLOCK;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
&lt;CODE&gt;async&lt;/CODE&gt; creates a thread to execute the block immediately following it. This block
is treated as an anonymous sub, and so must have a semi-colon after the
closing brace. Like &lt;CODE&gt;new Thread&lt;/CODE&gt;, &lt;CODE&gt;async&lt;/CODE&gt; returns a thread object.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_Thread"&gt;Thread-&amp;gt;self&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The &lt;CODE&gt;Thread-&amp;gt;self&lt;/CODE&gt; function returns a thread object that represents the thread making the &lt;CODE&gt;Thread-&amp;gt;self&lt;/CODE&gt; call.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_Thread"&gt;Thread-&amp;gt;list&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
&lt;CODE&gt;Thread-&amp;gt;list&lt;/CODE&gt; returns a list of thread objects for all running and finished but un-[perlfunc:join|join]ed threads.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cond_wait"&gt;cond_wait VARIABLE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The &lt;CODE&gt;cond_wait&lt;/CODE&gt; function takes a &lt;STRONG&gt;locked&lt;/STRONG&gt; variable as a parameter, unlocks the variable, and blocks until another
thread does a &lt;CODE&gt;cond_signal&lt;/CODE&gt;
or &lt;CODE&gt;cond_broadcast&lt;/CODE&gt; for that same locked variable. The variable that
&lt;CODE&gt;cond_wait&lt;/CODE&gt; blocked on is relocked after the &lt;CODE&gt;cond_wait&lt;/CODE&gt; is satisfied. If there are multiple threads &lt;CODE&gt;cond_wait&lt;/CODE&gt;ing on the same variable, all but one will reblock waiting to reaquire the
lock on the variable. (So if you're only using &lt;CODE&gt;cond_wait&lt;/CODE&gt; for synchronization, give up the lock as soon as possible)

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cond_signal"&gt;cond_signal VARIABLE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The &lt;CODE&gt;cond_signal&lt;/CODE&gt; function takes a locked variable as a parameter and unblocks one thread
that's &lt;CODE&gt;cond_wait&lt;/CODE&gt;ing on that variable. If more than one thread is blocked in a &lt;CODE&gt;cond_wait&lt;/CODE&gt; on that variable, only one (and which one is indeterminate) will be
unblocked.

&lt;P&gt;
If there are no threads blocked in a &lt;CODE&gt;cond_wait&lt;/CODE&gt; on the variable, the signal is discarded.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cond_broadcast"&gt;cond_broadcast VARIABLE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The &lt;CODE&gt;cond_broadcast&lt;/CODE&gt; function works similarly to &lt;CODE&gt;cond_wait&lt;/CODE&gt;.
&lt;CODE&gt;cond_broadcast&lt;/CODE&gt;, though, will unblock &lt;STRONG&gt;all&lt;/STRONG&gt; the threads that are blocked in a &lt;CODE&gt;cond_wait&lt;/CODE&gt; on the locked variable, rather than only one.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="METHODS"&gt;METHODS&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_join"&gt;join&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
[perlfunc:join|join] waits for a thread to end and returns any values the thread exited with. [perlfunc:join|join] will block until the thread has ended, though it won't block if the thread
has already terminated.

&lt;P&gt;
If the thread being [perlfunc:join|join]ed [perlfunc:die|die]d, the error it died with will be returned at this time. If you don't want
the thread performing the [perlfunc:join|join]
to die as well, you should either wrap the [perlfunc:join|join] in an [perlfunc:eval|eval] or use the
[perlfunc:eval|eval] thread method instead of [perlfunc:join|join].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_eval"&gt;eval&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The [perlfunc:eval|eval] method wraps an [perlfunc:eval|eval] around a [perlfunc:join|join], and so waits for a thread to exit, passing along any values the thread
might have returned. Errors, of course, get placed into &lt;CODE&gt;$@&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_tid"&gt;tid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The &lt;CODE&gt;tid&lt;/CODE&gt; method returns the tid of a thread. The tid is a monotonically increasing
integer assigned when a thread is created. The main thread of a program
will have a tid of zero, while subsequent threads will have tids assigned
starting with one.

&lt;H1&gt;&lt;A NAME="LIMITATIONS"&gt;LIMITATIONS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The sequence number used to assign tids is a simple integer, and no
checking is done to make sure the tid isn't currently in use. If a program
creates more than 2^32 - 1 threads in a single run, threads may be assigned
duplicate tids. This limitation may be lifted in a future version of Perl.

&lt;H1&gt;&lt;A NAME="SEE_ALSO"&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
[perlman:lib:attrs|attrs], [perlman:Thread::Queue|Thread::Queue], [perlman:Thread::Semaphore|Thread::Semaphore], [perlman:Thread::Specific|Thread::Specific].

&lt;/DL&gt;
&lt;HR&gt;
</field>
</data>
</node>
