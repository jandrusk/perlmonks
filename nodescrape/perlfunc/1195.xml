<?xml version="1.0" encoding="windows-1252"?>
<node id="1195" title="perlman:ExtUtils::Mkbootstrap" created="1999-12-22 19:51:44" updated="2005-08-10 16:36:10">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
ExtUtils::Mkbootstrap - make a bootstrap file for use by DynaLoader

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;CODE&gt;mkbootstrap&lt;/CODE&gt;

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
Mkbootstrap typically gets called from an extension Makefile.

&lt;P&gt;
There is no &lt;CODE&gt;*.bs&lt;/CODE&gt; file supplied with the extension. Instead a
&lt;CODE&gt;*_BS&lt;/CODE&gt; file which has code for the special cases, like posix for berkeley db on
the NeXT.

&lt;P&gt;
This file will get parsed, and produce a maybe empty
&lt;CODE&gt;@DynaLoader::dl_resolve_using&lt;/CODE&gt; array for the current architecture. That will be extended by 
&lt;FONT SIZE=-1&gt;$BSLOADLIBS,&lt;/FONT&gt; which was computed by
ExtUtils::Liblist::ext(). If this array still is empty, we do nothing, else
we write a .bs file with an &lt;CODE&gt;@DynaLoader::dl_resolve_using&lt;/CODE&gt;
array.

&lt;P&gt;
The &lt;CODE&gt;*_BS&lt;/CODE&gt; file can put some code into the generated &lt;CODE&gt;*.bs&lt;/CODE&gt; file by placing it in &lt;CODE&gt;$bscode&lt;/CODE&gt;. This is a handy 'escape' mechanism that may prove useful in complex
situations.

&lt;P&gt;
If @DynaLoader::dl_resolve_using contains &lt;CODE&gt;-L*&lt;/CODE&gt; or &lt;CODE&gt;-l*&lt;/CODE&gt; entries then Mkbootstrap will automatically add a 
&lt;CODE&gt;dl_findfile()&lt;/CODE&gt; call to
the generated &lt;CODE&gt;*.bs&lt;/CODE&gt; file.

&lt;HR&gt;
</field>
</data>
</node>
