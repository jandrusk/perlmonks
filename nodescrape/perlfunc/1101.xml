<?xml version="1.0" encoding="windows-1252"?>
<node id="1101" title="perlman:lib:Config" created="1999-12-22 19:49:25" updated="2005-08-14 01:19:06">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">
&lt;P&gt;
Config - access Perl configuration information

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">
&lt;P&gt;
&lt;PRE&gt;    use Config;
    if ($Config{'cc'} =~ /gcc/) {
        print &amp;quot;built by gcc\n&amp;quot;;
    } 
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    use Config qw(myconfig config_sh config_vars);
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    print myconfig();
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    print con</field>
<field name="description">
&lt;P&gt;
The Config module contains all the information that was available to the &lt;CODE&gt;Configure&lt;/CODE&gt; program at Perl build time (over 900 values).

&lt;P&gt;
Shell variables from the &lt;EM&gt;config.sh&lt;/EM&gt; file (written by Configure) are stored in the readonly-variable &lt;CODE&gt;%Config&lt;/CODE&gt;, indexed by their names.

&lt;P&gt;
Values stored in config.sh as 'undef' are returned as undefined values. The
perl [perlfunc:exists|exists] function can be used to check if a named variable exists.

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_myconfig"&gt;myconfig()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a textual summary of the major perl configuration values. See also &lt;CODE&gt;-V&lt;/CODE&gt; in [perlman:perlrun|perlrun].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_config_sh"&gt;config_sh()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the entire perl configuration information in the form of the
original config.sh shell variable assignment script.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_config_vars"&gt;config_vars(@names)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Prints to 
&lt;FONT SIZE=-1&gt;STDOUT&lt;/FONT&gt; the values of the named configuration variable.
Each is printed on a separate line in the form:

&lt;P&gt;
&lt;PRE&gt;  name='value';
&lt;/PRE&gt;
&lt;P&gt;
Names which are unknown are output as &lt;CODE&gt;name='UNKNOWN';&lt;/CODE&gt;. See also &lt;CODE&gt;-V:name&lt;/CODE&gt; in [perlman:perlrun|perlrun].

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="EXAMPLE"&gt;EXAMPLE&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Here's a more sophisticated example of using %Config:

&lt;P&gt;
&lt;PRE&gt;    use Config;
    use strict;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    my %sig_num;
    my @sig_name;
    unless($Config{sig_name} &amp;amp;&amp;amp; $Config{sig_num}) {
        die &amp;quot;No sigs?&amp;quot;;
    } else {
        my @names = split ' ', $Config{sig_name};
        @sig_num{@names} = split ' ', $Config{sig_num};
        foreach (@names) {
            $sig_name&amp;#091;$sig_num{$_}&amp;#093; ||= $_;
        }   
    }
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    print &amp;quot;signal #17 = $sig_name&amp;#091;17&amp;#093;\n&amp;quot;;
    if ($sig_num{ALRM}) { 
        print &amp;quot;SIGALRM is $sig_num{ALRM}\n&amp;quot;;
    }   
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="WARNING"&gt;WARNING&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Because this information is not stored within the perl executable itself it
is possible (but unlikely) that the information does not relate to the
actual perl binary which is being used to access it.

&lt;P&gt;
The Config module is installed into the architecture and version specific
library directory ($Config{installarchlib}) and it checks the perl version
number when loaded.

&lt;P&gt;
The values stored in config.sh may be either single-quoted or
double-quoted. Double-quoted strings are handy for those cases where you
need to include escape sequences in the strings. To avoid runtime variable
interpolation, any &lt;CODE&gt;$&lt;/CODE&gt; and &lt;CODE&gt;@&lt;/CODE&gt; characters are replaced by &lt;CODE&gt;\$&lt;/CODE&gt; and
&lt;CODE&gt;\@&lt;/CODE&gt;, respectively. This isn't foolproof, of course, so don't embed &lt;CODE&gt;\$&lt;/CODE&gt;
or &lt;CODE&gt;\@&lt;/CODE&gt; in double-quoted strings unless you're willing to deal with the
consequences. (The slashes will end up escaped and the &lt;CODE&gt;$&lt;/CODE&gt; or &lt;CODE&gt;@&lt;/CODE&gt; will trigger variable interpolation)

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="GLOSSARY"&gt;GLOSSARY&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Most &lt;CODE&gt;Config&lt;/CODE&gt; variables are determined by the &lt;CODE&gt;Configure&lt;/CODE&gt; script on platforms supported by it (which is most 
&lt;FONT SIZE=-1&gt;UNIX&lt;/FONT&gt; platforms). Some platforms have custom-made &lt;CODE&gt;Config&lt;/CODE&gt; variables, and may thus not have some of the variables described below, or
may have extraneous variables specific to that particular port. See the
port specific documentation in such cases.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="M"&gt;M&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_Mcc"&gt;Mcc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the Mcc program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;Mcc&lt;/CODE&gt; and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="_"&gt;_&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item__a"&gt;_a&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines the extension used for ordinary libraries. For unix,
it is &lt;EM&gt;.a&lt;/EM&gt;. The &lt;EM&gt;.&lt;/EM&gt; is included. Other possible values include &lt;EM&gt;.lib&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item__exe"&gt;_exe&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines the extension used for executable files. For unix it
is empty. Other possible values include &lt;EM&gt;.exe&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item__o"&gt;_o&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines the extension used for object files. For unix, it is &lt;EM&gt;.o&lt;/EM&gt;. The &lt;EM&gt;.&lt;/EM&gt; is included. Other possible values include &lt;EM&gt;.obj&lt;/EM&gt;.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="a"&gt;a&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_afs"&gt;afs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;afs.U&lt;/EM&gt;:

&lt;P&gt;
This variable is set to &lt;CODE&gt;true&lt;/CODE&gt; if &lt;CODE&gt;AFS&lt;/CODE&gt; (Andrew File System) is used on the system, &lt;CODE&gt;false&lt;/CODE&gt; otherwise. It is possible to override this with a hint value or command
line option, but you'd better know what you are doing.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_alignbytes"&gt;alignbytes&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;alignbytes.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the number of bytes required to align a double. Usual
values are 2, 4 and 8.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ansi2knr"&gt;ansi2knr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ansi2knr.U&lt;/EM&gt;:

&lt;P&gt;
This variable is set if the user needs to run ansi2knr. Currently, this is
not supported, so we just abort.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_aphostname"&gt;aphostname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gethname.U&lt;/EM&gt;:

&lt;P&gt;
Thie variable contains the command which can be used to compute the host
name. The command is fully qualified by its absolute path, to make it safe
when used by a process with super-user privileges.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_apiversion"&gt;apiversion&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;patchlevel.U&lt;/EM&gt;:

&lt;P&gt;
This is a number which identifies the lowest version of perl to have an &lt;CODE&gt;API&lt;/CODE&gt; (for [perlman:perlguts|perlguts] extensions) compatible with the present version. For example, for 5.005_01,
the apiversion should be 5.005, since 5.005_01 should be binary compatible
with 5.005. This should probably be incremented manually somehow, perhaps
from &lt;EM&gt;patchlevel.h&lt;/EM&gt;. For now, we'll guess maintenance subversions will retain binary
compatibility.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ar"&gt;ar&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the ar program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;ar&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_archlib"&gt;archlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;archlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the name of the directory in which the user wants to
put architecture-dependent public library files for $package. It is most
often a local directory such as &lt;EM&gt;/usr/local/lib&lt;/EM&gt;. Programs using this variable must be prepared to deal with filename
expansion.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_archlibexp"&gt;archlibexp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;archlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable is the same as the archlib variable, but is filename expanded
at configuration time, for convenient use.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_archname"&gt;archname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;archname.U&lt;/EM&gt;:

&lt;P&gt;
This variable is a short name to characterize the current architecture. It
is used mainly to construct the default archlib.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_archobjs"&gt;archobjs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines any additional objects that must be linked in with
the program on this architecture. On unix, it is usually empty. It is
typically used to include emulations of unix calls or other facilities. For
perl on &lt;EM&gt;OS/2&lt;/EM&gt;, for example, this would include &lt;EM&gt;os2/os2.obj&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_awk"&gt;awk&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the awk program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;awk&lt;/CODE&gt; and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="b"&gt;b&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_baserev"&gt;baserev&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;baserev.U&lt;/EM&gt;:

&lt;P&gt;
The base revision level of this package, from the &lt;EM&gt;.package&lt;/EM&gt; file.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_bash"&gt;bash&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_bin"&gt;bin&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;bin.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the name of the directory in which the user wants to
put publicly executable images for the package in question. It is most
often a local directory such as &lt;EM&gt;/usr/local/bin&lt;/EM&gt;. Programs using this variable must be prepared to deal with &lt;EM&gt;~name&lt;/EM&gt; substitution.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_binexp"&gt;binexp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;bin.U&lt;/EM&gt;:

&lt;P&gt;
This is the same as the bin variable, but is filename expanded at
configuration time, for use in your makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_bison"&gt;bison&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_byacc"&gt;byacc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the byacc program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;byacc&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_byteorder"&gt;byteorder&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;byteorder.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the byte order. In the following, larger digits
indicate more significance. The variable byteorder is either 4321 on a
big-endian machine, or 1234 on a little-endian, or 87654321 on a Cray ...
or 3412 with weird order !

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="c"&gt;c&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_c"&gt;c&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;n.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the \c string if that is what causes the echo
command to suppress newline. Otherwise it is null. Correct usage is

&lt;P&gt;
&lt;PRE&gt;        $echo $n &amp;quot;prompt for a question: $c&amp;quot;.
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_castflags"&gt;castflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_castneg.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a flag that precise difficulties the compiler has
casting odd floating values to unsigned long:

&lt;P&gt;
&lt;PRE&gt;        0 = ok
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        1 = couldn't cast &amp;lt; 0
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        2 = couldn't cast &amp;gt;= 0x80000000
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        4 = couldn't cast in argument expression list
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cat"&gt;cat&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the cat program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;cat&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cc"&gt;cc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cc.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the name of a command to execute a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler which can resolve multiple global
references that happen to have the same name. Usual values are &lt;CODE&gt;cc&lt;/CODE&gt;, &lt;CODE&gt;Mcc&lt;/CODE&gt;, &lt;CODE&gt;cc -M&lt;/CODE&gt;, and &lt;CODE&gt;gcc&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cccdlflags"&gt;cccdlflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;dlsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains any special flags that might need to be passed with &lt;CODE&gt;cc -c&lt;/CODE&gt; to compile modules to be used to create a shared library that will be used
for dynamic loading. For hpux, this should be +z. It is up to the makefile
to use it.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ccdlflags"&gt;ccdlflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;dlsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains any special flags that might need to be passed to cc
to link with a shared library for dynamic loading. It is up to the makefile
to use it. For sunos 4.1, it should be empty.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ccflags"&gt;ccflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ccflags.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains any additional 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler flags desired by the user. It is up to the
Makefile to use this.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cf_by"&gt;cf_by&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cf_who.U&lt;/EM&gt;:

&lt;P&gt;
Login name of the person who ran the Configure script and answered the
questions. This is used to tag both &lt;EM&gt;config.sh&lt;/EM&gt; and &lt;EM&gt;config_h.SH&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cf_email"&gt;cf_email&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cf_email.U&lt;/EM&gt;:

&lt;P&gt;
Electronic mail address of the person who ran Configure. This can be used
by units that require the user's e-mail, like &lt;EM&gt;MailList.U&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cf_time"&gt;cf_time&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cf_who.U&lt;/EM&gt;:

&lt;P&gt;
Holds the output of the &lt;CODE&gt;date&lt;/CODE&gt; command when the configuration file was produced. This is used to tag both &lt;EM&gt;config.sh&lt;/EM&gt; and &lt;EM&gt;config_h.SH&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_chgrp"&gt;chgrp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_chmod"&gt;chmod&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_chown"&gt;chown&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_clocktype"&gt;clocktype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_times.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the type returned by 
&lt;CODE&gt;times().&lt;/CODE&gt; It can be long, or
clock_t on &lt;CODE&gt;BSD&lt;/CODE&gt; sites (in which case &amp;lt;sys/types.h&amp;gt; should be included).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_comm"&gt;comm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the comm program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;comm&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_compress"&gt;compress&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_contains"&gt;contains&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;contains.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the command to do a grep with a proper return status.
On most sane systems it is simply [perlfunc:grep|grep]. On insane systems it is a grep followed by a cat followed by a test. This
variable is primarily for the use of other Configure units.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cp"&gt;cp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the cp program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;cp&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cpio"&gt;cpio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cpp"&gt;cpp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the cpp program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;cpp&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cpp_stuff"&gt;cpp_stuff&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cpp_stuff.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains an identification of the catenation mechanism used by the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; preprocessor.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cppflags"&gt;cppflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ccflags.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the flags that will be passed to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; pre- processor. It is up to the Makefile to use it.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cpplast"&gt;cpplast&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cppstdin.U&lt;/EM&gt;:

&lt;P&gt;
This variable has the same functionality as cppminus, only it applies to
cpprun and not cppstdin.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cppminus"&gt;cppminus&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cppstdin.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the second part of the string which will invoke the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; preprocessor on the standard input and produce to
standard output. This variable will have the value &lt;CODE&gt;-&lt;/CODE&gt; if cppstdin needs a minus to specify standard input, otherwise the value is
``''.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cpprun"&gt;cpprun&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cppstdin.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the command which will invoke a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; preprocessor on standard input and put the output to stdout. It is guaranteed not to be a wrapper and may be a null string if no preprocessor can be made directly available. This preprocessor might be different from the one used by the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler. Don't forget to append cpplast after the preprocessor options.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cppstdin"&gt;cppstdin&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cppstdin.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the command which will invoke the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; preprocessor on standard input and put the output to
stdout. It is primarily used by other Configure units that ask about
preprocessor symbols.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_cryptlib"&gt;cryptlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_crypt.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds -lcrypt or the path to a &lt;EM&gt;libcrypt.a&lt;/EM&gt; archive if the 
&lt;CODE&gt;crypt()&lt;/CODE&gt; function is not defined in the standard 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; library. It is up to the Makefile to use this.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_csh"&gt;csh&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the csh program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;csh&lt;/CODE&gt; and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="d"&gt;d&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_Gconvert"&gt;d_Gconvert&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gconvert.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds what Gconvert is defined as to convert floating point
numbers into strings. It could be &lt;CODE&gt;gconvert&lt;/CODE&gt;
or a more &lt;CODE&gt;complex&lt;/CODE&gt; macro emulating gconvert with 
&lt;CODE&gt;gcvt()&lt;/CODE&gt; or sprintf.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_access"&gt;d_access&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_access.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_ACCESS&lt;/CODE&gt; if the 
&lt;CODE&gt;access()&lt;/CODE&gt; system call is
available to check for access permissions using real IDs.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_alarm"&gt;d_alarm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_alarm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_ALARM&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;alarm()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_archlib"&gt;d_archlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;archlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;ARCHLIB&lt;/CODE&gt; to hold the pathname of architecture-dependent library files for $package.
If &lt;CODE&gt;$archlib&lt;/CODE&gt; is the same as $privlib, then this is set to
undef.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_attribut"&gt;d_attribut&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_attribut.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HASATTRIBUTE&lt;/CODE&gt;, which indicates the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler can check for function attributes, such as
printf formats.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_bcmp"&gt;d_bcmp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_bcmp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_BCMP&lt;/CODE&gt; symbol if the 
&lt;CODE&gt;bcmp()&lt;/CODE&gt; routine is available to
compare strings.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_bcopy"&gt;d_bcopy&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_bcopy.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_BCOPY&lt;/CODE&gt; symbol if the 
&lt;CODE&gt;bcopy()&lt;/CODE&gt; routine is available
to copy strings.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_bsd"&gt;d_bsd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Guess.U&lt;/EM&gt;:

&lt;P&gt;
This symbol conditionally defines the symbol &lt;CODE&gt;BSD&lt;/CODE&gt; when running on a
&lt;CODE&gt;BSD&lt;/CODE&gt; system.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_bsdgetpgrp"&gt;d_bsdgetpgrp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getpgrp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;USE_BSD_GETPGRP&lt;/CODE&gt; if getpgrp needs one arguments whereas &lt;CODE&gt;USG&lt;/CODE&gt; one needs none.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_bsdsetpgrp"&gt;d_bsdsetpgrp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setpgrp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;USE_BSD_SETPGRP&lt;/CODE&gt; if setpgrp needs two arguments whereas &lt;CODE&gt;USG&lt;/CODE&gt; one needs none. See also d_setpgid for a &lt;CODE&gt;POSIX&lt;/CODE&gt; interface.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_bzero"&gt;d_bzero&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_bzero.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_BZERO&lt;/CODE&gt; symbol if the 
&lt;CODE&gt;bzero()&lt;/CODE&gt; routine is available
to set memory to 0.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_casti32"&gt;d_casti32&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_casti32.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines 
&lt;FONT SIZE=-1&gt;CASTI32,&lt;/FONT&gt; which indicates whether the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler can cast large floats to 32-bit ints.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_castneg"&gt;d_castneg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_castneg.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;CASTNEG&lt;/CODE&gt;, which indicates wether the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler can cast negative float to unsigned.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_charvspr"&gt;d_charvspr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_vprintf.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;CHARVSPRINTF&lt;/CODE&gt; if this system has vsprintf returning type (char*). The trend seems to be to declare it as ``int 
&lt;CODE&gt;vsprintf()''.&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_chown"&gt;d_chown&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_chown.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_CHOWN&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;chown()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_chroot"&gt;d_chroot&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_chroot.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_CHROOT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;chroot()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_chsize"&gt;d_chsize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_chsize.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;CHSIZE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;chsize()&lt;/CODE&gt; routine is available to truncate files. You might need a -lx to get this routine.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_closedir"&gt;d_closedir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_closedir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_CLOSEDIR&lt;/CODE&gt; if 
&lt;CODE&gt;closedir()&lt;/CODE&gt; is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_const"&gt;d_const&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_const.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HASCONST&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that this 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler knows about the const type.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_crypt"&gt;d_crypt&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_crypt.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;CRYPT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;crypt()&lt;/CODE&gt; routine is available to encrypt passwords and the like.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_csh"&gt;d_csh&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_csh.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;CSH&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the C-shell exists.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_cuserid"&gt;d_cuserid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_cuserid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_CUSERID&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;cuserid()&lt;/CODE&gt; routine is available to get character login names.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_dbl_dig"&gt;d_dbl_dig&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_dbl_dig.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines d_dbl_dig if this system's header files
provide &lt;CODE&gt;DBL_DIG&lt;/CODE&gt;, which is the number of significant digits in a double precision number.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_difftime"&gt;d_difftime&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_difftime.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_DIFFTIME&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;difftime()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_dirnamlen"&gt;d_dirnamlen&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_dirent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;DIRNAMLEN&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the length of directory entry names is
provided by a d_namelen field.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_dlerror"&gt;d_dlerror&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_dlerror.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_DLERROR&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;dlerror()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_dlopen"&gt;d_dlopen&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_dlopen.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_DLOPEN&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;dlopen()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_dlsymun"&gt;d_dlsymun&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_dlsymun.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;DLSYM_NEEDS_UNDERSCORE&lt;/CODE&gt;, which indicates that we need to prepend an underscore to the symbol name before calling 
&lt;CODE&gt;dlsym().&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_dosuid"&gt;d_dosuid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_dosuid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the symbol &lt;CODE&gt;DOSUID&lt;/CODE&gt;, which tells the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should insert setuid emulation code
on hosts which have setuid #! scripts disabled.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_dup2"&gt;d_dup2&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_dup2.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines 
&lt;FONT SIZE=-1&gt;HAS_DUP2&lt;/FONT&gt; if 
&lt;CODE&gt;dup2()&lt;/CODE&gt; is available to duplicate file descriptors.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_endgrent"&gt;d_endgrent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_endgrent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_ENDGRENT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;endgrent()&lt;/CODE&gt; routine is available for sequential access of the group database.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_endhent"&gt;d_endhent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_endhent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_ENDHOSTENT&lt;/CODE&gt; if 
&lt;CODE&gt;endhostent()&lt;/CODE&gt; is available
to close whatever was being used for host queries.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_endnent"&gt;d_endnent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_endnent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_ENDNETENT&lt;/CODE&gt; if 
&lt;CODE&gt;endnetent()&lt;/CODE&gt; is available
to close whatever was being used for network queries.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_endpent"&gt;d_endpent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_endpent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_ENDPROTOENT&lt;/CODE&gt; if 
&lt;CODE&gt;endprotoent()&lt;/CODE&gt; is
available to close whatever was being used for protocol queries.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_endpwent"&gt;d_endpwent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_endpwent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_ENDPWENT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;endpwent()&lt;/CODE&gt; routine is available for sequential access of the passwd database.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_endsent"&gt;d_endsent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_endsent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_ENDSERVENT&lt;/CODE&gt; if 
&lt;CODE&gt;endservent()&lt;/CODE&gt; is available
to close whatever was being used for service queries.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_eofnblk"&gt;d_eofnblk&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;nblock_io.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;EOF_NONBLOCK&lt;/CODE&gt; if &lt;CODE&gt;EOF&lt;/CODE&gt; can be seen when reading from a non-blocking &lt;EM&gt;I/O&lt;/EM&gt; source.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_eunice"&gt;d_eunice&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Guess.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the symbols &lt;CODE&gt;EUNICE&lt;/CODE&gt; and &lt;CODE&gt;VAX&lt;/CODE&gt;, which alerts the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it must deal with ideosyncracies of &lt;CODE&gt;VMS&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fchmod"&gt;d_fchmod&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fchmod.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_FCHMOD&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;fchmod()&lt;/CODE&gt; routine is available to change mode of opened files.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fchown"&gt;d_fchown&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fchown.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_FCHOWN&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;fchown()&lt;/CODE&gt; routine is available to change ownership of opened files.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fcntl"&gt;d_fcntl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fcntl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_FCNTL&lt;/CODE&gt; symbol, and indicates whether the 
&lt;CODE&gt;fcntl()&lt;/CODE&gt; function exists

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fd_macros"&gt;d_fd_macros&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fd_set.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;HAS_FD_MACROS&lt;/CODE&gt; symbol, which indicates if your 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler knows about the macros which manipulate an
fd_set.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fd_set"&gt;d_fd_set&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fd_set.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;HAS_FD_SET&lt;/CODE&gt; symbol, which indicates if your 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler knows about the fd_set typedef.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fds_bits"&gt;d_fds_bits&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fd_set.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;HAS_FDS_BITS&lt;/CODE&gt; symbol, which indicates if your fd_set typedef contains the fds_bits
member. If you have an fd_set typedef, but the dweebs who installed it did
a half-fast job and neglected to provide the macros to manipulate an
fd_set, &lt;CODE&gt;HAS_FDS_BITS&lt;/CODE&gt; will let us know how to fix the gaffe.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fgetpos"&gt;d_fgetpos&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fgetpos.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_FGETPOS&lt;/CODE&gt; if 
&lt;CODE&gt;fgetpos()&lt;/CODE&gt; is available to
get the file position indicator.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_flexfnam"&gt;d_flexfnam&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_flexfnam.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;FLEXFILENAMES&lt;/CODE&gt; symbol, which indicates that the system supports filenames longer than 14
characters.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_flock"&gt;d_flock&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_flock.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_FLOCK&lt;/CODE&gt; if 
&lt;CODE&gt;flock()&lt;/CODE&gt; is available to do
file locking.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fork"&gt;d_fork&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fork.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_FORK&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;fork()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fpathconf"&gt;d_fpathconf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_pathconf.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_FPATHCONF&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;pathconf()&lt;/CODE&gt; routine is available to determine file-system related limits and options associated with a given open file descriptor.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_fsetpos"&gt;d_fsetpos&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_fsetpos.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_FSETPOS&lt;/CODE&gt; if 
&lt;CODE&gt;fsetpos()&lt;/CODE&gt; is available to
set the file position indicator.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_ftime"&gt;d_ftime&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_ftime.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_FTIME&lt;/CODE&gt; symbol, which indicates that the 
&lt;CODE&gt;ftime()&lt;/CODE&gt; routine exists. The 
&lt;CODE&gt;ftime()&lt;/CODE&gt; routine is basically a sub-second accuracy clock.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getgrent"&gt;d_getgrent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getgrent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETGRENT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getgrent()&lt;/CODE&gt; routine is available for sequential access of the group database.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getgrps"&gt;d_getgrps&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getgrps.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETGROUPS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getgroups()&lt;/CODE&gt; routine is available to get the list of process groups.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_gethbyaddr"&gt;d_gethbyaddr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gethbyad.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETHOSTBYADDR&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;gethostbyaddr()&lt;/CODE&gt; routine is available to look up hosts by their
 &lt;CODE&gt;IP&lt;/CODE&gt; addresses.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_gethbyname"&gt;d_gethbyname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gethbynm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETHOSTBYNAME&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;gethostbyname()&lt;/CODE&gt; routine is available to look up host names in some data base or other.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_gethent"&gt;d_gethent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gethent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_GETHOSTENT&lt;/CODE&gt; if 
&lt;CODE&gt;gethostent()&lt;/CODE&gt; is available
to look up host names in some data base or another.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_gethname"&gt;d_gethname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gethname.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETHOSTNAME&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;gethostname()&lt;/CODE&gt; routine may be used to derive the host name.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_gethostprotos"&gt;d_gethostprotos&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gethostprotos.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETHOST_PROTOS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;netdb.h&amp;gt; supplies prototypes for the various gethost*() functions. See
also &lt;EM&gt;netdbtype.U&lt;/EM&gt; for probing for various netdb types.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getlogin"&gt;d_getlogin&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getlogin.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETLOGIN&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getlogin()&lt;/CODE&gt; routine is available to get the login name.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getnbyaddr"&gt;d_getnbyaddr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getnbyad.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETNETBYADDR&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getnetbyaddr()&lt;/CODE&gt; routine is available to look up networks by their
 &lt;CODE&gt;IP&lt;/CODE&gt; addresses.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getnbyname"&gt;d_getnbyname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getnbynm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETNETBYNAME&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getnetbyname()&lt;/CODE&gt; routine is available to look up networks by their names.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getnent"&gt;d_getnent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getnent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_GETNETENT&lt;/CODE&gt; if 
&lt;CODE&gt;getnetent()&lt;/CODE&gt; is available
to look up network names in some data base or another.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getnetprotos"&gt;d_getnetprotos&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getnetprotos.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETNET_PROTOS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;netdb.h&amp;gt; supplies prototypes for the various getnet*() functions. See
also &lt;EM&gt;netdbtype.U&lt;/EM&gt; for probing for various netdb types.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getpbyname"&gt;d_getpbyname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getprotby.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETPROTOBYNAME&lt;/CODE&gt; 
symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getprotobyname()&lt;/CODE&gt; routine is available to look up protocols by their name.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getpbynumber"&gt;d_getpbynumber&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getprotby.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETPROTOBYNUMBER&lt;/CODE&gt; 
symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getprotobynumber()&lt;/CODE&gt; routine is available to look up protocols by their number.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getpent"&gt;d_getpent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getpent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_GETPROTOENT&lt;/CODE&gt; if 
&lt;CODE&gt;getprotoent()&lt;/CODE&gt; is
available to look up protocols in some data base or another.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getpgid"&gt;d_getpgid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getpgid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETPGID&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getpgid(pid)&lt;/CODE&gt; function is available to get the process group id.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getpgrp2"&gt;d_getpgrp2&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getpgrp2.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the 
&lt;FONT SIZE=-1&gt;HAS_GETPGRP2&lt;/FONT&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getpgrp2()&lt;/CODE&gt; (as in
 &lt;EM&gt;DG/&lt;CODE&gt;UX&lt;/CODE&gt;&lt;/EM&gt;) routine is available to get the current process group.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getpgrp"&gt;d_getpgrp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getpgrp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_GETPGRP&lt;/CODE&gt; if 
&lt;CODE&gt;getpgrp()&lt;/CODE&gt; is available to
get the current process group.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getppid"&gt;d_getppid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getppid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETPPID&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getppid()&lt;/CODE&gt; routine is available to get the parent process
 &lt;CODE&gt;ID&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getprior"&gt;d_getprior&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getprior.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_GETPRIORITY&lt;/CODE&gt; if 
&lt;CODE&gt;getpriority()&lt;/CODE&gt; is
available to get a process's priority.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getprotoprotos"&gt;d_getprotoprotos&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getprotoprotos.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETPROTO_PROTOS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;netdb.h&amp;gt; supplies prototypes for the various getproto*() functions. See
also &lt;EM&gt;netdbtype.U&lt;/EM&gt; for probing for various netdb types.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getpwent"&gt;d_getpwent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getpwent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETPWENT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getpwent()&lt;/CODE&gt; routine is available for sequential access of the passwd database.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getsbyname"&gt;d_getsbyname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getsrvby.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETSERVBYNAME&lt;/CODE&gt; 
symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getservbyname()&lt;/CODE&gt; routine is available to look up services by their name.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getsbyport"&gt;d_getsbyport&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getsrvby.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETSERVBYPORT&lt;/CODE&gt; 
symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;getservbyport()&lt;/CODE&gt; routine is available to look up services by their port.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getsent"&gt;d_getsent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getsent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_GETSERVENT&lt;/CODE&gt; if 
&lt;CODE&gt;getservent()&lt;/CODE&gt; is available
to look up network services in some data base or another.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_getservprotos"&gt;d_getservprotos&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_getservprotos.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETSERV_PROTOS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;netdb.h&amp;gt; supplies prototypes for the various getserv*() functions. See
also &lt;EM&gt;netdbtype.U&lt;/EM&gt; for probing for various netdb types.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_gettimeod"&gt;d_gettimeod&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_ftime.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_GETTIMEOFDAY&lt;/CODE&gt; symbol, which indicates that the 
&lt;CODE&gt;gettimeofday()&lt;/CODE&gt; system
call exists (to obtain a sub-second accuracy clock). You should probably
include &amp;lt;sys/resource.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_gnulibc"&gt;d_gnulibc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gnulibc.U&lt;/EM&gt;:

&lt;P&gt;
Defined if we're dealing with the &lt;CODE&gt;GNU&lt;/CODE&gt; 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; Library.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_grpasswd"&gt;d_grpasswd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_grp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;GRPASSWD&lt;/CODE&gt;, which indicates that struct group in &amp;lt;grp.h&amp;gt; contains gr_passwd.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_htonl"&gt;d_htonl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_htonl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_HTONL&lt;/CODE&gt; if 
&lt;CODE&gt;htonl()&lt;/CODE&gt; and its friends are
available to do network order byte swapping.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_index"&gt;d_index&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strchr.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_INDEX&lt;/CODE&gt; if 
&lt;CODE&gt;index()&lt;/CODE&gt; and 
&lt;CODE&gt;rindex()&lt;/CODE&gt; are available for string searching.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_inetaton"&gt;d_inetaton&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_inetaton.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_INET_ATON&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;inet_aton()&lt;/CODE&gt; function is available to parse
 &lt;CODE&gt;IP&lt;/CODE&gt; address &lt;CODE&gt;dotted-quad&lt;/CODE&gt; strings.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_isascii"&gt;d_isascii&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_isascii.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_ISASCII&lt;/CODE&gt; constant, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that 
&lt;CODE&gt;isascii()&lt;/CODE&gt; is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_killpg"&gt;d_killpg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_killpg.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_KILLPG&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;killpg()&lt;/CODE&gt; routine is available to kill process groups.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_lchown"&gt;d_lchown&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_lchown.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_LCHOWN&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;lchown()&lt;/CODE&gt; routine is available to operate on a symbolic link (instead of following the link).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_link"&gt;d_link&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_link.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_LINK&lt;/CODE&gt; if 
&lt;CODE&gt;link()&lt;/CODE&gt; is available to create
hard links.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_locconv"&gt;d_locconv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_locconv.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_LOCALECONV&lt;/CODE&gt; if 
&lt;CODE&gt;localeconv()&lt;/CODE&gt; is available
for numeric and monetary formatting conventions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_lockf"&gt;d_lockf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_lockf.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_LOCKF&lt;/CODE&gt; if 
&lt;CODE&gt;lockf()&lt;/CODE&gt; is available to do
file locking.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_longdbl"&gt;d_longdbl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_longdbl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_LONG_DOUBLE&lt;/CODE&gt; if the long double type is supported.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_longlong"&gt;d_longlong&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_longlong.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_LONG_LONG&lt;/CODE&gt; if the long long type is supported.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_lstat"&gt;d_lstat&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_lstat.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_LSTAT&lt;/CODE&gt; if 
&lt;CODE&gt;lstat()&lt;/CODE&gt; is available to do
file stats on symbolic links.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_mblen"&gt;d_mblen&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_mblen.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MBLEN&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;mblen()&lt;/CODE&gt; routine is available to find the number of bytes in a multibye character.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_mbstowcs"&gt;d_mbstowcs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_mbstowcs.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MBSTOWCS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;mbstowcs()&lt;/CODE&gt; routine is available to convert a multibyte string into a wide character string.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_mbtowc"&gt;d_mbtowc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_mbtowc.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MBTOWC&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;mbtowc()&lt;/CODE&gt; routine is available to convert multibyte to a wide character.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_memcmp"&gt;d_memcmp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_memcmp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MEMCMP&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;memcmp()&lt;/CODE&gt; routine is available to compare blocks of memory.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_memcpy"&gt;d_memcpy&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_memcpy.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MEMCPY&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;memcpy()&lt;/CODE&gt; routine is available to copy blocks of memory.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_memmove"&gt;d_memmove&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_memmove.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MEMMOVE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;memmove()&lt;/CODE&gt; routine is available to copy potentatially overlapping blocks of memory.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_memset"&gt;d_memset&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_memset.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MEMSET&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;memset()&lt;/CODE&gt; routine is available to set blocks of memory.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_mkdir"&gt;d_mkdir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_mkdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MKDIR&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;mkdir()&lt;/CODE&gt; routine is available to create
 &lt;EM&gt;directories.&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_mkfifo"&gt;d_mkfifo&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_mkfifo.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MKFIFO&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;mkfifo()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_mktime"&gt;d_mktime&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_mktime.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MKTIME&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;mktime()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_msg"&gt;d_msg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_msg.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MSG&lt;/CODE&gt; symbol, which indicates that the entire msg*(2) library is present.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_msgctl"&gt;d_msgctl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_msgctl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MSGCTL&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;msgctl()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_msgget"&gt;d_msgget&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_msgget.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MSGGET&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;msgget()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_msgrcv"&gt;d_msgrcv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_msgrcv.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MSGRCV&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;msgrcv()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_msgsnd"&gt;d_msgsnd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_msgsnd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_MSGSND&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;msgsnd()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_mymalloc"&gt;d_mymalloc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;mallocsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;MYMALLOC&lt;/CODE&gt; in case other parts of the source want to take special action if &lt;CODE&gt;MYMALLOC&lt;/CODE&gt; is used. This may include different sorts of profiling or error detection.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_nice"&gt;d_nice&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_nice.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_NICE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;nice()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_oldpthreads"&gt;d_oldpthreads&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usethreads.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;OLD_PTHREADS_API&lt;/CODE&gt; symbol, and indicates that Perl should be built to use the old draft &lt;CODE&gt;POSIX&lt;/CODE&gt; threads &lt;CODE&gt;API&lt;/CODE&gt;. This is only potneially meaningful if usethreads is set.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_oldsock"&gt;d_oldsock&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_socket.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;OLDSOCKET&lt;/CODE&gt; symbol, which indicates that the &lt;CODE&gt;BSD&lt;/CODE&gt; socket interface is based on 4.1c and not 4.2.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_open3"&gt;d_open3&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_open3.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the 
&lt;FONT SIZE=-1&gt;HAS_OPEN3&lt;/FONT&gt; manifest constant, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 3 argument version of the 
&lt;CODE&gt;open(2)&lt;/CODE&gt; function is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pathconf"&gt;d_pathconf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_pathconf.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_PATHCONF&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;pathconf()&lt;/CODE&gt; routine is available to determine file-system related limits and options associated with a given filename.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pause"&gt;d_pause&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_pause.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_PAUSE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;pause()&lt;/CODE&gt; routine is available to suspend a process until a signal is received.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_phostname"&gt;d_phostname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gethname.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;PHOSTNAME&lt;/CODE&gt; symbol, which contains the shell command which, when fed to 
&lt;CODE&gt;popen(),&lt;/CODE&gt; may be used to derive
the host name.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pipe"&gt;d_pipe&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_pipe.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_PIPE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;pipe()&lt;/CODE&gt; routine is available to create an inter-process channel.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_poll"&gt;d_poll&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_poll.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_POLL&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;poll()&lt;/CODE&gt; routine is available to poll active file descriptors.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_portable"&gt;d_portable&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_portable.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;PORTABLE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should not assume that it is running
on the machine it was compiled on.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pthread_yield"&gt;d_pthread_yield&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_pthread_y.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_PTHREAD_YIELD&lt;/CODE&gt;
symbol if the pthread_yield routine is available to yield the execution of
the current thread.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pthreads_created_joinable"&gt;d_pthreads_created_joinable&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_pthreadj.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;PTHREADS_CREATED_JOINABLE&lt;/CODE&gt;
symbol if pthreads are created in the joinable (aka undetached) state.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pwage"&gt;d_pwage&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;PWAGE&lt;/CODE&gt;, which indicates that struct passwd contains pw_age.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pwchange"&gt;d_pwchange&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;PWCHANGE&lt;/CODE&gt;, which indicates that struct passwd contains pw_change.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pwclass"&gt;d_pwclass&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;PWCLASS&lt;/CODE&gt;, which indicates that struct passwd contains pw_class.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pwcomment"&gt;d_pwcomment&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;PWCOMMENT&lt;/CODE&gt;, which indicates that struct passwd contains pw_comment.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pwexpire"&gt;d_pwexpire&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;PWEXPIRE&lt;/CODE&gt;, which indicates that struct passwd contains pw_expire.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pwgecos"&gt;d_pwgecos&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;PWGECOS&lt;/CODE&gt;, which indicates that struct passwd contains pw_gecos.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pwpasswd"&gt;d_pwpasswd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;PWPASSWD&lt;/CODE&gt;, which indicates that struct passwd contains pw_passwd.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_pwquota"&gt;d_pwquota&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;PWQUOTA&lt;/CODE&gt;, which indicates that struct passwd contains pw_quota.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_readdir"&gt;d_readdir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_readdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_READDIR&lt;/CODE&gt; if 
&lt;CODE&gt;readdir()&lt;/CODE&gt; is available to
read directory entries.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_readlink"&gt;d_readlink&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_readlink.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_READLINK&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;readlink()&lt;/CODE&gt; routine is available to read the value of a symbolic link.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_rename"&gt;d_rename&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_rename.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_RENAME&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;rename()&lt;/CODE&gt; routine is available to rename files.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_rewinddir"&gt;d_rewinddir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_readdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_REWINDDIR&lt;/CODE&gt; if 
&lt;CODE&gt;rewinddir()&lt;/CODE&gt; is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_rmdir"&gt;d_rmdir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_rmdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_RMDIR&lt;/CODE&gt; if 
&lt;CODE&gt;rmdir()&lt;/CODE&gt; is available to remove
directories.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_safebcpy"&gt;d_safebcpy&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_safebcpy.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SAFE_BCOPY&lt;/CODE&gt; symbol if the 
&lt;CODE&gt;bcopy()&lt;/CODE&gt; routine can do
overlapping copies.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_safemcpy"&gt;d_safemcpy&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_safemcpy.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SAFE_MEMCPY&lt;/CODE&gt; symbol if the 
&lt;CODE&gt;memcpy()&lt;/CODE&gt; routine can do
overlapping copies.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_sanemcmp"&gt;d_sanemcmp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_sanemcmp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SANE_MEMCMP&lt;/CODE&gt; symbol if the 
&lt;CODE&gt;memcpy()&lt;/CODE&gt; routine is available
and can be used to compare relative magnitudes of chars with their high
bits set.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_sched_yield"&gt;d_sched_yield&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_pthread_y.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SCHED_YIELD&lt;/CODE&gt;
symbol if the sched_yield routine is available to yield the execution of
the current thread.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_seekdir"&gt;d_seekdir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_readdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SEEKDIR&lt;/CODE&gt; if 
&lt;CODE&gt;seekdir()&lt;/CODE&gt; is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_select"&gt;d_select&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_select.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SELECT&lt;/CODE&gt; if 
&lt;CODE&gt;select()&lt;/CODE&gt; is available to select active file descriptors. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; &amp;lt;sys/time.h&amp;gt; inclusion may be necessary for the timeout field.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_sem"&gt;d_sem&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_sem.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SEM&lt;/CODE&gt; symbol, which indicates that the entire sem*(2) library is present.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_semctl"&gt;d_semctl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_semctl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SEMCTL&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;semctl()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_semctl_semid_ds"&gt;d_semctl_semid_ds&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_union_senum.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;USE_SEMCTL_SEMID_DS&lt;/CODE&gt;, which indicates that struct semid_ds * is to be used for semctl &lt;CODE&gt;IPC_STAT&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_semctl_semun"&gt;d_semctl_semun&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_union_senum.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;USE_SEMCTL_SEMUN&lt;/CODE&gt;, which indicates that union semun is to be used for semctl &lt;CODE&gt;IPC_STAT&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_semget"&gt;d_semget&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_semget.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SEMGET&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;semget()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_semop"&gt;d_semop&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_semop.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SEMOP&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;semop()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setegid"&gt;d_setegid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setegid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETEGID&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setegid()&lt;/CODE&gt; routine is available to change the effective gid of the current program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_seteuid"&gt;d_seteuid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_seteuid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETEUID&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;seteuid()&lt;/CODE&gt; routine is available to change the effective uid of the current program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setgrent"&gt;d_setgrent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setgrent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETGRENT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setgrent()&lt;/CODE&gt; routine is available for initializing sequential access to the group database.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setgrps"&gt;d_setgrps&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setgrps.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETGROUPS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setgroups()&lt;/CODE&gt; routine is available to set the list of process groups.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_sethent"&gt;d_sethent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_sethent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETHOSTENT&lt;/CODE&gt; if 
&lt;CODE&gt;sethostent()&lt;/CODE&gt; is
available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setlinebuf"&gt;d_setlinebuf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setlnbuf.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETLINEBUF&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setlinebuf()&lt;/CODE&gt; routine is available to change stderr or stdout from block-buffered or unbuffered to a line-buffered mode.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setlocale"&gt;d_setlocale&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setlocale.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETLOCALE&lt;/CODE&gt; if 
&lt;CODE&gt;setlocale()&lt;/CODE&gt; is available
to handle locale-specific ctype implementations.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setnent"&gt;d_setnent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setnent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETNETENT&lt;/CODE&gt; if 
&lt;CODE&gt;setnetent()&lt;/CODE&gt; is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setpent"&gt;d_setpent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setpent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETPROTOENT&lt;/CODE&gt; if 
&lt;CODE&gt;setprotoent()&lt;/CODE&gt; is
available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setpgid"&gt;d_setpgid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setpgid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETPGID&lt;/CODE&gt; symbol if the 
&lt;CODE&gt;setpgid(pid,&lt;/CODE&gt; gpid)
function is available to set process group &lt;CODE&gt;ID&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setpgrp2"&gt;d_setpgrp2&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setpgrp2.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the 
&lt;FONT SIZE=-1&gt;HAS_SETPGRP2&lt;/FONT&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setpgrp2()&lt;/CODE&gt; (as in
 &lt;EM&gt;DG/&lt;CODE&gt;UX&lt;/CODE&gt;&lt;/EM&gt;) routine is available to set the current process group.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setpgrp"&gt;d_setpgrp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setpgrp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETPGRP&lt;/CODE&gt; if 
&lt;CODE&gt;setpgrp()&lt;/CODE&gt; is available to
set the current process group.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setprior"&gt;d_setprior&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setprior.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETPRIORITY&lt;/CODE&gt; if 
&lt;CODE&gt;setpriority()&lt;/CODE&gt; is
available to set a process's priority.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_d_setpwent"&gt;d_setpwent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setpwent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETPWENT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setpwent()&lt;/CODE&gt; routine is available for initializing sequential access to the passwd database.
&lt;BR&gt;
[perlman:lib:Config:2|Continue to the rest of this document]
</field>
</data>
</node>
