<?xml version="1.0" encoding="windows-1252"?>
<node id="1118" title="perlman:lib:O" created="1999-12-22 19:49:27" updated="2005-08-10 16:25:38">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;

&lt;FONT SIZE=-1&gt;O&lt;/FONT&gt; - Generic interface to Perl Compiler backends

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;        perl -MO=Backend&amp;#091;,OPTIONS&amp;#093; foo.pl
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
This is the module that is used as a frontend to the Perl Compiler.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="CONVENTIONS"&gt;CONVENTIONS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Most compiler backends use the following conventions: 
&lt;FONT SIZE=-1&gt;OPTIONS&lt;/FONT&gt; consists of a comma-separated list of words
(no white-space). The &lt;CODE&gt;-v&lt;/CODE&gt; option usually puts the backend into verbose mode. The &lt;CODE&gt;-ofile&lt;/CODE&gt; option generates output to &lt;STRONG&gt;file&lt;/STRONG&gt; instead of stdout. The &lt;CODE&gt;-D&lt;/CODE&gt; option followed by various letters turns on various internal debugging
flags. See the documentation for the desired backend (named &lt;CODE&gt;B::Backend&lt;/CODE&gt; for the example above) to find out about that backend.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="IMPLEMENTATION"&gt;IMPLEMENTATION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
This section is only necessary for those who want to write a compiler
backend module that can be used via this module.

&lt;P&gt;
The command-line mentioned in the 
&lt;FONT SIZE=-1&gt;SYNOPSIS&lt;/FONT&gt; section corresponds to the Perl code

&lt;P&gt;
&lt;PRE&gt;    use O (&amp;quot;Backend&amp;quot;, OPTIONS);
&lt;/PRE&gt;
&lt;P&gt;
The [perlfunc:import|import] function which that calls loads in the appropriate
&lt;CODE&gt;B::Backend&lt;/CODE&gt; module and calls the &lt;CODE&gt;compile&lt;/CODE&gt; function in that package, passing it 
&lt;FONT SIZE=-1&gt;OPTIONS.&lt;/FONT&gt; That function is expected to return a sub reference which we'll call 
&lt;FONT SIZE=-1&gt;CALLBACK.&lt;/FONT&gt; Next, the ``compile-only'' flag is switched on (equivalent to the command-line option
 &lt;CODE&gt;-c&lt;/CODE&gt;) and an 
&lt;FONT SIZE=-1&gt;END&lt;/FONT&gt; block is registered which calls 
&lt;FONT SIZE=-1&gt;CALLBACK.&lt;/FONT&gt; Thus the main Perl program mentioned on the command-line is read in, parsed and compiled into internal syntax tree form. Since the
 &lt;CODE&gt;-c&lt;/CODE&gt; flag is set, the program does not start running (excepting 
&lt;FONT SIZE=-1&gt;BEGIN&lt;/FONT&gt; blocks of course) but the 
&lt;FONT SIZE=-1&gt;CALLBACK&lt;/FONT&gt; function registered by the compiler backend is called.

&lt;P&gt;
In summary, a compiler backend module should be called ``B::Foo'' for some
foo and live in the appropriate directory for that name. It should define a
function called &lt;CODE&gt;compile&lt;/CODE&gt;. When the user types

&lt;P&gt;
&lt;PRE&gt;    perl -MO=Foo,OPTIONS foo.pl
&lt;/PRE&gt;
&lt;P&gt;
that function is called and is passed those 
&lt;FONT SIZE=-1&gt;OPTIONS&lt;/FONT&gt; (split on commas). It should return a sub ref
to the main compilation function. After the user's program is loaded and
parsed, that returned sub ref is invoked which can then go ahead and do the
compilation, usually by making use of the &lt;CODE&gt;B&lt;/CODE&gt; module's functionality.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="AUTHOR"&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Malcolm Beattie, &lt;CODE&gt;mbeattie@sable.ox.ac.uk&lt;/CODE&gt;

&lt;HR&gt;
</field>
</data>
</node>
