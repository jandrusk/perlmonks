<?xml version="1.0" encoding="windows-1252"?>
<node id="1136" title="perlman:lib:constant" created="1999-12-22 19:49:30" updated="2005-08-10 16:30:53">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
constant - Perl pragma to declare constants

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;    use constant BUFFER_SIZE    =&amp;gt; 4096;
    use constant ONE_YEAR       =&amp;gt; 365.2425 * 24 * 60 * 60;
    use constant PI             =&amp;gt; 4 * atan2 1, 1;
    use constant DEBUGGING      =&amp;gt; 0;
    use constant ORACLE         =&amp;gt; 'orac</field>
<field name="description">

&lt;P&gt;
This will declare a symbol to be a constant with the given scalar or list
value.

&lt;P&gt;
When you declare a constant such as &lt;CODE&gt;PI&lt;/CODE&gt; using the method shown above, each machine your script runs upon can have
as many digits of accuracy as it can use. Also, your program will be easier
to read, more likely to be maintained (and maintained correctly), and far
less likely to send a space probe to the wrong planet because nobody
noticed the one equation in which you wrote &lt;CODE&gt;3.14195&lt;/CODE&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="NOTES"&gt;NOTES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The value or values are evaluated in a list context. You may override this
with [perlfunc:scalar|scalar] as shown above.

&lt;P&gt;
These constants do not directly interpolate into double-quotish strings,
although you may do so indirectly. (See [perlman:perlref|perlref] for details about how this works.)

&lt;P&gt;
&lt;PRE&gt;    print &amp;quot;The value of PI is @{&amp;#091; PI &amp;#093;}.\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
List constants are returned as lists, not as arrays.

&lt;P&gt;
&lt;PRE&gt;    $homedir = USERINFO&amp;#091;7&amp;#093;;             # WRONG
    $homedir = (USERINFO)&amp;#091;7&amp;#093;;           # Right
&lt;/PRE&gt;
&lt;P&gt;
The use of all caps for constant names is merely a convention, although it
is recommended in order to make constants stand out and to help avoid
collisions with other barewords, keywords, and subroutine names. Constant
names must begin with a letter.

&lt;P&gt;
Constant symbols are package scoped (rather than block scoped, as
&lt;CODE&gt;use strict&lt;/CODE&gt; is). That is, you can refer to a constant from package Other as &lt;CODE&gt;Other::CONST&lt;/CODE&gt;.

&lt;P&gt;
As with all [perlfunc:use|use] directives, defining a constant happens at compile time. Thus, it's
probably not correct to put a constant declaration inside of a conditional
statement (like &lt;CODE&gt;if ($foo)
{ use constant ... }&lt;/CODE&gt;).

&lt;P&gt;
Omitting the value for a symbol gives it the value of [perlfunc:undef|undef] in a scalar context or the empty list, &lt;CODE&gt;()&lt;/CODE&gt;, in a list context. This isn't so nice as it may sound, though, because in
this case you must either quote the symbol name, or use a big arrow, (&lt;CODE&gt;=&amp;gt;&lt;/CODE&gt;), with nothing to point to. It is probably best to declare these
explicitly.

&lt;P&gt;
&lt;PRE&gt;    use constant UNICORNS       =&amp;gt; ();
    use constant LOGFILE        =&amp;gt; undef;
&lt;/PRE&gt;
&lt;P&gt;
The result from evaluating a list constant in a scalar context is not
documented, and is &lt;STRONG&gt;not&lt;/STRONG&gt; guaranteed to be any particular value in the future. In particular, you
should not rely upon it being the number of elements in the list,
especially since it is not
&lt;STRONG&gt;necessarily&lt;/STRONG&gt; that value in the current implementation.

&lt;P&gt;
Magical values, tied values, and references can be made into constants at
compile time, allowing for way cool stuff like this. (These error numbers
aren't totally portable, alas.)

&lt;P&gt;
&lt;PRE&gt;    use constant E2BIG =&amp;gt; ($! = 7);
    print   E2BIG, &amp;quot;\n&amp;quot;;        # something like &amp;quot;Arg list too long&amp;quot;
    print 0+E2BIG, &amp;quot;\n&amp;quot;;        # &amp;quot;7&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="TECHNICAL_NOTE"&gt;TECHNICAL NOTE&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
In the current implementation, scalar constants are actually inlinable
subroutines. As of version 5.004 of Perl, the appropriate scalar constant
is inserted directly in place of some subroutine calls, thereby saving the
overhead of a subroutine call. See
[perlman:perlsub|perlsub] for details about how and when this happens.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="BUGS"&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
In the current version of Perl, list constants are not inlined and some
symbols may be redefined without generating a warning.

&lt;P&gt;
It is not possible to have a subroutine or keyword with the same name as a
constant. This is probably a Good Thing.

&lt;P&gt;
Unlike constants in some languages, these cannot be overridden on the
command line or via environment variables.

&lt;P&gt;
You can get into trouble if you use constants in a context which
automatically quotes barewords (as is true for any subroutine call). For
example, you can't say &lt;CODE&gt;$hash{CONSTANT}&lt;/CODE&gt; because &lt;CODE&gt;CONSTANT&lt;/CODE&gt; will be interpreted as a string. Use &lt;CODE&gt;$hash{CONSTANT()}&lt;/CODE&gt; or
&lt;CODE&gt;$hash{+CONSTANT}&lt;/CODE&gt; to prevent the bareword quoting mechanism from kicking in. Similarly, since
the &lt;CODE&gt;=&amp;gt;&lt;/CODE&gt; operator quotes a bareword immediately to its left you have to say &lt;CODE&gt;CONSTANT() =&amp;gt; 'value'&lt;/CODE&gt;
instead of &lt;CODE&gt;CONSTANT =&amp;gt; 'value'&lt;/CODE&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="AUTHOR"&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Tom Phoenix, &amp;lt;&lt;EM&gt;rootbeer@teleport.com&lt;/EM&gt;&amp;gt;, with help from many other folks.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="COPYRIGHT"&gt;COPYRIGHT&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Copyright 
&lt;FONT SIZE=-1&gt;(C)&lt;/FONT&gt; 1997, Tom Phoenix

&lt;P&gt;
This module is free software; you can redistribute it or modify it under
the same terms as Perl itself.

&lt;HR&gt;
</field>
</data>
</node>
