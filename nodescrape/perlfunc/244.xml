<?xml version="1.0" encoding="windows-1252"?>
<node id="244" title="perlfunc:reverse" created="1999-08-24 18:42:28" updated="2005-08-13 20:15:49">
<type id="119">
perlfunc</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
reverse - flip a string or a list

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
reverse 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
In list context, returns a list value consisting of the elements of 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt; in the opposite order. In scalar context, concatenates the elements of 
&lt;FONT SIZE=-1&gt;LIST,&lt;/FONT&gt; and returns a string value consisting of those bytes, but in the opposite order.

&lt;P&gt;
&lt;PRE&gt;    print reverse &amp;lt;&amp;gt;;           # line tac, last line first
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    undef $/;                   # for efficiency of &amp;lt;&amp;gt;
    print scalar reverse &amp;lt;&amp;gt;;    # byte tac, last line tsrif
&lt;/PRE&gt;
&lt;P&gt;
This operator is also handy for inverting a hash, although there are some
caveats. If a value is duplicated in the original hash, only one of those
can be represented as a key in the inverted hash. Also, this has to unwind
one hash and build a whole new one, which may take some time on a large
hash.

&lt;P&gt;
&lt;PRE&gt;    %by_name = reverse %by_address;     # Invert the hash
&lt;/PRE&gt;
&lt;HR&gt;
</field>
</data>
</node>
