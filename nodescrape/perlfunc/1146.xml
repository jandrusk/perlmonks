<?xml version="1.0" encoding="windows-1252"?>
<node id="1146" title="perlman:lib:re" created="1999-12-22 19:49:32" updated="2005-08-10 16:06:38">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
re - Perl pragma to alter regular expression behaviour

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;    use re 'taint';
    ($x) = ($^X =~ /^(.*)$/s);     # $x is tainted here
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $pat = '(?{ $foo = 1 })';
    use re 'eval';
    /foo${pat}bar/;                # won't fail (when not under -T switch)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    {
</field>
<field name="description">

&lt;P&gt;
When &lt;CODE&gt;use re 'taint'&lt;/CODE&gt; is in effect, and a tainted string is the target of a regex, the regex
memories (or values returned by the m// operator in list context) are
tainted. This feature is useful when regex operations on tainted data
aren't meant to extract safe substrings, but to perform other
transformations.

&lt;P&gt;
When &lt;CODE&gt;use re 'eval'&lt;/CODE&gt; is in effect, a regex is allowed to contain
&lt;CODE&gt;(?{ ... })&lt;/CODE&gt; zero-width assertions even if regular expression contains variable
interpolation. That is normally disallowed, since it is a potential
security risk. Note that this pragma is ignored when the regular expression
is obtained from tainted data, i.e. evaluation is always disallowed with
tainted regular expresssions. See [perlman:perlre|perlre].

&lt;P&gt;
For the purpose of this pragma, interpolation of precompiled regular
expressions (i.e., the result of [perlman:perlop|perlop]) is &lt;EM&gt;not&lt;/EM&gt; considered variable interpolation. Thus:

&lt;P&gt;
&lt;PRE&gt;    /foo${pat}bar/
&lt;/PRE&gt;
&lt;P&gt;
&lt;EM&gt;is&lt;/EM&gt; allowed if &lt;CODE&gt;$pat&lt;/CODE&gt; is a precompiled regular expression, even if
&lt;CODE&gt;$pat&lt;/CODE&gt; contains &lt;CODE&gt;(?{ ... })&lt;/CODE&gt; assertions.

&lt;P&gt;
When &lt;CODE&gt;use re 'debug'&lt;/CODE&gt; is in effect, perl emits debugging messages when compiling and using
regular expressions. The output is the same as that obtained by running a &lt;CODE&gt;-DDEBUGGING&lt;/CODE&gt;-enabled perl interpreter with the
&lt;STRONG&gt;-Dr&lt;/STRONG&gt; switch. It may be quite voluminous depending on the complexity of the
match. Using &lt;CODE&gt;debugcolor&lt;/CODE&gt; instead of &lt;CODE&gt;debug&lt;/CODE&gt; enables a form of output that can be used to get a colorful display on
terminals that understand termcap color sequences. Set &lt;CODE&gt;$ENV{PERL_RE_TC}&lt;/CODE&gt; to a comma-separated list of &lt;CODE&gt;termcap&lt;/CODE&gt; properties to use for highlighting strings on/off, pre-point part on/off.
See [perlman:perldebug|perldebug] for additional info.

&lt;P&gt;
The directive &lt;CODE&gt;use re 'debug'&lt;/CODE&gt; is &lt;EM&gt;not lexically scoped&lt;/EM&gt;, as the other directives are. It has both compile-time and run-time
effects.

&lt;P&gt;
See [perlman:perlmodlib|perlmodlib].

&lt;HR&gt;
</field>
</data>
</node>
