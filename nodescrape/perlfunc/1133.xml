<?xml version="1.0" encoding="windows-1252"?>
<node id="1133" title="perlman:lib:autouse" created="1999-12-22 19:49:30" updated="2005-08-12 04:46:14">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
autouse - postpone load of modules until a function is used

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;  use autouse 'Carp' =&amp;gt; qw(carp croak);
  carp &amp;quot;this carp was predeclared and autoused &amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
If the module &lt;CODE&gt;Module&lt;/CODE&gt; is already loaded, then the declaration

&lt;P&gt;
&lt;PRE&gt;  use autouse 'Module' =&amp;gt; qw(func1 func2($;$) Module::func3);
&lt;/PRE&gt;
&lt;P&gt;
is equivalent to

&lt;P&gt;
&lt;PRE&gt;  use Module qw(func1 func2);
&lt;/PRE&gt;
&lt;P&gt;
if &lt;CODE&gt;Module&lt;/CODE&gt; defines 
&lt;CODE&gt;func2()&lt;/CODE&gt; with prototype &lt;CODE&gt;($;$)&lt;/CODE&gt;, and 
&lt;CODE&gt;func1()&lt;/CODE&gt; and 
&lt;CODE&gt;func3()&lt;/CODE&gt; have no prototypes. (At least if
 &lt;CODE&gt;Module&lt;/CODE&gt; uses &lt;CODE&gt;Exporter&lt;/CODE&gt;'s
[perlfunc:import|import], otherwise it is a fatal error.)

&lt;P&gt;
If the module &lt;CODE&gt;Module&lt;/CODE&gt; is not loaded yet, then the above declaration declares functions 
&lt;CODE&gt;func1()&lt;/CODE&gt; and 
&lt;CODE&gt;func2()&lt;/CODE&gt; in the current package, and declares a function Module::func3(). When these functions are called, they load the package
 &lt;CODE&gt;Module&lt;/CODE&gt; if needed, and substitute themselves with the correct definitions.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="WARNING"&gt;WARNING&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Using &lt;CODE&gt;autouse&lt;/CODE&gt; will move important steps of your program's execution from compile time to
runtime. This can

&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;
Break the execution of your program if the module you &lt;CODE&gt;autouse&lt;/CODE&gt;d has some initialization which it expects to be done early.

&lt;P&gt;&lt;LI&gt;

hide bugs in your code since important checks (like correctness of
prototypes) is moved from compile time to runtime. In particular, if the
prototype you specified on &lt;CODE&gt;autouse&lt;/CODE&gt; line is wrong, you will not find it out until the corresponding function is
executed. This will be very unfortunate for functions which are not always
called (note that for such functions &lt;CODE&gt;autouse&lt;/CODE&gt;ing gives biggest win, for a workaround see below).

&lt;/UL&gt;
&lt;P&gt;
To alleviate the second problem (partially) it is advised to write your
scripts like this:

&lt;P&gt;
&lt;PRE&gt;  use Module;
  use autouse Module =&amp;gt; qw(carp($) croak(&amp;amp;$));
  carp &amp;quot;this carp was predeclared and autoused &amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
The first line ensures that the errors in your argument specification are
found early. When you ship your application you should comment out the
first line, since it makes the second one useless.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="AUTHOR"&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Ilya Zakharevich (&lt;A
HREF="mailto:ilya@math.ohio-state.edu"&gt;ilya@math.ohio-state.edu&lt;/A&gt;)

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="SEE_ALSO"&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;

&lt;CODE&gt;perl(1).&lt;/CODE&gt;

&lt;HR&gt;
</field>
</data>
</node>
