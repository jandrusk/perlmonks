<?xml version="1.0" encoding="windows-1252"?>
<node id="175" title="perlfunc:alarm" created="1999-08-24 18:41:48" updated="2005-08-14 19:57:05">
<type id="119">
perlfunc</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
alarm - schedule a 
&lt;FONT SIZE=-1&gt;SIGALRM&lt;/FONT&gt; 

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
alarm 
&lt;FONT SIZE=-1&gt;SECONDS&lt;/FONT&gt;

&lt;P&gt;
alarm

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
Arranges to have a 
&lt;FONT SIZE=-1&gt;SIGALRM&lt;/FONT&gt; delivered to this process after the specified number of seconds have elapsed. If 
&lt;FONT SIZE=-1&gt;SECONDS&lt;/FONT&gt; is not specified, the value stored in
 &lt;CODE&gt;$_&lt;/CODE&gt; is used. (On some machines, unfortunately, the elapsed time may be up to
one second less than you specified because of how seconds are counted.)
Only one timer may be counting at once. Each call disables the previous
timer, and an argument of &lt;CODE&gt;0&lt;/CODE&gt; may be supplied to cancel the previous timer without starting a new one.
The returned value is the amount of time remaining on the previous timer.

&lt;P&gt;
For delays of finer granularity than one second, you may use Perl's
[perlfunc:syscall|syscall()] interface to access 
&lt;CODE&gt;setitimer(2)&lt;/CODE&gt; if your
system supports it, or else see [perlfunc:select|select()]. It is usually a mistake to intermix [perlfunc:alarm|alarm()]
and [perlfunc:sleep|sleep()] calls.

&lt;P&gt;
If you want to use [perlfunc:alarm|alarm()] to time out a system call you need to use an
[perlfunc:eval|eval()]/[perlfunc:die|die()] pair. You can't rely on the alarm causing the system call to fail with &lt;CODE&gt;$!&lt;/CODE&gt; set to &lt;CODE&gt;EINTR&lt;/CODE&gt; because Perl sets up signal handlers to restart system calls on some
systems. Using [perlfunc:eval|eval()]/[perlfunc:die|die()] always works, modulo the caveats given in [%linkNodeTitle "perlman:perlipc|Signals", $NODE, "Signals",{anchor=&gt;"Signals"};%].

&lt;P&gt;
&lt;PRE&gt;    eval {
        local $SIG{ALRM} = sub { die &amp;quot;alarm\n&amp;quot; }; # NB: \n required
        alarm $timeout;
        $nread = sysread SOCKET, $buffer, $size;
        alarm 0;
    };
    if ($@) {
        die unless $@ eq &amp;quot;alarm\n&amp;quot;;   # propagate unexpected errors
        # timed out
    }
    else {
        # didn't
    }
&lt;/PRE&gt;
&lt;HR&gt;
</field>
</data>
</node>
