<?xml version="1.0" encoding="windows-1252"?>
<node id="348" title="perlfunc:use" created="1999-08-24 18:43:32" updated="2005-08-14 21:12:45">
<type id="119">
perlfunc</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
use - load in a module at compile time

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
use Module 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt;

&lt;P&gt;
use Module

&lt;P&gt;
use Module 
&lt;FONT SIZE=-1&gt;VERSION&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt;

&lt;P&gt;
use 
&lt;FONT SIZE=-1&gt;VERSION&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
Imports some semantics into the current package from the named module,
generally by aliasing certain subroutine or variable names into your
package. It is exactly equivalent to

&lt;P&gt;
&lt;PRE&gt;    BEGIN { require Module; import Module LIST; }
&lt;/PRE&gt;
&lt;P&gt;
except that Module &lt;EM&gt;must&lt;/EM&gt; be a bareword.

&lt;P&gt;
If the first argument to [perlfunc:use|use] is a number, it is treated as a version number instead of a module name. If the version of the Perl interpreter is less than 
&lt;FONT SIZE=-1&gt;VERSION,&lt;/FONT&gt; then an error message is printed and Perl exits immediately. This is often useful if you need to check the current Perl version before
 [perlfunc:use|use]ing library modules that have changed in incompatible ways from older
versions of Perl. (We try not to do this more than we have to.)

&lt;P&gt;
The &lt;CODE&gt;BEGIN&lt;/CODE&gt; forces the [perlfunc:require|require] and [perlfunc:import|import()] to happen at compile time. The
[perlfunc:require|require] makes sure the module is loaded into memory if it hasn't been yet. The [perlfunc:import|import()] is not a builtin--it's just an ordinary static method call into the ``&lt;CODE&gt;Module&lt;/CODE&gt;'' package to tell the module to import the list of features back into the
current package. The module can implement its
[perlfunc:import|import()] method any way it likes, though most modules just choose to derive their [perlfunc:import|import()] method via inheritance from the &lt;CODE&gt;Exporter&lt;/CODE&gt; class that is defined in the &lt;CODE&gt;Exporter&lt;/CODE&gt; module. See [perlfunc:../../lib/Exporter|the Exporter manpage]. If no [perlfunc:import|import()]
method can be found then the error is currently silently ignored. This may
change to a fatal error in a future version.

&lt;P&gt;
If you don't want your namespace altered, explicitly supply an empty list:

&lt;P&gt;
&lt;PRE&gt;    use Module ();
&lt;/PRE&gt;
&lt;P&gt;
That is exactly equivalent to

&lt;P&gt;
&lt;PRE&gt;    BEGIN { require Module }
&lt;/PRE&gt;
&lt;P&gt;
If the 
&lt;FONT SIZE=-1&gt;VERSION&lt;/FONT&gt; argument is present between Module and 
&lt;FONT SIZE=-1&gt;LIST,&lt;/FONT&gt; then the

[perlfunc:use|use] will call the 
&lt;FONT SIZE=-1&gt;VERSION&lt;/FONT&gt; method in class Module with the given version as an argument. The default 
&lt;FONT SIZE=-1&gt;VERSION&lt;/FONT&gt; method, inherited from the Universal class, croaks if the given version is larger than the value of the variable
 &lt;CODE&gt;$Module::VERSION&lt;/CODE&gt;. (Note that there is not a comma after 
&lt;FONT SIZE=-1&gt;VERSION!)&lt;/FONT&gt;

&lt;P&gt;
Because this is a wide-open interface, pragmas (compiler directives) are
also implemented this way. Currently implemented pragmas are:

&lt;P&gt;
&lt;PRE&gt;    use integer;
    use diagnostics;
    use sigtrap qw(SEGV BUS);
    use strict  qw(subs vars refs);
    use subs    qw(afunc blurfl);
&lt;/PRE&gt;
&lt;P&gt;
Some of these these pseudo-modules import semantics into the current block
scope (like &lt;CODE&gt;strict&lt;/CODE&gt; or &lt;CODE&gt;integer&lt;/CODE&gt;, unlike ordinary modules, which import symbols into the current package
(which are effective through the end of the file).

&lt;P&gt;
There's a corresponding ``[perlfunc:no|no]'' command that unimports meanings imported by [perlfunc:use|use], i.e., it calls &lt;CODE&gt;unimport Module LIST&lt;/CODE&gt; instead of [perlfunc:import|import()].

&lt;P&gt;
&lt;PRE&gt;    no integer;
    no strict 'refs';
&lt;/PRE&gt;
&lt;P&gt;
If no &lt;CODE&gt;unimport()&lt;/CODE&gt; method can be found the call fails with a fatal error.

&lt;P&gt;
See [perlman:perlmod|the perlmod manpage] for a list of standard modules and pragmas.

&lt;HR&gt;
</field>
</data>
</node>
