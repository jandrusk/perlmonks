<?xml version="1.0" encoding="windows-1252"?>
<node id="1249" title="perlman:Term::ReadLine" created="1999-12-22 19:53:18" updated="2005-08-10 16:20:49">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
Term::ReadLine - Perl interface to various &lt;CODE&gt;readline&lt;/CODE&gt; packages. If no real package is found, substitutes stubs instead of basic
functions.

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;  use Term::ReadLine;
  $term = new Term::ReadLine 'Simple Perl calc';
  $prompt = &amp;quot;Enter your arithmetic expression: &amp;quot;;
  $OUT = $term-&amp;gt;OUT || STDOUT;
  while ( defined ($_ = $term-&amp;gt;readline($prompt)) ) {
    $res = eval($_), &amp;q</field>
<field name="description">

&lt;P&gt;
This package is just a front end to some other packages. At the moment this description is written, the only such package is Term-ReadLine, available on 
&lt;FONT SIZE=-1&gt;CPAN&lt;/FONT&gt; near you. The real target of this stub package is to set up a common interface to whatever Readline emerges with time.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="Minimal_set_of_supported_functio"&gt;Minimal set of supported functions&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
All the supported functions should be called as methods, i.e., either as 

&lt;P&gt;
&lt;PRE&gt;  $term = new Term::ReadLine 'name';
&lt;/PRE&gt;
&lt;P&gt;
or as 

&lt;P&gt;
&lt;PRE&gt;  $term-&amp;gt;addhistory('row');
&lt;/PRE&gt;
&lt;P&gt;
where &lt;CODE&gt;$term&lt;/CODE&gt; is a return value of Term::ReadLine-&amp;gt;Init.

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ReadLine"&gt;ReadLine&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
returns the actual package that executes the commands. Among possible
values are &lt;CODE&gt;Term::ReadLine::Gnu&lt;/CODE&gt;, &lt;CODE&gt;Term::ReadLine::Perl&lt;/CODE&gt;,
&lt;CODE&gt;Term::ReadLine::Stub Exporter&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_new"&gt;new&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
returns the handle for subsequent calls to following functions. Argument is
the name of the application. Optionally can be followed by two arguments
for &lt;CODE&gt;IN&lt;/CODE&gt; and &lt;CODE&gt;OUT&lt;/CODE&gt; filehandles. These arguments should be globs.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_readline"&gt;readline&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
gets an input line, &lt;EM&gt;possibly&lt;/EM&gt; with actual &lt;CODE&gt;readline&lt;/CODE&gt;
support. Trailing newline is removed. Returns [perlfunc:undef|undef] on &lt;CODE&gt;EOF&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_addhistory"&gt;addhistory&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
adds the line to the history of input, from where it can be used if the
actual &lt;CODE&gt;readline&lt;/CODE&gt; is present.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_IN"&gt;IN, $OUT&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
return the filehandles for input and output or [perlfunc:undef|undef] if &lt;CODE&gt;readline&lt;/CODE&gt;
input and output cannot be used for Perl.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_MinLine"&gt;MinLine&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
If argument is specified, it is an advice on minimal size of line to be
included into history.  [perlfunc:undef|undef] means do not include anything into history. Returns the old value.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_findConsole"&gt;findConsole&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
returns an array with two strings that give most appropriate names for
files for input and output using conventions &lt;CODE&gt;&amp;quot;&amp;lt;$in&amp;quot;&lt;/CODE&gt;, &lt;CODE&gt;&amp;quot;&amp;gt;out&amp;quot;&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_Attribs"&gt;Attribs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
returns a reference to a hash which describes internal configuration of the
package. Names of keys in this hash conform to standard conventions with
the leading &lt;CODE&gt;rl_&lt;/CODE&gt; stripped.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_Features"&gt;Features&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a reference to a hash with keys being features present in current
implementation. Several optional features are used in the minimal
interface: &lt;CODE&gt;appname&lt;/CODE&gt; should be present if the first argument to &lt;CODE&gt;new&lt;/CODE&gt; is recognized, and &lt;CODE&gt;minline&lt;/CODE&gt; should be present if
&lt;CODE&gt;MinLine&lt;/CODE&gt; method is not dummy.  &lt;CODE&gt;autohistory&lt;/CODE&gt; should be present if lines are put into history automatically (maybe
subject to
&lt;CODE&gt;MinLine&lt;/CODE&gt;), and &lt;CODE&gt;addhistory&lt;/CODE&gt; if &lt;CODE&gt;addhistory&lt;/CODE&gt; method is not dummy.

&lt;P&gt;
If &lt;CODE&gt;Features&lt;/CODE&gt; method reports a feature &lt;CODE&gt;attribs&lt;/CODE&gt; as present, the method &lt;CODE&gt;Attribs&lt;/CODE&gt; is not dummy.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="Additional_supported_functions"&gt;Additional supported functions&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Actually &lt;CODE&gt;Term::ReadLine&lt;/CODE&gt; can use some other package, that will support reacher set of commands.

&lt;P&gt;
All these commands are callable via method interface and have names which
conform to standard conventions with the leading &lt;CODE&gt;rl_&lt;/CODE&gt; stripped.

&lt;P&gt;
The stub package included with the perl distribution allows some additional
methods: 

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_tkRunning"&gt;tkRunning&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
makes Tk event loop run when waiting for user input (i.e., during
&lt;CODE&gt;readline&lt;/CODE&gt; method).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_ornaments"&gt;ornaments&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
makes the command line stand out by using termcap data. The argument to &lt;CODE&gt;ornaments&lt;/CODE&gt; should be 0, 1, or a string of a form
&lt;CODE&gt;&amp;quot;aa,bb,cc,dd&amp;quot;&lt;/CODE&gt;. Four components of this string should be names of
&lt;EM&gt;terminal capacities&lt;/EM&gt;, first two will be issued to make the prompt standout, last two to make
the input line standout.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_newTTY"&gt;newTTY&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
takes two arguments which are input filehandle and output filehandle.
Switches to use these filehandles.

&lt;/DL&gt;
&lt;P&gt;
One can check whether the currently loaded ReadLine package supports these
methods by checking for corresponding &lt;CODE&gt;Features&lt;/CODE&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="EXPORTS"&gt;EXPORTS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
None

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="ENVIRONMENT"&gt;ENVIRONMENT&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The envrironment variable &lt;CODE&gt;PERL_RL&lt;/CODE&gt; governs which ReadLine clone is loaded. If the value is false, a dummy
interface is used. If the value is true, it should be tail of the name of
the package to use, such as
&lt;CODE&gt;Perl&lt;/CODE&gt; or &lt;CODE&gt;Gnu&lt;/CODE&gt;.  

&lt;P&gt;
As a special case, if the value of this variable is space-separated, the
tail might be used to disable the ornaments by setting the tail to be &lt;CODE&gt;o=0&lt;/CODE&gt; or &lt;CODE&gt;ornaments=0&lt;/CODE&gt;. The head should be as described above, say

&lt;P&gt;
If the variable is not set, or if the head of space-separated list is
empty, the best available package is loaded.

&lt;P&gt;
&lt;PRE&gt;  export &amp;quot;PERL_RL=Perl o=0&amp;quot;     # Use Perl ReadLine without ornaments
  export &amp;quot;PERL_RL= o=0&amp;quot;         # Use best available ReadLine without ornaments
&lt;/PRE&gt;
&lt;P&gt;
(Note that processing of &lt;CODE&gt;PERL_RL&lt;/CODE&gt; for ornaments is in the discretion of the particular used &lt;CODE&gt;Term::ReadLine::*&lt;/CODE&gt; package).

&lt;HR&gt;
</field>
</data>
</node>
