<?xml version="1.0" encoding="windows-1252"?>
<node id="1113" title="perlman:lib:FileHandle" created="1999-12-22 19:49:27" updated="2005-08-13 04:42:00">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
FileHandle - supply object methods for filehandles

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;    use FileHandle;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $fh = new FileHandle;
    if ($fh-&amp;gt;open(&amp;quot;&amp;lt; file&amp;quot;)) {
        print &amp;lt;$fh&amp;gt;;
        $fh-&amp;gt;close;
    }
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $fh = new FileHandle &amp;quot;&amp;gt; FOO&amp;quot;;
    if (defined $</field>
<field name="description">

&lt;P&gt;

&lt;FONT SIZE=-1&gt;NOTE:&lt;/FONT&gt; This class is now a front-end to the 
&lt;FONT SIZE=-1&gt;IO::*&lt;/FONT&gt; classes.

&lt;P&gt;
&lt;CODE&gt;FileHandle::new&lt;/CODE&gt; creates a &lt;CODE&gt;FileHandle&lt;/CODE&gt;, which is a reference to a newly created symbol (see the &lt;CODE&gt;Symbol&lt;/CODE&gt; package). If it receives any parameters, they are passed to &lt;CODE&gt;FileHandle::open&lt;/CODE&gt;; if the open fails, the &lt;CODE&gt;FileHandle&lt;/CODE&gt; object is destroyed. Otherwise, it is returned to the caller.

&lt;P&gt;
&lt;CODE&gt;FileHandle::new_from_fd&lt;/CODE&gt; creates a &lt;CODE&gt;FileHandle&lt;/CODE&gt; like &lt;CODE&gt;new&lt;/CODE&gt; does. It requires two parameters, which are passed to &lt;CODE&gt;FileHandle::fdopen&lt;/CODE&gt;; if the fdopen fails, the &lt;CODE&gt;FileHandle&lt;/CODE&gt; object is destroyed. Otherwise, it is returned to the caller.

&lt;P&gt;
&lt;CODE&gt;FileHandle::open&lt;/CODE&gt; accepts one parameter or two. With one parameter, it is just a front end
for the built-in [perlfunc:open|open] function. With two parameters, the first parameter is a filename that may
include whitespace or other special characters, and the second parameter is
the open mode, optionally followed by a file permission value.

&lt;P&gt;
If &lt;CODE&gt;FileHandle::open&lt;/CODE&gt; receives a Perl mode string (``&amp;gt;'', ``+&amp;lt;'', etc.) or a 
&lt;FONT SIZE=-1&gt;POSIX&lt;/FONT&gt; 
&lt;CODE&gt;fopen()&lt;/CODE&gt; mode string (``w'', ``r+'', etc.), it uses the basic Perl
 [perlfunc:open|open] operator.

&lt;P&gt;
If &lt;CODE&gt;FileHandle::open&lt;/CODE&gt; is given a numeric mode, it passes that mode and the optional permissions
value to the Perl &lt;CODE&gt;sysopen&lt;/CODE&gt; operator. For convenience, &lt;CODE&gt;FileHandle::import&lt;/CODE&gt; tries to import the 
&lt;FONT SIZE=-1&gt;O_XXX&lt;/FONT&gt; constants from the Fcntl module. If dynamic
loading is not available, this may fail, but the rest of FileHandle will
still work.

&lt;P&gt;
&lt;CODE&gt;FileHandle::fdopen&lt;/CODE&gt; is like [perlfunc:open|open] except that its first parameter is not a filename but rather a file handle
name, a FileHandle object, or a file descriptor number.

&lt;P&gt;
If the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; functions 
&lt;CODE&gt;fgetpos()&lt;/CODE&gt; and 
&lt;CODE&gt;fsetpos()&lt;/CODE&gt; are available, then

&lt;CODE&gt;FileHandle::getpos&lt;/CODE&gt; returns an opaque value that represents the current position of the
FileHandle, and &lt;CODE&gt;FileHandle::setpos&lt;/CODE&gt; uses that value to return to a previously visited position.

&lt;P&gt;
If the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; function 
&lt;CODE&gt;setvbuf()&lt;/CODE&gt; is available, then
 &lt;CODE&gt;FileHandle::setvbuf&lt;/CODE&gt;
sets the buffering policy for the FileHandle. The calling sequence for the Perl function is the same as its 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; counterpart, including the macros
 &lt;CODE&gt;_IOFBF&lt;/CODE&gt;, &lt;CODE&gt;_IOLBF&lt;/CODE&gt;, and &lt;CODE&gt;_IONBF&lt;/CODE&gt;, except that the buffer parameter specifies a scalar variable to use as a buffer. 
&lt;FONT SIZE=-1&gt;WARNING:&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; variable used as a buffer by
 &lt;CODE&gt;FileHandle::setvbuf&lt;/CODE&gt; must not be modified in any way until the FileHandle is closed or until
&lt;CODE&gt;FileHandle::setvbuf&lt;/CODE&gt; is called again, or memory corruption may result!

&lt;P&gt;
See [perlman:perlfunc|perlfunc] for complete descriptions of each of the following supported &lt;CODE&gt;FileHandle&lt;/CODE&gt; methods, which are just front ends for the corresponding built-in
functions:

&lt;P&gt;
&lt;PRE&gt;    close
    fileno
    getc
    gets
    eof
    clearerr
    seek
    tell
&lt;/PRE&gt;
&lt;P&gt;
See [perlman:perlvar|perlvar] for complete descriptions of each of the following supported &lt;CODE&gt;FileHandle&lt;/CODE&gt; methods:

&lt;P&gt;
&lt;PRE&gt;    autoflush
    output_field_separator
    output_record_separator
    input_record_separator
    input_line_number
    format_page_number
    format_lines_per_page
    format_lines_left
    format_name
    format_top_name
    format_line_break_characters
    format_formfeed
&lt;/PRE&gt;
&lt;P&gt;
Furthermore, for doing normal 
&lt;FONT SIZE=-1&gt;I/O&lt;/FONT&gt; you might need these:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item__fh_print"&gt;$fh-&amp;gt;print&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
See [perlfunc:print|print].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item__fh_printf"&gt;$fh-&amp;gt;printf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
See [perlfunc:printf|printf].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item__fh_getline"&gt;$fh-&amp;gt;getline&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This works like &amp;lt;$fh&amp;gt; described in [perlman:perlop|perlop]
except that it's more readable and can be safely called in an array context
but still returns just one line.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item__fh_getlines"&gt;$fh-&amp;gt;getlines&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This works like &amp;lt;$fh&amp;gt; when called in an array context to read all the remaining lines in a file, except that it's more readable. It will also 
&lt;CODE&gt;croak()&lt;/CODE&gt; if accidentally called in a scalar context.

&lt;/DL&gt;
&lt;P&gt;
There are many other functions available since FileHandle is descended from
IO::File, IO::Seekable, and IO::Handle. Please see those respective pages
for documentation on more functions.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="SEE_ALSO"&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The &lt;STRONG&gt;IO&lt;/STRONG&gt; extension,
[perlman:perlfunc|perlfunc], 
[perlman:perlop|perlop].

&lt;HR&gt;
</field>
</data>
</node>
