<?xml version="1.0" encoding="windows-1252"?>
<node id="249" title="perlfunc:vec" created="1999-08-24 18:42:31" updated="2005-08-15 15:51:56">
<type id="119">
perlfunc</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
vec - test or set particular bits in a string

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
vec 
&lt;FONT SIZE=-1&gt;EXPR,OFFSET,BITS&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
Treats the string in 
&lt;FONT SIZE=-1&gt;EXPR&lt;/FONT&gt; as a vector of unsigned integers, and returns the value of the bit field specified by 
&lt;FONT SIZE=-1&gt;OFFSET.&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;BITS&lt;/FONT&gt; specifies the number of bits that are reserved for each entry in the bit vector. This must be a power of two from 1 to 32.
 [perlfunc:vec|vec()] may also be assigned to, in which case parentheses are needed to give the
expression the correct precedence as in

&lt;P&gt;
&lt;PRE&gt;    vec($image, $max_x * $x + $y, 8) = 3;
&lt;/PRE&gt;
&lt;P&gt;
Vectors created with [perlfunc:vec|vec()] can also be manipulated with the logical operators &lt;CODE&gt;|&lt;/CODE&gt;, &lt;CODE&gt;&amp;amp;&lt;/CODE&gt;, and &lt;CODE&gt;^&lt;/CODE&gt;, which will assume a bit vector operation is desired when both operands
are strings.

&lt;P&gt;
The following code will build up an 
&lt;FONT SIZE=-1&gt;ASCII&lt;/FONT&gt; string saying &lt;CODE&gt;'PerlPerlPerl'&lt;/CODE&gt;. The comments show the string after each step. Note that this code works
in the same way on big-endian or little-endian machines.

&lt;P&gt;
&lt;PRE&gt;    my $foo = '';
    vec($foo,  0, 32) = 0x5065726C;     # 'Perl'
    vec($foo,  2, 16) = 0x5065;         # 'PerlPe'
    vec($foo,  3, 16) = 0x726C;         # 'PerlPerl'
    vec($foo,  8,  8) = 0x50;           # 'PerlPerlP'
    vec($foo,  9,  8) = 0x65;           # 'PerlPerlPe'
    vec($foo, 20,  4) = 2;              # 'PerlPerlPe'   . &amp;quot;\x02&amp;quot;
    vec($foo, 21,  4) = 7;              # 'PerlPerlPer'
                                        # 'r' is &amp;quot;\x72&amp;quot;
    vec($foo, 45,  2) = 3;              # 'PerlPerlPer'  . &amp;quot;\x0c&amp;quot;
    vec($foo, 93,  1) = 1;              # 'PerlPerlPer'  . &amp;quot;\x2c&amp;quot;
    vec($foo, 94,  1) = 1;              # 'PerlPerlPerl'
                                        # 'l' is &amp;quot;\x6c&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
To transform a bit vector into a string or array of 0's and 1's, use these:

&lt;P&gt;
&lt;PRE&gt;    $bits = unpack(&amp;quot;b*&amp;quot;, $vector);
    @bits = split(//, unpack(&amp;quot;b*&amp;quot;, $vector));
&lt;/PRE&gt;
&lt;P&gt;
If you know the exact length in bits, it can be used in place of the &lt;CODE&gt;*&lt;/CODE&gt;.

&lt;HR&gt;
</field>
</data>
</node>
