<?xml version="1.0" encoding="windows-1252"?>
<node id="1150" title="perlman:lib:vars" created="1999-12-22 19:49:32" updated="2005-08-11 04:55:52">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
vars - Perl pragma to predeclare global variable names

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;    use vars qw($frob @mung %seen);
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
This will predeclare all the variables whose names are in the list,
allowing you to use them under ``use strict'', and disabling any typo
warnings.

&lt;P&gt;
Unlike pragmas that affect the &lt;CODE&gt;$^H&lt;/CODE&gt; hints variable, the &lt;CODE&gt;use vars&lt;/CODE&gt; and
&lt;CODE&gt;use subs&lt;/CODE&gt; declarations are not BLOCK-scoped. They are thus effective for the entire
file in which they appear. You may not rescind such declarations with &lt;CODE&gt;no vars&lt;/CODE&gt; or &lt;CODE&gt;no subs&lt;/CODE&gt;.

&lt;P&gt;
Packages such as the &lt;STRONG&gt;AutoLoader&lt;/STRONG&gt; and &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; that delay loading of subroutines within packages can create problems with
package lexicals defined using [perlfunc:my|my]. While the &lt;STRONG&gt;vars&lt;/STRONG&gt; pragma cannot duplicate the effect of package lexicals (total transparency
outside of the package), it can act as an acceptable substitute by
pre-declaring global symbols, ensuring their availability to the
later-loaded routines.

&lt;P&gt;
See [perlman:perlmodlib|perlmodlib].

&lt;HR&gt;
</field>
</data>
</node>
