<?xml version="1.0" encoding="windows-1252"?>
<node id="1265" title="perlman:Tie::Handle" created="1999-12-22 19:53:36" updated="2005-08-13 02:26:13">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
Tie::Handle - base class definitions for tied handles

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;    package NewHandle;
    require Tie::Handle;
     
    @ISA = (Tie::Handle);
     
    sub READ { ... }            # Provide a needed method
    sub TIEHANDLE { ... }       # Overrides inherited method
         
     
    package main;
    
</field>
<field name="description">

&lt;P&gt;
This module provides some skeletal methods for handle-tying classes. See
[perlman:perltie|perltie] for a list of the functions required in tying a handle to a package. The
basic &lt;STRONG&gt;Tie::Handle&lt;/STRONG&gt; package provides a &lt;CODE&gt;new&lt;/CODE&gt; method, as well as methods
&lt;CODE&gt;TIESCALAR&lt;/CODE&gt;, &lt;CODE&gt;FETCH&lt;/CODE&gt; and &lt;CODE&gt;STORE&lt;/CODE&gt;. The &lt;CODE&gt;new&lt;/CODE&gt; method is provided as a means of grandfathering, for classes that forget to
provide their own &lt;CODE&gt;TIESCALAR&lt;/CODE&gt;
method.

&lt;P&gt;
For developers wishing to write their own tied-handle classes, the methods
are summarized below. The [perlman:perltie|perltie] section not only documents these, but has sample code as well:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_TIEHANDLE"&gt;TIEHANDLE classname, LIST&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The method invoked by the command &lt;CODE&gt;tie *glob, classname&lt;/CODE&gt;. Associates a new glob instance with the specified class. &lt;CODE&gt;LIST&lt;/CODE&gt; would represent additional arguments (along the lines of [perlman:lib:AnyDBM_File|AnyDBM_File] and compatriots) needed to complete the association.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_WRITE"&gt;WRITE this, scalar, length, offset&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Write &lt;EM&gt;length&lt;/EM&gt; bytes of data from &lt;EM&gt;scalar&lt;/EM&gt; starting at &lt;EM&gt;offset&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_PRINT"&gt;PRINT this, LIST&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Print the values in &lt;EM&gt;LIST&lt;/EM&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_PRINTF"&gt;PRINTF this, format, LIST&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Print the values in &lt;EM&gt;LIST&lt;/EM&gt; using &lt;EM&gt;format&lt;/EM&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_READ"&gt;READ this, scalar, length, offset&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Read &lt;EM&gt;length&lt;/EM&gt; bytes of data into &lt;EM&gt;scalar&lt;/EM&gt; starting at &lt;EM&gt;offset&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_READLINE"&gt;READLINE this&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Read a single line

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_GETC"&gt;GETC this&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Get a single character

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_DESTROY"&gt;DESTROY this&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Free the storage associated with the tied handle referenced by &lt;EM&gt;this&lt;/EM&gt;. This is rarely needed, as Perl manages its memory quite well. But the
option exists, should a class wish to perform specific actions upon the
destruction of an instance.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="MORE_INFORMATION"&gt;MORE INFORMATION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The [perlman:perltie|perltie] section contains an example of tying handles.

&lt;HR&gt;
</field>
</data>
</node>
