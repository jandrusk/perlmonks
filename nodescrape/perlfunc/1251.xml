<?xml version="1.0" encoding="windows-1252"?>
<node id="1251" title="perlman:Test::Harness" created="1999-12-22 19:53:23" updated="2005-08-13 09:22:56">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
Test::Harness - run perl standard test scripts with statistics

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
use Test::Harness;

&lt;P&gt;

&lt;CODE&gt;runtests(@tests);&lt;/CODE&gt;

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
(By using the [perlman:lib:Test|Test] module, you can write test scripts without knowing the exact output this
module expects. However, if you need to know the specifics, read on!)

&lt;P&gt;
Perl test scripts print to standard output &lt;CODE&gt;&amp;quot;ok N&amp;quot;&lt;/CODE&gt; for each single test, where &lt;CODE&gt;N&lt;/CODE&gt; is an increasing sequence of integers. The first line output by a standard
test script is &lt;CODE&gt;&amp;quot;1..M&amp;quot;&lt;/CODE&gt; with &lt;CODE&gt;M&lt;/CODE&gt; being the number of tests that should be run within the test script.
Test::Harness::runtests(@tests) runs all the testscripts named as arguments
and checks standard output for the expected
&lt;CODE&gt;&amp;quot;ok N&amp;quot;&lt;/CODE&gt; strings.

&lt;P&gt;
After all tests have been performed, 
&lt;CODE&gt;runtests()&lt;/CODE&gt; prints some
performance statistics that are computed by the Benchmark module.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME="The_test_script_output"&gt;The test script output&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Any output from the testscript to standard error is ignored and bypassed,
thus will be seen by the user. Lines written to standard output containing &lt;CODE&gt;/^(not\s+)?ok\b/&lt;/CODE&gt; are interpreted as feedback for 
&lt;CODE&gt;runtests().&lt;/CODE&gt; All other lines
are discarded.

&lt;P&gt;
It is tolerated if the test numbers after &lt;CODE&gt;ok&lt;/CODE&gt; are omitted. In this case Test::Harness maintains temporarily its own
counter until the script supplies test numbers again. So the following test
script

&lt;P&gt;
&lt;PRE&gt;    print &amp;lt;&amp;lt;END;
    1..6
    not ok
    ok
    not ok
    ok
    ok
    END
&lt;/PRE&gt;
&lt;P&gt;
will generate 

&lt;P&gt;
&lt;PRE&gt;    FAILED tests 1, 3, 6
    Failed 3/6 tests, 50.00% okay
&lt;/PRE&gt;
&lt;P&gt;
The global variable $Test::Harness::verbose is exportable and can be used to let 
&lt;CODE&gt;runtests()&lt;/CODE&gt; display the standard output of the script without altering the behavior otherwise.

&lt;P&gt;
The global variable $Test::Harness::switches is exportable and can be used to set perl command line options used for running the test 
&lt;CODE&gt;script(s).&lt;/CODE&gt; The default value is
 &lt;CODE&gt;-w&lt;/CODE&gt;.

&lt;P&gt;
If the standard output line contains substring &lt;CODE&gt;&amp;lt;PRE&amp;gt; # Skip
&amp;lt;/PRE&amp;gt;
&lt;/CODE&gt; (with variations in spacing and case) after &lt;CODE&gt;ok&lt;/CODE&gt; or &lt;CODE&gt;ok NUMBER&lt;/CODE&gt;, it is counted as a skipped test. If the whole testscript succeeds, the
count of skipped tests is included in the generated output.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="EXPORT"&gt;EXPORT&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;CODE&gt;&amp;amp;runtests&lt;/CODE&gt; is exported by Test::Harness per default.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="DIAGNOSTICS"&gt;DIAGNOSTICS&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_All"&gt;All tests successful.\nFiles=%d,  Tests=%d, %s&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
If all tests are successful some statistics about the performance are
printed.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_FAILED"&gt;FAILED tests %s\n\tFailed %d/%d tests, %.2f%% okay.&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
For any single script that has failing subtests statistics like the above
are printed.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_Test"&gt;Test returned status %d (wstat %d)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Scripts that return a non-zero exit status, both &lt;CODE&gt;$? &amp;gt;&amp;gt; 8&lt;/CODE&gt; and &lt;CODE&gt;$?&lt;/CODE&gt; are printed in a message similar to the above.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME="item_Failed"&gt;Failed 1 test, %.2f%% okay. %s&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;Failed %d/%d tests, %.2f%% okay. %s&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
If not all tests were successful, the script dies with one of the above
messages.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="ENVIRONMENT"&gt;ENVIRONMENT&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Setting &lt;CODE&gt;HARNESS_IGNORE_EXITCODE&lt;/CODE&gt; makes harness ignore the exit status of child processes.

&lt;P&gt;
If &lt;CODE&gt;HARNESS_FILELEAK_IN_DIR&lt;/CODE&gt; is set to the name of a directory, harness will check after each test
whether new files appeared in that directory, and report them as

&lt;P&gt;
&lt;PRE&gt;  LEAKED FILES: scr.tmp 0 my.db
&lt;/PRE&gt;
&lt;P&gt;
If relative, directory name is with respect to the current directory at the moment 
&lt;CODE&gt;runtests()&lt;/CODE&gt; was called. Putting absolute path into
 
&lt;CODE&gt;HARNESS_FILELEAK_IN_DIR&lt;/CODE&gt; may give more predicatable results.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="SEE_ALSO"&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
[perlman:lib:Test|Test] for writing test scripts and also [perlman:lib:Benchmark|Benchmark] for the underlying timing routines.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="AUTHORS"&gt;AUTHORS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Either Tim Bunce or Andreas Koenig, we don't know. What we know for sure is, that it was inspired by Larry Wall's 
&lt;FONT SIZE=-1&gt;TEST&lt;/FONT&gt; script that came with perl distributions for ages. Numerous anonymous contributors exist. Current maintainer is Andreas Koenig.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="BUGS"&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Test::Harness uses 
&lt;FONT SIZE=-1&gt;$^X&lt;/FONT&gt; to determine the perl binary to run the tests
with. Test scripts running via the shebang (&lt;CODE&gt;#!&lt;/CODE&gt;) line may not be portable because 
&lt;FONT SIZE=-1&gt;$^X&lt;/FONT&gt; is not consistent for shebang scripts across platforms. This is no problem when Test::Harness is run with an absolute path to the perl binary or when 
&lt;FONT SIZE=-1&gt;$^X&lt;/FONT&gt; can be found in the path.

&lt;HR&gt;
</field>
</data>
</node>
