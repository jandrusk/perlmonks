<?xml version="1.0" encoding="windows-1252"?>
<node id="356" title="perlfunc:fork" created="1999-08-24 18:43:37" updated="2005-08-15 10:46:04">
<type id="119">
perlfunc</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
fork - create a new process just like this one

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
fork

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
Does a 
&lt;CODE&gt;fork(2)&lt;/CODE&gt; system call. Returns
the child pid to the parent process,
&lt;CODE&gt;0&lt;/CODE&gt; to the child process, or [perlfunc:undef|undef] if the fork is unsuccessful.

&lt;P&gt;
Note: unflushed buffers remain unflushed in both processes, which means you
may need to set &lt;CODE&gt;$|&lt;/CODE&gt; 
&lt;FONT SIZE=-1&gt;($AUTOFLUSH&lt;/FONT&gt; in English) or call the [%linkNodeTitle "perlman:perlvar|autoflush()", $NODE, "autoflush()",{anchor=&gt;"item_autoflush"};%]
method of &lt;CODE&gt;IO::Handle&lt;/CODE&gt; to avoid duplicate output.

&lt;P&gt;
If you [perlfunc:fork|fork()] without ever waiting on your children, you will accumulate zombies:

&lt;P&gt;
&lt;PRE&gt;    $SIG{CHLD} = sub { wait };
&lt;/PRE&gt;
&lt;P&gt;
There's also the double-fork trick (error checking on
[perlfunc:fork|fork()] returns omitted);

&lt;P&gt;
&lt;PRE&gt;    unless ($pid = fork) {
        unless (fork) {
            exec &amp;quot;what you really wanna do&amp;quot;;
            die &amp;quot;no exec&amp;quot;;
            # ... or ...
            ## (some_perl_code_here)
            exit 0;
        }
        exit 0;
    }
    waitpid($pid,0);
&lt;/PRE&gt;
&lt;P&gt;
See also [perlman:perlipc|the perlipc manpage] for more examples of forking and reaping moribund children.

&lt;P&gt;
Note that if your forked child inherits system file descriptors like 
&lt;FONT SIZE=-1&gt;STDIN&lt;/FONT&gt; and 
&lt;FONT SIZE=-1&gt;STDOUT&lt;/FONT&gt; that are actually connected by a pipe or socket, even if you exit, then the remote server (such as, say, httpd or rsh) won't think you're done. You should reopen those to
 &lt;EM&gt;/dev/null&lt;/EM&gt; if it's any issue.

&lt;HR&gt;
</field>
</data>
</node>
