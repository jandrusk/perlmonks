<?xml version="1.0" encoding="windows-1252"?>
<node id="1261" title="perlman:Thread::Signal" created="1999-12-22 19:53:32" updated="2005-08-11 03:46:14">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
Thread::Signal - Start a thread which runs signal handlers reliably

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt;    use Thread::Signal;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $SIG{HUP} = \&amp;amp;some_handler;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
The &lt;CODE&gt;Thread::Signal&lt;/CODE&gt; module starts up a special signal handler thread. All signals to the
process are delivered to it and it runs the associated &lt;CODE&gt;$SIG{FOO}&lt;/CODE&gt; handlers for them. Without this module, signals arriving at inopportune
moments (such as when perl's internals are in the middle of updating
critical structures) cause the perl code of the handler to be run unsafely
which can cause memory corruption or worse.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="BUGS"&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
This module changes the semantics of signal handling slightly in that the
signal handler is run separately from the main thread (and in parallel with
it). This means that tricks such as calling [perlfunc:die|die] from a signal handler behave differently (and, in particular, can't be used
to exit directly from a system call).

&lt;HR&gt;
</field>
</data>
</node>
