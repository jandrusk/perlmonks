<?xml version="1.0" encoding="windows-1252"?>
<node id="1232" title="perlman:Net::protoent" created="1999-12-22 19:52:52" updated="2005-08-10 15:45:16">
<type id="119">
perlfunc</type>
<author id="113">
root</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
Net::protoent - by-name interface to Perl's built-in getproto*() functions

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
&lt;PRE&gt; use Net::protoent;
 $p = getprotobyname(shift || 'tcp') || die &amp;quot;no proto&amp;quot;;
 printf &amp;quot;proto for %s is %d, aliases are %s\n&amp;quot;,
    $p-&amp;gt;name, $p-&amp;gt;proto, &amp;quot;@{$p-&amp;gt;aliases}&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; use Net::protoent qw(:</field>
<field name="description">

&lt;P&gt;
This module's default exports override the core 
&lt;CODE&gt;getprotoent(),&lt;/CODE&gt; 
&lt;CODE&gt;getprotobyname(),&lt;/CODE&gt; and 
&lt;CODE&gt;getnetbyport()&lt;/CODE&gt; functions, replacing them with versions that return ``Net::protoent'' objects. They take default second arguments of ``tcp''. This object has methods that return the similarly named structure field name from the C's protoent structure from
 &lt;EM&gt;netdb.h&lt;/EM&gt;; namely name, aliases, and proto. The aliases method returns an array
reference, the rest scalars.

&lt;P&gt;
You may also import all the structure fields directly into your namespace as regular variables using the 
&lt;FONT SIZE=-1&gt;:FIELDS&lt;/FONT&gt; import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding
 &lt;CODE&gt;p_&lt;/CODE&gt;. Thus, &lt;CODE&gt;$proto_obj-&amp;gt;name()&lt;/CODE&gt; corresponds to &lt;CODE&gt;$p_name&lt;/CODE&gt; if you import the fields. Array
references are available as regular array variables, so for example &lt;CODE&gt;@{ $proto_obj-&amp;gt;aliases()
}&lt;/CODE&gt; would be simply @p_aliases.

&lt;P&gt;
The 
&lt;CODE&gt;getproto()&lt;/CODE&gt; function is a simple front-end that forwards a numeric argument to 
&lt;CODE&gt;getprotobyport(),&lt;/CODE&gt; and the rest to 
&lt;CODE&gt;getprotobyname().&lt;/CODE&gt;

&lt;P&gt;
To access this functionality without the core overrides, pass the [perlfunc:use|use] an empty import list, and then access function functions with their full
qualified names. On the other hand, the built-ins are still available via
the &lt;CODE&gt;CORE::&lt;/CODE&gt; pseudo-package.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="NOTE"&gt;NOTE&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
While this class is currently implemented using the Class::Struct module to
build a struct-like class, you shouldn't rely upon this.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME="AUTHOR"&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Tom Christiansen
&lt;HR&gt;
</field>
</data>
</node>
