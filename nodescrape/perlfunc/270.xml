<?xml version="1.0" encoding="windows-1252"?>
<node id="270" title="perlfunc:defined" created="1999-08-24 18:42:44" updated="2005-08-15 07:54:50">
<type id="119">
perlfunc</type>
<author id="114">
gods</author>
<data>
<field name="doctext">
</field>
<field name="name">

&lt;P&gt;
defined - test whether a value, variable, or function is defined

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="synopsis">

&lt;P&gt;
defined 
&lt;FONT SIZE=-1&gt;EXPR&lt;/FONT&gt;

&lt;P&gt;
defined

&lt;P&gt;
&lt;HR&gt;
</field>
<field name="description">

&lt;P&gt;
Returns a Boolean value telling whether 
&lt;FONT SIZE=-1&gt;EXPR&lt;/FONT&gt; has a value other than the undefined value [perlfunc:undef|undef]. If 
&lt;FONT SIZE=-1&gt;EXPR&lt;/FONT&gt; is not present, &lt;CODE&gt;$_&lt;/CODE&gt; will be checked.

&lt;P&gt;
Many operations return [perlfunc:undef|undef] to indicate failure, end of file, system error, uninitialized variable, and
other exceptional conditions. This function allows you to distinguish [perlfunc:undef|undef] from other values. 
&lt;FONT SIZE=-1&gt;(A&lt;/FONT&gt; simple Boolean test will not distinguish among
[perlfunc:undef|undef], zero, the empty string, and &lt;CODE&gt;&amp;quot;0&amp;quot;&lt;/CODE&gt;, which are all equally false.) Note that since [perlfunc:undef|undef] is a valid scalar, its presence doesn't &lt;EM&gt;necessarily&lt;/EM&gt; indicate an exceptional condition: [perlfunc:pop|pop()]
returns [perlfunc:undef|undef] when its argument is an empty array, &lt;EM&gt;or&lt;/EM&gt; when the element to return happens to be [perlfunc:undef|undef].

&lt;P&gt;
You may also use [perlfunc:defined|defined()] to check whether a subroutine exists, by saying &lt;CODE&gt;defined &amp;amp;func&lt;/CODE&gt; without parentheses. On the other hand, use of [perlfunc:defined|defined()] upon aggregates (hashes and arrays) is not guaranteed to produce intuitive
results, and should probably be avoided.

&lt;P&gt;
When used on a hash element, it tells you whether the value is defined, not
whether the key exists in the hash. Use [perlfunc:exists|exists] for the latter purpose.

&lt;P&gt;
Examples:

&lt;P&gt;
&lt;PRE&gt;    print if defined $switch{'D'};
    print &amp;quot;$val\n&amp;quot; while defined($val = pop(@ary));
    die &amp;quot;Can't readlink $sym: $!&amp;quot;
        unless defined($value = readlink $sym);
    sub foo { defined &amp;amp;$bar ? &amp;amp;$bar(@_) : die &amp;quot;No bar&amp;quot;; }
    $debugging = 0 unless defined $debugging;
&lt;/PRE&gt;
&lt;P&gt;
Note: Many folks tend to overuse [perlfunc:defined|defined()], and then are surprised to discover that the number &lt;CODE&gt;0&lt;/CODE&gt; and &lt;CODE&gt;&amp;quot;&amp;quot;&lt;/CODE&gt; (the zero-length string) are, in fact, defined values. For example, if you
say

&lt;P&gt;
&lt;PRE&gt;    &amp;quot;ab&amp;quot; =~ /a(.*)b/;
&lt;/PRE&gt;
&lt;P&gt;
The pattern match succeeds, and &lt;CODE&gt;$1&lt;/CODE&gt; is defined, despite the fact that it matched ``nothing''. But it didn't
really match nothing--rather, it matched something that happened to be &lt;CODE&gt;0&lt;/CODE&gt; characters long. This is all very above-board and honest. When a function
returns an undefined value, it's an admission that it couldn't give you an
honest answer. So you should use [perlfunc:defined|defined()] only when you're questioning the integrity of what you're trying to do. At
other times, a simple comparison to &lt;CODE&gt;0&lt;/CODE&gt; or &lt;CODE&gt;&amp;quot;&amp;quot;&lt;/CODE&gt; is what you want.

&lt;P&gt;
Currently, using [perlfunc:defined|defined()] on an entire array or hash reports whether memory for that aggregate has
ever been allocated. So an array you set to the empty list appears
undefined initially, and one that once was full and that you then set to
the empty list still appears defined. You should instead use a simple test
for size:

&lt;P&gt;
&lt;PRE&gt;    if (@an_array) { print &amp;quot;has array elements\n&amp;quot; }
    if (%a_hash)   { print &amp;quot;has hash members\n&amp;quot;   }
&lt;/PRE&gt;
&lt;P&gt;
Using [perlfunc:undef|undef()] on these, however, does clear their memory and then report them as not
defined anymore, but you shouldn't do that unless you don't plan to use
them again, because it saves time when you load them up again to have
memory already ready to be filled. The normal way to free up space used by
an aggregate is to assign the empty list.

&lt;P&gt;
This counterintuitive behavior of [perlfunc:defined|defined()] on aggregates may be changed, fixed, or broken in a future release of Perl.

&lt;P&gt;
See also [perlfunc:undef|undef], [perlfunc:exists|exists], [perlfunc:ref|ref].

&lt;HR&gt;
</field>
</data>
</node>
