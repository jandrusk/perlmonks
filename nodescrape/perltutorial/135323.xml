<?xml version="1.0" encoding="windows-1252"?>
<node id="135323" title="read()" created="2001-12-31 02:01:54" updated="2005-08-15 09:23:58">
<type id="956">
perltutorial</type>
<author id="103712">
Parham</author>
<data>
<field name="doctext">
lets see what official perl documentation has to say about the read() function:&lt;br&gt;&lt;br&gt;

&lt;i&gt;Reads length bytes from file handle into variable (starting at offset if specified). It returns the number of bytes actually read.&lt;/i&gt;&lt;br&gt;&lt;br&gt;

bah.. i don't understand that!!&lt;br&gt;&lt;br&gt;

ok.. so here's the deal with read()... what it does is read a FILEHANDLE in chunks instead of reading it in whole.  What you might usually do is open a file and dump it into an array, but what if that file was incredibly huge?  Well then, you'd have a very large array, and with that large array, you'll be taking up lots of space, sometimes so much that what you want to do won't actually happen.  That is why the read function is useful.  ok.. so you have that little bit of information, now how can you use it.&lt;br&gt;&lt;br&gt;

A function like this serves almost no better use that to copy one or more files (well at least for me).  what you don't wanna do with a function like this is read a database file for example.  That is because you might read a certain amount of the file, and cut halfway between one element of the database (which would just be screwey).&lt;br&gt;&lt;br&gt;

ok.. just to remind you... we are doing this to save massive amounts of memory.&lt;br&gt;&lt;br&gt;

the syntax for the read() function is as follows:&lt;br&gt;&lt;br&gt;

&lt;code&gt;read(FILEHANDLE,$into_a_variable,$which_is_certain_bytes);&lt;/code&gt;
&lt;br&gt;&lt;br&gt;
lol... cheap syntax...&lt;br&gt;&lt;br&gt;

here's the code anyhow:&lt;br&gt;&lt;br&gt;

&lt;code&gt;
    open (FILE1, "$original"); 
    open (FILE2, "&gt;$copy"); 

    while ( read(FILE1,$file_contents,1024) ) { 
      print FILE2 $file_contents; 
    }

    close (FILE1);
    close (FILE2); 
&lt;/code&gt;

read() can help you when your just printing the contents of a big file:&lt;br&gt;&lt;br&gt;

&lt;code&gt;
    open (FILE1, "$original"); 
    while ( read(FILE1,$file_contents,1024) ) { 
      print "$file_contents"; 
    }
    close (FILE1);
&lt;/code&gt;
  

take into account with this example that i did a few things wrong (just to generalize the code).  I did not check for errors anywhere in the code, i did not flock my files (unix), and i certainly did not binmode() my files (in case i was on windows).&lt;br&gt;&lt;br&gt;

followup questions:&lt;br&gt;
Q: why didn't i open,close, then read the original file?&lt;br&gt;
A: can't read a closed filehandle silly!!&lt;br&gt;&lt;br&gt;

Q: why did i read 1024, what's up with that number?&lt;br&gt;
A: it's a magical number!!!!!!!!!, wait, no no... when you read a file, you read it in bytes (every character = 1 byte)... so why again am i reading in 1024 bytes?  Well that's cuz 1024 bytes = 1 kilobyte, i'm just being consistant here... you can actually read in any number you want.</field>
</data>
</node>
