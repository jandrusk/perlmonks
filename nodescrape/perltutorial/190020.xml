<?xml version="1.0" encoding="windows-1252"?>
<node id="190020" title="Beginners guide to Net::FTP" created="2002-08-14 06:10:29" updated="2005-08-15 13:55:56">
<type id="956">
perltutorial</type>
<author id="186172">
spurperl</author>
<data>
<field name="doctext">
&lt;h4&gt;Preamble&lt;/h4&gt;

I have to deal with FTP a lot... uploading and getting files, 
mostly from the same server &amp; directory (where files we give 
to customers reside). Well, I decided to try and automate things 
a bit, and use Perl for this purpose.

&lt;h4&gt;use Net::FTP&lt;/h4&gt;

I immediately plunged into CPAN and found this nice module, that 
seemed to be just what I needed. However, trying to find a good 
tutorial on the subject (the docs of this module are quite good, 
but with a tutorial it is possible to get started quicker), I was 
dissapointed and decided to write one, on a very basic level, 
for other monks.

&lt;h4&gt;Let's go ... &lt;/h4&gt;
First, connecting and logging to the desired server. As I said
earlier, most of the time I just need one server with one user
name (and most of these times, the same directory), so I just
store them in variables.
&lt;br&gt;
&lt;code&gt;
use strict;           # Don't forget !
use Net::FTP;

my $host = "your.favorite.server";
my $user = "user";
my $password = "password";

my $f = Net::FTP-&gt;new($host) or die "Can't open $host\n";
$f-&gt;login($user, $password) or die "Can't log $user in\n";
&lt;/code&gt;
&lt;br&gt;
As simple as that... neat, huh ? Well, now that we're in, all
sorts of things possible with FTP can be done. For example,
getting into a directory:
&lt;br&gt;
&lt;code&gt;
my $dir = "my/favorite/dir";

$f-&gt;cwd($dir) or die "Can't cwd to $dir\n";
&lt;/code&gt;
&lt;br&gt;
The most basic and useful operations are getting and putting
files to/from the server. This is done with the get() and
put() methods, and w/o any special options the files must reside
in the directory from which your script was called. Here is the
usage:
&lt;br&gt;
&lt;code&gt;
my $file_to_get = "something";
my $file_to_put = "other something";

$f-&gt;get($file_to_get) or die "Can't get $file from $dir\n";
$f-&gt;put($file_to_put) or die "Can't put $file into $dir\n";
&lt;/code&gt;
&lt;br&gt;
These operations will usually do for 95% of your FTP'ing, but
there are more interesting things to do, and this is where Perl
comes into question (what we've done so far can be automated
with shell commands). For example, finding out the modification
time of a file and doing something about it:

&lt;br&gt;
&lt;code&gt;
my $file_mdtm = $f-&gt;mdtm($file) or die "Can't find $file in $dir\n";
&lt;/code&gt;
&lt;br&gt;

This gets the modification time in epoch seconds format. This
way, it is easy to compare with dates generated by the time
function. For instance:

&lt;br&gt;
&lt;code&gt;
my $file_mdtm = $f-&gt;mdtm($file) or die "Can't find $file in $dir\n";

my $five_days = 3600*24*5;    # five days in seconds

if (time - $file_mdtm &gt;= $five_days)
{
    print "$file is more than 5 days old\n";
}
&lt;/code&gt;
&lt;br&gt;

We can also get a list of all files (similar to the output of 'ls')
from the directory. 

&lt;br&gt;
&lt;code&gt;
$, = "\n";
my @files = $f-&gt;ls;
print @files, "\n";
&lt;/code&gt;
&lt;br&gt;

To get a listing in the long format (of ls -l), use the dir method
rather than ls.

&lt;h4&gt;A couple of additional tidbits&lt;/h4&gt;
When you have to transfer files between different operating systems, Unix and Windows for example, you should care about Binary/ASCII transfer. ASCII should be used to transfer text files (more technically - files where lines and the breaks between them are important), which includes Perl source code, POD, etc. and all the rest is transferred with Binary. 

To toggle between Binary and ASCII mode use:

&lt;br&gt;
&lt;code&gt;
$f-&gt;ascii();
$f-&gt;binary();
&lt;/code&gt;
&lt;br&gt;

You should see the documentation of Net::FTP for more modes (EBCDIC, for one), but most chances are you will only need these two.

One more thing... Messages from the FTP server are captured in the $f-&gt;message variable. They may be error messages, but also confirmation messages (like 'CWD command successful'). One exception though is the message from the constructor new(). If it fails, the error message is recorded in $@. So, we can also open the connection like this, for a more descriptive error message:

&lt;br&gt;
&lt;code&gt;
my $f = Net::FTP-&gt;new($host) or die "Can't open $host: $@\n";
&lt;/code&gt;
&lt;br&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;
I hope you enjoyed this short tour into Net::FTP and find it helpful,
I certainly did ! These operations (along with the usual Perl cool
way of processing things) should be enough for most of the things
we have to do with FTP, but the Net::FTP module includes many more,
so if your usage is really advanced, take a look at the docs.</field>
</data>
</node>
