<?xml version="1.0" encoding="windows-1252"?>
<node id="374287" title="Perl Idioms Explained - !!expr" created="2004-07-14 08:56:06" updated="2005-08-15 11:49:33">
<type id="956">
perltutorial</type>
<author id="87452">
broquaint</author>
<data>
<field name="doctext">
&lt;b&gt;Perl Idioms Explained - &lt;tt&gt;!!expr&lt;/tt&gt;&lt;/b&gt;

&lt;code&gt;
sub is_in_list {
  return !!grep { $_ eq $_[0] } @_[ 1 .. $#_ ];
}

print "baz is in list"
  if is_in_list 'baz', qw/ foo bar baz /;

__output__

baz is in list
&lt;/code&gt;

Even though perl doesn't have a native boolean type, sometimes all a
programmer wants is a nice simple boolean value, and this is what the
&lt;tt&gt;!!expr&lt;/tt&gt; idiom provides. Given an expression, its resulting
value is negated by the boolean not operator &lt;tt&gt;!&lt;/tt&gt; and then
that value is negated to get the resulting boolean value. Let's
break that down a little

&lt;code&gt;
  use Data::Dumper;

  my $val = 'a string which evaluates to true';

  print Dumper  !$val;
  print Dumper !!$val;

  __output__

  $VAR1 = '';
  $VAR1 = '1';
&lt;/code&gt;

So as we can see there the initial negation returns a false value
(an empty string &lt;tt&gt;''&lt;/tt&gt;) to signify the negated truthfulness
of the value. Then secondary double negation returns a true value
(the integer &lt;tt&gt;1&lt;/tt&gt;) as the negated form of the false value.

&lt;p/&gt;
&lt;b&gt;Caveats&lt;/b&gt;
&lt;p/&gt;

Because it is producing a boolean value from an expression it will 
not preserve any additional information from the expression. But that's
about the only caveat, if you could consider it one, and it has the 
added plus of acting as a boolean internally as explored in
[diotalevi]'s [id://367520].

&lt;p/&gt;
&lt;b&gt;Summary&lt;/b&gt;
&lt;p/&gt;

Because we are lacking a &lt;tt&gt;&amp;#161;&lt;/tt&gt; operator the &lt;tt&gt;!!expr&lt;/tt&gt;
idiom serves to derive a boolean value from an arbitrary expression.</field>
</data>
</node>
