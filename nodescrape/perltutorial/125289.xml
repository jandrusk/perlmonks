<?xml version="1.0" encoding="windows-1252"?>
<node id="125289" title="Hash Keys (strings or numbers?)" created="2001-11-14 09:55:19" updated="2005-08-15 11:39:02">
<type id="956">
perltutorial</type>
<author id="119929">
robot_tourist</author>
<data>
<field name="doctext">
Just as there are different operators for comparing strings and numbers, you should be aware how that affects accessing elements of hashes.
&lt;p&gt;
Consider the following:
&lt;p&gt;
&lt;code&gt;
my $key1 = '00001';
my $key2 = 1;
my %hash1 = (1 =&gt; 1);
my %hash2 = (1 ,  2);
my %hash3;
   $hash3{$key1} = 3;
my %hash4;
   $hash4{$key2} = 4;
&lt;/code&gt;

Obviously, &lt;code&gt;$key1 == $key2&lt;/code&gt;, but &lt;code&gt;$key1 ne $key2&lt;/code&gt;.  That is, they are equal as numbers, but since $key1 is a string and $key2 is not, then they will not match using the eq string operator.  This leads to the following:

&lt;p&gt;
&lt;code&gt;
00001 == 1       That is: $key1 == $key2
00001 ne 1       That is: $key1 ne $key2

$hash1{$key1} is undef
$hash1{$key2} == 1
$hash2{$key1} is undef
$hash2{$key2} == 2
$hash3{$key1} == 3
$hash3{$key2} is undef
$hash4{$key1} is undef
$hash4{$key2} == 4
&lt;/code&gt;

This is particularly important when working with databases, for example, where the key field may be zerofilled. </field>
</data>
</node>
