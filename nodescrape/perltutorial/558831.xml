<?xml version="1.0" encoding="windows-1252"?>
<node id="558831" title="POD en 5 minutos" created="2006-07-02 02:21:29" updated="2006-07-01 22:21:29">
<type id="956">
perltutorial</type>
<author id="489671">
Hue-Bond</author>
<data>
<field name="doctext">
&lt;p&gt;&lt;small&gt;Translated to spanish from [node://Juerd]'s original [id://252477].&lt;/small&gt;&lt;/p&gt;

&lt;h1&gt;Plain Old Documentation en 5 minutos&lt;/h1&gt;

&lt;h2&gt;La documentación es importante&lt;/h2&gt;

&lt;p&gt;Todos el mundo lo sabe, y sabe por qué. Me voy a saltar esta sección porque cualquier discusión detallada de por qué la documentación es importante rompería mi promesa de que se puede aprender a documentar en cinco minutos.&lt;/p&gt;

&lt;h2&gt;Documentación en Perl&lt;/h2&gt;

&lt;p&gt;El código fuente en Perl puede contener documentación en formato POD. POD significa "Plain Old Documentation" (documentación simple). Se puede mezclar POD con código, poner todo el POD al principio o ponerlo al final. Sólo depende del gusto de cada uno. Tú eliges.&lt;/p&gt;

&lt;h2&gt;Encabezados en POD&lt;/h2&gt;

&lt;p&gt;La estructura lógica es importante, por tanto se suelen usar encabezados. Hay cuatro niveles, y con esto debería llegar. Se usan los comandos &lt;tt&gt;=head1&lt;/tt&gt; .. &lt;tt&gt;=head4&lt;/tt&gt; (oficialmente se les llama &lt;i&gt;comandos de párrafo&lt;/i&gt;. Son párrafos porque están separados del resto del POD mediante líneas en
blanco).&lt;/p&gt;

&lt;code&gt;=head1 NOMBRE

My::Module - Un módulo de ejemplo&lt;/code&gt;

&lt;h2&gt;Secciones habituales&lt;/h2&gt;

&lt;p&gt;Para mantener las cosas claras, se usan las mismas secciones en todas partes. Ya hemos visto la sección NOMBRE. Sí, es costumbre escribir los párrafos head1 en MAYÚSCULAS. Si haces módulos para CPAN, debes usar este estilo. Si no, o si usas POD para otras cosas que documentación (también es un formato bueno para escribir artículos o informes), queda a tu elección.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;i&gt;NOMBRE&lt;/i&gt; contiene el nombre del módulo o script, un guión y una descripción corta.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;SINOPSIS&lt;/i&gt; significa "ver todo junto" y muestra ejemplos de uso.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;DESCRIPCIÓN&lt;/i&gt; contiene una descripción larga de lo que hace el módulo y lista sus funciones.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;BUGS&lt;/i&gt; o &lt;i&gt;ADVERTENCIAS&lt;/i&gt; habla de los bugs o problemas que el usuario debería conocer.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;AGRADECIMIENTOS&lt;/i&gt; es donde el autor agracede a los que arreglan bugs y prueban el programa.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;COPYRIGHT&lt;/i&gt; o &lt;i&gt;LICENCIA&lt;/i&gt; menciona las restricciones de copyright. Sin embargo, no hay que poner toda la GPL :).&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;DISPONIBILIDAD&lt;/i&gt; anuncia dónde se pueden encontrar versiones más recientes.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;AUTOR&lt;/i&gt; explica quién ha hecho el programa, si no lo hace ya la sección COPYRIGHT.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;VÉASE TAMBIÉN&lt;/i&gt; refiere al lector a un lugar con más documentación.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todos estos son para &lt;tt&gt;=head1&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Las funciones, métodos y todo eso se explican normalmente en una sección &lt;tt&gt;=head2&lt;/tt&gt; bajo DESCRIPCIÓN.&lt;/p&gt;

&lt;p&gt;Como mínimo, hay que documentar los argumentos que reciben las funciones y los valores que se devuelven. Si hay condiciones necesarias para algo, se deben mencionar. Si una función devuelve &lt;tt&gt;undef&lt;/tt&gt; cuando hay errores, hay que hacérselo saber a la gente.&lt;/p&gt;

&lt;p&gt;Está bien escribir frases cortas. Es mejor evitar las largas.&lt;/p&gt;

&lt;h2&gt;Ejemplos de código&lt;/h2&gt;

&lt;p&gt;Los párrafos tabulados se toman como código, con la tabulación intacta. ¡Así de fácil!:&lt;/p&gt;

&lt;code&gt;=head1 SINOPSIS

    use My::Module;
    my $object = My::Module-&gt;new(); 
    print $object-&gt;as_string;&lt;/code&gt;

&lt;p&gt;Esto se llama un &lt;i&gt;párrafo textual&lt;/i&gt;.&lt;/p&gt;

&lt;h2&gt;Marcado&lt;/h2&gt;

&lt;p&gt;POD soporta un pequeño conjunto de elementos de marcado. Para mantener mi promesa, me voy a limitar a enumerarlos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;tt&gt;B&amp;lt;texto en negrita&amp;gt;&lt;/tt&gt;&lt;/li&gt;
  &lt;li&gt;&lt;tt&gt;I&amp;lt;texto en cursiva&amp;gt;&lt;/tt&gt;&lt;/li&gt;
  &lt;li&gt;&lt;tt&gt;U&amp;lt;texto subrayado&amp;gt;&lt;/tt&gt;&lt;/li&gt;
  &lt;li&gt;&lt;tt&gt;C&amp;lt;código&amp;gt;&lt;/tt&gt;&lt;/li&gt;
  &lt;li&gt;&lt;tt&gt;B&amp;lt;y se pueden I&amp;lt;anidar&amp;gt;&amp;gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También hay F, S, X y Z pero apenas se usan y no merece la pena explicarlos en un tutorial pequeño como este.&lt;/p&gt;

&lt;p&gt;Si alguna vez hace falta incluir un carácter '&amp;gt;' dentro de código, hay dos opciones. Si queremos poner &lt;tt&gt;$foo-&gt;bar&lt;/tt&gt; con fuente de código, podemos hacer esto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;tt&gt;C&amp;lt;$foo-E&amp;lt;gt&amp;gt;bar&amp;gt;&lt;/tt&gt;&lt;/li&gt;
  &lt;li&gt;&lt;tt&gt;C&amp;lt;&amp;lt; $foo-&amp;gt;bar &amp;gt;&amp;gt;&lt;/tt&gt; (¡los espacios son necesarios!)&lt;/li&gt;
  &lt;li&gt;&lt;tt&gt;C&amp;lt;&amp;lt;&amp;lt; $foo-&amp;gt;bar &amp;gt;&amp;gt;&amp;gt;&lt;/tt&gt; (¡los espacios son necesarios!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Entidades&lt;/h2&gt;

&lt;p&gt;Hemos visto que se puede usar E para entidades. Son como las entidades de HTML; también tenemos estas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;tt&gt;verbar&lt;/tt&gt; para una barra vertical.&lt;/li&gt;
  &lt;li&gt;&lt;tt&gt;sol&lt;/tt&gt; para una barra (solidus).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Las entidades numéricas pueden ir en decimal, octal (con el prefijo '0') y en hexadecimal (con el prefijo '0x').&lt;/p&gt;

&lt;h2&gt;Listas&lt;/h2&gt;

&lt;p&gt;En este caso un ejemplo es mucho más claro que una explicación:&lt;/p&gt;

&lt;code&gt;=head2 Métodos

=over 12

=item C&lt;new&gt;

Devuelve un objeto My::Module nuevo.

=item C&lt;as_string&gt;

Devuelve una representación del
objeto en forma de cadena. Sirve
principalmente para depuración.

=back&lt;/code&gt;

&lt;p&gt;Como puede verse, se empieza esta lista con &lt;tt&gt;=over&lt;/tt&gt; y la acabamos con &lt;tt&gt;=back&lt;/tt&gt;. Entre ambos comandos hay &lt;tt&gt;=item&lt;/tt&gt;s. El número después de &lt;tt&gt;=over&lt;/tt&gt; es el nivel de tabulación, usado principalmente por los renderizadores de texto para conseguir un diseño horizontal. pod2text convierte el ejemplo anterior en:&lt;/p&gt;

&lt;code&gt;  Methods
      "new"       Returns a new
                  My::Module object.

      "as_string" Returns a stringified 
                  representation of the 
                  object. This is mainly
                  for debugging purposes.&lt;/code&gt;

&lt;h2&gt;Otras cositas de POD&lt;/h2&gt;

&lt;p&gt;Se puede usar L para enlazar a secciones del mismo documento o a otros documentos. POD se termina con &lt;tt&gt;=cut&lt;/tt&gt; para volver a Perl. Hay comandos especiales para los distintos formatos de salida. Para leer la documentación completa de POD, teclear:&lt;/p&gt;

&lt;code&gt;perldoc perlpod&lt;/code&gt;

&lt;h2&gt;Un ejemplo completo&lt;/h2&gt;

&lt;code&gt;=head1 NOMBRE

My::Module - Un módulo de ejemplo

=head1 SINOPSIS

    use My::Module;
    my $object = My::Module-&gt;new();
    print $object-&gt;as_string;

=head1 DESCRIPCIÓN

Este módulo no existe en realidad, se
hizo con el único objetivo de mostrar
cómo funciona POD.

=head2 Métodos

=over 12

=item C&lt;new&gt;

Devuelve un objeto My::Module nuevo.

=item C&lt;as_string&gt;

Devuelve una representación del
objeto en forma de cadena. Sirve
principalmente para depuración.

=back

=head1 AUTOR

Juerd - &lt;http://juerd.nl/&gt;

=head1 VÉASE TAMBIÉN

L&lt;perlpod&gt;, L&lt;perlpodspec&gt;

=cut&lt;/code&gt;

&lt;h2&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Documentar con POD es fácil. ¡A divertirse!&lt;/p&gt;
</field>
</data>
</node>
