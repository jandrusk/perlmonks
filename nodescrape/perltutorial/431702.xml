<?xml version="1.0" encoding="windows-1252"?>
<node id="431702" title="José's Guide for creating Perl modules" created="2005-02-16 14:35:33" updated="2005-08-15 16:12:08">
<type id="956">
perltutorial</type>
<author id="326280">
cog</author>
<data>
<field name="doctext">
&lt;ul&gt;
&lt;li&gt;&lt;a href="#name"&gt;NAME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#synopsis"&gt;SYNOPSIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#description"&gt;DESCRIPTION&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a href="#before_you_start"&gt;Before you start&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#picking_a_good"&gt;Picking a good name for your module&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#start_your_module"&gt;Start your module&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#h2xs"&gt;h2xs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#module-starter"&gt;module-starter&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#extutils"&gt;ExtUtils::ModuleMaker&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;li&gt;&lt;a href="#step_by_step"&gt;Step by step: what to do&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a href="#document_first"&gt;Document first&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#create_tests"&gt;Create tests&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#use_strict"&gt;Use strict&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#use_warnings"&gt;Use warnings&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#exports"&gt;Exports&lt;/a&gt;&lt;/li&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href="#how_it_works"&gt;How it works&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#what_to_export"&gt;What to export&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;li&gt;&lt;a href="#inside_your_distribution"&gt;Inside your distribution&lt;/a&gt;&lt;/li&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href="#keep_the_changes"&gt;Keep the Changes up to date&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#don_t_forget_the_readme"&gt;Don't forget the README&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#the_manifest"&gt;The MANIFEST&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#makefile_pl"&gt;Makefile.PL&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#version_numbers"&gt;Version numbers&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;li&gt;&lt;a href="#almost_done"&gt;Almost done&lt;/a&gt;&lt;/li&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href="#test_it_yourself"&gt;Test it yourself&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;li&gt;&lt;a href="#before_uploading"&gt;Before uploading&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#uploading"&gt;Uploading&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;li&gt;&lt;a href="#other_good_practices"&gt;Other good practices&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a href="#release_early_release_often"&gt;Release early, release often&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#good_style"&gt;Good style&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#source_control"&gt;Source control&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#me_got_kwalitee"&gt;Me got Kwalitee&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#other_things_you_should_know"&gt;Other things you should know&lt;/a&gt;&lt;/li&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href="#cpan_testers"&gt;CPAN Testers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#registering_modules"&gt;Registering modules&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
&lt;li&gt;&lt;a href="#so_i_have_a_module"&gt;So I have a module. Now what?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final_words"&gt;Final words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#see_also"&gt;SEE ALSO&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a href="#books"&gt;Books&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#modules"&gt;Modules&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;li&gt;&lt;a href="#acknowledgements"&gt;ACKNOWLEDGEMENTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#author"&gt;AUTHOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copyright"&gt;COPYRIGHT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;a name="name"&gt;NAME&lt;/h3&gt;

José's Guide for creating Perl modules

&lt;h3&gt;&lt;a name="synopsis"&gt;SYNOPSIS&lt;/h3&gt;

Follow this guide to create good Perl distributions

&lt;h3&gt;&lt;a name="description"&gt;DESCRIPTION&lt;/h3&gt;

From time to time, someone with little experience comes to me and
asks: "I'd like to create a module. What do I do?"

&lt;p&gt;In order to answer that question to as many people as possible at the
same time, I decided to write this guide.

&lt;h4&gt;&lt;a name="before_you_start"&gt;Before you start&lt;/h4&gt;

Before creating a module, use &lt;a href="http://search.cpan.org"&gt;CPAN Search&lt;/a&gt; to
see if it already exists. If you don't find it at first, search for it
under different names; search for its functionality, rather than the
name you'd be giving it.


&lt;p&gt;You should do this exhaustively so you don't waste your time
duplicating effort.

&lt;p&gt;If your search on CPAN doesn't satisfy you, you can also search
Google. A lot of times, the right keywords are in the messages people
post about the module but not in the documentation.

&lt;p&gt;Just because a namespace exists doesn't mean you should abandon your
module. See if it is any good, if it has everything you'd like it to
have, and if it's being maintained. A good alternative is to contact
the author and ask him what he thinks about it. Maybe he'll give you
the namespace or you can also submit patches for the existing module.

&lt;p&gt;If you need help with any of this, you can ask the PAUSE admins at
&lt;a href="http://lists.perl.org/showlist.cgi?name=modules"&gt;modules@perl.org&lt;/a&gt;.
They will gladly help you with that, and sometimes they even have
different means to contact the person.

&lt;h4&gt;&lt;a name="picking a good"&gt;Picking a good name for your module&lt;/h4&gt;

A module needs a good name that's intuitive, something that people
search for, and describes the functionality it provides.

&lt;p&gt;If you're having trouble deciding on a name for your module, send an
e-mail to
&lt;a href="http://lists.perl.org/showlist.cgi?name=module-authors"&gt;module-authors@perl.org&lt;/a&gt;
and
&lt;a href="http://lists.perl.org/showlist.cgi?name=modules"&gt;modules@perl.org&lt;/a&gt;.
The readers can help you figure out a good
name.

&lt;p&gt;If you have a name you're not sure about, keep that name in your mind
for a couple of days. If you don't think of anything better, it's
probably a good name. If the name is really bad, you'll probably think
of another one during this time.


&lt;h4&gt;&lt;a name="start_your_module"&gt;Start your module&lt;/h4&gt;

Sure, you can create your *.pm file, but don't forget the Makefile.PL,
decent tests and the MANIFEST, along with META.yml and... wait a
minute, you're not actually thinking of doing this all by yourself,
are you?

&lt;p&gt;As with several other tasks that people do on a daily basis, starting
a module from scratch is a task that has been automated... several
times! This means you have a range of module creation tools to help you.

&lt;h4&gt;&lt;a name="h2xs"&gt;h2xs&lt;/h4&gt;

A simple execution of h2xs is enough to create a module; here's an
example:

&lt;p&gt;&lt;code&gt;  h2xs -XAn My::New::Module&lt;/code&gt;

&lt;p&gt;The resulting structure is something like this (depending on your
version of h2xs).

&lt;p&gt;&lt;code&gt;  .
  `-- My-New-Module
      |-- Changes
      |-- MANIFEST
      |-- Makefile.PL
      |-- README
      |-- lib
      |   `-- My
      |       `-- New
      |           `-- Module.pm
      `-- t
          `-- My-New-Module.t&lt;/code&gt;

          
&lt;p&gt;You're left with a directory with the name of your module, containing
a Changes, MANIFEST, Makefile.PL, README, lib/ directory for your
modules and a t/ directory for your tests. Not bad...

&lt;p&gt;Without the -b switch, h2xs assumes your module requires your current
version of Perl. If your module doesn't have any particular needs for
that version, change that! I have been a victim of this in the past,
with people sending me e-mails saying "Hey, your module requires Perl
5.8.4, but it would run in 5.6.0. Could you please change that?" Save
yourselves that trouble and check that.

&lt;h4&gt;&lt;a name="module-starter"&gt;module-starter&lt;/h4&gt;

The module-starter script from [cpan://Module::Starter] asks for a few more
parameters to start with. Here's an example:

&lt;p&gt;&lt;code&gt;  module-starter --module=My::New::Module --author="Me, Myself" \
    --email=myself@cpan.org&lt;/code&gt;

&lt;p&gt;Here's the resulting structure from this:

&lt;p&gt;&lt;code&gt;  `-- My-New-Module
      |-- Changes
      |-- MANIFEST
      |-- Makefile.PL
      |-- README
      |-- lib
      |   `-- My
      |       `-- New
      |           `-- Module.pm
      `-- t
          |-- 00.load.t
          |-- pod-coverage.t
          `-- pod.t&lt;/code&gt;

&lt;p&gt;Looks pretty much the same as the result of h2xs, right? But don't let
that fool you! Apart from the new files that test your POD
documentation, the contents of those files are different from the ones
generated with h2xs. Give a try to both systems and check out the
differences.


&lt;p&gt;Currently, I use module-starter to start my own modules.

&lt;h4&gt;&lt;a name="extutils"&gt;ExtUtils::ModuleMaker&lt;/h4&gt;

[cpan://ExtUtils::ModuleMaker] is another tool for creating modules. Using the
command &lt;code&gt;modulemaker&lt;/code&gt; you are taken throught a menu. The resulting
structure would be something like this:

&lt;p&gt;&lt;code&gt;  `-- My
      `-- New
          `-- Module
              |-- Changes
              |-- LICENSE
              |-- MANIFEST
              |-- Makefile.PL
              |-- README
              |-- Todo
              |-- lib
              |   `-- My
              |       `-- New
              |           `-- Module.pm
              |-- scripts
              `-- t
                  `-- 001_load.t&lt;/code&gt;

&lt;p&gt;You can see some resemblances to the two other systems, right? Notice
the Todo and LICENSE files, as well as the scripts directory.

&lt;h3&gt;&lt;a name="step_by_step"&gt;Step by step: what to do&lt;/h3&gt;

&lt;h4&gt;&lt;a name="document_first"&gt;Document first&lt;/h4&gt;

Now that you've created the skeleton of your module, you should
move on to its guts, to its code, right?

&lt;p&gt;&lt;b&gt;Wrong!&lt;/b&gt;

&lt;p&gt;My personal opinion is that you should always start by thinking about
what you're doing. This will save time in the long run.

&lt;p&gt;Start with the documentation. My experience tells me that coding gets much
easier after you've documented every single one of your functions.

&lt;p&gt;Before actually coding, write down the description of what every
function in the module should do. This gives you a chance to figure
out what you are doing.

&lt;p&gt;I usually keep a list of modules I'd like to create. Rather than
create them when I think about them, I take notes on them
from time to time. When the right time comes, I use that list and
pick one of the modules with the most notes. Then, I write the
documentation.

&lt;h4&gt;&lt;a name="create_tests"&gt;Create tests&lt;/h4&gt;

Make tests &lt;i&gt;before&lt;/i&gt; your code. I usually make mine at the same time
I'm coding. I code a function, write its tests and test it.

&lt;p&gt;Tests find things your eye wouldn't catch. As your module evolves,
things you left behind can suddenly break. Tests will warn you about
them. You should test as much as you can. No test is a test too many.

&lt;p&gt;Test for basic cases, but you should also test the extreme ones. Don't
forget to test your functions with and without parameters, and even
with parameters in excess, or wrong ones. You should know what those
functions return in each of those cases.

&lt;p&gt;You should also test your documentation, but module-starter will
automatically create those tests for that, using [cpan://Test::Pod::Coverage]
and [cpan://Test::Pod].

&lt;h4&gt;&lt;a name="use_strict"&gt;Use strict&lt;/h4&gt;

Use strict! "Strictures" can warn you about things that otherwise
you'd be unaware of, like uninitialized variables and so on. Just
put it at the top of all of your code files.

&lt;p&gt;&lt;code&gt;  use strict;&lt;/code&gt;

&lt;h4&gt;&lt;a name="use_warnings"&gt;Use warnings&lt;/h4&gt;

Warnings are good for your code and your sanity. 

&lt;p&gt;&lt;code&gt;  use warnings;&lt;/code&gt;

&lt;p&gt;Use &lt;code&gt;warnings&lt;/code&gt; and &lt;code&gt;strict&lt;/code&gt; at the very beginning of
scripts or modules.

&lt;p&gt;But there is a downside to using warnings, though: they're
not backwards compatible! If your code uses warnings, it
won't work with versions of Perl prior to 5.6. You can,
however, use warnings while developing and remove them when
releasing.

&lt;p&gt;The latest version of [cpan://Test::Harness] turns on warnings while
you test, so you might as well make your code warning free.

&lt;h4&gt;&lt;a name="exports"&gt;Exports&lt;/h4&gt;

&lt;h5&gt;&lt;a name="how_it_works"&gt;How it works&lt;/h5&gt;

When you have a module, you probably have functions. When a user uses
your module, he has to import your functions into his program.

&lt;p&gt;You're the one who chooses what he's able to import (that is, you can
choose not to let a particular function be imported) and how.

&lt;p&gt;Here's an example, to make things easier:

&lt;p&gt;&lt;code&gt;  require Exporter;

  our @ISA = qw(Exporter);

  our %EXPORT_TAGS = (
          'all' =&gt; [ qw(
                          function_make
                          function_remove
                          activate_all
                          deactivate_all
                  ) ],
          'action' =&gt; [ qw(
                          function_make
                          function_remove
                  ) ],
          'manipulation' =&gt; [ qw(
                          activate_all
                          deactivate_all
                  ) ],
  );

  our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );

  our @EXPORT = qw(
                          function1
  );&lt;/code&gt;

&lt;p&gt;Here's a brief explanation of what is going on in that code:

&lt;p&gt;The last instruction (yes, we're starting by the end) states that
whoever uses the module will always get &lt;code&gt;function1&lt;/code&gt;. The user gets
everything in the @EXPORT array automatically.

&lt;p&gt;The %EXPORT_TAGS hash is kind of an 'alias maker'. In the example, the
tag &lt;code&gt;action&lt;/code&gt; is mapped into &lt;code&gt;function_make&lt;/code&gt; and

&lt;code&gt;function_remove&lt;/code&gt;,
&lt;code&gt;manipulation&lt;/code&gt; is mapped into &lt;code&gt;activate_all&lt;/code&gt; and
&lt;code&gt;deactivate_all&lt;/code&gt;,
and &lt;code&gt;all&lt;/code&gt; is mapped in the four functions. When using a module like
this:

&lt;p&gt;&lt;code&gt;  use The::Module qw/:action/;&lt;/code&gt;

&lt;p&gt;The current package is importing &lt;code&gt;function_make&lt;/code&gt; and
&lt;code&gt;function_remove&lt;/code&gt;.

&lt;p&gt;The @EXPORT_OK is also very important. Things that are not in the
@EXPORT variable can only be imported if they are included in
@EXPORT_OK.

&lt;p&gt;In this particular example, it's OK to import any of the four
functions comprised in the &lt;code&gt;all&lt;/code&gt; tag. This means one can do something
like this:

&lt;p&gt;&lt;code&gt;  use The::Module qw/:action activate_all/;&lt;/code&gt;

&lt;p&gt;He will get &lt;code&gt;function_make&lt;/code&gt;,

&lt;code&gt;function_remove&lt;/code&gt;, &lt;code&gt;activate_all&lt;/code&gt; and
&lt;code&gt;function1&lt;/code&gt; loaded in his package.

&lt;h5&gt;&lt;a name="what_to_export"&gt;What to export&lt;/h5&gt;

So now that you have a couple of functions / methods implemented, you
should think on what to export...

&lt;p&gt;If your module is purely object oriented, then you probably won't
export anything.

&lt;p&gt;However, if you have functions, you might feel a sudden urge to export
some of them.

&lt;p&gt;Don't!!!

&lt;p&gt;Do not export functions just because. Instead, make them available to
be exported, but let the user select what he wants to use (but don't
forget to document the possibilities, of course).

&lt;p&gt;Plus, people HATE changes in the API, so think deeply about it. By not
exporting anything, your API will remain the same when you add new
functionalities to your module.

&lt;p&gt;So, instead of adding those functions to @EXPORT, try adding them to
@EXPORT_OK.

&lt;h4&gt;&lt;a name="inside_your_distribution"&gt;Inside your distribution&lt;/h4&gt;

&lt;h5&gt;&lt;a name="keep_the_changes"&gt;Keep the Changes up to date&lt;/h5&gt;

The Changes file is there for a reason, right? Keep it up to date! It
will help users know what you have changed (and therefore choosing
whether to download and install the new version or not); it will help
you in case something gets broken from one version to the next one
(because you'll know what you have changed); plus, you (and everybody
else, for that matter) will be able to keep track of your work.

&lt;h5&gt;&lt;a name="don_t_forget_the_readme"&gt;Don't forget the README&lt;/h5&gt;

The README file is really important. Not everybody reads it, but they
should. That's why it is named README; because you're supposed to READ
IT!

&lt;p&gt;Anyway, browsing a module on the CPAN, people will often look at the
README, and if it isn't much, they will very likely take that as a
sign that your module isn't really finished.

&lt;p&gt;Both h2xs and module-starter create a standard README file, which you
should change and add sections to as you feel the necessity for. I
usually copy the POD documentation of my main module to it.

&lt;h5&gt;&lt;a name="the_manifest"&gt;The MANIFEST&lt;/h5&gt;

The MANIFEST file contains the list of all files to include in the
distribution (and only those get into it).

&lt;p&gt;Whenever you add an extra file, don't forget to include it on the
MANIFEST file, or your distribution will be incomplete (and,
probably, broken).

&lt;h5&gt;&lt;a name="makefile_pl"&gt;Makefile.PL&lt;/h5&gt;

There is a file called Makefile.PL. By looking at it, you might think
that you actually don't need to do anything to it; and that might be
true, most of the times.

&lt;p&gt;If you used h2xs, you should check its parameters. Otherwise, you
should be fine.

&lt;p&gt;However, there is one situation when you absolutely should update
Makefile.PL: when you use other modules. That is, when your module has
dependencies.

&lt;p&gt;Just go there and add something like this:

&lt;p&gt;&lt;code&gt;  PREREQ_PM =&gt; {
      'Another::Module' =&gt; 0.01,
  },&lt;/code&gt;

&lt;p&gt;That, for instance, states that your module depends on the existence
of at least version 0.01 of Another::Module.

&lt;p&gt;This makes life easier for everybody. The user who's downloading and
installing your module automatically doesn't have to spend time
figuring out the dependencies, for instance; and CPANPLUS will test
your module correctly (hopefully).

&lt;p&gt;When testing, [cpan://Test::Prereq] might be a good option to check whether
there are any modules you should add to PREREQ_PM (see section "Make
tests", down below).

&lt;h5&gt;&lt;a name="version_numbers"&gt;Version numbers&lt;/h5&gt;

Whenever you release a new version, change the version number in your
module... and in the README... and be sure to include it in the
Changes file too. It's really depressing when you upload a module and
afterwards notice you got the version number wrong... (and it's even
more depressing when you release the module again to get rid of that
annoyance and you do it again).

&lt;p&gt;Do not go from version 0.01 to 1.00 and then to 2.00, because that
really looks bad and you'll be in version 20.00 in no time. Instead,
go from 0.01 to 0.02, and from there to 0.03, and so on.

&lt;p&gt;Also, there isn't really the necessity of going to 1.00 just from
0.99; people often change the integer part of the version (if one may
call it the integer part, given that it is usually a string) when they
do major changes in the design of the system, not when they run out of
numbers.

&lt;p&gt;Versions which are still being implemented usually have the current
version number with an underscore and a number, like 0.04_01 and are
called "developer releases"; the underscore makes it clear that the
distribution is not yet ready for the general public. You should
follow that practice. You can even upload a developer's release to the
CPAN. When people look at your module they will see that version, with
a red sign stating it's a developer's release and a link to the last
ready-to-take version.

&lt;h4&gt;&lt;a name="almost_done"&gt;Almost done&lt;/h4&gt;

&lt;h5&gt;&lt;a name="test_it_yourself"&gt;Test it yourself&lt;/h5&gt;

Before uploading your module, you should test it yourself. Use this to
make your distribution:

&lt;p&gt;&lt;code&gt;  make dist&lt;/code&gt;

&lt;p&gt;Suppose you had forgotten about including something in the MANIFEST,
for instance. Just because your module passed all your tests in your
specific directory doesn't mean it's working. 

&lt;p&gt;&lt;code&gt;  make disttest&lt;/code&gt;

&lt;p&gt;That should do it.

&lt;h4&gt;&lt;a name="before_uploading"&gt;Before uploading&lt;/h4&gt;

Check your distribution before you upload it.

&lt;ul&gt;
&lt;li&gt;Are the tests OK? Are they enough? Do they cover everything? Did I test after I last changed something?&lt;/li&gt;
&lt;li&gt;Did I get the version number right in three different places?&lt;/li&gt;
&lt;li&gt;Did I change the default documentation both on the module and on the README?&lt;/li&gt;
&lt;li&gt;Are all files in the MANIFEST?&lt;/li&gt;
&lt;li&gt;Did I include all the dependencies in Makefile.PL?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a name="uploading"&gt;Uploading&lt;/h4&gt;

The &lt;a href="http://pause.perl.org"&gt;PAUSE&lt;/a&gt; is the Perl's Authors Uploading Server. In order
to upload something to the CPAN, you need a PAUSE account.
Get an account at &lt;a href="http://pause.perl.org"&gt;PAUSE&lt;/a&gt;.

&lt;p&gt;If you don't like the PAUSE web interface or you want to
automate it, or find it boring or whatever, you can take a
look at &lt;code&gt;release&lt;/code&gt; and [cpan://Module::Release], which are tools
that automatically upload files to the CPAN and
SourceForge.net.

&lt;h3&gt;&lt;a name="other_good_practices"&gt;Other good practices&lt;/h3&gt;

&lt;h4&gt;&lt;a name="release_early_release_often"&gt;Release early, release often&lt;/h4&gt;

You don't have to wait until your module is completed to release it.
"Release early, release often!" You'll be more
motivated to do your work, people will be able to track your
progress and might even give you some very important feedback on it.

&lt;h4&gt;&lt;a name="good_style"&gt;Good style&lt;/h4&gt;

In the CPAN, good coding style might be the difference
between you receiving patches or not, or even between people
actually using your modules or not (because some programmers
are too suspicious and feel the urge to understand every
little piece of code they use).

&lt;p&gt;Read &lt;code&gt;perlstyle&lt;/code&gt; and Perl::Tidy which show very good
ways to tidy up your Perl code.

&lt;h4&gt;&lt;a name="source_control"&gt;Source control&lt;/h4&gt;

Keep your code under a source control system, such as CVS,
Subversion, or Perforce. You get backups, version control
and lots of other advantages. Others who want to help can also
access it if you make it public.

&lt;h4&gt;&lt;a name="me_got_kwalitee"&gt;Me got Kwalitee&lt;/h4&gt;

The Kwalitee of your modules is not really Quality, but as
close as possible as an automatic Quality-measurer can be.

&lt;p&gt;The Kwalitee project examines distributions on the CPAN for
good Perl coding practices, such as the use of strict,
existence of tests, and so on. It assigns a score to each
distribution, and therefore an average mean to the authors.

&lt;p&gt;Strive for a high Kwalitee score is good for you, your
modules, and its users. The higher Kwalitee you get, the
bigger your ego becomes, and people consider your modules to
be higher quality.

&lt;h4&gt;&lt;a name="other_things_you_should_know"&gt;Other things you should know&lt;/h4&gt;

&lt;h5&gt;&lt;a name="cpan_testers"&gt;CPAN Testers&lt;/h5&gt;

One of the best things about the CPAN is that your releases are
actually tested by other people.

&lt;p&gt;As a module author, you don't have to bother about it; you simply
upload your modules to the CPAN and wait to see if anything happens.

&lt;p&gt;If your module's tests fail somewhere, you'll receive a report
(actually, you're likely to receive quite a few, given that your
module will probably fail on other systems too).

&lt;p&gt;Don't take it too hard if you receive an email with a subject starting
with "FAIL Your::Module". It's nothing personal! You screwed up, but
it's no big deal, because thanks to the CPAN Testers you are now
informed of the problem and you can easily (hopefully) correct it and
release a new version.

&lt;p&gt;There, no harm done.

&lt;h5&gt;&lt;a name="registering_modules"&gt;Registering modules&lt;/h5&gt;

Another thing you can do is to register the namespace of
your module.

&lt;p&gt;To do that, go to your PAUSE account and use the "Register
namespace" option, which is pretty simple to use. You'll
have to elaborate on how and why is your module
important, but it's not that difficult, really.

&lt;p&gt;When people look at your home node on CPAN Search
(http://search.cpan.org/~yourusername), they will see all
your modules and a list of the registered ones, along with
some information on those.

&lt;p&gt;A registered module was approved by PAUSE admins.
Therefore, it's not simply a product of some delusional
visionist with headaches and is probably something good,
unless, of course, some PAUSE admin that day was a
delusional visionist and had an headache.

&lt;h3&gt;&lt;a name="so_i_have_a_module"&gt;So I have a module. Now what?&lt;/h3&gt;

If you're thinking "Time for another one", hold your horses there,
pal! Creating module after module really isn't that hard; the hard
thing is to maintain them all and keep them useful. Loads of modules
on their 0.01 versions that really don't do much and do have a list of
"promises" don't do anyone much good, do they? Keep
in mind that you should take all your modules to a stable version of
them.

&lt;p&gt;There's nothing wrong in having a bunch of modules you haven't
completed yet, but there &lt;b&gt;is&lt;/b&gt; something wrong in having a bunch of
modules you will &lt;b&gt;never&lt;/b&gt; complete.

&lt;h3&gt;&lt;a name="final_words"&gt;Final words&lt;/h3&gt;

That said, I hope you now know a bit more than when you started
reading this document, and I hope it helps the Kwalitee... er...
Quality of the CPAN modules around.

&lt;p&gt;If you still have doubts (or maybe even more than when you started),
there are lots of people willing to help (and of course I'm one of
them).

&lt;p&gt;Check out the
&lt;a href="http://lists.perl.org/showlist.cgi?name=modules"&gt;modules@perl.org&lt;/a&gt; mailing list.

&lt;p&gt;For anything else, I'm cog at cpan dot org.

&lt;h3&gt;&lt;a name="see_also"&gt;SEE ALSO&lt;/h3&gt;

&lt;h4&gt;&lt;a name="books"&gt;Books&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://apress.com/book/bookDisplay.html?bID=14"&gt;Writing Perl Modules for CPAN, by Sam Tregar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a name="links"&gt;Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://langworth.com/PerlTestCard"&gt;Perl Testing Reference Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.steve.gb.com/perl/lesson08.html"&gt;Perl tutorial Lesson 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cpants.dev.zsi.at/"&gt;Kwalitee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://domm.zsi.at/talks/cpants/"&gt;CPAN Testing Service (CPANTS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://magnonel.guild.net/~schwern/talks/CPANTS/full_slides/"&gt;http://magnonel.guild.net/~schwern/talks/CPANTS/full_slides/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lists.perl.org/showlist.cgi?name=module-authors"&gt;Perl module author's mailing list, module-authors@perl.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lists.perl.org/showlist.cgi?name=modules"&gt;Perl authors upload server (PAUSE) mailing list, modules@perl.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a name="modules"&gt;Modules&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;[cpan://Exporter]&lt;/li&gt;
&lt;li&gt;[cpan://ExtUtils::ModuleMaker]&lt;/li&gt;
&lt;li&gt;[cpan://Module::Release]&lt;/li&gt;
&lt;li&gt;[cpan://Module::Starter]&lt;/li&gt;
&lt;li&gt;[cpan://Perl::Tidy]&lt;/li&gt;
&lt;li&gt;[cpan://Test::More]&lt;/li&gt;
&lt;li&gt;[cpan://Test::Prereq]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a name="documentation"&gt;Documentation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;[doc://perlmodlib]&lt;/li&gt;
&lt;li&gt;[doc://perlmodstyle]&lt;/li&gt;
&lt;li&gt;[doc://perlnewmod]&lt;/li&gt;
&lt;li&gt;[doc://perlstyle]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name="acknowledgements"&gt;ACKNOWLEDGEMENTS&lt;/h3&gt;

This guide was loosely based on [id://376075] (which you should read, too).

&lt;p&gt;&lt;a href="http://alfarrabio.di.uminho.pt/~albie/"&gt;Alberto Simões&lt;/a&gt; and &lt;a href="http://www.panix.com/~comdog/"&gt;brian d foy&lt;/a&gt; made really good suggestions for sections to add to this document, as well as some changes to the existing ones.

&lt;h3&gt;&lt;a name="author"&gt;AUTHOR&lt;/h3&gt;

José Castro, cog at cpan dot org

&lt;h3&gt;&lt;a name="copyright"&gt;COPYRIGHT&lt;/h3&gt;

Copyright 2004, José Castro, Creative Commons license.</field>
</data>
</node>
