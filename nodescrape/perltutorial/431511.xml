<?xml version="1.0" encoding="windows-1252"?>
<node id="431511" title="Perl White Magic - Special Variables and Command Line Switches" created="2005-02-16 05:55:48" updated="2005-08-15 11:48:43">
<type id="956">
perltutorial</type>
<author id="326280">
cog</author>
<data>
<field name="doctext">
&lt;h3&gt;Context&lt;/h3&gt;

This tutorial on Special Variables and Command Line Switches was originally published in the YAPC::EU::2004 proceedings (where it was awarded the prize for best paper).

&lt;h2&gt;Prologue&lt;/h2&gt;

Everything was silent, but for the two of them breathing.

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'All my life I've felt there was more to system administration than
this... And now... now that you've arrived... now I know I was
right!'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'You really think I'll be up to the job, &lt;b&gt;Command Line&lt;/b&gt;?'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Yes, you will. You will, &lt;b&gt;$_&lt;/b&gt;.'

&lt;h2&gt;Super-powers come to those who wait&lt;/h2&gt;

&lt;b&gt;$_&lt;/b&gt; woke up with a sudden and loud noise. It would have sounded like a fan,
should he know what a fan was.


&lt;br&gt;He knew there were things to be done, and that sooner or later he would be
called into aid. He did not know, however, what those particular things
were and who would be in charge of choosing how and what to do exactly.

&lt;br&gt;As soon as these thoughts crossed his mind, gravity suddenly disappeared. Some
kind of magnet picked him up and promptly took him to the top of a script,
right after a &lt;b&gt;shebang&lt;/b&gt;.

&lt;br&gt;Beneath him, comments could be seen.

&lt;p&gt;Commented code can mean an awfull lot of different things, and &lt;b&gt;$_&lt;/b&gt; knew this
better than any other variable. It can be meant to identify the Creator or the
purpose of life, but can also exist just to state that something is yet
unfinished. One would hope it was not the case...

&lt;p&gt;Slowly at first, he started going down the script. Slowly enough to read the
comments:

&lt;p&gt;&lt;code&gt;        # counts words and lines in a file&lt;/code&gt;

&lt;p&gt;He passed that line and saw the next following ones:

&lt;p&gt;&lt;code&gt;        while (&lt;&gt;) {
                @words = split /\W+/;
                $words += @words;
        }
        print "lines -&gt; $.\nwords -&gt; $words\n";&lt;/code&gt;

&lt;p&gt;Not knowing what to do, he started feeling anxious as gravity pulled him nearer
to his destiny. At this point, &lt;b&gt;Command Line&lt;/b&gt; shouted at him:

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Use the monitor on your wrist!!'

&lt;p&gt;He looked at his wrist and saw something that resembled a smaller version of
something someone wanting to hitchhike through the galaxy would take as a guide,
but it was actually something someone wanting to hitchhiking through a &lt;b&gt;Perl&lt;/b&gt;
script would take as a guide. Plus, it had no "Don't Panic" stuff; instead, it
had &lt;b&gt;Perldoc&lt;/b&gt; written on it.

&lt;br&gt;He quickly turned it on and searched for &lt;b&gt;split&lt;/b&gt; (he already knew what a

&lt;b&gt;while&lt;/b&gt; was). He realized that being called with a single argument,
&lt;b&gt;split&lt;/b&gt; would need him to complete his task.

&lt;br&gt;Knowing this, and reaching that line (several times in a row), &lt;b&gt;$_&lt;/b&gt; took his
place in front of the split.

&lt;br&gt;&lt;b&gt;ZAP&lt;/b&gt;!!! &lt;b&gt;ZAP&lt;/b&gt;!!!

&lt;br&gt;His contents were instantely splited up and the resulting array was counted,
having that result summed up to &lt;b&gt;$words&lt;/b&gt;.


&lt;br&gt;After exiting the &lt;b&gt;while&lt;/b&gt;, &lt;b&gt;$_&lt;/b&gt; met &lt;b&gt;$.&lt;/b&gt;:

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Hi', said &lt;b&gt;$_&lt;/b&gt;.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Hi.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Who are you?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I'm &lt;b&gt;$.&lt;/b&gt;.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'That I can see, but... exactly what are you doing here?'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I am counting lines.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'What lines have you been counting if I've been through all of them and never
saw you?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I see you're not familiar with special variables... I would advise you to
make use of that little device on your wrist and search for &lt;b&gt;perlvar&lt;/b&gt;.'

&lt;p&gt;So he did, and promptly understood what a special variable was: they were
there, they just couldn't be seen... &lt;b&gt;$.&lt;/b&gt;, in particular, had been
counting the input lines right from the beginning of the script, and was ready
to pop into action when called... and so it did.

&lt;br&gt;Not a second after realizing all this, &lt;b&gt;$_&lt;/b&gt; was pulled back to where he was
before. &lt;b&gt;Command Line&lt;/b&gt; walked near him for a while:

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'How do you feel?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- '... Strange...'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Don't worry, you'll get over it. Happens to all of us. Soon you'll be ready
for more.'

&lt;h2&gt;Different perspectives&lt;/h2&gt;

As before, &lt;b&gt;$_&lt;/b&gt; was taken again by the strange force. He was ready for it before
it started, but then came the surprise...

&lt;br&gt;Strangely enough, this time he wasn't moving vertically, but rather
horizontally... Everything resembled an assembly line.

&lt;br&gt;The first thing he noticed was a command line switch, but he did not know what
one was yet. He reached the monitor on his wrist and started hitting it
desperately. He eventually strolled across &lt;b&gt;perlrun&lt;/b&gt; and searched for it.
He found it:

&lt;p&gt;&lt;code&gt;        -e commandline
            may be used to enter one line of program.&lt;/code&gt;

&lt;p&gt;That explained the horizontal movement.

&lt;br&gt;Looking back and forward, he saw the complete line of code:

&lt;p&gt;&lt;code&gt;        perl -e 'while (&lt;&gt;) {$w += split /\W+/} print "$. $w\n"'&lt;/code&gt;

&lt;p&gt;He could now understand what was going on. This was practically the same script
as before, except now it wasn't a script anymore, it was an "One-Liner", one of
the most beautiful creations by the hand and mind of the Original
Creator &lt;small&gt;(The one and only: Larry Wall)&lt;/small&gt;.

&lt;br&gt;The whole line resumed as expected, and he was on his way back home when he was
suddenly pulled back again into action.

&lt;br&gt;He saw a weird switch, this time. It was &lt;b&gt;-ne&lt;/b&gt;. He looked it up but
couldn't find it. He was staring at the beginning of chapter "Command
Switches", wondering, when he read something that washed away any doubt:

&lt;p&gt;&lt;code&gt;        As with all standard commands, a single-character switch
       may be clustered with the following switch, if any.

           #!/usr/bin/perl -spi.orig   # same as -s -p -i.orig&lt;/code&gt;

&lt;p&gt;&lt;b&gt;-ne&lt;/b&gt; was surely the same as &lt;b&gt;-n -e&lt;/b&gt;, and he already knew one of
them. He looked for the other and promptly found it:

&lt;p&gt;&lt;code&gt;        -n   causes Perl to assume the following loop around
            your program [...]

              LINE:
                while (&lt;&gt;) {
                    ...             # your program goes here
                }&lt;/code&gt;

&lt;p&gt;He looked at the rest of the line to get a better feel of what was going on:

&lt;p&gt;&lt;code&gt;        perl -ne '$w+=split /\W+/; END{print"$w $.\n"}'&lt;/code&gt;

&lt;p&gt;Everything seemed OK now. He already knew that any &lt;b&gt;END&lt;/b&gt; block was to be
executed only at the end of the script, after everything else. The program
would go like this:


&lt;p&gt;&lt;code&gt;        LINE:
          while (&lt;&gt;) {
                  $w += split /\W+/;
                  END { print"$w $.\n" }
          }&lt;/code&gt;

&lt;p&gt;That was rather close to his first task, but with less coding going around.

&lt;br&gt;He finished his task and rushed for another one; this time it was a script
inside a file again:

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -n

        # counts words and lines in a file

        @words = split /\W+/;
        $words = @words;
        END { print "lines -&gt; $.\nwords -&gt; $words\n"; }&lt;/code&gt;

&lt;p&gt;Someone was obviously doing experiments, but that was good for him, as he was
surely learning from it.

&lt;br&gt;By knowing the &lt;b&gt;-n&lt;/b&gt; switch, someone had actually shrinked the code.

&lt;br&gt;He would have asked &lt;b&gt;-n&lt;/b&gt; what he though about it, but everyone knows
command line switches don't speak. That would be just stupid.


&lt;br&gt;&lt;b&gt;$_&lt;/b&gt; went home and rested for a while.

&lt;h2&gt;A whole bag of switches&lt;/h2&gt;

Again, the same startup routine. This time, the user was noticeably more
experienced:

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -w
        use strict;&lt;/code&gt;

&lt;p&gt;At least he seemed to know what he was doing. Every good script should start
with something like that. The &lt;b&gt;Perldoc&lt;/b&gt; screen told him:

&lt;p&gt;&lt;code&gt;        -w   prints warnings about dubious constructs&lt;/code&gt;

&lt;p&gt;One should always use it.

&lt;br&gt;Below, another comment:

&lt;p&gt;&lt;code&gt;        #Adding a commit each 100 lines&lt;/code&gt;

&lt;p&gt;He had heard something about this... DBA's sometimes have trouble
inserting too many rows in a table, as that very same information is kept as
roolback data between &lt;b&gt;commit&lt;/b&gt; instructions
(so everything can be undone, if needed).

&lt;br&gt;Adding a &lt;b&gt;commit&lt;/b&gt; each 100 lines would solve this problem, as the maximum
of information kept at a time would consist of 100 records.

&lt;br&gt;Following, the code:

&lt;p&gt;&lt;code&gt;        my $line;

        while (&lt;&gt;) {
          $line++;
          unless ( $line % 100 ) {
            print "commit;\n";
          }
          print;
        }&lt;/code&gt;

&lt;p&gt;It wasn't as complicated as it would seem at first. He noticed the &lt;b&gt;$line&lt;/b&gt;
part could be replaced with &lt;b&gt;$.&lt;/b&gt;, and the rest of the code could be
shortened with the &lt;b&gt;-n&lt;/b&gt;, but he really wasn't expecting what happened in
his next task.

&lt;br&gt;Just after finishing this, he was called again into action. He was getting used
to this and wouldn't get dizzy anymore.

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -wp
        use strict;

        #Adding a commit each 100 lines

        unless ( $. % 100 ) { print "commit;\n"; }&lt;/code&gt;

&lt;p&gt;He looked up for &lt;b&gt;-p&lt;/b&gt;:


&lt;p&gt;&lt;code&gt;        -p   causes Perl to assume the following loop around
            your program [...]

              LINE:
                while (&lt;&gt;) {
                    ...             # your program goes here
                } continue {
                    print or die "-p destination: $!\n";
                }&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'So that's why the print statement has been removed.'

&lt;p&gt;It simply wasn't needed anymore, as the &lt;b&gt;-p&lt;/b&gt; switch would do the same as
&lt;b&gt;-n&lt;/b&gt; and also print each line.

&lt;br&gt;He was pondering about this, when yet another surprise called for his
attention. He was, once again, in the &lt;b&gt;Command Line&lt;/b&gt;; the user was making use of
the &lt;b&gt;-e&lt;/b&gt; switch once again:


&lt;p&gt;&lt;code&gt;        perl -i -pe 'print "commit;\n" unless ($.%100)'&lt;/code&gt;

&lt;p&gt;He knew what to do:

&lt;p&gt;&lt;code&gt;        -i[extension]
            specifies that files processed by the "&lt;&gt;"
            construct are to be edited in-place.  It does
            this by renaming the input file, opening [...]&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Wow.' He couldn't help the remark.

&lt;p&gt;That meant the input was to be read, processed, and then rewritten over the
original file. This would probably save the user the trouble of copying a new
file over an older one.

&lt;br&gt;He was taken back to his home.

&lt;br&gt;How many more switches would he meet?

&lt;h2&gt;They come in pairs&lt;/h2&gt;

The same routine. Once again, &lt;b&gt;$_&lt;/b&gt; was ready for surprises and had his &lt;b&gt;Perldoc&lt;/b&gt;
prepared.

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -wlp
        use strict;

        # trims lines to 80 columns

        substr($_, 80) = "";&lt;/code&gt;

&lt;p&gt;He looked up &lt;b&gt;-l&lt;/b&gt; and, to his surprise, he found the exact code he was
running on. Hum... the user probably had a &lt;b&gt;Perldoc&lt;/b&gt; of his own... (Perhaps he
was a special variable too?) The text on &lt;b&gt;-l&lt;/b&gt; would go:


&lt;p&gt;&lt;code&gt;        -l[octnum]
            enables automatic line-ending processing.&lt;/code&gt;

&lt;p&gt;After reading a little bit more, he understood what was going on: the trailing
"&lt;b&gt;\n&lt;/b&gt;" on each line would be discarded, each line would be trimmed up to
80 chars and printed with the "&lt;b&gt;\n&lt;/b&gt;" back on. He noticed the text
mentioned two other variables: &lt;b&gt;$/&lt;/b&gt; and &lt;b&gt;$\&lt;/b&gt;... and their names
sounded fierce.

&lt;p&gt;Usually, one goes from more code to less code, and not the other way around,
but this was exactly what happened next. His next script, instead of using the
&lt;b&gt;-l&lt;/b&gt; switch, seemed to do the same by using those very same two variables.
The user was obviously up to something (probably just testing and learning new
features).


&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -wp
        use strict;

        # trims lines to 80 columns

        chomp;
        $\ = $/;

        substr($_, 80) = ""&lt;/code&gt;

&lt;p&gt;Dazzled in astonishment, he didn't even think about reaching for his &lt;b&gt;Perldoc&lt;/b&gt;. He
instead asked the variables directly what they were up to.

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Hi.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Can't you see we're busy?' said &lt;b&gt;$/&lt;/b&gt;.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I'm sorry, but I'm new at this, and so many special variables and command
switches are starting to mess with my mind...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Oh, a beginner...' said &lt;b&gt;$\&lt;/b&gt;.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Indeed, a beginner.' &lt;b&gt;$/&lt;/b&gt; agreed.


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes. I was wondering who you guys are, and what you are doing.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I am the input record separator. Usually, I contain a "&lt;b&gt;\n&lt;/b&gt;"', explained
&lt;b&gt;$/&lt;/b&gt;.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'And I am the output record separator... usually containing nothing...'
sighed &lt;b&gt;$\&lt;/b&gt;, with a slight note of disappointment.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'And what are you doing?' asked &lt;b&gt;$_&lt;/b&gt;.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'We're swapping contents.' said &lt;b&gt;$\&lt;/b&gt;.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes, it's a rather common practice.' Continued &lt;b&gt;$/&lt;/b&gt;.


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Actually, it's so common that someone actually invented a switch for this.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'So I noticed. &lt;b&gt;-l&lt;/b&gt;, isn't it?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'So you've seen it too, uh?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes.'

&lt;p&gt;As good as the conversation was getting, &lt;b&gt;$_&lt;/b&gt; noticed the end of the script
arriving.

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'What's the purpose of what you're doing?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Well, you see, most of the times you print something, you're actually printing
a line, but that means you have to print the "&lt;b&gt;\n&lt;/b&gt;" too, as the common
print statement does not assume that. However, by making use of &lt;b&gt;$\&lt;/b&gt; here,
you have no need of doing that...'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes, I'll do it for you!' interrupted &lt;b&gt;$\&lt;/b&gt; 'Just give me whatever
you want printed on every line, and I'll take care of it for you! We're close
friends, &lt;b&gt;print&lt;/b&gt; and I.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Wow... that's nice...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes, and that's not all. You should see what *I* can do!' said &lt;b&gt;$/&lt;/b&gt;.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Really, what can you do?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Later, my friend, here comes &lt;b&gt;EOF&lt;/b&gt; to take us home.'

&lt;p&gt;So that was the name of this magnet: &lt;b&gt;EOF&lt;/b&gt;.


&lt;h2&gt;The mighty variable&lt;/h2&gt;

&lt;b&gt;$_&lt;/b&gt; fell asleep with &lt;b&gt;$/&lt;/b&gt; on his head, and woke up still thinking about
it.

&lt;br&gt;He was called into action and, to his contentment, there was &lt;b&gt;$/&lt;/b&gt;:

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -wpi
        use strict;

        $/ = "";

        while(&lt;&gt;) {
                chomp;
                print "$_\n";
        }&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Hi.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Hi.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I can't see any comments on this script. What's going on?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'We're joining paragraphs.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'What do you mean?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I mean we're joining paragraphs. Those having more than two blank lines
between them are being pushed closer to each other. Basically, we're
normalizing text.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I see... And how exactly are we doing that? And what's your part in all
this?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Well, as I told you before, I am the input record separator, which means I'm
the one who decides the input that gets in at a time. Regularly, I have a
string (usually "&lt;b&gt;\n&lt;/b&gt;"), which is what I use to make that decision,
spliting the input on that string, but I do have a couple of more tricks up my
sleeve...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I can imagine that. Are you using one of those right now?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes. I am using the paragraph mode. By assigning me to an empty string, the
user gets me to separate input at blank lines. Basically, at "&lt;b&gt;\n\n+&lt;/b&gt;".'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I see. But why not assigning you to "&lt;b&gt;\n\n+&lt;/b&gt;" directly?'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Hey, kiddo! See me flying?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'No...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Know why?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Why?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'That's because I'm a special variable, not a super variable. I can't deal
with regular expressions.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Hum... And I assume a simple "&lt;b&gt;\n\n&lt;/b&gt;" wouldn't suffice, as that
wouldn't get all the cases...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'You assume correctly. I would take "&lt;b&gt;\n\n\n\n&lt;/b&gt;", for instance, and find
another record in the middle of it. Hence, paragraph mode.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Wow... Nice trick!'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Thanks.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Too bad you don't do regular expressions, though...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'It's not that bad, really. Anyway, &lt;b&gt;awk&lt;/b&gt; has to be better for something.'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I suppose you're right. What about your other tricks?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Well, I can be assigned to a reference to an integer, a scalar containing an
integer or a scalar that's convertible to an integer...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'And what will that do?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Given that integer, I will read that many bytes at a time.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Wow.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Gotta go. Bye.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'See you around.'

&lt;p&gt;That night, &lt;b&gt;$_&lt;/b&gt; had trouble falling asleep, dreaming of the possibilities those
&lt;b&gt;$/&lt;/b&gt;'s tricks could mean.

&lt;h2&gt;Separations&lt;/h2&gt;

Yet another day.


&lt;p&gt;&lt;code&gt;        perl -ane 'print shift(@F), "\n"'&lt;/code&gt;

&lt;p&gt;Everything was so easy now that he was used to &lt;b&gt;Perldoc&lt;/b&gt;. He was even able to open
two windows at a time, one with &lt;b&gt;perlrun&lt;/b&gt; and another with &lt;b&gt;perlvar&lt;/b&gt;.
He used the first one to search for &lt;b&gt;-a&lt;/b&gt;:

&lt;p&gt;&lt;code&gt;        -a   turns on autosplit mode when used with a -n or
            -p.  An implicit split command to the @F array
            is done as the first thing inside the implicit
            while loop produced by the -n or -p.

                perl -ane 'print pop(@F), "\n";'

            is equivalent to

                while (&lt;&gt;) {
                    @F = split(' ');
                    print pop(@F), "\n";
                }&lt;/code&gt;

&lt;p&gt;and the second for &lt;b&gt;@F&lt;/b&gt;:

&lt;p&gt;&lt;code&gt;        @F      The array @F contains the fields of each
               line read in when autosplit mode is turned
               on. [...]&lt;/code&gt;

&lt;p&gt;To tell the truth, the entry for &lt;b&gt;-a&lt;/b&gt; already explained what &lt;b&gt;@F&lt;/b&gt; was
doing there. Anyway, the code in the documentation was very similar to the one
he was running on. He was clearly on a script for printing the first word of
every input line. What for? He would soon find out.

&lt;br&gt;Next, he passed the following code:

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -wane
        use strict

        # study commands (input is .bash_history)

        $commands{shift(@F)}++;

        END {
                for (keys %commands) {
                        print "$_ -&gt; $commands{$_}\n"
                }
        }&lt;/code&gt;

&lt;p&gt;This was a very simple way of studying how often commands are ran on the
system.

&lt;br&gt;There was still another line of documentation, regarding &lt;b&gt;-a&lt;/b&gt;:

&lt;p&gt;&lt;code&gt;        An alternate delimiter may be specified using -F.&lt;/code&gt;

&lt;p&gt;Another switch. And soon he would see and example of its usage:

&lt;p&gt;&lt;code&gt;        perl -F: -ane 'print shift(@F),"\n"'&lt;/code&gt;

&lt;p&gt;Hum... this would split the input lines on '&lt;b&gt;:&lt;/b&gt;' and print every first
element of those lines. (Maybe it would run on &lt;b&gt;/etc/passwd&lt;/b&gt;, for a
list of users)


&lt;h2&gt;TIMTOWTDI&lt;/h2&gt;

&lt;b&gt;Command Line&lt;/b&gt; approached &lt;b&gt;$_&lt;/b&gt; softly and woke him gently:

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Wake up, &lt;b&gt;$_&lt;/b&gt;!'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'What is it?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Come, you're going to learn an important lesson today.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'OK.'

&lt;p&gt;They walked along for a while.

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'So what's this lesson I'm going to learn?'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Be patient, my friend. Look, here's your first script for today!'

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -w
        use strict;

        my @a = (1, 2, 3, 4, 5);

        print "@a";&lt;/code&gt;

&lt;p&gt;&lt;b&gt;$_&lt;/b&gt; went through it as if he hadn't been doing anything else all his life.

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'There.'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Very good. Did you notice the output?'

&lt;p&gt;&lt;code&gt;        1 2 3 4 5&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Cool...', said &lt;b&gt;$_&lt;/b&gt;, '&lt;b&gt;Perl&lt;/b&gt; already knows he has to put a space between
those elements, right?'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Wrong. The truth is &lt;b&gt;Perl&lt;/b&gt; knows he has to put something between those
elements, allright. You're about to meet that something.'

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -w
        use strict;

        my @a = (1, 2, 3, 4, 5);

        $" = "|";
        print "@a";&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Done!'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Well done. Now, did you notice the difference?'

&lt;p&gt;&lt;code&gt;        1|2|3|4|5&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Yes. I assume &lt;b&gt;Perl&lt;/b&gt; takes the contents of &lt;b&gt;$"&lt;/b&gt; and prints that everytime
an array is printed. Right?'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Wrong again... &lt;b&gt;Perl&lt;/b&gt; only uses &lt;b&gt;$"&lt;/b&gt; if the array is inside quotes.
Take a look at our next example!'

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -w
        use strict;

        my @a = (1, 2, 3, 4, 5);

        print @a;&lt;/code&gt;

&lt;p&gt;&lt;b&gt;$_&lt;/b&gt; went through it.

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Now look at the output produced.'

&lt;p&gt;&lt;code&gt;        12345&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Odd... shouldn't a space be there too, separating elements?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'No. When not quoted, an array to be printed is joined with the contents of
&lt;b&gt;$,&lt;/b&gt;, and that variable is empty by default. Next example!'

&lt;p&gt;&lt;code&gt;        #!/usr/bin/perl -w
        use strict;

        my @a = (1, 2, 3, 4, 5);

        $, = "-";
        print @a;&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'And now the output!'

&lt;p&gt;&lt;code&gt;        1-2-3-4-5&lt;/code&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'See?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes... Interesting...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Indeed. Let's go.'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'OK...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'See how you can do the same with two different variables?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'That's your lesson for today. There's more than one way to do it!'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I see...'

&lt;p&gt;&lt;b&gt;$_&lt;/b&gt; was clever enough to remain silent for a while and think about what &lt;b&gt;Command Line&lt;/b&gt; had
just said... "There's more than one way to do it!"

&lt;h2&gt;Thoughts&lt;/h2&gt;

'I like it here.' exclaimed &lt;b&gt;$_&lt;/b&gt;. 'All these switches and special
variables, being famous and loved by all.'


&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'That's not entirely true... Some variables are not very well known, and
others are not very appreciated.' replied &lt;b&gt;Command Line&lt;/b&gt;.

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'For instance...?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- '&lt;b&gt;$.&lt;/b&gt;.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Really? Is that true?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Yes, it is.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Who doesn't appreciate it?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'YAPC speakers who have to write articles with sentences ending in &lt;b&gt;$.&lt;/b&gt;.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Why? I don't see any problem with a sentence ending in &lt;b&gt;$.&lt;/b&gt;.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Oh, but there are problems with sentences ending in &lt;b&gt;$.&lt;/b&gt;.'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I really can't see what's wrong with &lt;b&gt;$.&lt;/b&gt;...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Then you probably didn't pay attention to the four previous lines.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Oh! That! I didn't realize that... Boy, it must really suck, being the
only variable some people don't like.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Oh, not the only one...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Who else, then?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Guess.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- '&lt;b&gt;$,&lt;/b&gt;, &lt;b&gt;$?&lt;/b&gt;?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Those and &lt;b&gt;$!&lt;/b&gt;!'

&lt;h2&gt;Modules and one-liners&lt;/h2&gt;

&lt;b&gt;$_&lt;/b&gt; was on the move again.

&lt;p&gt;&lt;code&gt;        perl -MExtUtils::Installed -le '
                print for ExtUtils::Installed-&gt;new()-&gt;modules'&lt;/code&gt;

&lt;p&gt;He looked &lt;b&gt;-M&lt;/b&gt; on &lt;b&gt;Perldoc&lt;/b&gt; and was preparing to look for &lt;b&gt;-E&lt;/b&gt; too when he
noticed there was no need for that...


&lt;br&gt;&lt;b&gt;-M&lt;/b&gt;, according to &lt;b&gt;Perldoc&lt;/b&gt;, would do the same as a &lt;b&gt;use&lt;/b&gt; clause
inside the script. Basically, that line was the same thing as

&lt;p&gt;&lt;code&gt;perl -        le 'use ExtUtils::Installed;
                print for ExtUtils::Installed-&gt;new()-&gt;modules'&lt;/code&gt;

&lt;p&gt;The &lt;b&gt;E&lt;/b&gt; was actually the beginning of a parameter for the &lt;b&gt;-M&lt;/b&gt;
switch.


&lt;br&gt;He also looked for documentation on that module (with &lt;b&gt;Perldoc&lt;/b&gt;, too). He found
it and came to the conclusion that that line of code would print the name of
every &lt;b&gt;Perl&lt;/b&gt; module installed. That was a nice way to know what was on the
system.

&lt;h2&gt;The sky is the limit&lt;/h2&gt;

'I think I'm getting the hang of this.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'There is still much to learn, &lt;b&gt;$_&lt;/b&gt;.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Are there more special variables?'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Quite a few. And some more command line switches, too.'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Wow... This is just amazing...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'I'm glad you like it. However, we won't have the time to go through all of
them now.'


&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Oh... That's too bad...'

&lt;br&gt;&amp;nbsp;&amp;nbsp;- 'Don't worry. There are lots of places where you can learn more, and &lt;b&gt;Perldoc&lt;/b&gt; is one
of them.'

&lt;p&gt;&lt;b&gt;$_&lt;/b&gt; stared at his &lt;b&gt;Perldoc&lt;/b&gt;.

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'And besides that, you have lots of mailing lists, perlmonks, etc. You'll never
run out of information. The trick is to keep practising.'

&lt;p&gt;&lt;b&gt;$_&lt;/b&gt; smiled.

&lt;h2&gt;Revelations&lt;/h2&gt;

&lt;b&gt;$_&lt;/b&gt; was browsing his &lt;b&gt;Perldoc&lt;/b&gt; and talking to &lt;b&gt;Command Line&lt;/b&gt;:

&lt;p&gt;&amp;nbsp;&amp;nbsp;- '&lt;b&gt;Perl&lt;/b&gt; really seems to be a wonderful language, and all the special variables
and command line switches take an important part in it.'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Yes, but there is much more than that to &lt;b&gt;Perl&lt;/b&gt;.'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Really?'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Yep. You should wait to read some of the other articles the author of this
one is thinking of writing.'


&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Wow... I can see why the user chose &lt;b&gt;Perl&lt;/b&gt;.'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Yes, but it wasn't like that in the beginning.'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Really?'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'Really. Things were a lot different, until the moment he had an epiphany,
and heard a voice saying: "Don't try to do everything with the &lt;b&gt;Bash&lt;/b&gt;. Instead,
only try to realize the truth."'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'What truth?'

&lt;p&gt;&amp;nbsp;&amp;nbsp;- 'There is no &lt;b&gt;Bash&lt;/b&gt;.'</field>
</data>
</node>
