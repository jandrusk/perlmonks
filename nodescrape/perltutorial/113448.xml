<?xml version="1.0" encoding="windows-1252"?>
<node id="113448" title="HowTo build and distribute a PPMed module for Win32" created="2001-09-19 19:17:33" updated="2005-08-15 12:45:39">
<type id="956">
perltutorial</type>
<author id="63535">
idnopheq</author>
<data>
<field name="doctext">
&lt;b&gt;UPDATE:&lt;/b&gt; this [Tutorial] is geared toward the [http://www.acivestate.com|ActiveState] ActivePerl for Win32.  THX [ybiC]!  Added a dropped &amp;LT;&lt;tt&gt;READMORE&lt;/tt&gt;&amp;GT; tag.  Added lots 'o stuff from [$code or die] and [ybiC].  This will continue to grow and change.
&lt;p&gt;
&lt;b&gt;WARNING:&lt;/b&gt; my &lt;tt&gt;ispell&lt;/tt&gt; failed and I need to fix it ... if I offend anyone with my poor typing or spelling, consider them manners.  &lt;i&gt;I don't mind if you don't like my manners.  I don't like 'em myself. They're pretty bad. I grieve over them on long winter evenings.&lt;/i&gt; &lt;- &lt;i&gt;The Big Sleep&lt;/i&gt; ... gawd I &lt;b&gt;* L O V E *&lt;/b&gt; that line!
&lt;p&gt;
&lt;h1&gt;Problem&lt;/h1&gt;
&lt;p&gt;
You want to make a Perl Package Manager ( PPM ) package but every time you try to make the module, it fails.  Or the resulting package isn't quite right.  Or you missed something, like the pod 2 html files and their introduction into the ActiveState ActivePerl Documentation index.
&lt;p&gt;
&lt;h1&gt;Discussion&lt;/h1&gt;
&lt;p&gt;
Being a good monk, you have read [http://aspn.activestate.com//ASPN/Reference/Products/ActivePerl/faq/ActivePerl-faq2.html#how_to_make_ppm_distribution|How do I make a PPM package?] and followed the instructions verbatim.  Maybe you even read [http://aspn.activestate.com//ASPN/Reference/Products/ActivePerl/lib/Pod/perlwin32.html#usage%20hints|perlwin32 - Perl under Win32 - Usage Hints].  But things still don't DWIM.
&lt;p&gt;
So what now?  Well, there are several catches to building a module under Win32.  Some can be overcome freely.  Some may cost money.  Some may be unattainable at this time.  Here are some things I've found so far.
&lt;p&gt;
&lt;readmore&gt;
&lt;h1&gt;Solutions!&lt;/h1&gt;
&lt;ol&gt;

  &lt;li&gt;&lt;h3&gt;&lt;tt&gt;nmake&lt;/tt&gt; complains about something called &lt;tt&gt;cl.exe&lt;/tt&gt;&lt;/li&gt;&lt;/h3&gt;
       &lt;p&gt;
       Well, you may be trying to compile an [http://www.perlmonks.org/index.pl?node=perlman%3Aperlxs&amp;lastnode_id=148|XS] module.  These are modules that require some kind of external library and need a full-blown C compiler to build the dll ( dynamic link library ).  &lt;tt&gt;nmake&lt;/tt&gt; looks for &lt;tt&gt;cl.exe&lt;/tt&gt; because that is M$ VC++'s compiler.  One might try running to [http://sources.redhat.com/cygwin/|CygWin], "a UNIX environment for Windows".  Another might try [http://www.mingw.org/|MingW], "a collection of header files and import libraries that allow one to use GCC and produce native Windows32 programs that do not rely on any 3rd-party DLLs".
       &lt;p&gt;
       IMHO, stick with the compiler used for your perl distribution.  [http://www.activestate.com/|ActiveState] uses Micro$oft VisualC++.  One can find "Eductational" versions that may work, but I went with the "Standard Edition".  Unless you have a lot of $$$, I don't advocate getting the "Professional" or "Enterprise" editions.  I think I paid $79 USD for my copy.
       &lt;p&gt;
       When you install it, have it update your environment variables ( %ENV for the perl-ers ).  You can do what you want with the IDE ( Integrated Development Environment - I use [http://www.gnu.org/software/emacs/windows/ntemacs.html|NT Emacs] myself ).
       &lt;p&gt;
       If you want to use [cpan://Bundle::CPAN|CPAN] to get and build your modules not found in the usual places ( see [idnopheq|my home node] for a small list ) for PPM, you'll need a few other tools ...
       &lt;p&gt;
       &lt;ul&gt;
	 &lt;li&gt;[http://www.ncftpd.com/download/|ncftp client]&lt;/li&gt;
	 &lt;li&gt;[http://www.info-zip.org/|gzip, zip, and unzip]&lt;/li&gt;
	 &lt;li&gt;[http://unxutils.sourceforge.net/|wget and maybe less], tho this distribution has gobs of other "native" Win32 versions of GNU tools!&lt;/li&gt;
	 &lt;li&gt;[http://www.fdisk.com/doslynx/lynxport.htm|lynx]&lt;/li&gt;
	 &lt;li&gt;[http://language.perl.com/ppt/src/tar/index.html|tar].  I use this one from the [http://language.perl.com/ppt/|Perl Power Tools] because it maintains case.&lt;/li&gt;
       &lt;/ul&gt;
       &lt;p&gt;
       Get these installed and run &lt;tt&gt;perl -MCPAN -e shell&lt;/tt&gt; because that's how one runs CPAN!  Point all the questions to your downloaded files from above.  I advocate implementing a &lt;tt&gt;/usr&lt;/tt&gt;-type layout similar to *nix and adding it to your &lt;tt&gt;%PATH%&lt;/tt&gt;.
       &lt;p&gt;
       Go grab your favorite modules via the &lt;tt&gt;install &lt;i&gt;package&lt;/i&gt;&lt;/tt&gt; nomenclature.  Of course, one can use the old fashioned "ftp it to my disk, un-tar-gzip it and run nmake" style, too.
       &lt;p&gt;
       What will result is a directory in which the module's source resides within.  If one uses CPAN's install, it will go through the make process, sometimes failing.  If one decides to follow the manual path, follow the &lt;tt&gt;README&lt;/tt&gt; or &lt;tt&gt;INSTALL&lt;/tt&gt; directions.
       &lt;p&gt;
       Many modules engineered with Win32 in mind have a &lt;tt&gt;makefile.msc&lt;/tt&gt; file.  If CPAN fails, look for this.  If it exists, do a &lt;tt&gt;nmake /f makefile.msc&lt;/tt&gt;.  This can be especially important if the module contains some XS.  Modify the module's provided instructions to include this &lt;tt&gt;/f maskefile.msc&lt;/tt&gt; bit through out.
       &lt;p&gt;

   &lt;li&gt;&lt;h3&gt;Great!  But no matter what I do, the tests fail!&lt;/h3&gt;&lt;/li&gt;
       &lt;p&gt;
       Well, that might happen, especially of the test scripts are xenophobically aligned with *nix.  Try running the test scripts the long way ( &lt;tt&gt;perl &lt;i&gt;testscript&lt;/i&gt;&lt;/tt&gt; which should not make a difference but occasionally do ).

   &lt;li&gt;&lt;h3&gt;I &lt;tt&gt;nmake&lt;/tt&gt;d it fine; it tested fine.  Now what?&lt;/h3&gt;&lt;/li&gt;
       &lt;p&gt;
       Well, in that directory where the source resides and the &lt;tt&gt;namake&lt;/tt&gt; was performed, there should be a &lt;tt&gt;blib&lt;/tt&gt; directory.  From the doc listed above:
       &lt;p&gt;
       &lt;i&gt;"The resulting files are placed in the blib directory that is created when you run nmake. These files should be packed into an archive like this:
       &lt;p&gt;
       &lt;tt&gt;tar cvf package.tar blib&lt;br&gt;
       gzip --best package.tar&lt;/tt&gt;&lt;p&gt;
       
       You now have an archive called package.tar.gz. Then you generate the PPD file by:&lt;p&gt;
       
       &lt;tt&gt;nmake ppd&lt;/tt&gt;&lt;p&gt;

       You have to edit the resulting PPD file and add the location of the package archive into &lt;tt&gt;&lt;CODEBASE HREF="" /&gt;&lt;/tt&gt;. The location is relative to the PPD file."&lt;/i&gt;
       &lt;p&gt;
       Note that other modifications may need to be made to the resulting ppd file.
       &lt;p&gt;

   &lt;li&gt;&lt;h3&gt;What about the perldocs in the ActiveState ActivePerl Documentation html index?&lt;/h3&gt;&lt;/li&gt;
       &lt;p&gt;
       Well, use &lt;tt&gt;pod2html &lt;i&gt;module.pm&lt;/i&gt;&lt;/tt&gt; against all the peritent pm files.  As all modules differ in this, you'll have to figure out for yourself which ones are "pertinent".
       &lt;p&gt;
       Before one does the previous step ( OOOPPPSSSS! ), create a directory structure under &lt;tt&gt;blib&lt;/tt&gt; like &lt;tt&gt;html\site\lib\Compress&lt;/tt&gt;, where one replaces the &lt;tt&gt;Compress&lt;/tt&gt; with the "master" level ... i.e. &lt;tt&gt;Win32&lt;/tt&gt; for a standard Win32 module.  Move the html file(s) from above into this "master" level directory.
       &lt;p&gt;
       Now goto ( I &lt;b&gt;know&lt;/b&gt; there's no goto in perl! ) to the previous step.  Refresh or reload your "ActiveState ActivePerl Documentation" Start menu item.  Voila!

   &lt;li&gt;&lt;h3&gt;Well done!  But how do I distribute this to the masses that continually create a massive din in eager anticipation for this module!&lt;/h3&gt;&lt;/li&gt;
       &lt;p&gt;
       Easy, now!  Getting a little extra ego with your Wheaties, ain't-cha!  Hmmm ... I know little about din-producing masses.  But setting up a PPM distribution point is, perhaps, the easiest part of the whole endeavor.  Remember before when I quoted about the ppd file?  That path entered in the &lt;tt&gt;CODEBASE HREF&lt;/tt&gt; portion is critial.  Also, find a place to house it.  But, with my own humble PPM respository as an example:
       &lt;p&gt;
       The 'root' is [http://idnopheq.perlmonk.org].  The ppd files shall reside in [http://idnopheq.perlmonk.org/perl/packages].  In the ppd file's &lt;tt&gt;CODEBASE HREF&lt;/tt&gt;, I have a relative path to this of &lt;tt&gt;x86/Win32/&lt;i&gt;package&lt;/i&gt;.tar.gz&lt;/tt&gt;.  The &lt;tt&gt;tar.gz&lt;/tt&gt; file is placed in [http://idnopheq.perlmonk.org/perl/packages/x86/Win32/], a la &lt;tt&gt;CODEBASE HREF&lt;/tt&gt;.  One can freely follow my lead here, or come up with something more to their aesthetical testes.
       &lt;p&gt;
       &lt;b&gt;UPDATE:&lt;/b&gt; Thanks to [$code or die]!!!!
       &lt;p&gt;
       See [id://114554|($code or die) Re: Repository code (HowTo build and distribute a PPMed module for Win32)] about setting your new repository up for search capabilities.  Aw, heck!  I'll just quote it, but don't forget to ++ the node!
       &lt;p&gt;
       &lt;i&gt;
&lt;cite&gt;       Right, I have been re-reading PPM.pm and understand how the search command works.
       &lt;p&gt;
       When you do &lt;tt&gt;search Module-Name&lt;/tt&gt;, it run's the function &lt;tt&gt;list_available()&lt;/tt&gt;. This function returns a list of .ppd files in the repository. It does it differently depending on what type of repository it is, e.g.: file://, UNC, SOAP, or http://. We're interested in the last bit of the function concerning http.
       &lt;p&gt;
       If the repository is an http:// repository (not soap), then it calls the function &lt;tt&gt;read_href()&lt;/tt&gt; which returns the text on the page. &lt;tt&gt;list_available()&lt;/tt&gt; expects either a directory listing (Apache or IIS format) or a default.prk format file - ActiveState's Visual Package Manager that's part of the Perl Dev Kit.
       &lt;p&gt;
       For the search to work properly (without implimenting a SOAP interface or .prk) your repository must return something that resembles a directory listing, which PPM.pm parses.
       &lt;p&gt;
       Thankfully, PPM.pm keeps the &amp;quot;libwww-perl/&amp;quot; part of the user agent. So we can write a small script that will return a directory listing for ppm and a nicely formatted page for regular browsers. This is a small working example of what to do:
       &lt;/i&gt;
&lt;code&gt;
use strict;
use CGI qw( :all );

my $user_agent = user_agent();
my $html_redirection = 'http://127.0.0.1/index.htm';

if ($user_agent =~ m#libwww-perl/#)
{
    # it's a perl bot - probably ppm, so return a

    # compatible directory listing
    print_dir_listing();
} else {
    # it's probably a regular browser, redirect...
    print redirect(-uri =&gt; $html_redirection);
}

sub print_dir_listing
{
    # Get the current directory, (cwd doesn't necessarily work in IIS)
    (my $cwd = $0) =~ s[\\][/]g;
    $cwd =~ s[/([^/]*)$][];

    print header({-type =&gt; "text/plain"});
    opendir FOLDER, $cwd or die "I don't have permission $!";
    print a({-href =&gt; $_}, $_ ), "\n" for grep { /\.ppd$/ } readdir FOLDER;
    closedir FOLDER;
}
&lt;/code&gt;
&lt;p&gt;
&lt;i&gt;
Save this to index.pl or something and make sure it's the default document. Then change $html_redirection variable to the URL where you want your actual users to go to and you're set. You can of course do something more dynamic for the actual users page, such as parse the XML in the PPD files to give user's full information on the modules (version, description, author etc) without having to edit an html file every time you change a package or add a new one. I leave that as an exercise for the reader :)
&lt;/cite&gt;
&lt;/i&gt;
&lt;p&gt;
Many THX to [$code or die] for this information.  &lt;b&gt;HAVE YOU ++ IT YET?&lt;/b&gt;
&lt;p&gt;
  &lt;li&gt;&lt;h3&gt;But the $%^&amp;ing thing still doesn't work or the tests fail!&lt;/h3&gt;&lt;/li&gt;
       &lt;p&gt;
       Well, one may look to overloading functions to meet Win32's oddities.  But sometimes that doesn't work.  Like &lt;tt&gt;fork&lt;/tt&gt; doesn't always work.  These are the items that cannot necessarily be overcomed.  &lt;i&gt;explitive&lt;/i&gt; happens.  And, anyway, why aren't you running an *nix or BSD derivative?
       &lt;p&gt;
  &lt;li&gt;&lt;h3&gt;I fear *nix and all that it implies!  That's why!&lt;/h3&gt;&lt;/li&gt;
       &lt;p&gt;
       As with so many things, TIMTOWTDI and YMMV.
       &lt;p&gt;
  &lt;li&gt;&lt;h3&gt;I can't afford the $$$ for the C compiler, and the free ones fail me.  What do I do?&lt;/h3&gt;&lt;/li&gt;
       &lt;p&gt;
       Fear not!  I've been there; done that.  Email me at &lt;a href="mailto:idnopheq@perlmonk.org"&gt;idnopheq at permonk.org&lt;/a&gt; or drop me a &lt;tt&gt;/msg&lt;/tt&gt; in the chatterbox, and I'll see what I can do!  Failing that, post a request in the Monastary.  If my lurid and sordid personal and/or professional life precludes me from helping, the other fine monks in this fine establishment may be able to help.
       &lt;p&gt;
&lt;/ol&gt;
&lt;b&gt;UPDATE:&lt;/b&gt; the below is based off of subsequent posts and other information I found ... THX to all for their recommendations!
&lt;p&gt;
&lt;h1&gt;Further Reading&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
      &lt;a href="http://jenda.krynicky.cz/perl/PPM.html"&gt;
      How2 create a PPM distribution
      &lt;/a&gt;
      by Jenda Krynicky
  &lt;/li&gt;
  &lt;li&gt;
      [ybiC]'s home node or 
      &lt;a href="http://www.perlmonks.org/index.pl?node_id=113457&amp;lastnode_id=113448"&gt;
      Diary of a frustrated !(AS|PPM) Perl install on Win2k
      &lt;/a&gt;
      .  Remember to ++ this one, too! Or ELSE!
  &lt;/li&gt;
  &lt;li&gt;
      &lt;a href="http://aspn.activestate.com//ASPN/Reference/Products/ActivePerl/faq/ActivePerl-faq2.html"&gt;
      ActivePerl FAQ2 - PPM
      &lt;/a&gt;
  &lt;/li&gt;
      - and -
  &lt;li&gt;
      &lt;a href="http://aspn.activestate.com//ASPN/Reference/Products/ActivePerl/lib/Pod/perlwin32.html"&gt;
      perlwin32 - Perl under Win32
      &lt;/a&gt;
      , both by
      &lt;a href="http://www.activeState.com"&gt;
      ActiveState
      &lt;/a&gt;
      et al.
  &lt;/li&gt;
  &lt;li&gt;
      &lt;a href="http://aspn.activestate.com/ASPN/Mail/Message/538018"&gt;
      Some fun with PPM: Automatically install modules when needed
      &lt;/a&gt;
      by Jan Dubios
  &lt;/li&gt;
&lt;/ul&gt;
HTH
&lt;p&gt;</field>
</data>
</node>
