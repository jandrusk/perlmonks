<?xml version="1.0" encoding="windows-1252"?>
<node id="589388" title="(Subroutine) Arguments explained (sort of.)" created="2006-12-12 15:06:43" updated="2006-12-12 10:06:43">
<type id="956">
perltutorial</type>
<author id="534091">
Andrew_Levenson</author>
<data>
<field name="doctext">
For someone entirely new to programming, what an "argument" is, exactly, may not be perfectly clear. I know it wasn't for me. I'd get plenty of responses about how it reads the "command line argument" or it "passes the argument on...," which meant nothing to me, but when I asked for further clarification, I was beyond help because nobody understands that one can &lt;i&gt;not&lt;/i&gt; know what an argument is.&lt;br&gt;For those who, like me, just sadly could not pick up what an argument is and why, here is an abstract, in laymen's terms!&lt;br&gt;&lt;br&gt;An argument is, essentially, data supplied to the script ( or sub routine, or...) to fulfill parameters that need to be met. Okay, not so easy to explain. Perhaps an example will clarify.&lt;br&gt;&lt;br&gt;This program is going to print out a letter or word supplied to it, but instead of inputting the word/letter, we're going to supply it as a command line argument.&lt;br&gt;&lt;code&gt;use strict; #always and forever, amen.
use warnings;  #or else.

my $argument=$ARGV[0]; 
#@ARGV is an array containing the arguments supplied. We're taking the first value.
print "\n$argument"; 
#This here will show you exactly what has been put into $argument.&lt;/code&gt;&lt;br&gt;If you run that, nothing happens. That's because you have supplied no arguments, so $argument is empty. Now try running it again, but when you go to open it in the command prompt, follow the program name with a letter or word, as such:&lt;br&gt;&lt;code&gt;C:&gt;"C:\foo.pl" arg&lt;/code&gt;&lt;br&gt;Now, if all goes well and I didn't just make a fool out of myself, the program should print "arg," because "arg" was supplied as the first command line argument. Make sense?&lt;br&gt;&lt;br&gt;Additionally (and I may be going out on a limb to assume that anyone else is as dense as I am), have you ever noticed that when you call a subroutine, you call it as  &lt;code&gt;foo();&lt;/code&gt;, not &lt;code&gt;foo;&lt;/code&gt;? That's because inside of those parentheses, you're supposed to supply your arguments for the subroutine (fed into the temporary array, @_)! It's like a mini-script, I guess. Sort of. In a way.&lt;br&gt;So for this, &lt;code&gt;

$bar='Hello,';
$baz=' world!';
foo($bar, $baz); 
#calls the foo subroutine with $bar and $baz as arguments

sub foo {
  print for @_;
#will first print out the contents of $bar, then $baz because 
#those are the arguments given.
}
&lt;/code&gt;&lt;br&gt;it would be read as "Print $bar, then print $baz";&lt;br&gt;&lt;br&gt;Arguments don't always have to be variables, though. For instance, &lt;code&gt;
foo("square", 3);

sub foo{
  my ($shape, $size) = @_;
}
&lt;/code&gt;
This sets $shape to "square" and $size to 3, because they are given as the arguments for the subroutine.

&lt;br&gt;I hope that helps!</field>
</data>
</node>
