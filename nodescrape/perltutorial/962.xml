<?xml version="1.0" encoding="windows-1252"?>
<node id="962" title="String matching and Regular Expressions" created="1999-11-09 22:50:43" updated="2005-08-15 16:21:39">
<type id="956">
perltutorial</type>
<author id="113">
root</author>
<data>
<field name="doctext">
Part of what makes Perl such a useful language is its powerful string-matching
 and handling capabilities.  Regular expressions are basically patterns a
programmer can compare a string of text to.  Matching a regular expression with 
a string of text either returns true or false. The two main pattern matching
operators are [perlfunc:m|m//] and [perlfunc:s|s//].  These are the matching and
substitution operators respectively.  Another function that makes use of regular 
expressions is [perlfunc:split|split]
The matching operator [perlfunc:m|m//] is normally written //. 
Perl allows you to change the delimiters to something besides /.  If you don't 
change the delimiters from /, you can use // instead of m//.
Now for a quick example of m//:
&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
while(&lt;&gt;){
   if(/the/){    #does $_ contain the
      print "Your line of text contains the word 'the'\n";
   }
}
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR&gt;
Now for a quick example of [perlfunc:s|s///]:&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
@machines_os=("OpenBSD","Windows","Linux", "Windows");
foreach(@machines_os){
   s/Windows/Linux/;
}
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR&gt;
This function goes through each of the items in @machine_os.  If any of
them contain Windows, the thing between the first set of //.  It is replaced with
Linux the string between the second and third /'s.  You can see why you've gotta love Perl. Instead of
1 OpenBSD machine, 2 Windows machines and a Linux box, I now have 1 OpenBSD box
and 3 Linux machines.  At least that is what @machines_os now contains.
&lt;BR&gt;
&lt;BR&gt;
Now on to [Quantifiers in regular expressions].

</field>
</data>
</node>
