<?xml version="1.0" encoding="windows-1252"?>
<node id="418141" title="Perl Babysteps 1: Your First Simple Script" created="2004-12-29 19:10:33" updated="2005-08-15 17:31:18">
<type id="956">
perltutorial</type>
<author id="8157">
webfiend</author>
<data>
<field name="doctext">
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This copy of the tutorial has been going stale as Perl moves on. There is another descended from the same material on my &lt;a href="http://coolnamehere.com/geekery/perl/learn/01-getting-started.html"&gt;own site&lt;/a&gt;. I haven't decided yet whether to update this page and add the material that has been added to Perl Babysteps tutorial since then.&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;
This page is intended to provide the non-programmer with a gentle introduction to the Perl programming language. When you are done with it, you should feel ready to learn more. You will not be an expert, but you will be able to find the information you need to go farther. Beginners and experts alike should feel free to send suggestions about how to improve this tutorial.
&lt;/p&gt;
&lt;a name="Installing_Perl"&gt;&lt;h2&gt;Installing Perl&lt;/h2&gt;&lt;/a&gt;

&lt;p&gt;
It is very easy to find and install a copy of Perl for your operating system. How easy? Well, it's a single simple download, and you may already have it on your machine!
&lt;/p&gt;

&lt;a name="Windows"&gt;&lt;h3&gt;Windows&lt;/h3&gt;&lt;/a&gt;

&lt;p&gt;
Well, okay. If you are using a Windows machine, you probably        &lt;em&gt;don't&lt;/em&gt; already have Perl on your machine. But it's easy to get. You even have a couple different versions to choose from.
&lt;/p&gt;

&lt;h4&gt;ActivePerl&lt;/h4&gt;

&lt;p&gt;
This is the officially blessed version of Perl for Windows. It is released by &lt;a href="http://www.activestate.com/"&gt;ActiveState&lt;/a&gt;.        ActivePerl can be downloaded for free, or you can order the ActiveCD from them. It comes with a wealth of widely used third-party libraries such as Tk, LWP, and the XML bundle. Whether you choose to download or purchase, here is your best starting point:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;a href="http://www.activestate.com/Products/ActivePerl/"&gt;http://www.activestate.com/Products/ActivePerl/&lt;/a&gt;
&lt;/blockquote&gt;

&lt;h4&gt;Perl on Cygwin&lt;/h4&gt;

&lt;p&gt;
On the other hand, maybe you prefer to have Windows with a touch of UNIX on top. First, I want to let you know that Perl is perfectly happy under Windows these days. But if you insist, or just happen to be curious, Perl is also available for &lt;a href="http://cygwin.com/"&gt;Cygwin&lt;/a&gt;. Just rerun Cygwin's &lt;code&gt;setup.exe&lt;/code&gt; program, and make sure that "Perl" is        checked. Oh, and add an editor while you're at it, too. Maybe &lt;a href="http://www.vim.org/"&gt;Vim&lt;/a&gt; or &lt;a href="http://gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt;.   
&lt;/p&gt;

&lt;a name="Everybody_Else"&gt;&lt;h3&gt;Everybody Else&lt;/h3&gt;&lt;/a&gt;

&lt;p&gt;
You probably already have it, especially if you happen to be on a UNIX-based operating system such as Linux, FreeBSD, or Mac OS X. Seriously. Try the &lt;code&gt;which&lt;/code&gt; command if you don't believe me.        
&lt;/p&gt;

&lt;code&gt; $ which perl
 /usr/bin/perl
&lt;/code&gt;

&lt;p&gt;
That'll teach you to doubt me. Just kidding. If you don't have it installed, you'll get a message along the lines of &lt;code&gt;perl not found in ...&lt;/code&gt;. Double-check to see if it's on your installation media. For OS X folks, you just need to install the Developer Disk.
&lt;/p&gt;

&lt;a name="The_Macho_Geek_Option_Compile_From_Source"&gt;&lt;h3&gt;The Macho Geek Option: Compile From Source&lt;/h3&gt;&lt;/a&gt;

&lt;p&gt;
Whatever operating system you are on, this is a valid choice. Still, there are a lot of options when building. It can be more than a little overwhelming. I would suggest you go with one of the available binary downloads while you're just starting out.
&lt;/p&gt;

&lt;a name="Creating_Perl_Programs"&gt;&lt;h2&gt;Creating Perl Programs&lt;/h2&gt;&lt;/a&gt;

&lt;p&gt;
The tradition in programming literature is to start by creating a program that prints a simple phrase, such as "Hello, World!" The idea is to give you some clue how much work is involved in creating a minimal program. I, for one, am not going to argue with tradition. Not this one, at least. Type the following into your text editor:
&lt;/p&gt;

&lt;code&gt; # hello.pl
 #  - Displays a warm greeting

 print "Hello, World!\n";
&lt;/code&gt;

&lt;p&gt;
Save the file as &lt;code&gt;hello.pl&lt;/code&gt;. We will run it in a few moments, but first, let's take a quick look at what we've got so far.
&lt;/p&gt;

&lt;a name="Comments"&gt;&lt;h3&gt;Comments&lt;/h3&gt;&lt;/a&gt;

&lt;p&gt;
On each line, everything from &lt;code&gt;&lt;/code&gt;# to the end of the line is a &lt;em&gt;comment&lt;/em&gt;. Perl ignores comments, so they allow you to communicate with other people who read your code. Comments are &lt;em&gt;very very good&lt;/em&gt;. When you come back to look at a complex script after a few months, you might forget what some block of code does, or why you chose one solution over another. Having the comments there help to remind you what you were intending, and generally serve to make it much easier sorting everything out.
&lt;/p&gt;

&lt;p&gt;
I like to start all of my scripts off with a quick header to describe the purpose of the program. Here is a rough template:
&lt;/p&gt;

&lt;code&gt; # hello.pl
 #  Displays a warm greeting.
&lt;/code&gt;

&lt;p&gt;
All we have is the name of the file and a brief description of what the program does. That is often all that you need, especially for simple scripts like this one.
&lt;/p&gt;

&lt;p&gt;
&lt;em&gt;NOTE&lt;/em&gt;: The official documentation system for Perl is POD, or "Plain Old Documentation". It is powerful and widely used, but it is also beyond our scope for this stage of the tutorial. However, to give you a little taste of how much easier POD makes life, here is the first sentence displayed after you type the command &lt;code&gt;perldoc -f print&lt;/code&gt; at the command line:
&lt;/p&gt;

&lt;blockquote&gt;
Prints a string or a list of strings.        
&lt;/blockquote&gt;

&lt;p&gt;
You should read [POD in 5 Minutes] if you are curious to learn about how to format POD documentation for reading with the &lt;code&gt;perldoc&lt;/code&gt; command.
&lt;/p&gt;

&lt;p&gt;
Now you would probably like to know how to actually run your program. Save the file you have been editing and switch to a command line. Make sure you are in the same directory as your script - this should be as simple as &lt;code&gt;cd project_directory&lt;/code&gt;. Once you are in the right place, type the following into the command line:
&lt;/p&gt;

&lt;code&gt; $ perl hello.pl
 Hello, World!
 $
&lt;/code&gt;

&lt;p&gt;
Oh, what was the "\n" at the end of the string for? That is a fair question. It's a special code for the newline character. What's the newline character do? It's easier to show you what happens when you &lt;em&gt;don't&lt;/em&gt; have it:
&lt;/p&gt;

&lt;code&gt; print "Hello, World!";
&lt;/code&gt;

&lt;p&gt;
Save it and run it.
&lt;/p&gt;

&lt;code&gt; $ perl hello.pl
 Hello, World!$
&lt;/code&gt;

&lt;p&gt;
Adding a newline character in the string tells Perl that you want to print a new line. Now do you see?
&lt;/p&gt;

&lt;p&gt;
All this is kind of cool, but it would be nice to customize it a little bit. Maybe we could change the program so that it says "Hello" to us personally.
&lt;/p&gt;

&lt;code&gt; # hello.pl
 #  Displays a warm greeting.

 my $name = "Brian";
 print "Hello, $name!\n";
&lt;/code&gt;

&lt;p&gt;
Now you might notice the semicolon at the end of each line. What? You noticed them before? Well, you're quicker than me. Perl recognizes the semicolon as the marker which ends one statement. So each statement must be terminated by a semicolon. Putting them on separate lines like that is something that Perl doesn't care about, but you might lose friends if you tried to put everything on one line.
&lt;/p&gt;

&lt;p&gt;
Now -- what? &lt;em&gt;Another&lt;/em&gt; question? Okay, go ahead. What's that &lt;code&gt;my&lt;/code&gt; doing? We use the word &lt;code&gt;my&lt;/code&gt; to declare variables. Declaration is         when we tell Perl that we have a variable we plan on using. The language doesn't require declaration, but it is good form, and you will find your code easier to debug later on as you learn more about clean programming.
&lt;/p&gt;

&lt;p&gt;
What's a variable? We'll get to that in a second. I'm impatient to see a running program! Save the file, and run it again.
&lt;/p&gt;

&lt;code&gt; $ perl hello.pl
 Hello, Brian!
 $
&lt;/code&gt;

&lt;p&gt;
There, I feel better. Let's move on to talking about variables.
&lt;/p&gt;

&lt;a name="Variables"&gt;&lt;h3&gt;Variables&lt;/h3&gt;&lt;/a&gt;

&lt;p&gt;
We stored the string "Brian" in the variable &lt;code&gt;name&lt;/code&gt;. A &lt;em&gt;variable&lt;/em&gt; is basically just something you want the computer to remember so that you can get to it when you want it later. You can get a lot more
complicated than that if you want, and a lot of programmers do. However, this definition should hold us over for a long time.
&lt;/p&gt;

&lt;p&gt;
The "&lt;code&gt;$&lt;/code&gt;" symbol at the beginning tells Perl what kind of information this variable holds. Perl basically has two kinds of variables: 
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Individual things like strings and numbers&lt;/li&gt;
  &lt;li&gt;Collections of things like lists and dictionaries&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
When you start digging in, you will see how broad of a generalization I've just made. Still, I think that this will last us until the end of this article, and the basic idea holds true for a &lt;em&gt;lot&lt;/em&gt; of Perl programming.
&lt;/p&gt;

&lt;p&gt;
Anyways. Individual things are also called &lt;em&gt;scalars&lt;/em&gt; by people who think that you don't have enough things to remember. Ah well, we'll get used to it. To their credit, "scalar" &lt;em&gt;is&lt;/em&gt; a shorter term than "individual thing". Perl makes it easy to recognize a scalar, by making you prefix all scalar variables with a dollar sign. So
 &lt;code&gt;$name&lt;/code&gt; is "the scalar variable name", or even "the individual thing called name". Eventually many Perl hackers end up calling it "dollar name".
&lt;/p&gt;

&lt;code&gt; my $name = "Brian"; # My scalar variable called 'name' has the value "Brian"
&lt;/code&gt;

&lt;p&gt;
Having a program that displays the exact same message every time you run is nice when it comes to being consistent, but not so entertaining as a program. "What does it do?" "It prints out my name." "Oh." See? &lt;em&gt;Boring&lt;/em&gt;. Let's make things a little more interesting. We could change the value of &lt;code&gt;name&lt;/code&gt; in the code, but it might be a little tiresome to do this before showing it to each new person. How about making the program ask for a name? User interaction - a neat idea.
&lt;/p&gt;

&lt;code&gt; print "What is your name? ";
 my $name = &lt;STDIN&gt;;
 print "Hello, $name!\n";
&lt;/code&gt;

&lt;p&gt;
We only made one small change, but I'll admit that there's a lot going on with that one change. Here's the short version:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;code&gt;&lt;STDIN&gt;&lt;/code&gt; gets input from the user that you can save in a variable.
&lt;/blockquote&gt;

&lt;p&gt;
There's a long version. Feel free to skip it if you just want to get on with it. The long version works out like this:
&lt;/p&gt;

&lt;blockquote&gt;
The scalar &lt;code&gt;$name&lt;/code&gt; is assigned the value of &amp;lt;STDIN&amp;GT; . &lt;code&gt;&lt;...&gt;&lt;/code&gt; tells Perl that we want it to read a &lt;em&gt;filehandle&lt;/em&gt; and hand the results back to us. A &lt;em&gt;filehandle&lt;/em&gt; is a source of information. It could be an open file, but in this case it is &lt;code&gt;STDIN&lt;/code&gt;. &lt;em&gt;&lt;code&gt;STDIN&lt;/code&gt;&lt;/em&gt; is the &lt;em&gt;standard input stream&lt;/em&gt; - geek talk for "wherever we expect user input to be coming from". Most of the time, &lt;code&gt;STDIN&lt;/code&gt; just means "keys the user enters from the keyboard". The result of reading from the filehandle &lt;em&gt;(in this case, &lt;code&gt;STDIN&lt;/code&gt;, which is in this case the text you entered from the keyboard)&lt;/em&gt; is stored in &lt;code&gt;$name&lt;/code&gt;.
&lt;/blockquote&gt;

&lt;p&gt;
There's a really long version, but I'm getting bored so we'll skip it for now.
&lt;/p&gt;

&lt;code&gt; $ perl hello.pl
 What is your name? Brian
 Hello, Brian
 !
 $
&lt;/code&gt;

&lt;p&gt;
Hey, what happened? The exclamation is all the way on the next line!
&lt;/p&gt;

&lt;p&gt;
Calm down. Everything is going to be okay. Perl just counts the &lt;code&gt;ENTER&lt;/code&gt; key at the end as a part of the input, and &lt;code&gt;ENTER&lt;/code&gt; prints out as a newline &lt;em&gt;('\n' if you've been paying attention)&lt;/em&gt;. Counting the newline is fine for reading text from a file, but it's a little inconvenient when you are handling input from the keyboard. Fortunately, there's the &lt;code&gt;chomp&lt;/code&gt; function. What's it do? Let's ask &lt;code&gt;perldoc -f chomp&lt;/code&gt;. On second thought, let's not. You can go
right ahead, but I just did, and discovered that the docs for &lt;code&gt;chomp&lt;/code&gt; are a little dense for today. Let's try mine:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;code&gt;chomp&lt;/code&gt; removes the last character from a string, &lt;em&gt;but only if that character is whitespace or a newline&lt;/em&gt;.
&lt;/blockquote&gt;

&lt;p&gt;
Let's give it a try.
&lt;/p&gt;

&lt;code&gt; print "What is your name? ";
 my $name = &lt;STDIN&gt;;
 chomp($name);
 print "Hello, $name!\n";
&lt;/code&gt;

&lt;p&gt;
You already know what &lt;code&gt;chomp&lt;/code&gt; does, so running this script shouldn't provide any surprises:
&lt;/p&gt;

&lt;code&gt; $ perl hello.pl
 What is your name? Brian
 Hello, Brian!
 $
&lt;/code&gt;

&lt;p&gt;
... and we're done!
&lt;/p&gt;

&lt;a name="Conclusion"&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;/a&gt;

&lt;p&gt;
Nice work! You have begun to learn Perl by writing a complete program which gets input from a user and prints output including a modified version of their input. Stop for a minute and think about it. Yes, there is much more to learn, but you have dipped your toes into the pool. Now you can go out there and start learning about the huge and wild world of Perl programming.
&lt;/p&gt;

&lt;a name="Additional_Resources" id="Additional_Resources"&gt;&lt;h3&gt;Additional Resources&lt;/h3&gt;&lt;/a&gt;

&lt;p&gt;
Here are a few links to resources that you can use while learning about Perl and how to use it for your own nefarious purposes.
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[Tutorials]&lt;/li&gt;
  &lt;li&gt;[Where and how to start learning Perl]&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://learn.perl.org"&gt;http://learn.perl.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.perl.com/"&gt;http://www.perl.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://perl.oreilly.com/"&gt;http://perl.oreilly.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://perldoc.perl.org/"&gt;http://perldoc.perl.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.oreilly.com/catalog/lperl3/"&gt;Learning Perl&lt;/a&gt;&lt;/a&gt; is &lt;em&gt;the&lt;/em&gt; book for the person who is just starting out with programming in Perl.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There are a &lt;em&gt;lot&lt;/em&gt; more, but I can't recall many of the links right now. I may put them up as time goes on.
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt;&lt;em&gt;(30 Dec 2004)&lt;/em&gt;&lt;br /&gt;
Removed an aside about complicated script headers, since [Juerd] pointed out that Perldoc is a better choice for such information, and [Anonymous Monk] helped me realize that it may be a bit much to expect a total newbie to know when the extended information becomes necessary. If you want to know what that extended header looked like, check the first reply from [Juerd]. He was gracious enough to reproduce it in its entirety while making a much better suggestion. I also went ahead and did some formatting adjustments (replacing PRE blocks with CODE blocks).
&lt;/p&gt;
&lt;p&gt;Threw in some suggested links from [kutsu], too.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt;&lt;em&gt;(26 Jan 2005)&lt;/em&gt;&lt;br /&gt;
Fixed several typographical errors pointed out by [erix]
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt;&lt;em&gt;(9 May 2006)&lt;/em&gt;&lt;br /&gt;
Fixed a few markup issues and added link to http://perldoc.perl.org/ -- thanks [jdporter]&lt;/p&gt;</field>
</data>
</node>
