<?xml version="1.0" encoding="windows-1252"?>
<node id="490460" title="Keyword Search" created="2005-09-09 03:40:02" updated="2005-09-08 23:40:02">
<type id="14">
superdoc</type>
<author id="106850">
pmdev</author>
<data>
<field name="doctext">
[%

  my %order= (
    nf =&gt; 'createtime DESC',
    of =&gt; 'createtime ASC',
    bt =&gt; 'title ASC',
    rt =&gt; 'title DESC',
    hr =&gt; 'reputation DESC',
    lr =&gt; 'reputation ASC',
    rn =&gt; 'RAND()',
  );

  my %labels = (
    nf =&gt; 'Newest First',
    of =&gt; 'Oldest First',
    bt =&gt; 'By Title',
    rt =&gt; 'By Title Reverse',
    hr =&gt; 'Highest Reputation First',
    lr =&gt; 'Lowest Reputation First',
    rn =&gt; 'Random',
  );

  my $str= '';

  if(  $q-&gt;param("orderby") =~ / /  ) {
    my %redro= reverse %order;
    $q-&gt;param( orderby =&gt;
      ( $redro{ $q-&gt;param("orderby") } || 'nf' ) );
  }

  my $keywds = $DB-&gt;{dbh}-&gt;selectcol_arrayref("SELECT DISTINCT word FROM keywords");

  $str .= qq[
    &lt;p&gt;
      This is where you can search for all the nodes which have been given
      a particular keyword.  Just enter the keyword and select the order for the search.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;form action="?" method="get"
       enctype="application/x-www-form-urlencoded"&gt;
        &lt;input type="hidden" name="node_id" value="] . getId($NODE) . qq[" /&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;td align="right"&gt;
              Keyword:
            &lt;/td&gt;
            &lt;td&gt;
              ] . (@{$keywds} ? $q-&gt;popup_menu(
                    -name    =&gt; 'keyword',
                    -values  =&gt; $keywds ) : $q-&gt;textfield( 'keyword', '')) . qq[
            &lt;/td&gt;
            &lt;td width="5%"&gt;&lt;/td&gt;
            &lt;td align="right"&gt;
              Show ] . $q-&gt;textfield(
                            'length', $VARS-&gt;{pmuslen} || 50, 3 ) . qq[
            &lt;/td&gt;
            &lt;td&gt;
              nodes
            &lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td align="right"&gt;
              Order by:
            &lt;/td&gt;
            &lt;td&gt;
              ] . $q-&gt;popup_menu(
                    -name    =&gt; 'orderby',
                    -values  =&gt; [qw(nf of bt rt hr lr rn)],
                    -labels  =&gt; \%labels ) . qq[
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td align="right"&gt;
              starting at
              ] . $q-&gt;textfield('start', '0', 3) . qq[
            &lt;/td&gt;
            &lt;td&gt;.&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td align="right"&gt;
              ] . $q-&gt;checkbox( -name =&gt; 'showqa', -label =&gt; '' ) . qq[
            &lt;/td&gt;
            &lt;td&gt;
              Show Categorized Q&amp;amp;A ([id://162297|Why?])
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td align="right"&gt;
              ] . $q-&gt;submit('sexisgood' =&gt; 'Search') . q[
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
      &lt;/form&gt;
    &lt;hr /&gt;];

  my $showqa  = $q-&gt;param('showqa')     || 0;

  my $orderby = $q-&gt;param('orderby');
  $orderby= 'nf'   if  ! exists $order{$orderby};
  my $skip    = abs $q-&gt;param('start')  || 0;
  my $length  = abs $q-&gt;param('length') || $VARS-&gt;{pmuslen} || 50;

  if ( $q-&gt;param('keyword') ) {
    my $k = $q-&gt;param('keyword');
    my $ksth = $DB-&gt;sqlSelectMany('node_id',
                                  'keywords',
                                  "word = '$k'");
    my $kywds = $ksth-&gt;fetchall_arrayref({});
    if(!@$kywds) {
      return $str . q[It seems that the "] . $q-&gt;escapeHTML( $q-&gt;param('keyword') )
         . q[" keyword does not exist.  How very, very strange...];
    }

    my $count = @$kywds;
    my %types = (
      'note'                 =&gt; 'Reply',
      'categorized answer'   =&gt; 'Q&amp;amp;A Answer',
      'categorized question' =&gt; 'Q&amp;amp;A Question',
      'snippet'              =&gt; 'Snippet',
      'sourcecode'           =&gt; 'Source code',
      'perlquestion'         =&gt; 'Seekers of Perl Wisdom',
      'perlcraft'            =&gt; 'Craft',
      'perlmeditation'       =&gt; 'Meditation',
      'poem'                 =&gt; 'Perl Poetry',
      'CUFP'                 =&gt; 'Cool Uses for Perl',
      'obfuscated'           =&gt; 'Obfuscation',
      'perltutorial'         =&gt; 'Tutorial',
      'monkdiscuss'          =&gt; 'Perl Monks Discussion',
      'modulereview'         =&gt; 'Module Review',
      'bookreview'           =&gt; 'Book Review',
      'perlnews'             =&gt; 'Perl News',
    );

    my @types = map {
      getId( getType($_) )
    } ( $q-&gt;param('showtype') || keys %types );

    my $sql;

    if ( $showqa ) {
      $sql = sprintf q[
        SELECT    contributor_id, nt.title
        FROM      contributor
        LEFT JOIN node     ON node.node_id = contributor_id
        LEFT JOIN keywords ON node.node_id = keywords.node_id
        LEFT JOIN node nt  ON nt.node_id = node.type_nodetype
        WHERE     node.node_id IN (%s)
        AND       keywords.word = ?
        ORDER BY  node.%s
        LIMIT     %d, %d],
        join(',', map {$_-&gt;{node_id}} @$kywds),
        $order{$orderby},
        $skip,
        1+$length;
    } else {
      $sql = sprintf q[
        SELECT    node.node_id, nt.title
        FROM      node
        LEFT JOIN node nt  ON nt.node_id = node.type_nodetype
        LEFT JOIN keywords ON node.node_id = keywords.node_id
        WHERE     node.node_id IN (%s)
        AND       keywords.word = ?
        ORDER BY  node.%s
        LIMIT     %d, %d],
        join(',', map {$_-&gt;{node_id}} @$kywds),
        $order{$orderby},
        $skip,
        1+$length;
    }

    my $sth  = $DB-&gt;getDatabaseHandle-&gt;prepare( $sql );

    $sth-&gt;execute( $k );

    my @nodes;
    while ( my $n = $sth-&gt;fetchrow_hashref ) {
      push @nodes, $n;
    }

# This shouldnt happen ,)
    return $str . q[There are no matches, it seems.]
      if  not $skip  and  not @nodes;

    my @knodes;

    my $more= $length &lt; @nodes;
    pop @nodes   if  $more;
    my $i = 0;
    for my $n (@nodes) {
      my $writeup = getNodeById($n-&gt;{node_id}, 'light');
      my $title   = $writeup-&gt;{title};
      next unless(canReadNode($USER, $writeup));

      push @knodes, sprintf qq[
          &lt;tr%s&gt;
            &lt;td&gt;%d&lt;/td&gt;
            &lt;td&gt;%s&lt;/td&gt;
            &lt;td&gt;%s&lt;/td&gt;
            &lt;td align="right"&gt;%s&lt;/td&gt;
          &lt;/tr&gt;],
        $i % 2 == 0 ? ' class="highlight"' : '',
        getId( $writeup ),
        linkNode( $writeup ),
        ($types{$writeup-&gt;{type}{title}} ? $types{$writeup-&gt;{type}{title}} : $writeup-&gt;{type}{title}),
        htmlcode('parseTimeInString','',$writeup-&gt;{createtime} );

      $i++;
    }

    my @params= qw( keyword orderby showqa showtype ); # start length
    my %params;
    @params{@params}= map $q-&gt;param($_) || '', @params;
    my $links= '';

    if ( $skip ) {
      $links .= sprintf q[
          &lt;td&gt;Previous &lt;a href="%s"&gt;%d&lt;/a&gt;&lt;/td&gt;],
        urlGen(
        {
          node_id  =&gt; getId($NODE),
          %params,
          start    =&gt; $skip - $length &lt; 0 ? 0 : $skip - $length,
          length   =&gt; $length,
        }, -1),
        $length;
    }

    if ( $more ) {
      $links .= sprintf q[
          &lt;td align="right"&gt;Next &lt;a href="%s"&gt;%d&lt;/a&gt;&lt;/td&gt;],
        urlGen(
        {
          node_id  =&gt; getId($NODE),
          %params,
          start    =&gt; $skip + $length,
          length   =&gt; $length,
        }, -1),
        $length;
    }

    $links = qq[&lt;table width="100%"&gt;&lt;tr&gt;$links&lt;/tr&gt;&lt;/table&gt;]
      if  $links;

    $str .= sprintf qq[
        &lt;p&gt;
          These nodes all have stuff with keyword %s (showing %d-%d out of ~%d):
        &lt;/p&gt;
        %s
        &lt;table id="matches" width="100%" cellspacing="0" cellpadding="2"&gt;
          &lt;tr&gt;
            &lt;td width="10%"&gt;Node ID&lt;/td&gt;
            &lt;td&gt;Node&lt;/td&gt;
            &lt;td&gt;Section/Type&lt;/td&gt;
            &lt;td align="right" width="25%"&gt;Created&lt;/td&gt;
          &lt;/tr&gt;\n%s
        &lt;/table&gt;
        %s],
      $k,
      1+$skip,
      $skip + @nodes,
      $count,
      $links,
      join('', @knodes),
      $links;

  }
  return $str;

%]</field>
</data>
</node>
