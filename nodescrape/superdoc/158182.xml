<?xml version="1.0" encoding="windows-1252"?>
<node id="158182" title="testing new user" created="2002-04-10 20:57:35" updated="2005-08-22 15:36:03">
<type id="14">
superdoc</type>
<author id="485628">
PublicAccess</author>
<data>
<field name="doctext">
[%
  my $str;

  local *generateLogin = sub
  {
    return &lt;&lt;"END";
    &lt;form action="?" method="post"&gt;
      &lt;input type="hidden" name="node_id" value="@{[ getId($NODE) ]}" /&gt;
      &lt;input type="hidden" name="op" value="newuser" /&gt;

      &lt;table&gt;
        &lt;tr&gt;
          &lt;td&gt;Preferred username:&lt;/td&gt;
          &lt;td&gt;&lt;input type="text" name="nu_name" size="20" maxlength="20" /&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Real&amp;#153; Name:&lt;/td&gt;
          &lt;td&gt;&lt;input type="text" name="nu_realname" size="20" maxlength="40" /&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Email Address&lt;/td&gt;
          &lt;td&gt;&lt;input type="text" name="nu_email" size="20" maxlength="255" /&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;input type="submit" name="sexisgood" value="submit" /&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

    &lt;/form&gt;
END
  };

  unless ( $query-&gt;param('op') eq 'newuser' ) {
    return &lt;&lt;"END";
    &lt;p&gt;
      To create a new user on PerlMonks, we need a smattering of information:
    &lt;/p&gt;
    @{[ generateLogin() ]}
    &lt;p&gt;
      &lt;b&gt;Please note:&lt;/b&gt;
    &lt;/p&gt;
    &lt;p&gt;
      We are not going to send you junk email "member updates", sell your
      address to spammers, or display your email address for people to see.
      This email exists so that you can recieve your password, and/or retrieve
      it if you forget.  There may be future email functionality, which
      you will have the option to turn on from your user settings page.
    &lt;/p&gt;
END
  }

  my $realname  = $query-&gt;param("nu_realname");
  my $email     = $query-&gt;param("nu_email");
  my $name      = $query-&gt;param("nu_name");


  if ( my ($olduser) = $DB-&gt;getNodeWhere({ title =&gt; $name }, $DB-&gt;getType('user')) ) {
    return sprintf &lt;&lt;'END',
    &lt;p&gt;
      Sorry, %s already exists.  Try another name...
    &lt;/p&gt;
    %s
END

    linkNode($olduser), generateLogin();
  }

  # Check if we have any '_' vs ' ' clashing
  # that could lead to chatterbox conflicts.

  my $match = lc($name);
  $match=~s/([a-zA-Z])/'['.$1.uc($1).']'/eg;
  $match=~s/[_ ]/[_ ]/g;
  $match="^$match\$";

  my ($closeuser) = $DB-&gt;sqlSelect(
                    "node_id,title",
                    "node", "title regexp \"$match\" and type_nodetype in(".getId(getType('user')).",".getId(getType('usergroup')).")");
  if($closeuser) {
    return "Sorry, your username clashes with ".linkNode($closeuser)
    ." which already exists.  Pick a variation, or try another name...&lt;p&gt;\n".generateLogin();
  }

  # Deny people the power of _ and ' ' at the beginning of usernames
  if ( $name =~ /^[_ ]/ ) {

    return &lt;&lt;"END";
    &lt;p&gt;
      Sorry, ' ' and '_' are not allowed at the beginning of usernames.
      Try again, do not pass Go, and do not collect \$200.
    &lt;/p&gt;
    @{[ generateLogin() ]}
END

  }

  if( $name =~ /[\[\]&lt;&gt;]/ ) {

    return &lt;&lt;"END";
    &lt;p&gt;
      Sorry &amp;lt;, &amp;gt;, &amp;#091; and &amp;#093; are not allowed in usernames.  Try again.
    &lt;/p&gt;
    @{[ generateLogin() ]}
END

  }

  if( getNode($name,'superdoc') || getNode($name,'perlman') || getNode($name,'perlfunc')  || getNode($name,'usergroup') ) {

    return &lt;&lt;"END";
    &lt;p&gt;
      Sorry there is already a system document or usergroup with that name.
      Pick a name that doesn't clash with important system documents.
    &lt;/p&gt;
    @{[ generateLogin() ]}
END

  }


  # Generate the passwd and send it out on email.
  my @chars = ( 'A'..'Z', 'a'..'k', 2..9 );
  my $passwd = join('', @chars[ map { rand @chars } 1 .. 8 ]);


  my $NEWUSER = {
                  realname  =&gt; $realname,
                  email     =&gt; $email,
                  passwd    =&gt; $passwd,
                  title     =&gt; $name,
                  lastupdate =&gt; undef,
  };

  $DB-&gt;sqlInsert('newuser', $NEWUSER );

  # Send some email;
  my $msg = getNode('New User Mail', 'mail');
  local $msg-&gt;{doctext} = $msg-&gt;{doctext};
  $msg-&gt;{doctext} =~ s/&lt;name&gt;/$NEWUSER-&gt;{realname}/;
  $msg-&gt;{doctext} =~ s/&lt;user&gt;/$NEWUSER-&gt;{title}/;
  $msg-&gt;{doctext} =~ s/&lt;passwd&gt;/$NEWUSER-&gt;{passwd}/;
  $msg-&gt;{doctext} =~ s/&lt;site_name&gt;/$HTMLVARS{site_name}/;
  $msg-&gt;{doctext} =~ s/&lt;homenode&gt;/$HTMLVARS{site_url}index\.pl\?node=$NEWUSER-&gt;{title}\&amp;type=user/;
  $msg-&gt;{doctext} =~ s/&lt;site_url&gt;/$HTMLVARS{site_url}/;
  $msg-&gt;{doctext} =~ s/&lt;login&gt;/$HTMLVARS{site_url}index\.pl\?node_id=$HTMLVARS{login_node}/;

  use Everything::MAIL;
  node2mail($NEWUSER-&gt;{email}, $msg);
  $HTMLVARS{mailsent} = 1;

  # Record sign-up information for later reference.
  # $DB-&gt;sqlInsert('emailpwd', { user_id =&gt; getId($NEWUSER), ip =&gt; $ENV{REMOTE_ADDR}, email =&gt; $email, reason =&gt; 'New user' });


  return sprintf &lt;&lt;'END',
  &lt;p&gt;
    Your new user account (%s) has been created.  You (%s)
    should be getting an email soon telling you your generated
    password.
  &lt;/p&gt;
END

  $NEWUSER-&gt;{title}, $NEWUSER-&gt;{email};
%]
[%
  return unless exists $HTMLVARS{newuser}
          and not exists $HTMLVARS{mailsent};

  my $NU = getNodeById $HTMLVARS{newuser};

  return "Our mail server isn't working right now.  Sorry.  You get your password now: $NU-&gt;{passwd}";
%]
</field>
</data>
</node>
