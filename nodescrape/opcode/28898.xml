<?xml version="1.0" encoding="windows-1252"?>
<node id="28898" title="consider" created="2000-03-02 21:34:58" updated="2005-07-22 14:35:06">
<type id="3545">
opcode</type>
<author id="929">
developers</author>
<data>
<field name="code">
use Everything::Experience;

return unless Everything::isApproved( $USER, 'CanConsider' );

my $gods= isGod($USER);
my $dbh= $DB-&gt;getDatabaseHandle();
foreach my $curid (  grep !/\D/, $query-&gt;param()  ) {

  my $voted= $DB-&gt;sqlSelect( "count(*)", "considervote",
    "considervote_id=".$dbh-&gt;quote($curid)." and voter_user=".getId($USER) );
  my $CURNODE= $DB-&gt;sqlSelectHashref(
    '*', 'considernodes', "considernodes_id=$curid" );
  next   if  ! $CURNODE;

  my $REAP;
  my $ops= 0;
  foreach my $oper (  $query-&gt;param($curid)  ) {
    if(  $oper eq "keep"  ||  $oper eq "edit"  ) {
      next   if  $voted;
      $CURNODE-&gt;{$oper}++;
      $ops++;
    } elsif(  $oper eq "reap"  ) {
      next   if  $voted  &amp;&amp;  ! $gods;
      $CURNODE-&gt;{del}++;
      if(  $CURNODE-&gt;{del} &gt;= 5  ) {
        $REAP= getNodeById($curid);
      }
      $ops++;
    } elsif(  $oper eq "unconsider"  ) {
      my $ED= getNode('editors','usergroup');
      my $isEd = $ED &amp;&amp; Everything::isApproved($USER,$ED);
      my ($keep, $edit, $delete) = @$CURNODE{qw/keep edit del/};
      my $canUnconsider = $gods
          ||  $isEd
          &amp;&amp;  ( 2 &lt;= $edit || 4 &lt;= $keep
              || 5 &lt;= $delete &amp;&amp; 4 &lt;= 2*$keep + $edit );
      last unless $canUnconsider;

      $DB-&gt;sqlDelete( 'considernodes', "considernodes_id=$curid" );
      $DB-&gt;sqlDelete( 'considervote', "considervote_id=$curid" );
      last;
    } elsif(  $oper eq "reallydelete"  and  $gods  ) {
      my $N= getNodeById($curid);
      nukeNode( $N, $USER )   if  $N;
      $DB-&gt;sqlDelete( 'considernodes', "considernodes_id=$curid" );
      $DB-&gt;sqlDelete( 'considervote', "considervote_id=$curid" );
      last;
    }
    if(  $ops  ) {
      $DB-&gt;sqlInsert(
        "considervote", {
          considervote_id =&gt; $curid,
          voter_user      =&gt; getId($USER),
          voted           =&gt; $oper
        },
      );
      $DB-&gt;sqlUpdate(
        'considernodes', {
          keep =&gt; $CURNODE-&gt;{keep},
          edit =&gt; $CURNODE-&gt;{edit},
          del  =&gt; $CURNODE-&gt;{del}
        }, "considernodes_id=$curid"
      );
      last;
    }
  }

  if(  $REAP  &amp;&amp;  $REAP-&gt;{reputation} &lt; 0
   &amp;&amp;  2*$CURNODE-&gt;{keep} + $CURNODE-&gt;{edit} &lt; 4  ) {
    #my $replies= $DB-&gt;sqlSelect(
    #  "count(*)", "note", "parent_node=".getId($N) );
    #if($replies==0){
    #   nukeNode($N,-1);     # This is too quick and causes problems
    #} else {
      htmlcode( 'msgsitemaintainer', '', getId($USER),
        "Reaped node at: [id://$REAP-&gt;{node_id}]"
        . " because $CURNODE-&gt;{description}" );
      htmlcode( 'reapnode', $REAP-&gt;{node_id} );
    #}
  }

}</field>
</data>
</node>
