<?xml version="1.0" encoding="windows-1252"?>
<node id="15086" title="testmessage" created="2000-05-26 19:26:46" updated="2004-10-27 07:53:12">
<type id="3545">
opcode</type>
<author id="929">
developers</author>
<data>
<field name="code">
return; # Defang old test code

Everything::printLog("message opcode called by $USER-&gt;{title}");
return   if  getId($USER) == $HTMLVARS{default_user};

my $BUN = getNode( 'borged users', 'setting' );
my $BU = getVars( $BUN );

return   if  time() &lt; $BU-&gt;{ $USER-&gt;{node_id} };

my $replyto = $q-&gt;param('replyto');

if(  $replyto  ) {
   my $text = $q-&gt;param('replytotext');
   my $dbh = $DB-&gt;getDatabaseHandle();
   my $N = $DB-&gt;sqlSelectHashref( "*", "message",
     "message_id=".$dbh-&gt;quote($replyto) );
   if(  $text  &amp;&amp;  $N  ) {

      return   if  htmlcode( 'repeatedchatter', '',
         getId($USER), $text, getId($N-&gt;{author_user}) );

      $DB-&gt;sqlInsert( "message", {
         msgtext =&gt; $text,
         author_user =&gt; getId($USER),
         for_user =&gt; getId($N-&gt;{author_user})
      } );
   }
}

# Be sure to handle $q-&gt;param('replyto') before
# deletemsg_* or else you won't be able to reply to
# and delete a message in a single submission.

foreach my $p (  $q-&gt;param()  ) {
   if (  $p =~ /^deletemsg_(\d+)$/  ) {
      $DB-&gt;sqlDelete( 'message', "message_id=$1" )
         if  Everything::isApproved( $USER, $DB-&gt;sqlSelect(
               "for_user","message","message_id=$1") );
   } elsif(  $p =~ /^(un)?archive_(\d+)$/  ) {
      my( $for_user, $tstamp ) = $DB-&gt;sqlSelect(
         "for_user,tstamp", "message", "message_id=$2" );
      $DB-&gt;sqlUpdate( "message", {
            archive =&gt; ( $1 ? 0 : 1 ),
            tstamp =&gt; $tstamp,
         }, "message_id = $2" )
         if  Everything::isApproved( $USER, $for_user );
   }
}

my $message = $q-&gt;param("message");

return   if  $message !~ /\S/;

## $message= htmlScreen($message);

if (  $message =~ /^\/(msg|tell)\s+\[([^\]]+)\]\s+(.*?)\s*$/si
  ||  $message =~ /^\/(msg|tell)\s+(\S+)\s+(.*?)\s*$/si  ) {

   $message = $3;
   my $user = $2;
   return   unless  $message =~ /\S/;

   my $U = getNode( $user, "user" );
   if(  ! $U  ) {
      $U = getNode( $user, 'usergroup' );
      if(  ! $U  &amp;&amp;  ( my $u = $user ) =~ s/_/ /gs  ) {
         $U = getNode( $u, "user" )
          ||  getNode( $u, 'usergroup' );
      }

   }

   if (  not $U  ) {
      $DB-&gt;sqlInsert( "message", {
         msgtext =&gt; $q-&gt;escapeHTML($user)
            . qq[ doesn't exist but you tried to say "]
            . $q-&gt;escapeHTML($message)
            . qq[" to them.],
         author_user =&gt; getId( getNode('root','user') ),
         for_user =&gt; getId($USER),
      } );
      $q-&gt;param( "sentmessage",
         qq[&lt;i&gt;Send failed (see ]
           . linkNodeTitle("Message Inbox") . qq[).&lt;/i&gt;]
      );
      return;
   }

   if (  $U-&gt;{type}{title} eq 'usergroup'  ) {

      return   if  htmlcode( 'repeatedchatter', '',
        getId($USER), $message, getId($U) );

      $DB-&gt;sqlInsert(
        'message',
        {
          msgtext     =&gt; $message,
          author_user =&gt; getId($USER),
          for_user    =&gt; getId($U),
        }
      );

      return;
   }

   my $V = getVars( $U );
   my $err= '';
   if (  0 &lt;= index( $V-&gt;{ignoredusers}, "|$USER-&gt;{user_id}," )  ) {
      $err= linkNode($U) . qq[ is ignoring you];
   } elsif (  0 &lt;= index( $VARS-&gt;{ignoredusers}, "|$U-&gt;{user_id}," )  ) {
      $err= qq[You are ignoring ] . linkNode($U)
         . qq[; use "/unignore ]
         . $q-&gt;escapeHTML("[$U-&gt;{title}]")
         . qq[" before resending];
   }
   if (  $err  ) {
      $DB-&gt;sqlInsert( "message", {
         msgtext =&gt; $err . qq[, but you tried to say "]
            . $q-&gt;escapeHTML($message) . qq[" to them.],
         author_user =&gt; getId( getNode('root','user') ),
         for_user =&gt; getId($USER),
      } );
      $q-&gt;param( "sentmessage",
         qq[&lt;i&gt;Send failed (see ]
           . linkNodeTitle("Message Inbox") . qq[).&lt;/i&gt;]
      );
      return;
   }

   return   if  htmlcode( 'repeatedchatter', '',
      getId($USER), $message, getId($U) );

   $DB-&gt;sqlInsert( "message", {
      msgtext =&gt; $message,
      author_user =&gt; getId($USER),
      for_user =&gt; getId($U),
   } );

} elsif (  $message =~ m#^/(un)?ignore\s+\[([^\]]+)\]\s*$#i
       ||  $message =~ m#^/(un)?ignore\s+(\S+)\s*$#i  ) {

   my $un = $1 || '';
   my $user = $2;
   my $U = getNode( $user, "user" );
   if(  ! $U  ) {
      if(  ( my $u= $user ) =~ s/_/ /gs  ) {
         $U = getNode( $u, "user" );
      }
   }
   if(  ! $U  ) {
      $q-&gt;param( "sentmessage",
         qq[&lt;i&gt;You tried to ${un}ignore a non-existant user (]
            . $q-&gt;escapeHTML($user) . qq[)&lt;/i&gt;]
      );
      return;
   }
   my $userid = getId($U);
   if(  ! $un  ) {
      my $when= "were already";
      if(  $VARS-&gt;{ignoredusers} !~ m/\|$userid,/   ) {

         $VARS-&gt;{ignoredusers} .= "|$userid,";
         $when= "are now";
      }
      $q-&gt;param( "sentmessage",
         qq[&lt;i&gt;You $when ignoring ]
            . $q-&gt;escapeHTML($user) . qq[&lt;/i&gt;]
      );
   } else {
      my $when= "were not";
      if(  $VARS-&gt;{ignoredusers} =~ s/\|$userid,//g   ) {
         $when= "are no longer";
      }
      $q-&gt;param( "sentmessage",
         qq[&lt;i&gt;You $when ignoring ]
            . $q-&gt;escapeHTML($user) . qq[&lt;/i&gt;]
      );
   }

} elsif (  $message =~ m#^/(borg|consume)\s+\[([^\]]+)\](\s+\d+)?\s*$#i
       ||  $message =~ m#^/(borg|consume)\s+(\S+)(\s+\d+)?\s*$#i  ) {

   my $cmd = lc($1);
   my $silent = $cmd eq 'consume';

   my $user = $2;
   my $time = $3 || 10;
   ## $time= 10   if  ! isGod($USER);

   my $PU = getNode( 'power users', 'usergroup' );
   if(  ! isGod($USER)  and  ! Everything::isApproved( $USER, $PU )  ) {
      $q-&gt;param( "sentmessage",
         qq[&lt;i&gt;The /$cmd command doesn't do anything.&lt;/i&gt;]
      );
      return;
   }

   if(  $silent  &amp;&amp;  ! isGod($USER)  ) {
      $q-&gt;param( "sentmessage",
         qq[&lt;i&gt;Only [gods] can /$cmd users.&lt;/i&gt;]
      );
      return;
   }

   my $U = getNode( $user, "user" );
   if(  ! $U  ) {
      if(  ( my $u = $user ) =~ s/_/ /gs  ) {
         $U = getNode( $u, "user" );
      }
   }
   if(  ! $U  ) {
      $q-&gt;param( "sentmessage",
         qq[&lt;i&gt;You can't /$cmd a non-existant user (]
         . $q-&gt;escapeHTML($user) . qq[).&lt;/i&gt;]
      );
      return;
   }
   $user = $U-&gt;{title};
   Everything::printLog( "${cmd}'d $user" );

   $BU-&gt;{ $U-&gt;{node_id} } = time() + $time*60;
   setVars( $BUN, $BU );

   my $BORG = getNode( 'NodeReaper', 'user' );

   my $message = "/me has swallowed [$user]";
   my @EDBURSTS = ( ". *BURP*", ", mmmmm...",
      ". [$user] is good food!",
      ". [$user] was tasty!",
      ". [$BORG-&gt;{title}] gets indigestion.",
      ". A loud grumbling is heard.",
      " but spits out the funny hat.",
      " whole.", ". [$BORG-&gt;{title}] picks his teeth.",
      " (with great difficulty).",
      " (after only 3 tries).",
      ". Anyone have a napkin?",
      " (and a chair and a mouse).",
      ". [$BORG-&gt;{title}] looks queasy.",
   );

   $message .= $EDBURSTS[int(rand(@EDBURSTS))];
   $DB-&gt;sqlInsert( "message", {
      msgtext     =&gt; $message,
      author_user =&gt; getId($BORG),
      for_user    =&gt; 0
   } )   if  ! $silent;

} elsif (  $message =~ m#^/reaper\s*(.*)$#i      ) {
  my $msg = $1;

  my $PU = getNode( 'power users', 'usergroup' );
  if(  ! isGod($USER)  and  ! Everything::isApproved( $USER, $PU )  ) {
    $q-&gt;param( 'sentmessage',
      qq[&lt;i&gt;The /reaper command doesn't do anything.&lt;/i&gt;]
    );
    return;
  }

  $DB-&gt;sqlInsert(
    'message',
    {
      msgtext     =&gt; $msg,
      for_user    =&gt; 0,
      author_user =&gt; $HTMLVARS{NodeReaperID}
    }
  );
} elsif (  $message =~ m#^/clear(\s|$)#i  &amp;&amp;  isGod($USER)  ) {
  $DB-&gt;getDatabaseHandle-&gt;do('
    DELETE FROM message
    WHERE       for_user = 0
      AND       UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(tstamp) &lt; 600
  ');

} elsif (  $message =~ m#^/chatteroff\s*$#i  ) {
    $VARS-&gt;{publicchatteroff} = 1;

} elsif (  $message =~ m#^/chatteron\s*$#i  ) {
    $VARS-&gt;{publicchatteroff} = 0;

} elsif (  $VARS-&gt;{publicchatteroff}  ) {
   $q-&gt;param( "sentmessage",
      "&lt;i&gt;Say /chatteron if you wish to chat publicly.&lt;/i&gt;"
   );
} else {
   return   if  htmlcode( 'repeatedchatter', '',
      getId($USER), $message, 0 );

   $DB-&gt;sqlInsert( "message", {
      msgtext =&gt; $message,
      author_user =&gt; getId($USER),
      for_user =&gt; 0
   } );
}

##########################################################
##########################################################
##########################################################

'ignore' and &lt;&lt;'END' if 0;
Everything::printLog("message opcode called by $USER-&gt;{title}");
return   if  getId($USER) == $HTMLVARS{default_user};

my $BUN = getNode( 'borged users', 'setting' );
my $BU = getVars( $BUN );

return   if  time() &lt; $BU-&gt;{ $USER-&gt;{node_id} };

my $replyto = $query-&gt;param('replyto');

if(  $replyto  ) {
   my $text = $query-&gt;param('replytotext');
   my $dbh = $DB-&gt;getDatabaseHandle();
   my $N = $DB-&gt;sqlSelectHashref( "*", "message",
     "message_id=".$dbh-&gt;quote($replyto) );
   if(  $text  &amp;&amp;  $N  ) {
      htmlcode( 'insertmessage', '',
         $text, getId($N-&gt;{author_user}) );
   }
}

# Be sure to handle $query-&gt;param('replyto') before
# deletemsg_* or else you won't be able to reply to
# and delete the same message in a single submission.
foreach my $p (  $query-&gt;param()  ) {
   if (  $p =~ /^deletemsg_(\d+)$/  ) {
      $DB-&gt;sqlDelete( 'message',
         "message_id=$1 and for_user=" . getId($USER) );
   } elsif(  $p =~ /^(un)?archive_(\d+)$/  ) {
      my $tstamp = $DB-&gt;sqlSelect( "tstamp", "message", "message_id=$2" );
      $DB-&gt;sqlUpdate( "message", {
         archive =&gt; ( $1 ? 0 : 1 ),
         tstamp =&gt; $tstamp,
      }, "message_id = $2 AND for_user = " . getId($USER) );
   }
}

my $message = $query-&gt;param("message");

return   if  $message !~ /\S/;

if(  $message =~ m#^/(\w+)(?:\s+(.*\S))?\s*$#s  ) {
   my( $cmd, $rest ) = ( lc($1), $2 );
   $HTMLVARS{testmessage} = "Found command, /$cmd.\n";
   my $code= getCode( "chat/$cmd" );
   if(  $code  ) {
      my $NODE = $GNODE;
      my $warnbuf = "";
      local $SIG{__WARN__} = sub { 
         $warnbuf .= $_[0] 
           unless $_[0] =~ /^Use of uninitialized value/;
      };
      $code =~ s/\015//gs;
      @_= ( $cmd, $rest );
      my $ret = eval $code;
      local $SIG{__WARN__} = sub {};
      if(  $@ or $warnbuf  ) {
         return htmlFormatErr( $code, $@, $warnbuf );
      }
      if(  defined $ret   ) {
         return   if  "" eq $ret;
         $message = $ret;
      }
   }
   return "\n&lt;!-- testmessage:\n$HTMLVARS{testmessage}--&gt;\n";
}

if(  $message =~ m#^/(un)?ignore\s+\[([^\]]+)\]\s*$#i
 ||  $message =~ m#^/(un)?ignore\s+(\S+)\s*$#i  ) {

   my $un = $1 || '';
   my $user = $2;
   my $U = getNode( $user, "user" );
   if(  ! $U  ) {
      if(  ( my $u= $user ) =~ s/_/ /gs  ) {
         $U = getNode( $u, "user" );
      }
   }
   if(  ! $U  ) {
      $query-&gt;param( "sentmessage",
         qq[&lt;i&gt;You tried to ${un}ignore a non-existant user (]
            . $query-&gt;escapeHTML($user) . qq[)&lt;/i&gt;]
      );
      return;
   }
   my $userid = getId($U);
   if(  ! $un  ) {
      my $when= "were already";
      if(  $VARS-&gt;{ignoredusers} !~ m/\|$userid,/   ) {

         $VARS-&gt;{ignoredusers} .= "|$userid,";
         $when= "are now";
      }
      $query-&gt;param( "sentmessage",
         qq[&lt;i&gt;You $when ignoring ]
            . $query-&gt;escapeHTML($user) . qq[&lt;/i&gt;]
      );
   } else {
      my $when= "were not";
      if(  $VARS-&gt;{ignoredusers} =~ s/\|$userid,//g   ) {
         $when= "are no longer";
      }
      $query-&gt;param( "sentmessage",
         qq[&lt;i&gt;You $when ignoring ]
            . $query-&gt;escapeHTML($user) . qq[&lt;/i&gt;]
      );
   }

} elsif (  $message =~ m#^/(borg|consume)\s+\[([^\]]+)\](\s+\d+)?\s*$#i
       ||  $message =~ m#^/(borg|consume)\s+(\S+)(\s+\d+)?\s*$#i  ) {

   my $cmd = lc($1);
   my $silent = $cmd eq 'consume';

   my $user = $2;
   my $time = $3 || 10;
   ## $time= 10   if  ! isGod($USER);

   my $PU = getNode( 'power users', 'usergroup' );
   if(  ! isGod($USER)  and  ! Everything::isApproved( $USER, $PU )  ) {
      $query-&gt;param( "sentmessage",
         qq[&lt;i&gt;The /$cmd command doesn't do anything.&lt;/i&gt;]
      );
      return;
   }

   if(  $silent  &amp;&amp;  ! isGod($USER)  ) {
      $query-&gt;param( "sentmessage",
         qq[&lt;i&gt;Only [gods] can /$cmd users.&lt;/i&gt;]
      );
      return;
   }

   my $U = getNode( $user, "user" );
   if(  ! $U  ) {
      if(  ( my $u = $user ) =~ s/_/ /gs  ) {
         $U = getNode( $u, "user" );
      }
   }
   if(  ! $U  ) {
      $query-&gt;param( "sentmessage",
         qq[&lt;i&gt;You can't /$cmd a non-existant user (]
         . $query-&gt;escapeHTML($user) . qq[).&lt;/i&gt;]
      );
      return;
   }
   $user = $U-&gt;{title};
   Everything::printLog( "${cmd}'d $user" );

   $BU-&gt;{ $U-&gt;{node_id} } = time() + $time*60;
   setVars( $BUN, $BU );

   my $BORG = getNode( 'NodeReaper', 'user' );

   my $message = "/me has swallowed [$user]";
   my @EDBURSTS = ( ". *BURP*", ", mmmmm...",
      ". [$user] is good food!",
      ". [$user] was tasty!",
      ". [$BORG-&gt;{title}] gets indigestion.",
      ". A loud grumbling is heard.",
      " but spits out the funny hat.",
      " whole.", ". [$BORG-&gt;{title}] picks his teeth.",
      " (with great difficulty).",
      " (after only 3 tries).",
      ". Anyone have a napkin?",
      " (and a chair and a mouse).",
      ". [$BORG-&gt;{title}] looks queasy.",
   );
   $message .= $EDBURSTS[int(rand(@EDBURSTS))];
   $DB-&gt;sqlInsert( "message", {
      msgtext     =&gt; $message,
      author_user =&gt; getId($BORG),
      for_user    =&gt; 0
   } )   if  ! $silent;

} elsif (  $message =~ m#^/reaper\s*(.*)$#i      ) {
  my $msg = $1;

  my $PU = getNode( 'power users', 'usergroup' );
  if(  ! isGod($USER)  and  ! Everything::isApproved( $USER, $PU )  ) {
    $query-&gt;param( 'sentmessage',
      qq[&lt;i&gt;The /reaper command doesn't do anything.&lt;/i&gt;]
    );
    return;
  }
  htmlcode( 'insertmessage', '',
      $msg, 0, $HTMLVARS{NodeReaperID} );

} elsif (  $message =~ m#^/clear(\s|$)#i  &amp;&amp;  isGod($USER)  ) {
  $DB-&gt;getDatabaseHandle-&gt;do('
    DELETE FROM message
    WHERE       for_user = 0
      AND       UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(tstamp) &lt; 600
  ');

} elsif (  $message =~ m#^/chatteroff\s*$#i  ) {
    $VARS-&gt;{publicchatteroff} = 1;

} elsif (  $message =~ m#^/chatteron\s*$#i  ) {
    $VARS-&gt;{publicchatteroff} = 0;

} elsif (  $VARS-&gt;{publicchatteroff}  ) {
   $query-&gt;param( "sentmessage",
      "&lt;i&gt;Say /chatteron if you wish to chat publicly.&lt;/i&gt;"
   );
} else {
   htmlcode( 'insertmessage', '', $message );
}
END</field>
</data>
</node>
