<?xml version="1.0" encoding="windows-1252"?>
<node id="236311" title="Understanding Unix/Linux Programming" created="2003-02-18 12:00:06" updated="2005-08-10 15:49:15">
<type id="31670">
bookreview</type>
<author id="131262">
Steve_p</author>
<data>
<field name="doctext">
&lt;p&gt;For years, the C community has lacked the intermediate level books to help the beginner along to the advanced topics in C programming.  The gap between &lt;em&gt;Learn C in 5 Minutes&lt;/em&gt; and &lt;em&gt;Advanced UNIX Programming&lt;/em&gt; is rather large.  The new book &lt;em&gt;Understanding Unix/Linux Programming&lt;/em&gt; has finally bridged the gap.  It is definitely the book I needed seven years ago when starting out professionally as a C programmer.&lt;/p&gt;
&lt;p&gt;The goal of the book, as stated in the first chapter, is to understand system programming in UNIX.  Rather than the abstract examples in most books, the author looking at system commands on a Unix system, figuring out how they work, then writing your own version. 
&lt;p&gt;The book takes a case study-type approach to each chapter.  It begins by discussing the functionality of a command or program to study, and then goes through building it step by step.  For example, when developing &lt;code&gt;who&lt;/code&gt;, the case study begins by simply reading in everything in the &lt;code&gt;utmp&lt;/code&gt; file, then modifying bit by bit until it works the same as who (without parameters) does on Unix.  This was an easy approach for me to follow since this is essentially the approach I follow when developing a new program.  There are some sidetracks in the chapter into other related subjects.  For example, when studying &lt;code&gt;who&lt;/code&gt;, a library for reading &lt;code&gt;utmp&lt;/code&gt;-type files is created with buffered I/O.  That discussion is started by re-writing &lt;code&gt;cp&lt;/code&gt;.  There is also a discussion regarding how &lt;code&gt;utmp&lt;/code&gt; records are created by the kernel.  Each chapter ends with several &lt;em&gt;Explorations&lt;/em&gt;, &lt;em&gt;Programming Exercises&lt;/em&gt;, and &lt;em&gt;Projects&lt;/em&gt;.  So those of you who agreed with &lt;a href="http://www.perlmonks.org/index.pl?node_id=191847"&gt;Do your homework!&lt;/a&gt; will have a lot to work with.&lt;/p&gt;
&lt;p&gt;The book continues on with the same model discussing nearly everything left out of the introductory C texts.  Some other projects include writing pong using curses, developing a simple shell, and, finally, developing a multi-threaded http server.&lt;/p&gt; 
&lt;p&gt;Well, that's enough gushing, its now time for the gripes.  This book does take a rather non-BSD slant, so you BSD users out there, like myself, have to adapt to make some of the examples work.  It starts out early.  If there is one place the greatly differs between the BSD and Unix/Linux flavors is &lt;code&gt;utmp.h&lt;/code&gt;.  While this was an annoyance to me, the spoon-fed types out there may not take the time to dig a bit to get the right answers and get turned off quickly.  Also, with all the work on network programming, one would think security would be at least discussed, but it wasn't.&lt;/p&gt;
&lt;p&gt;Overall, this is one of the best books I've read on Unix development that I have read, and I am glad to add it my bookshelf.  I highly recommend it for anyone developing on any Unix system.  Also, if you are looking into XS, it would be a great help to go along with &lt;em&gt;Extending and Embedding Perl&lt;/em&gt;.
</field>
<field name="itemdescription">
A Guide to Theory and Practice</field>
<field name="usercomment">
The book I wish I had seven years ago.</field>
<field name="identifier">
0-13-008396-8</field>
</data>
</node>
