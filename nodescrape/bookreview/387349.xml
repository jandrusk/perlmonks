<?xml version="1.0" encoding="windows-1252"?>
<node id="387349" title="The Mythical Man-Month (20th anniversary edition)" created="2004-08-31 18:39:51" updated="2005-08-10 15:33:15">
<type id="31670">
bookreview</type>
<author id="95145">
FoxtrotUniform</author>
<data>
<field name="doctext">
&lt;p&gt;&lt;i&gt;The Mythical Man-Month&lt;/i&gt; is something of a legend among software-engineering books.  It's spawned memes like 
"the second-system effect", "Brooks' Law" (&lt;i&gt;Adding manpower to an already late project only makes it later&lt;/i&gt;), and the dread "Build one to throw away, you will anyhow".  The 20th anniversary edition contains four additional chapters, written after the first book and with some new thoughts.&lt;/p&gt;

&lt;p&gt;Brooks writes this book mostly from the perspective of a disappointed OS/360-project manager.  As such, the book is mostly directed towards managers -- although programmers can benefit from it, a little.  Brooks' main thesis seems to be: 
&lt;blockquote&gt;
the more people you have working independently, the more complex their communication must be.  That communication is what drags down a software project into the morass of failure.  Try to simplify the communication by:
&lt;ul&gt;
 &lt;li&gt;Keeping the project as simple as possible.  (The second-system effect is, basically, trying to cram in as many features as possible.)&lt;/li&gt;
 &lt;li&gt;Organizing programmers and staff into sub-teams that can work independently, connecting their components through well-defined interfaces.  (Sound familiar?  Brooks was preaching this dogma nearly thirty years ago.)&lt;/li&gt;
 &lt;li&gt;Maintaining terse, up-to-date, and useful documentation so that people can more profitably RTFM.&lt;/li&gt;
 &lt;li&gt;Separating architecture and design from implementation, and keeping the number of architects to a minimum, to ensure both a self-consistent design and a single authoritative designer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
Brooks also writes many good bits about scheduling (coding doesn't take as much time as you think; testing takes far more), division of expertise (good coders often make poor managers; don't "promote" them into management just to increase their seniority); schedule SNAFUs ("How does a software project become a year late?  One day at a time."); and the like.&lt;/p&gt;

&lt;p&gt;The thing that pissed me off the most about this book was the fact that Brooks has changed his mind in the intervening twenty years (he accepts data hiding, rather than rejecting it; and he no longer advises people to throw away their first hacks at a problem when most of the code is likely perfectly good) -- and he stuffs his diffs in the last few chapters, rather than re-writing.  This may be chronologically honest, but it doesn't make for a terribly useful book.  I pity da foo' who starts a big software project after making it only &lt;i&gt;most&lt;/i&gt; of the way through &lt;i&gt;TMM-M&lt;/i&gt;.  While I praise Brooks for having the guts to write section titles like "Parnas was right, and I was wrong", I wish he'd taken the time to re-write the "wrong" bits instead of appending an erratum.  (The other thing that pisses me off about the book is the author's use of end-notes, rather than footnotes.  Grr.)&lt;/p&gt;

&lt;p&gt;Programmers, especially programmers who work alone or in small groups on little projects, won't get much out of this book.  What they get will probably be useful, but if you're going to buy a book to make you a better programmer, [http://www.pragmaticprogrammer.com|The Pragmatic Programmer] is probably a better choice.  Managers, on the other hand, should be required to read this book before they ever tell a programmer what to work on -- forced to read it at gunpoint, if need be.&lt;/p&gt;</field>
<field name="itemdescription">
A discourse on programming techniques from a manager's perspective</field>
<field name="usercomment">
Good for managers, not necessarily for programmers</field>
<field name="identifier">
0-201-83595-9</field>
</data>
</node>
