<?xml version="1.0" encoding="windows-1252"?>
<node id="76219" title="Pragmatic Programmer, The" created="2001-04-27 18:45:24" updated="2005-08-10 16:43:53">
<type id="31670">
bookreview</type>
<author id="33117">
footpad</author>
<data>
<field name="doctext">
&lt;H4&gt;Vitals&lt;/H4&gt;
&lt;P&gt;&lt;I&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/I&gt;&lt;BR&gt;
by Andrew Hunt and David Thomas&lt;/P&gt;
&lt;P&gt;Published October 1999 by Addison Wesley Longman, Inc.&lt;BR&gt;
ISBN: 020161622X&lt;BR&gt;
List Price: $34.95 U.S., $52.50 CAN&lt;BR&gt;
Edition Reviewed: First Edition, First printing&lt;BR&gt;
Web Site, Sample Chapter, and Errata: &lt;a href="http://www.pragmaticprogrammer.com"&gt;http://www.pragmaticprogrammer.com&lt;/a&gt;&lt;/P&gt;

&lt;H4&gt;Review Contents&lt;/H4&gt;
&lt;UL&gt;&lt;LI&gt;&lt;a href="#int"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how"&gt;How It's Done&lt;/a&gt;&lt;/LI&gt;
&lt;li&gt;&lt;a href="#pip"&gt;Putting It Into Pratice&lt;/a&gt;&lt;/LI&gt;
&lt;li&gt;&lt;a href="#who"&gt;Who Can Benefit?&lt;/a&gt;&lt;/LI&gt;
&lt;li&gt;&lt;a href="#sum"&gt;Summary&lt;/a&gt;&lt;/LI&gt;
&lt;li&gt;&lt;a href="#toc"&gt;Table of Contents&lt;/a&gt;
&lt;/UL&gt;

&lt;H4&gt;&lt;a name="int"&gt;&lt;/a&gt;Introduction&lt;/H4&gt;

&lt;P&gt;&lt;I&gt;[isbn://020161622X|The Pragmatic Programmer]&lt;/I&gt;, by Andrew Hunt and David Thomas, has an ambitious agenda, one stated in the first line in the Preface, &lt;I&gt;This book will help you become a better programmer.&lt;/I&gt;  It's a bold assertion and, given the number of books making similar claims, one to use as a benchmark against the book's success.  By this, and any other benchmark, the book succeeds admirably.&lt;/P&gt;

&lt;P&gt;Since I'm sometimes criticized for ambiguity in my posts, let me state this as clearly as I can: &lt;I&gt;The Pragmatic Programmer&lt;/I&gt; (TPP for short) &lt;b&gt;will&lt;/b&gt; help you become a better programmer...&lt;b&gt;if&lt;/b&gt; you are receptive, open to its lessons, and willing to change.&lt;/P&gt;

&lt;P&gt;TPP is not about Perl, though it refers to it often and with much respect. TPP outlines several ways to use Perl effectively in any project, regardless of the implementing language.&lt;/P&gt;

&lt;P&gt;TPP is about software craftsmanship.  Indeed, Hunt and Thomas aren't concerned about teaching you how to use a single language.  Instead, they use the lessons they've learned in their combined forty years of software development experience to argue that the best programmers &lt;i&gt;have a broad enough background and experience base to allow to choose good solutions in particular situations.&lt;/I&gt; (quote taken from the Preface, p. xviii).&lt;/P&gt;

&lt;P&gt;In the paragraph immediately following the one containing that quote, Hunt and Thomas summarize their philosophy:&lt;/P&gt;

&lt;P&gt;&lt;BLOCKQUOTE&gt;&lt;I&gt;You adjust your approach to suit the current circumstances and environment.  You judge the relative importance of all the factors affecting a project and use your experience to produce appropriate solutions.  And you do this as your work progresses.  Pragmatic Programmers get the job done and do it well.&lt;/I&gt;&lt;/BLOCKQUOTE&gt;&lt;/P&gt;

&lt;P&gt;When read completely in context, it's an extremely powerful argument.  Once they're presented their goals, they get straight to work.  Make sure you read the Preface.&lt;/P&gt;

&lt;H4&gt;&lt;a name="how"&gt;&lt;/a&gt;How It's Done&lt;/H4&gt;

&lt;P&gt;In each of its eight chapters, TPP collects a series of essays covering specific aspects of software development.  When reviewed as a collection, you notice that they've touched on every element of the entire development process.  Coverage includes:&lt;/P&gt;

&lt;UL&gt;&lt;LI&gt;Why programmers (and their code) should be pragmatic, not perfect.&lt;/LI&gt;
&lt;LI&gt;How to design effective subroutines, modules, algorithms, and programs,&lt;/LI&gt;
&lt;LI&gt;Effective commenting, documentation, and communication techniques.&lt;/LI&gt;
&lt;LI&gt;The importance of testing, as well as how to design effective tests.&lt;/LI&gt;
&lt;LI&gt;Why version control is so important.&lt;/LI&gt;
&lt;LI&gt;How to collect, document, and communicate the proper requirements your applications need to solve.&lt;/LI&gt;
&lt;LI&gt;How to make users and project sponsors truly happy&lt;/LI&gt;
&lt;LI&gt;Where to go for more information and how to ask good questions.&lt;/LI&gt;
&lt;LI&gt;The benefits of following the book's advice as well as the dangers of ignoring it.&lt;/LI&gt;
&lt;/UL&gt;

&lt;P&gt;Take a moment to review the &lt;a href="#toc"&gt;Chapter Summary&lt;/a&gt; provided below.  TPP clearly covers many topics.  To tie this broad range of material together, the authors' develop a series of Tips (starting in the Preface) they believe all good (read: pragmatic) programmers should follow.  Not only are these Tips useful, practical, and accurate, they're also summarized in a convenient quick reference chart.  Pull it out of the book and keep it near your keyboard.&lt;/P&gt;

&lt;P&gt;You don't have to read TPP sequentially.  Each essay stands on its own and is fully supported through examples, code samples, ancedotes, challenges, and exercises.  Essays refer to others providing information related to, or referred by, the topic at hand.  Furthermore, the book carefully refers to a wide range of other resources for continued study, including web sites, books, periodicals, and so on.  TPP would make an excellent textbook for classes devoted to effective programming practices.&lt;/P&gt;

&lt;P&gt;TPP also emphasizes the importance of personal disclipine, resposibility, and critical thinking.  It effectively documents techniques ignored by most technical titles, such as othoganality, reversability, and refactoring.   It provides solid advice on how to use these critical techniques, how to develop your skills, and how to prevent projects from falling apart.&lt;/P&gt;

&lt;H4&gt;&lt;a name="pip"&gt;&lt;/a&gt;Putting it into Practice&lt;/H4&gt;

&lt;P&gt;TPP was clearly designed using the techniques the author's advocate.  Each word, example, description, anecdote, and point is carefully chosen.   For example, the second essay in Chapter 1, &lt;i&gt;Software Entropy&lt;/I&gt;, summarizes the findings of a study into the causes of urban decay.  This study found a single trigger that rapidly transforms a building and its surrounding neighborhood into an area people avoid.  (I won't tell you that cause, because I want to you to buy the book and read it for yourself.  However, I can tell you from my own experience, it's accurate, easy to remember, and requires a commitment few are willing to make.)&lt;/P&gt;

&lt;P&gt;To illustrate this trigger in action, I recently dinged another book pretty heavily for typos and other editorial mistakes understandably present in the first printing of a new book.  As I said in that review, I tend to notice such mistakes.  My copy of TPP is also a first printing and I found &lt;I&gt;no&lt;/I&gt; typographic errors.  While TPP's &lt;a href="http://www.pragmaticprogrammer.com/"&gt;web site&lt;/a&gt; outlines a few syntax errors in code samples and a couple of grammatical errors, I find it interesting (and instructive) that I noticed no blatant mispellings or typographical errors.  Since I know how boring, time-consuming, and exacting it can be to review galley sheets, I believe this clearly demonstrates the authors' attention to detail and commitment to quality.&lt;/P&gt;

&lt;P&gt;Chapters move logically, carefully progressing through the same process master craftsmen use when approaching their work.  It starts by analyzing thought process of a pragmatic programmer (Preface and Chapter 1), transitions to approaches that lead to excellent (read: pragmatic) programming (Chapter 2), reviews the tools you need in your arsenal (Chapter 3), and continues evolving its coverage until the final essay, &lt;I&gt;Pride and Prejudice&lt;/I&gt;, which advises you to sign your work and to own it.&lt;/P&gt;

&lt;P&gt;The craftmanship metaphor infuses the book.  From the cover art (a wood plane), the subtitle, and the prose.  Interestingly, the authors' biographies on the back cover lead with their outside interests and downplay their technical accomplishents.  The author's assertion that programming is a craft is firmly delivered.&lt;/P&gt;

&lt;P&gt;As a result, the book itself compellingly supports the practices it advocates.&lt;/P&gt;

&lt;P&gt;Certain points may make you feel uncomfortable.  That's a good thing, for it means you're aware of the authors' wisdom.  Learn from your discomfort and use it to adjust your approaches accordingly.  You cannot avoid previous mistakes, but you can learn from them and prevent them from recurring.  The book shows you how.&lt;/P&gt;

&lt;H4&gt;&lt;a name="who"&gt;&lt;/a&gt;Who Can Benefit?&lt;/H4&gt;

&lt;P&gt;I believe that everyone involved in any part of software development will benefit from the advice in this book, for it covers more than effective programming.  Its practices apply to any project, even non-technical ones.  It doesn't matter if you're a code-slinger, project manager, system administrator, support engineers, QA tester, or even a fast-food cashier.  Granted, few non-technical tasks can benefit from understanding effective use of assertions, however, every task has problems to deal with and the author's ideas can be adapted to even the most obscure task.  Every position requires thought and every activity flows from specific decisions that you make.  This book helps you learn to make better, more effective (read: pragmatic) choices.&lt;/P&gt;

&lt;P&gt;That said, experienced programmers will gain the most from this book, for they will have made the mistakes the authors are trying to help you avoid.  Experienced programmers have seen the results the authors are trying to prevent.  Experienced programmers will understand the accuracy of the authors' experiences, even if only intuitively.&lt;/P&gt;

&lt;P&gt;For example, I recently ranted about a project I'm currently involved with.  Had I employed this book's advice from the start of that project, I doubt it would be floundering now.  Had I had this book's knowledge in hand ten years ago, I would not have had made certain mistakes.  I can honestly say that it will improve my future efforts.&lt;/P&gt;

&lt;P&gt;This is not to say that novice programmers can't learn from the book.  The information presented is valuable to anyone in the process.  However, you may not fully appreciate that until after you'd made some of your own mistakes and developed some of your own ideas from practical, real-world experience.&lt;/P&gt;

&lt;P&gt;Again, you need this book.  You need to read and re-read this book (often).  You need to refer to it when you're stuck and before you write a single line of code or design a single algorithm.&lt;/P&gt;

&lt;h4&gt;&lt;a name="sum"&gt;&lt;/a&gt;Summary&lt;/h4&gt;

&lt;P&gt;It's very easy to review a bad book.  You catalog a laundry list of major flaws, tell your readers to avoid the title, and then submit the copy, secure in the knowledge of a job well done.&lt;/P&gt;  

&lt;P&gt;Good books are just as difficult to review, for you want to communicate your reverence over the authors' accomplishments, your wonder at the accuracy of their observations, and your honest hopes for the book's success.  Indeed, there's an awareness that your review must be as carefully crafted as the work you're reviewing, for failing to do so may allow some readers to pass on the title.  &lt;/P&gt;

&lt;P&gt;I don't want to make that mistake in this review.  If you're not convinced you &lt;I&gt;need&lt;/I&gt; this book, please look past the shortcomings of my writing skills and see my enthusiasm for the work. I realize I've been a little lean on the specifics; that's because Hunt and Thomas communicate their ideas better--and more succinctly--than I can.&lt;/P&gt;

&lt;P&gt;If you care about your work as a programmer, wonder how to develop your programming skills, are frustrated by the lack of progress on a project, or even if you think you know it all, I strongly and emphatically implore you to buy this book.  If you read it, incorporate its ideas into your work, and return to it frequently, you &lt;i&gt;will&lt;/I&gt; become a better programmer.  Yes, it'll take time, but the investment will return far more than it will cost.&lt;/P&gt;

&lt;P&gt;Final Score: Six out of five camels...yes, it's that good.&lt;/P&gt;

&lt;H4&gt;&lt;a name="toc"&gt;&lt;/a&gt;Table of Contents&lt;/H4&gt;
&lt;OL&gt;&lt;LI&gt;A Pragmatic Philosophy&lt;/LI&gt;
&lt;OL&gt;&lt;LI&gt;The Cat Ate My Source Code&lt;/LI&gt;
&lt;LI&gt;Software Entropy&lt;/LI&gt;
&lt;LI&gt;Stone Soup and Boiled Frongs&lt;/LI&gt;
&lt;LI&gt;Good Enough Software&lt;/LI&gt;
&lt;LI&gt;Your Knowledge Portfolio&lt;/LI&gt;
&lt;LI&gt;Communicate!&lt;/LI&gt;
&lt;/OL&gt;
&lt;LI&gt;A Pragmatic Approach&lt;/LI&gt;
&lt;OL start="7"&gt;&lt;LI&gt;The Evils of Duplication&lt;/LI&gt;
&lt;LI&gt;Orthogonality&lt;/LI&gt;
&lt;LI&gt;Reversibility&lt;/LI&gt;
&lt;LI&gt;Tracer Bullets&lt;/LI&gt;
&lt;LI&gt;Prototypes and Post-It Notes&lt;/LI&gt;
&lt;LI&gt;Domain Languages&lt;/LI&gt;
&lt;LI&gt;Estimating&lt;/LI&gt;
&lt;/OL&gt;
&lt;LI&gt;The Basic Tools&lt;/LI&gt;
&lt;OL start="14"&gt;&lt;LI&gt;The Power of Plain Text&lt;/LI&gt;
&lt;LI&gt;Shell Games&lt;/LI&gt;
&lt;LI&gt;Power Games&lt;/LI&gt;
&lt;LI&gt;Source Code Control&lt;/LI&gt;
&lt;LI&gt;Debugging&lt;/LI&gt;
&lt;LI&gt;Text Manipulation&lt;/LI&gt;
&lt;LI&gt;Code Generators&lt;/LI&gt;
&lt;/OL&gt;
&lt;LI&gt;Pragmatic Paranoia&lt;/LI&gt;
&lt;OL start="21"&gt;&lt;LI&gt;Design By Contract&lt;/LI&gt;
&lt;LI&gt;Dead Programs Tell No Lies&lt;/LI&gt;
&lt;LI&gt;Assertive Programming&lt;/LI&gt;
&lt;LI&gt;When to use Exceptions&lt;/LI&gt;
&lt;LI&gt;How to Balance Resources&lt;/LI&gt;
&lt;/OL&gt;
&lt;LI&gt;Bend or Break&lt;/LI&gt;
&lt;OL start="26"&gt;&lt;LI&gt;Decoupling and the Law of Demeter&lt;/LI&gt;
&lt;LI&gt;Metaprogramming&lt;/LI&gt;
&lt;LI&gt;Temporal Coupling&lt;/LI&gt;
&lt;LI&gt;It's Just a View&lt;/LI&gt;
&lt;LI&gt;Blackboards&lt;/LI&gt;
&lt;/OL&gt;
&lt;LI&gt;While You Are Coding&lt;/LI&gt;
&lt;OL start="31"&gt;&lt;LI&gt;Programming by Coincidence&lt;/LI&gt;
&lt;LI&gt;Algorithm Speed&lt;/LI&gt;
&lt;LI&gt;Refactoring&lt;/LI&gt;
&lt;LI&gt;Code That's Easy to Test&lt;/LI&gt;
&lt;LI&gt;Evil Wizards&lt;/LI&gt;
&lt;/OL&gt;
&lt;LI&gt;Before the Project&lt;/LI&gt;
&lt;OL start="36"&gt;&lt;LI&gt;The Requirements Pit&lt;/LI&gt;
&lt;LI&gt;Solving Impossible Puzzles&lt;/LI&gt;
&lt;LI&gt;Not Until You're Ready&lt;/LI&gt;
&lt;LI&gt;The Specification Trap&lt;/LI&gt;
&lt;LI&gt;Circles and Arrows&lt;/LI&gt;
&lt;/OL&gt;
&lt;LI&gt;Pragmatic Projects&lt;/LI&gt;
&lt;OL start="41"&gt;&lt;LI&gt;Pragmatic Teams&lt;/LI&gt;
&lt;LI&gt;Ubiquitous Automation&lt;/LI&gt;
&lt;LI&gt;Ruthless Testing&lt;/LI&gt;
&lt;LI&gt;It's All Writing&lt;/LI&gt;
&lt;LI&gt;Great Expectations&lt;/LI&gt;
&lt;LI&gt;Pride and Prejudice&lt;/LI&gt;
&lt;/OL&gt;&lt;/OL&gt;
&lt;P&gt;Appendices&lt;/P&gt;
&lt;OL TYPE="A"&gt;&lt;LI&gt;Resources&lt;/LI&gt;
&lt;UL&gt;&lt;LI&gt;Professional Societies&lt;/LI&gt;
&lt;LI&gt;Building a Library&lt;/LI&gt;
&lt;LI&gt;Internet Resources&lt;/LI&gt;
&lt;LI&gt;Bibliography&lt;/LI&gt;
&lt;/UL&gt;
&lt;LI&gt;Answers to Exercises&lt;/LI&gt;
&lt;/OL&gt;
&lt;P&gt;&lt;font size="-1"&gt;&lt;I&gt;&amp;#091;- End -&amp;#093;&amp;nbsp;&lt;/i&gt;&lt;/font&gt;&lt;/P&gt;

</field>
<field name="itemdescription">
Excellent Guidebook into the Craft of Good Programming Practices.</field>
<field name="usercomment">
Want to learn how to be a good or better programmer?  Buy and read this book.  Now!</field>
<field name="identifier">
020161622X</field>
</data>
</node>
