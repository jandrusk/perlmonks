<?xml version="1.0" encoding="windows-1252"?>
<node id="506460" title="recent public chatter" created="2005-11-07 12:35:44" updated="2005-11-07 07:35:44">
<type id="397475">
sqlquery</type>
<author id="142755">
tye&amp;nbsp;</author>
<sqlqueryresult><rows_affected>100</rows_affected>
<record><author>thezip</author>
<msgtext>[Your Mother|Tease]...</msgtext>
<time>17:23:08</time>
</record>
<record><author>tye</author>
<msgtext>/me . o O ( I'm going to be a Mach 0 man )</msgtext>
<time>17:17:58</time>
</record>
<record><author>tye</author>
<msgtext>Acme::Turtle::Mach2</msgtext>
<time>17:15:44</time>
</record>
<record><author>Your Mother</author>
<msgtext>Beautiful soup.</msgtext>
<time>17:13:23</time>
</record>
<record><author>tye</author>
<msgtext>Acme::Mock::Turtle::Neck</msgtext>
<time>17:13:09</time>
</record>
<record><author>tye</author>
<msgtext>Acme::Mock::Turtle::Frames</msgtext>
<time>17:11:11</time>
</record>
<record><author>Your Mother</author>
<msgtext>You're lucky I don't have time to write Acme::Mock today.</msgtext>
<time>17:10:24</time>
</record>
<record><author>tye</author>
<msgtext>I would think so, yes</msgtext>
<time>17:09:13</time>
</record>
<record><author>Your Mother</author>
<msgtext>Or Mock the Hoople.</msgtext>
<time>17:09:11</time>
</record>
<record><author>Your Mother</author>
<msgtext>Or Ucla the Mock?</msgtext>
<time>17:09:02</time>
</record>
<record><author>Your Mother</author>
<msgtext>But can it mock Test::Mock?</msgtext>
<time>17:08:04</time>
</record>
<record><author>tye</author>
<msgtext>So, any feedback helps me find resources to improve the thing.</msgtext>
<time>17:04:35</time>
</record>
<record><author>tye</author>
<msgtext>anyway, I'd be happy to hear any feedback on Test::Mimic.  I had my minion create it to my specifications and I used it quite successfully and easily once. And I know it isn't (yet) up to mocking something as schizo as DBI.</msgtext>
<time>17:04:07</time>
</record>
<record><author>tye</author>
<msgtext>it's a shibboleth</msgtext>
<time>17:02:38</time>
</record>
<record><author>Tanktalus</author>
<msgtext>isn't that just "surly" spoken by Sean Connery?</msgtext>
<time>17:00:16</time>
</record>
<record><author>thezip</author>
<msgtext>Just don't call him shurly</msgtext>
<time>16:58:22</time>
</record>
<record><author>tye</author>
<msgtext>/me . o O ( I call him "surly" often ;)</msgtext>
<time>16:57:47</time>
</record>
<record><author>thezip</author>
<msgtext>/me is unsirtain about that...</msgtext>
<time>16:57:46</time>
</record>
<record><author>Tanktalus</author>
<msgtext>I need to save that line. I think that's the only time you've ever called me "sir" :-P</msgtext>
<time>16:56:31</time>
</record>
<record><author>thezip</author>
<msgtext>/me requested an electronic version of a datafile, and was informed that they'd certainly be a ble to scan it for me</msgtext>
<time>16:56:08</time>
</record>
<record><author>tye</author>
<msgtext>You mock me, Sir!</msgtext>
<time>16:55:57</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[tye]: I'm sure you'll be happy to see my new Term::ReadLine patch.  It uses callbacks :-)</msgtext>
<time>16:55:21</time>
</record>
<record><author>tye</author>
<msgtext>/me is an uncertain monk</msgtext>
<time>16:52:35</time>
</record>
<record><author>thezip</author>
<msgtext>mock mock mock...</msgtext>
<time>16:52:20</time>
</record>
<record><author>Tanktalus</author>
<msgtext>No, I haven't - let me go check :-)</msgtext>
<time>16:52:12</time>
</record>
<record><author>thezip</author>
<msgtext>I hate it when people don't clean up their crap.</msgtext>
<time>16:52:00</time>
</record>
<record><author>Tanktalus</author>
<msgtext>As opposed to certain monks who merely mock me? :-P</msgtext>
<time>16:51:58</time>
</record>
<record><author>tye</author>
<msgtext>(it writes mocks for you)</msgtext>
<time>16:50:32</time>
</record>
<record><author>Tanktalus</author>
<msgtext>:-S</msgtext>
<time>16:50:29</time>
</record>
<record><author>Tanktalus</author>
<msgtext>And the one I'm working on right now (other than when I'm typing into CB) is a workaround for some other piece of crap (as opposed to my piece of crap) not properly cleaning up after itself.  I lack sufficient imagination on how to unit test *that*</msgtext>
<time>16:50:27</time>
</record>
<record><author>tye</author>
<msgtext>have you seen or tried [mod://Test::Mimic] ?</msgtext>
<time>16:50:06</time>
</record>
<record><author>Tanktalus</author>
<msgtext>I need more *mock* objects.  But they take much more time to write than what I seem to have. :-(</msgtext>
<time>16:49:06</time>
</record>
<record><author>Tanktalus</author>
<msgtext>I have ~700 tests in *unit* testing. But they're far from sufficient.</msgtext>
<time>16:48:37</time>
</record>
<record><author>tye</author>
<msgtext>ah, you need /unit/ testing</msgtext>
<time>16:39:12</time>
</record>
<record><author>Tanktalus</author>
<msgtext>backup, which can take 1-4 days (depending on the test). :-(</msgtext>
<time>16:38:07</time>
</record>
<record><author>Tanktalus</author>
<msgtext>Part of the problem is that we're coding against large clusters of boxes, and there just aren't enough boxes to actually test against.  And a normal full run of our software literally takes 16-24 hours.  And then you need to restore the cluster from</msgtext>
<time>16:38:06</time>
</record>
<record><author>JayBonci</author>
<msgtext>Also, strangely, my hobby is climbing out from the legacy pits.</msgtext>
<time>16:36:47</time>
</record>
<record><author>JayBonci</author>
<msgtext>Yeah, my life is climbing out of legacy pits</msgtext>
<time>16:36:27</time>
</record>
<record><author>tye</author>
<msgtext>It least we have management buy-in here. Lots of climbing out from the legacy pit to go.</msgtext>
<time>16:35:44</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[tye]: no.  The unit tests are WAY better than my previous job, but not even halfway where I want them.  Management isn't exactly willing to fund it, everything I do have is based on stolen time. :-(</msgtext>
<time>16:33:53</time>
</record>
<record><author>tye</author>
<msgtext>/me . o O ( clearly not TDD ;)</msgtext>
<time>16:32:01</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[Lady_Aleena]: I just got a bug report at $work where the problem was using a function from a module, without having use'd that module first.  See? I still do that :-(</msgtext>
<time>16:29:30</time>
</record>
<record><author>tye</author>
<msgtext>most of the length of the source is due to "unrolling" as optimization</msgtext>
<time>16:17:34</time>
</record>
<record><author>Tanktalus</author>
<msgtext>And the source is in doops.c and is way longer than I had expected :-)</msgtext>
<time>16:13:35</time>
</record>
<record><author>Tanktalus</author>
<msgtext>If you're extracting just a single bit, it looks like it makes sense.  When you want more than one bit, it's more confusing, IMNSHO :-)</msgtext>
<time>16:12:51</time>
</record>
<record><author>Fighter2</author>
<msgtext>Thanks Tanktalus</msgtext>
<time>16:11:40</time>
</record>
<record><author>Tanktalus</author>
<msgtext>ouch. :-S</msgtext>
<time>16:09:18</time>
</record>
<record><author>JayBonci</author>
<msgtext>pmdev scrape running. ETA for completion of about 3 hours</msgtext>
<time>16:02:30</time>
</record>
<record><author>Tanktalus</author>
<msgtext>Like I said, I don't actually use it :-)</msgtext>
<time>16:01:28</time>
</record>
<record><author>Tanktalus</author>
<msgtext>at least, I think so.  Maybe not quite - that bits part doesn't work quite how I expected.</msgtext>
<time>16:01:03</time>
</record>
<record><author>Tanktalus</author>
<msgtext>The 2 is 0-based offset, the 1 is the number of bits you want.</msgtext>
<time>15:59:57</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[Fighter2]: remember, vec works on *bits*.  So you may need to convert your "number" into "bits" (&lt;c&gt;chr($number)&lt;/c&gt;).  And you're extracting the 3rd (0-based) bit from that input.</msgtext>
<time>15:59:24</time>
</record>
<record><author>Lady_Aleena</author>
<msgtext>/me has an hour to kill before she can try running the script she was working on again.</msgtext>
<time>15:56:59</time>
</record>
<record><author>Fighter2</author>
<msgtext>Some wizardry me thinks</msgtext>
<time>15:54:08</time>
</record>
<record><author>Fighter2</author>
<msgtext>What did it do there?</msgtext>
<time>15:53:17</time>
</record>
<record><author>Fighter2</author>
<msgtext>if (vec($numbers, 2, 1)) {  print "2 is prime.n"; }</msgtext>
<time>15:53:10</time>
</record>
<record><author>Tanktalus</author>
<msgtext>vec($bits, $o, $n) is roughly the same as $bits &amp; $omask | $nmask, where $omask is roughly "-1 &lt;&lt; $o" and $nmask is a sequence of bytes with the lowest $n bits turned on.</msgtext>
<time>15:51:11</time>
</record>
<record><author>Fighter2</author>
<msgtext>hmm.</msgtext>
<time>15:49:28</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[Fighter2]: you can look at the perl source code.  It's probably in C :-)</msgtext>
<time>15:48:47</time>
</record>
<record><author>Tanktalus</author>
<msgtext>and finding the first that's not in the string, whichever.</msgtext>
<time>15:48:34</time>
</record>
<record><author>Tanktalus</author>
<msgtext>If you *insist* on doing what you're doing the way you're doing it, the idea, IIRC, is to look for an "acceptable" delimiter by checking what's in the string and thus what you can use, and eliminating those.  Or by looping through possible characters</msgtext>
<time>15:48:33</time>
</record>
<record><author>Fighter2</author>
<msgtext>It did work. I said, I didn't know how it worked.</msgtext>
<time>15:47:58</time>
</record>
<record><author>Lady_Aleena</author>
<msgtext>Tanktalus, so you didn't want me to use it. That is where I got confused, I thought you did.</msgtext>
<time>15:46:38</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[Lady_Aleena]: yes, and that's part of the reason I suggest staying away from doing stuff like that :-)</msgtext>
<time>15:45:31</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[Fighter2]: um, didn't I give you the code you needed? :-)  "&lt;c&gt;vec(hex($hex_string), 3, 1)&lt;/c&gt; will be zero or one, exactly what you want."</msgtext>
<time>15:45:10</time>
</record>
<record><author>Lady_Aleena</author>
<msgtext>/me looked at AnyEvent and got confused.</msgtext>
<time>15:41:26</time>
</record>
<record><author>Fighter2</author>
<msgtext>I dont understand how &lt;c&gt;vec&lt;/c&gt; works [Talktalus] :(</msgtext>
<time>15:41:09</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[LanX]: as far as I can tell, T::RL::Z doesn't honour the tkRunning flag at all, which makes it incomplete to start with.  Without honouring that flag, it won't honour my patch, either.</msgtext>
<time>15:38:22</time>
</record>
<record><author>LanX</author>
<msgtext>[cpan://Term::ReadLine::Zoid]</msgtext>
<time>15:36:34</time>
</record>
<record><author>LanX</author>
<msgtext>distribution [cpan://zoidberg] also provides a pure perl Readline engine to be used under T::RL</msgtext>
<time>15:32:43</time>
</record>
<record><author>Tanktalus</author>
<msgtext>no idea what you're talking about, [LanX].</msgtext>
<time>15:31:33</time>
</record>
<record><author>LanX</author>
<msgtext>did you ever try zoidberg?</msgtext>
<time>15:29:52</time>
</record>
<record><author>Tanktalus</author>
<msgtext>wth?</msgtext>
<time>15:27:43</time>
</record>
<record><author>Tanktalus</author>
<msgtext>reverted the previous patch and actually solved the problem genericly in a way that actually worked. :-D</msgtext>
<time>15:27:34</time>
</record>
<record><author>Tanktalus</author>
<msgtext>Someone else's patch got into 5.15.8, clobbering mine, claiming to solve the same problem more genericly.  And I tested it, and it failed to work as claimed.  So I submitted a new patch today (with [Corion]'s help, I might add) which entirely</msgtext>
<time>15:27:33</time>
</record>
<record><author>LanX</author>
<msgtext>:-P</msgtext>
<time>15:26:59</time>
</record>
<record><author>LanX</author>
<msgtext>Hail Tentakulus!!!</msgtext>
<time>15:26:49</time>
</record>
<record><author>Tanktalus</author>
<msgtext>I submitted a patch. It was accepted.  Applied. And reverted. All between the releases of 5.15.7 and 5.15.8 :-S</msgtext>
<time>15:26:08</time>
</record>
<record><author>Tanktalus</author>
<msgtext>Well, no, not really.</msgtext>
<time>15:25:41</time>
</record>
<record><author>LanX</author>
<msgtext>wow Tanktalus patched T:RL ...</msgtext>
<time>15:25:26</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[LanX]: that's not an IT issue, that's an international ethical question. :-P</msgtext>
<time>15:22:35</time>
</record>
<record><author>LanX</author>
<msgtext>/me ... like suing a company which sells spyware to dictators.</msgtext>
<time>15:21:55</time>
</record>
<record><author>Tanktalus</author>
<msgtext>accomplishing what I needed to accomplish), just as an example. The question is *why* is it getting negative reviews, are the concerns *legitimate*, and, if so, what, if anything, can you do to mitigate those concerns?</msgtext>
<time>15:21:49</time>
</record>
<record><author>Tanktalus</author>
<msgtext>That's okay.  You can't please everyone.  That T::RL patch I just referred to uses a style that may annoy [tye] (IIRC, he doesn't like callbacks, but I couldn't see another way to do it without breaking backward-compatibility while still actually</msgtext>
<time>15:21:49</time>
</record>
<record><author>LanX</author>
<msgtext>/me didn't mention yesterday that "The Good Wife" often discusses IT issues</msgtext>
<time>15:21:09</time>
</record>
<record><author>Lady_Aleena</author>
<msgtext>Tanktalus, I'm not just talking about what I'm working on now, there are people who loathed my little &lt;c&gt;line&lt;/c&gt; subroutine from years back.</msgtext>
<time>15:14:59</time>
</record>
<record><author>Tanktalus</author>
<msgtext>/me is just waiting for word on his patch to Term::ReadLine... :-)</msgtext>
<time>15:12:05</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[Fighter2]: np.</msgtext>
<time>15:08:33</time>
</record>
<record><author>Fighter2</author>
<msgtext>Thanks Tanktalus</msgtext>
<time>15:08:13</time>
</record>
<record><author>Tanktalus</author>
<msgtext>bah, I do that all the time, [Lady_Aleena|LA].  Still.  :-)</msgtext>
<time>15:07:47</time>
</record>
<record><author>Lady_Aleena</author>
<msgtext>RIght now I've got a mess to clean up on Twitter from a test I ran. It's bad when I use a module but forget to &lt;c&gt;use Module&lt;/c&gt;.</msgtext>
<time>15:07:25</time>
</record>
<record><author>Tanktalus</author>
<msgtext>For the record, I've seen vec used in various places, but never used it myself. :-)</msgtext>
<time>15:06:53</time>
</record>
<record><author>Lady_Aleena</author>
<msgtext>Tanktalus, I will always be awed by the genious of everyone else here.</msgtext>
<time>15:06:28</time>
</record>
<record><author>Tanktalus</author>
<msgtext>&lt;c&gt;vec(hex($hex_string), 3, 1)&lt;/c&gt; will be zero or one, exactly what you want.  And IIRC, it's an lvalue (assignable).</msgtext>
<time>15:06:18</time>
</record>
<record><author>Fighter2</author>
<msgtext>\reads</msgtext>
<time>15:05:13</time>
</record>
<record><author>Fighter2</author>
<msgtext>whoa!</msgtext>
<time>15:04:48</time>
</record>
<record><author>Fighter2</author>
<msgtext>and then cut the third bit using map</msgtext>
<time>15:04:44</time>
</record>
<record><author>Tanktalus</author>
<msgtext>[doc://vec]?</msgtext>
<time>15:04:19</time>
</record>
<record><author>Fighter2</author>
<msgtext>I wrote this way &lt;c&gt;my $binary_string = sprintf "%032b", hex( $hex_string );&lt;/c&gt;</msgtext>
<time>15:03:46</time>
</record>
<record><author>Fighter2</author>
<msgtext>hey [Tanktalus], I am wondering if there's an easy way to get a 3rd bit of 2 byte hex.</msgtext>
<time>15:02:58</time>
</record>
</sqlqueryresult>
</node>
