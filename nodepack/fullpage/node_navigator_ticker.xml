<node>
  <doctext>[%
my %xmlstyle= ( clean =&gt; 1 );

return &quot;&lt;error&gt;Error creating fling object&lt;/error&gt;&quot;
     unless htmlcode('new_xml_fling','',\my($xml,@data),\%xmlstyle,'add_http_header');

my $node_id= $q-&gt;param('id') || 847; $node_id+=0;

my $refnode= getNodeById( $node_id );

# api decision:
# if user specifies param explicitly, and it's invalid,
# DO NOT fall back on using the value from the ref node.

# the fields in the xml header are to reflect the user's inputs, as long as
# they're defined, even if they're invalid.
# the error code will report if any are invalid.

my @xml_header_fields = ( node_id =&gt; $node_id );
my @errors;

push @errors, &quot;reference node does not exist&quot;
   unless $refnode;

my $nodetype_id = 
   $q-&gt;param('nodetype') ? $q-&gt;param('nodetype') :
   ref $refnode ? $refnode-&gt;{type_nodetype} :
   undef;

my $author_id = 
   $q-&gt;param('author') ? $q-&gt;param('author') :
   ref $refnode ? $refnode-&gt;{author_user} :
   undef;

$nodetype_id+=0;
$author_id+=0;

if ( $nodetype_id ) {
   my $typenode = getNodeById( $nodetype_id );
   push @xml_header_fields,
      nodetype_id =&gt; $nodetype_id,
      nodetype_name =&gt; $typenode-&gt;{title};
   if ( $typenode-&gt;{type_nodetype} != 1 ) { # 1 = nodetype
      push @errors, &quot;invalid nodetype id $nodetype_id&quot;;
      undef $nodetype_id;
   }
}
else {
   push @errors, &quot;nodetype id undetermined/unspecified&quot;;
}

if ( $author_id ) {
   my $authnode = getNodeById( $author_id );
   push @xml_header_fields,
      author_id =&gt; $author_id,
      author_name =&gt; $authnode-&gt;{title};
   if ( $authnode-&gt;{type_nodetype} != 15
     &amp;&amp; $authnode-&gt;{type_nodetype} != 16 ) { # 15,16 = user,usergroup
      push @errors, &quot;invalid author id $author_id&quot;;
      undef $author_id;
   }
}
else {
   push @errors, &quot;author id undetermined/unspecified&quot;;
}

@errors and push @xml_header_fields,
   error =&gt; join ';', @errors;

htmlcode( 'xml_info_tag', '', $xml, \%xmlstyle, 'nodenav',
   @xml_header_fields,
);

my %tag = (
   type  =&gt; 'of_type',
   auth  =&gt; 'by_author',
);
my %att = (
   type =&gt; [ nodetype_id =&gt; $nodetype_id ],
   auth =&gt; [ author_id =&gt; $author_id ],
);
my %and = (
   type =&gt; &quot; and type_nodetype=$nodetype_id&quot;,
   auth =&gt; &quot; and author_user=$author_id&quot;,
);

my $empty = {
   tag =&gt; [], # use &quot;deref to empty array&quot; trick
   att =&gt; [],
   sql =&gt; [],
};
my @typevec = ($empty);
my @authvec = ($empty);
$nodetype_id and push @typevec, {
   tag =&gt; ['of_type'],
   att =&gt; [ nodetype_id =&gt; $nodetype_id ],
   sql =&gt; [&quot; and type_nodetype=$nodetype_id&quot;],
};
$author_id and push @authvec, {
   tag =&gt; ['by_author'],
   att =&gt; [ author_id =&gt; $author_id ],
   sql =&gt; [&quot; and author_user=$author_id&quot;],
};

for my $tv ( @typevec ) {
for my $av ( @authvec ) {

   my $tag = join '_', @{ $tv-&gt;{tag} }, @{ $av-&gt;{tag} };
   my @att =           @{ $tv-&gt;{att} }, @{ $av-&gt;{att} };
   my $and = join  '', @{ $tv-&gt;{sql} }, @{ $av-&gt;{sql} };

   $tag ||= 'all';

   my $pst= $DB-&gt;sqlSelect( &quot;max(node_id)&quot;, &quot;node&quot;, &quot;node_id&lt;$node_id&quot;.$and );
   my $nst= $DB-&gt;sqlSelect( &quot;min(node_id)&quot;, &quot;node&quot;, &quot;node_id&gt;$node_id&quot;.$and );

   $xml-&gt;start( $tag, @att );
   $xml-&gt;empty( 'prev', node_id =&gt; $pst ) if $pst;
   $xml-&gt;empty( 'next', node_id =&gt; $nst ) if $nst;
   $xml-&gt;end;
}
}

$xml-&gt;end;

my $data = join &quot;&quot;,@data;       
htmlcode('postProcessXML','',\$data);
return $data;
%]
</doctext>
  <type_nodetype>122</type_nodetype>
  <node_id>693598</node_id>
  <author_user>518801</author_user>
  <title>node navigator ticker</title>
  <createtime>2008-06-23 16:18:00</createtime>
  <nodeupdated>2008-06-23 12:18:00</nodeupdated>
</node>
