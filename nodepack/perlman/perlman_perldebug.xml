<node>
  <doctext>&lt;HR&gt;
&lt;P&gt;
&lt;H1&gt;&lt;A NAME=&quot;NAME&quot;&gt;NAME&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
perldebug - Perl debugging

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;DESCRIPTION&quot;&gt;DESCRIPTION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
First of all, have you tried using the &lt;STRONG&gt;-w&lt;/STRONG&gt; switch?

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;The_Perl_Debugger&quot;&gt;The Perl Debugger&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
``As soon as we started programming, we found to our surprise that it wasn't as easy to get programs right as we had thought. Debugging had to be discovered. 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; can remember the exact instant when 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs.''

&lt;P&gt;
&lt;EM&gt;&lt;PRE&gt;  --Maurice Wilkes, 1949
&lt;/PRE&gt;
&lt;/EM&gt;

&lt;P&gt;
If you invoke Perl with the &lt;STRONG&gt;-d&lt;/STRONG&gt; switch, your script runs under the Perl source debugger. This works like an
interactive Perl environment, prompting for debugger commands that let you
examine source code, set breakpoints, get stack backtraces, change the
values of variables, etc. This is so convenient that you often fire up the
debugger all by itself just to test out Perl constructs interactively to
see what they do. For example:

&lt;P&gt;
&lt;PRE&gt;    perl -d -e 42
&lt;/PRE&gt;
&lt;P&gt;
In Perl, the debugger is not a separate program as it usually is in the
typical compiled environment. Instead, the &lt;STRONG&gt;-d&lt;/STRONG&gt; flag tells the compiler to insert source information into the parse trees
it's about to hand off to the interpreter. That means your code must first
compile correctly for the debugger to work on it. Then when the interpreter
starts up, it preloads a Perl library file containing the debugger itself.

&lt;P&gt;
The program will halt &lt;EM&gt;right before&lt;/EM&gt; the first run-time executable statement (but see below regarding
compile-time statements) and ask you to enter a debugger command. Contrary
to popular expectations, whenever the debugger halts and shows you a line
of code, it always displays the line it's &lt;EM&gt;about&lt;/EM&gt; to execute, rather than the one it has just executed.

&lt;P&gt;
Any command not recognized by the debugger is directly executed ([perlfunc:eval|eval]'d) as Perl code in the current package. (The debugger uses the 
&lt;FONT SIZE=-1&gt;DB&lt;/FONT&gt; package for its own state information.)

&lt;P&gt;
Leading white space before a command would cause the debugger to think it's &lt;EM&gt;NOT&lt;/EM&gt; a debugger command but for Perl, so be careful not to do that.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Debugger_Commands&quot;&gt;Debugger Commands&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
The debugger understands the following commands:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_h&quot;&gt;h &amp;#091;command&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Prints out a help message.

&lt;P&gt;
If you supply another debugger command as an argument to the &lt;CODE&gt;h&lt;/CODE&gt; command, it prints out the description for just that command. The special
argument of &lt;CODE&gt;h h&lt;/CODE&gt; produces a more compact help listing, designed to fit together on one
screen.

&lt;P&gt;
If the output of the &lt;CODE&gt;h&lt;/CODE&gt; command (or any command, for that matter) scrolls past your screen, either
precede the command with a leading pipe symbol so it's run through your
pager, as in

&lt;P&gt;
&lt;PRE&gt;    DB&amp;gt; |h
&lt;/PRE&gt;
&lt;P&gt;
You may change the pager which is used via &lt;CODE&gt;O pager=...&lt;/CODE&gt; command.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_p&quot;&gt;p expr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Same as &lt;CODE&gt;print {$DB::OUT} expr&lt;/CODE&gt; in the current package. In particular, because this is just Perl's own &lt;STRONG&gt;print&lt;/STRONG&gt; function, this means that nested data structures and objects are not
dumped, unlike with the &lt;CODE&gt;x&lt;/CODE&gt; command.

&lt;P&gt;
The &lt;CODE&gt;DB::OUT&lt;/CODE&gt; filehandle is opened to &lt;EM&gt;/dev/tty&lt;/EM&gt;, regardless of where 
&lt;FONT SIZE=-1&gt;STDOUT&lt;/FONT&gt; may be redirected to.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_x&quot;&gt;x expr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Evaluates its expression in list context and dumps out the result in a
pretty-printed fashion. Nested data structures are printed out recursively,
unlike the [perlfunc:print|print] function.

&lt;P&gt;
The details of printout are governed by multiple &lt;CODE&gt;O&lt;/CODE&gt;ptions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_V&quot;&gt;V &amp;#091;pkg &amp;#091;vars&amp;#093;&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Display all (or some) variables in package (defaulting to the &lt;CODE&gt;main&lt;/CODE&gt;
package) using a data pretty-printer (hashes show their keys and values so
you see what's what, control characters are made printable, etc.). Make
sure you don't put the type specifier (like &lt;CODE&gt;$&lt;/CODE&gt;) there, just the symbol names, like this:

&lt;P&gt;
&lt;PRE&gt;    V DB filename line
&lt;/PRE&gt;
&lt;P&gt;
Use &lt;CODE&gt;~pattern&lt;/CODE&gt; and &lt;CODE&gt;!pattern&lt;/CODE&gt; for positive and negative regexps.

&lt;P&gt;
Nested data structures are printed out in a legible fashion, unlike the [perlfunc:print|print] function.

&lt;P&gt;
The details of printout are governed by multiple &lt;CODE&gt;O&lt;/CODE&gt;ptions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_X&quot;&gt;X &amp;#091;vars&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Same as &lt;CODE&gt;V currentpackage &amp;#091;vars&amp;#093;&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_T&quot;&gt;T&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Produce a stack backtrace. See below for details on its output.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_s&quot;&gt;s &amp;#091;expr&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Single step. Executes until it reaches the beginning of another statement,
descending into subroutine calls. If an expression is supplied that
includes function calls, it too will be single-stepped.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_n&quot;&gt;n &amp;#091;expr&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Next. Executes over subroutine calls, until it reaches the beginning of the
next statement. If an expression is supplied that includes function calls,
those functions will be executed with stops before each statement.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ltCRgt&quot;&gt;ltCRgt&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Repeat last &lt;CODE&gt;n&lt;/CODE&gt; or [perlman:perlop] command.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_c&quot;&gt;c &amp;#091;line|sub&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Continue, optionally inserting a one-time-only breakpoint at the specified
line or subroutine.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_l&quot;&gt;l&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List next window of lines.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;l min+incr&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List &lt;CODE&gt;incr+1&lt;/CODE&gt; lines starting at &lt;CODE&gt;min&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;l min-max&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List lines &lt;CODE&gt;min&lt;/CODE&gt; through &lt;CODE&gt;max&lt;/CODE&gt;.  &lt;CODE&gt;l -&lt;/CODE&gt; is synonymous to &lt;CODE&gt;-&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;l line&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List a single line.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;l subname&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List first window of lines from subroutine.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;-&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List previous window of lines.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_w&quot;&gt;w &amp;#091;line&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List window (a few lines) around the current line.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;.&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return debugger pointer to the last-executed line and print it out.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_f&quot;&gt;f filename&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Switch to viewing a different file or eval statement. If &lt;CODE&gt;filename&lt;/CODE&gt;
is not a full filename as found in values of 
&lt;FONT SIZE=-1&gt;%INC,&lt;/FONT&gt; it is considered as a regexp.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__pattern_&quot;&gt;/pattern/&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Search forwards for pattern; final / is optional.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__pattern_&quot;&gt;?pattern?&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Search backwards for pattern; final ? is optional.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_L&quot;&gt;L&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List all breakpoints and actions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_S&quot;&gt;S &amp;#091;&amp;#091;!&amp;#093;pattern&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
List subroutine names &amp;#091;not&amp;#093; matching pattern.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_t&quot;&gt;t&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Toggle trace mode (see also &lt;CODE&gt;AutoTrace&lt;/CODE&gt;  &lt;CODE&gt;O&lt;/CODE&gt;ption).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;t expr&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Trace through execution of expr. For example:

&lt;P&gt;
&lt;PRE&gt; $ perl -de 42
 Stack dump during die enabled outside of evals.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; Loading DB routines from perl5db.pl patch level 0.94
 Emacs support available.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; Enter h or `h h' for help.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; main::(-e:1):   0
   DB&amp;lt;1&amp;gt; sub foo { 14 }
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   DB&amp;lt;2&amp;gt; sub bar { 3 }
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   DB&amp;lt;3&amp;gt; t print foo() * bar()
 main::((eval 172):3):   print foo() + bar();
 main::foo((eval 168):2):
 main::bar((eval 170):2):
 42
&lt;/PRE&gt;
&lt;P&gt;
or, with the &lt;CODE&gt;O&lt;/CODE&gt;ption &lt;CODE&gt;frame=2&lt;/CODE&gt; set,

&lt;P&gt;
&lt;PRE&gt;   DB&amp;lt;4&amp;gt; O f=2
                frame = '2'
   DB&amp;lt;5&amp;gt; t print foo() * bar()
 3:      foo() * bar()
 entering main::foo
  2:     sub foo { 14 };
 exited main::foo
 entering main::bar
  2:     sub bar { 3 };
 exited main::bar
 42
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_b&quot;&gt;b &amp;#091;line&amp;#093; &amp;#091;condition&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set a breakpoint. If line is omitted, sets a breakpoint on the line that is
about to be executed. If a condition is specified, it's evaluated each time
the statement is reached and a breakpoint is taken only if the condition is
true. Breakpoints may be set on only lines that begin an executable
statement. Conditions don't use &lt;STRONG&gt;if&lt;/STRONG&gt;:

&lt;P&gt;
&lt;PRE&gt;    b 237 $x &amp;gt; 30
    b 237 ++$count237 &amp;lt; 11
    b 33 /pattern/i
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;b subname &amp;#091;condition&amp;#093;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set a breakpoint at the first line of the named subroutine.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;b postpone subname &amp;#091;condition&amp;#093;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set breakpoint at first line of subroutine after it is compiled.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;b load filename&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set breakpoint at the first executed line of the file. Filename should be a full name as found in values of 
&lt;FONT SIZE=-1&gt;%INC.&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;b compile subname&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Sets breakpoint at the first statement executed after the subroutine is
compiled.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d&quot;&gt;d &amp;#091;line&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Delete a breakpoint at the specified line. If line is omitted, deletes the
breakpoint on the line that is about to be executed.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_D&quot;&gt;D&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Delete all installed breakpoints.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_a&quot;&gt;a &amp;#091;line&amp;#093; command&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set an action to be done before the line is executed. The sequence of steps
taken by the debugger is

&lt;P&gt;
&lt;PRE&gt;  1. check for a breakpoint at this line
  2. print the line if necessary (tracing)
  3. do any actions associated with that line
  4. prompt user if at a breakpoint or in single-step
  5. evaluate line
&lt;/PRE&gt;
&lt;P&gt;
For example, this will print out &lt;CODE&gt;$foo&lt;/CODE&gt; every time line 53 is
passed:

&lt;P&gt;
&lt;PRE&gt;    a 53 print &amp;quot;DB FOUND $foo\n&amp;quot;
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_A&quot;&gt;A&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Delete all installed actions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_W&quot;&gt;W &amp;#091;expr&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Add a global watch-expression.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;W&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Delete all watch-expressions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_O&quot;&gt;O &amp;#091;opt&amp;#091;=val&amp;#093;&amp;#093; &amp;#091;opt&amp;quot;val&amp;quot;&amp;#093; &amp;#091;opt?&amp;#093;...&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set or query values of options. val defaults to 1. opt can be abbreviated.
Several options can be listed.

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_recallCommand&quot;&gt;recallCommand, ShellBang&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The characters used to recall command or spawn shell. By default, these are
both set to &lt;CODE&gt;!&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_pager&quot;&gt;pager&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Program to use for output of pager-piped commands (those beginning with a &lt;CODE&gt;|&lt;/CODE&gt; character.) By default,
&lt;CODE&gt;$ENV{PAGER}&lt;/CODE&gt; will be used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_tkRunning&quot;&gt;tkRunning&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Run Tk while prompting (with ReadLine).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_signalLevel&quot;&gt;signalLevel, warnLevel, dieLevel&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Level of verbosity. By default the debugger is in a sane verbose mode, thus
it will print backtraces on all the warnings and die-messages which are
going to be printed out, and will print a message when interesting uncaught
signals arrive.

&lt;P&gt;
To disable this behaviour, set these values to 0. If &lt;CODE&gt;dieLevel&lt;/CODE&gt; is 2, then the messages which will be caught by surrounding [perlfunc:eval|eval] are also printed.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_AutoTrace&quot;&gt;AutoTrace&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Trace mode (similar to &lt;CODE&gt;t&lt;/CODE&gt; command, but can be put into
&lt;CODE&gt;PERLDB_OPTS&lt;/CODE&gt;).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_LineInfo&quot;&gt;LineInfo&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
File or pipe to print line number info to. If it is a pipe (say,
&lt;CODE&gt;|visual_perl_db&lt;/CODE&gt;), then a short, ``emacs like'' message is used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_inhibit_exit&quot;&gt;inhibit_exit&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
If 0, allows &lt;EM&gt;stepping off&lt;/EM&gt; the end of the script.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PrintRet&quot;&gt;PrintRet&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
affects printing of return value after &lt;CODE&gt;r&lt;/CODE&gt; command.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ornaments&quot;&gt;ornaments&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
affects screen appearance of the command line (see &lt;EM&gt;ReadLine&lt;/EM&gt;).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_frame&quot;&gt;frame&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
affects printing messages on entry and exit from subroutines. If
&lt;CODE&gt;frame &amp;amp; 2&lt;/CODE&gt; is false, messages are printed on entry only. (Printing on exit may be useful if 
&lt;CODE&gt;inter(di)spersed&lt;/CODE&gt; with other messages.)

&lt;P&gt;
If &lt;CODE&gt;frame &amp;amp; 4&lt;/CODE&gt;, arguments to functions are printed as well as the context and caller
info. If &lt;CODE&gt;frame &amp;amp; 8&lt;/CODE&gt;, overloaded &lt;CODE&gt;stringify&lt;/CODE&gt; and
[perlfunc:tie|tie]d &lt;CODE&gt;FETCH&lt;/CODE&gt; are enabled on the printed arguments. If &lt;CODE&gt;frame &amp;amp;
16&lt;/CODE&gt;, the return value from the subroutine is printed as well.

&lt;P&gt;
The length at which the argument list is truncated is governed by the next
option:

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_maxTraceLen&quot;&gt;maxTraceLen&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
length at which the argument list is truncated when &lt;CODE&gt;frame&lt;/CODE&gt; option's bit 4 is set.

&lt;/DL&gt;
&lt;P&gt;
The following options affect what happens with &lt;CODE&gt;V&lt;/CODE&gt;, &lt;CODE&gt;X&lt;/CODE&gt;, and &lt;CODE&gt;x&lt;/CODE&gt;
commands:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_arrayDepth&quot;&gt;arrayDepth, hashDepth&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Print only first 
&lt;FONT SIZE=-1&gt;N&lt;/FONT&gt; elements ('' for all).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_compactDump&quot;&gt;compactDump, veryCompact&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Change style of array and hash dump. If &lt;CODE&gt;compactDump&lt;/CODE&gt;, short array may be printed on one line.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_globPrint&quot;&gt;globPrint&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Whether to print contents of globs.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_DumpDBFiles&quot;&gt;DumpDBFiles&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Dump arrays holding debugged files.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_DumpPackages&quot;&gt;DumpPackages&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Dump symbol tables of packages.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_DumpReused&quot;&gt;DumpReused&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Dump contents of ``reused'' addresses.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_quote&quot;&gt;quote, HighBit, undefPrint&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Change style of string dump. Default value of &lt;CODE&gt;quote&lt;/CODE&gt; is &lt;CODE&gt;auto&lt;/CODE&gt;, one can enable either double-quotish dump, or single-quotish by setting
it to &lt;CODE&gt;&amp;quot;&lt;/CODE&gt; or &lt;CODE&gt;'&lt;/CODE&gt;. By default, characters with high bit set are printed
&lt;EM&gt;as is&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_UsageOnly&quot;&gt;UsageOnly&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
&lt;EM&gt;very&lt;/EM&gt; rudimentally per-package memory usage dump. Calculates total size of
strings in variables in the package.

&lt;/DL&gt;
&lt;P&gt;
During startup options are initialized from &lt;CODE&gt;$ENV{PERLDB_OPTS}&lt;/CODE&gt;. You can put additional initialization options &lt;CODE&gt;TTY&lt;/CODE&gt;, &lt;CODE&gt;noTTY&lt;/CODE&gt;,
&lt;CODE&gt;ReadLine&lt;/CODE&gt;, and &lt;CODE&gt;NonStop&lt;/CODE&gt; there.

&lt;P&gt;
Example rc file:

&lt;P&gt;
&lt;PRE&gt;  &amp;amp;parse_options(&amp;quot;NonStop=1 LineInfo=db.out AutoTrace&amp;quot;);
&lt;/PRE&gt;
&lt;P&gt;
The script will run without human intervention, putting trace information
into the file &lt;EM&gt;db.out&lt;/EM&gt;. (If you interrupt it, you would better reset
&lt;CODE&gt;LineInfo&lt;/CODE&gt; to something ``interactive''!)

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_TTY&quot;&gt;TTY&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The 
&lt;FONT SIZE=-1&gt;TTY&lt;/FONT&gt; to use for debugging 
&lt;FONT SIZE=-1&gt;I/O.&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_noTTY&quot;&gt;noTTY&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
If set, goes in &lt;CODE&gt;NonStop&lt;/CODE&gt; mode, and would not connect to a 
&lt;FONT SIZE=-1&gt;TTY.&lt;/FONT&gt; If interrupt (or if control goes to debugger via explicit setting of $DB::signal or $DB::single from the Perl script), connects to a 
&lt;FONT SIZE=-1&gt;TTY&lt;/FONT&gt; specified by the
 &lt;CODE&gt;TTY&lt;/CODE&gt; option at startup, or to a 
&lt;FONT SIZE=-1&gt;TTY&lt;/FONT&gt; found at runtime using &lt;CODE&gt;Term::Rendezvous&lt;/CODE&gt; module of your choice.

&lt;P&gt;
This module should implement a method &lt;CODE&gt;new&lt;/CODE&gt; which returns an object with two methods: &lt;CODE&gt;IN&lt;/CODE&gt; and &lt;CODE&gt;OUT&lt;/CODE&gt;, returning two filehandles to use for debugging input and output
correspondingly. Method &lt;CODE&gt;new&lt;/CODE&gt; may inspect an argument which is a value of &lt;CODE&gt;$ENV{PERLDB_NOTTY}&lt;/CODE&gt; at startup, or is &lt;CODE&gt;&amp;quot;/tmp/perldbtty$$&amp;quot;&lt;/CODE&gt; otherwise.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ReadLine&quot;&gt;ReadLine&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
If false, readline support in debugger is disabled, so you can debug
ReadLine applications.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_NonStop&quot;&gt;NonStop&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
If set, debugger goes into noninteractive mode until interrupted, or
programmatically by setting $DB::signal or $DB::single.

&lt;/DL&gt;
&lt;P&gt;
Here's an example of using the &lt;CODE&gt;$ENV{PERLDB_OPTS}&lt;/CODE&gt; variable:

&lt;P&gt;
&lt;PRE&gt;  $ PERLDB_OPTS=&amp;quot;N f=2&amp;quot; perl -d myprogram
&lt;/PRE&gt;
&lt;P&gt;
will run the script &lt;CODE&gt;myprogram&lt;/CODE&gt; without human intervention, printing out the call tree with entry and exit
points. Note that &lt;CODE&gt;N f=2&lt;/CODE&gt; is equivalent to &lt;CODE&gt;NonStop=1 frame=2&lt;/CODE&gt;. Note also that at the moment when this documentation was written all the
options to the debugger could be uniquely abbreviated by the first letter
(with exception of
&lt;CODE&gt;Dump*&lt;/CODE&gt; options).

&lt;P&gt;
Other examples may include

&lt;P&gt;
&lt;PRE&gt;  $ PERLDB_OPTS=&amp;quot;N f A L=listing&amp;quot; perl -d myprogram
&lt;/PRE&gt;
&lt;P&gt;
- runs script noninteractively, printing info on each entry into a
subroutine and each executed line into the file &lt;EM&gt;listing&lt;/EM&gt;. (If you interrupt it, you would better reset &lt;CODE&gt;LineInfo&lt;/CODE&gt; to something ``interactive''!)

&lt;P&gt;
&lt;PRE&gt;  $ env &amp;quot;PERLDB_OPTS=R=0 TTY=/dev/ttyc&amp;quot; perl -d myprogram
&lt;/PRE&gt;
&lt;P&gt;
may be useful for debugging a program which uses &lt;CODE&gt;Term::ReadLine&lt;/CODE&gt;
itself. Do not forget detach shell from the 
&lt;FONT SIZE=-1&gt;TTY&lt;/FONT&gt; in the window which corresponds to &lt;EM&gt;/dev/ttyc&lt;/EM&gt;, say, by issuing a command like

&lt;P&gt;
&lt;PRE&gt;  $ sleep 1000000
&lt;/PRE&gt;
&lt;P&gt;
See &lt;A HREF=&quot;#Debugger_Internals&quot;&gt;Debugger Internals&lt;/A&gt; below for more details.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lt&quot;&gt;lt &amp;#091; command &amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set an action (Perl command) to happen before every debugger prompt. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; multi-line command may be entered by backslashing
the newlines. If
&lt;CODE&gt;command&lt;/CODE&gt; is missing, resets the list of actions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ltlt&quot;&gt;ltlt command&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Add an action (Perl command) to happen before every debugger prompt. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; multi-line command may be entered by backslashing
the newlines.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_gt&quot;&gt;gt command&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set an action (Perl command) to happen after the prompt when you've just given a command to return to executing the script. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; multi-line command may be entered by backslashing the newlines. If
 &lt;CODE&gt;command&lt;/CODE&gt; is missing, resets the list of actions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_gtgt&quot;&gt;gtgt command&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Adds an action (Perl command) to happen after the prompt when you've just given a command to return to executing the script. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; multi-line command may be entered by backslashing the newlines.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;{ &amp;#091; command &amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set an action (debugger command) to happen before every debugger prompt. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; multi-line command may be entered by backslashing
the newlines. If
&lt;CODE&gt;command&lt;/CODE&gt; is missing, resets the list of actions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;{{ command&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Add an action (debugger command) to happen before every debugger prompt. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; multi-line command may be entered by backslashing
the newlines.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;! number&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Redo a previous command (default previous command).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;! -number&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Redo number'th-to-last command.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;! pattern&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Redo last command that started with pattern. See &lt;CODE&gt;O recallCommand&lt;/CODE&gt;, too.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;!! cmd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Run cmd in a subprocess (reads from 
&lt;FONT SIZE=-1&gt;DB::IN,&lt;/FONT&gt; writes to 
&lt;FONT SIZE=-1&gt;DB::OUT)&lt;/FONT&gt; See
 &lt;CODE&gt;O shellBang&lt;/CODE&gt; too.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_H&quot;&gt;H -number&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Display last n commands. Only commands longer than one character are
listed. If number is omitted, lists them all.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_q&quot;&gt;q or ^D&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Quit. (``quit'' doesn't work for this.) This is the only supported way to
exit the debugger, though typing [perlfunc:exit|exit] twice may do it too.

&lt;P&gt;
Set an &lt;CODE&gt;O&lt;/CODE&gt;ption &lt;CODE&gt;inhibit_exit&lt;/CODE&gt; to 0 if you want to be able to &lt;EM&gt;step
off&lt;/EM&gt; the end the script. You may also need to set &lt;CODE&gt;$finished&lt;/CODE&gt; to 0 at some moment if you want to step through global destruction.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_R&quot;&gt;R&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Restart the debugger by &lt;STRONG&gt;exec&lt;/STRONG&gt;ing a new session. It tries to maintain your history across this, but
internal settings and command line options may be lost.

&lt;P&gt;
Currently the following setting are preserved: history, breakpoints,
actions, debugger &lt;CODE&gt;O&lt;/CODE&gt;ptions, and the following command line options: &lt;STRONG&gt;-w&lt;/STRONG&gt;, &lt;STRONG&gt;-I&lt;/STRONG&gt;, and &lt;STRONG&gt;-e&lt;/STRONG&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__dbcmd&quot;&gt;|dbcmd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Run debugger command, piping 
&lt;FONT SIZE=-1&gt;DB::OUT&lt;/FONT&gt; to current pager.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__dbcmd&quot;&gt;||dbcmd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Same as &lt;CODE&gt;|dbcmd&lt;/CODE&gt; but 
&lt;FONT SIZE=-1&gt;DB::OUT&lt;/FONT&gt; is temporarily &lt;STRONG&gt;select&lt;/STRONG&gt;ed as well. Often used with commands that would otherwise produce long
output, such as

&lt;P&gt;
&lt;PRE&gt;    |V main
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;= &amp;#091;alias value&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Define a command alias, like

&lt;P&gt;
&lt;PRE&gt;    = quit q
&lt;/PRE&gt;
&lt;P&gt;
or list current aliases.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_command&quot;&gt;command&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Execute command as a Perl statement. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; missing semicolon will be supplied.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_m&quot;&gt;m expr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The expression is evaluated, and the methods which may be applied to the
result are listed.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;m package&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The methods which may be applied to objects in the [perlfunc:package|package] are listed.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Debugger_input_output&quot;&gt;Debugger input/output&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Prompt&quot;&gt;Prompt&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The debugger prompt is something like

&lt;P&gt;
&lt;PRE&gt;    DB&amp;lt;8&amp;gt;
&lt;/PRE&gt;
&lt;P&gt;
or even

&lt;P&gt;
&lt;PRE&gt;    DB&amp;lt;&amp;lt;17&amp;gt;&amp;gt;
&lt;/PRE&gt;
&lt;P&gt;
where that number is the command number, which you'd use to access with the
builtin &lt;STRONG&gt;csh&lt;/STRONG&gt;-like history mechanism, e.g., &lt;CODE&gt;!17&lt;/CODE&gt; would repeat command number 17. The number of angle brackets indicates the
depth of the debugger. You could get more than one set of brackets, for
example, if you'd already at a breakpoint and then printed out the result
of a function call that itself also has a breakpoint, or you step into an
expression via &lt;CODE&gt;s/n/t expression&lt;/CODE&gt; command.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Multiline&quot;&gt;Multiline commands&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
If you want to enter a multi-line command, such as a subroutine definition
with several statements, or a format, you may escape the newline that would
normally end the debugger command with a backslash. Here's an example:

&lt;P&gt;
&lt;PRE&gt;      DB&amp;lt;1&amp;gt; for (1..4) {         \
      cont:     print &amp;quot;ok\n&amp;quot;;   \
      cont: }
      ok
      ok
      ok
      ok
&lt;/PRE&gt;
&lt;P&gt;
Note that this business of escaping a newline is specific to interactive
commands typed into the debugger.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Stack&quot;&gt;Stack backtrace&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Here's an example of what a stack backtrace via &lt;CODE&gt;T&lt;/CODE&gt; command might look like:

&lt;P&gt;
&lt;PRE&gt;    $ = main::infested called from file `Ambulation.pm' line 10
    @ = Ambulation::legs(1, 2, 3, 4) called from file `camel_flea' line 7
    $ = main::pests('bactrian', 4) called from file `camel_flea' line 4
&lt;/PRE&gt;
&lt;P&gt;
The left-hand character up there tells whether the function was called in a
scalar or list context (we bet you can tell which is which). What that says
is that you were in the function &lt;CODE&gt;main::infested&lt;/CODE&gt; when you ran the stack dump, and that it was called in a scalar context
from line 10 of the file &lt;EM&gt;Ambulation.pm&lt;/EM&gt;, but without any arguments at all, meaning it was called as &lt;CODE&gt;&amp;amp;infested&lt;/CODE&gt;. The next stack frame shows that the function &lt;CODE&gt;Ambulation::legs&lt;/CODE&gt; was called in a list context from the
&lt;EM&gt;camel_flea&lt;/EM&gt; file with four arguments. The last stack frame shows that
&lt;CODE&gt;main::pests&lt;/CODE&gt; was called in a scalar context, also from &lt;EM&gt;camel_flea&lt;/EM&gt;, but from line 4.

&lt;P&gt;
Note that if you execute &lt;CODE&gt;T&lt;/CODE&gt; command from inside an active [perlfunc:use|use]
statement, the backtrace will contain both [perlfunc:require|require]
frame and an [perlfunc:eval|eval]) frame.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Listing&quot;&gt;Listing&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Listing given via different flavors of &lt;CODE&gt;l&lt;/CODE&gt; command looks like this:

&lt;P&gt;
&lt;PRE&gt;    DB&amp;lt;&amp;lt;13&amp;gt;&amp;gt; l
  101:                @i{@i} = ();
  102:b               @isa{@i,$pack} = ()
  103                     if(exists $i{$prevpack} || exists $isa{$pack});
  104             }
  105
  106             next
  107==&amp;gt;              if(exists $isa{$pack});
  108
  109:a           if ($extra-- &amp;gt; 0) {
  110:                %isa = ($pack,1);
&lt;/PRE&gt;
&lt;P&gt;
Note that the breakable lines are marked with &lt;CODE&gt;:&lt;/CODE&gt;, lines with breakpoints are marked by &lt;CODE&gt;b&lt;/CODE&gt;, with actions by &lt;CODE&gt;a&lt;/CODE&gt;, and the next executed line is marked by &lt;CODE&gt;==&amp;gt;&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Frame&quot;&gt;Frame listing&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
When &lt;CODE&gt;frame&lt;/CODE&gt; option is set, debugger would print entered (and optionally exited)
subroutines in different styles.

&lt;P&gt;
What follows is the start of the listing of

&lt;P&gt;
&lt;PRE&gt;  env &amp;quot;PERLDB_OPTS=f=n N&amp;quot; perl -d -V
&lt;/PRE&gt;
&lt;P&gt;
for different values of &lt;CODE&gt;n&lt;/CODE&gt;:

&lt;OL&gt;
&lt;LI&gt;
&lt;P&gt;
&lt;PRE&gt;  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   entering Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
  entering Config::myconfig
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH
&lt;/PRE&gt;
&lt;LI&gt;
&lt;P&gt;
&lt;PRE&gt;  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   exited Config::BEGIN
   Package lib/Config.pm.
   entering Config::TIEHASH
   exited Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
    exited Exporter::export
   exited Exporter::import
  exited main::BEGIN
  entering Config::myconfig
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH
&lt;/PRE&gt;
&lt;LI&gt;
&lt;P&gt;
&lt;PRE&gt;  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
  in  @=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'SUBVERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574
&lt;/PRE&gt;
&lt;LI&gt;
&lt;P&gt;
&lt;PRE&gt;  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
  out $=main::BEGIN() from /dev/nul:0
  in  @=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'PATCHLEVEL') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'SUBVERSION') from lib/Config.pm:574
&lt;/PRE&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_4&quot;&gt;4&lt;/A&gt;&lt;/STRONG&gt;
&lt;P&gt;
&lt;PRE&gt;  in  $=main::BEGIN() from /dev/nul:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/nul:0
  out $=main::BEGIN() from /dev/nul:0
  in  @=Config::myconfig() from /dev/nul:0
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
&lt;/PRE&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_0&quot;&gt;0&lt;/A&gt;&lt;/STRONG&gt;
&lt;P&gt;
&lt;PRE&gt;  in  $=CODE(0x15eca4)() from /dev/null:0
   in  $=CODE(0x182528)() from lib/Config.pm:2
    Package lib/Exporter.pm.
   out $=CODE(0x182528)() from lib/Config.pm:0
   scalar context return from CODE(0x182528): undef
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:628
   out $=Config::TIEHASH('Config') from lib/Config.pm:628
   scalar context return from Config::TIEHASH:   empty hash
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    scalar context return from Exporter::export: ''
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   scalar context return from Exporter::import: ''
&lt;/PRE&gt;
&lt;/OL&gt;
&lt;P&gt;
In all the cases indentation of lines shows the call tree, if bit 2 of
&lt;CODE&gt;frame&lt;/CODE&gt; is set, then a line is printed on exit from a subroutine as well, if bit 4
is set, then the arguments are printed as well as the caller info, if bit 8
is set, the arguments are printed even if they are tied or references, if
bit 16 is set, the return value is printed as well.

&lt;P&gt;
When a package is compiled, a line like this

&lt;P&gt;
&lt;PRE&gt;    Package lib/Carp.pm.
&lt;/PRE&gt;
&lt;P&gt;
is printed with proper indentation.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Debugging_compile_time_statement&quot;&gt;Debugging compile-time statements&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
If you have any compile-time executable statements (code within a 
&lt;FONT SIZE=-1&gt;BEGIN&lt;/FONT&gt; block or a [perlfunc:use|use] statement), these will &lt;CODE&gt;NOT&lt;/CODE&gt; be stopped by debugger, although [perlfunc:require|require]s will (and compile-time statements can be traced with &lt;CODE&gt;AutoTrace&lt;/CODE&gt; option set in &lt;CODE&gt;PERLDB_OPTS&lt;/CODE&gt;). From your own Perl code, however, you can transfer control back to the
debugger using the following statement, which is harmless if the debugger
is not running:

&lt;P&gt;
&lt;PRE&gt;    $DB::single = 1;
&lt;/PRE&gt;
&lt;P&gt;
If you set &lt;CODE&gt;$DB::single&lt;/CODE&gt; to the value 2, it's equivalent to having just typed the &lt;CODE&gt;n&lt;/CODE&gt; command, whereas a value of 1 means the [perlman:perlop]
command. The &lt;CODE&gt;$DB::trace&lt;/CODE&gt;  variable should be set to 1 to simulate having typed the &lt;CODE&gt;t&lt;/CODE&gt; command.

&lt;P&gt;
Another way to debug compile-time code is to start debugger, set a
breakpoint on &lt;EM&gt;load&lt;/EM&gt; of some module thusly

&lt;P&gt;
&lt;PRE&gt;    DB&amp;lt;7&amp;gt; b load f:/perllib/lib/Carp.pm
  Will stop on load of `f:/perllib/lib/Carp.pm'.
&lt;/PRE&gt;
&lt;P&gt;
and restart debugger by &lt;CODE&gt;R&lt;/CODE&gt; command (if possible). One can use &lt;CODE&gt;b
compile subname&lt;/CODE&gt; for the same purpose.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Debugger_Customization&quot;&gt;Debugger Customization&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Most probably you do not want to modify the debugger, it contains enough
hooks to satisfy most needs. You may change the behaviour of debugger from
the debugger itself, using &lt;CODE&gt;O&lt;/CODE&gt;ptions, from the command line via
&lt;CODE&gt;PERLDB_OPTS&lt;/CODE&gt; environment variable, and from &lt;EM&gt;customization files&lt;/EM&gt;.

&lt;P&gt;
You can do some customization by setting up a &lt;EM&gt;.perldb&lt;/EM&gt; file which contains initialization code. For instance, you could make
aliases like these (the last one is one people expect to be there):

&lt;P&gt;
&lt;PRE&gt;    $DB::alias{'len'}  = 's/^len(.*)/p length($1)/';
    $DB::alias{'stop'} = 's/^stop (at|in)/b/';
    $DB::alias{'ps'}   = 's/^ps\b/p scalar /';
    $DB::alias{'quit'} = 's/^quit(\s*)/exit\$/';
&lt;/PRE&gt;
&lt;P&gt;
One changes options from &lt;EM&gt;.perldb&lt;/EM&gt; file via calls like this one;

&lt;P&gt;
&lt;PRE&gt;    parse_options(&amp;quot;NonStop=1 LineInfo=db.out AutoTrace=1 frame=2&amp;quot;);
&lt;/PRE&gt;
&lt;P&gt;
(the code is executed in the package &lt;CODE&gt;DB&lt;/CODE&gt;). Note that &lt;EM&gt;.perldb&lt;/EM&gt; is processed before processing &lt;CODE&gt;PERLDB_OPTS&lt;/CODE&gt;. If &lt;EM&gt;.perldb&lt;/EM&gt; defines the subroutine &lt;CODE&gt;afterinit&lt;/CODE&gt;, it is called after all the debugger initialization ends.  &lt;EM&gt;.perldb&lt;/EM&gt; may be contained in the current directory, or in the [perlman:perlrun]/[perlman:perlrun] directory.

&lt;P&gt;
If you want to modify the debugger, copy &lt;EM&gt;perl5db.pl&lt;/EM&gt; from the Perl library to another name and modify it as necessary. You'll
also want to set your [perlman:perlrun] environment variable to say something like this:

&lt;P&gt;
&lt;PRE&gt;    BEGIN { require &amp;quot;myperl5db.pl&amp;quot; }
&lt;/PRE&gt;
&lt;P&gt;
As the last resort, one can use [perlman:perlrun] to customize debugger by directly setting internal variables or calling
debugger functions.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Readline_Support&quot;&gt;Readline Support&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
As shipped, the only command line history supplied is a simplistic one that checks for leading exclamation points. However, if you install the Term::ReadKey and Term::ReadLine modules from 
&lt;FONT SIZE=-1&gt;CPAN,&lt;/FONT&gt; you will have full editing capabilities much like 
&lt;FONT SIZE=-1&gt;GNU&lt;/FONT&gt;
 &lt;EM&gt;readline&lt;/EM&gt;(3) provides. Look for these in the &lt;EM&gt;modules/by-module/Term&lt;/EM&gt; directory on 
&lt;FONT SIZE=-1&gt;CPAN.&lt;/FONT&gt;

&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; rudimentary command line completion is also
available. Unfortunately, the names of lexical variables are not available
for completion.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Editor_Support_for_Debugging&quot;&gt;Editor Support for Debugging&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
If you have 
&lt;FONT SIZE=-1&gt;GNU&lt;/FONT&gt; &lt;STRONG&gt;emacs&lt;/STRONG&gt; installed on your system, it can interact with the Perl debugger to provide an integrated software development environment reminiscent of its interactions with 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; debuggers.

&lt;P&gt;
Perl is also delivered with a start file for making &lt;STRONG&gt;emacs&lt;/STRONG&gt; act like a syntax-directed editor that understands (some of) Perl's syntax.
Look in the &lt;EM&gt;emacs&lt;/EM&gt; directory of the Perl source distribution.

&lt;P&gt;
(Historically, a similar setup for interacting with &lt;STRONG&gt;vi&lt;/STRONG&gt; and the 
&lt;FONT SIZE=-1&gt;X11&lt;/FONT&gt; window system had also been available, but at the
time of this writing, no debugger support for &lt;STRONG&gt;vi&lt;/STRONG&gt; currently exists.)

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;The_Perl_Profiler&quot;&gt;The Perl Profiler&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
If you wish to supply an alternative debugger for Perl to run, just invoke
your script with a colon and a package argument given to the &lt;STRONG&gt;-d&lt;/STRONG&gt;
flag. One of the most popular alternative debuggers for Perl is
&lt;STRONG&gt;DProf&lt;/STRONG&gt;, the Perl profiler. As of this writing, &lt;STRONG&gt;DProf&lt;/STRONG&gt; is not included with the standard Perl distribution, but it is expected to
be included soon, for certain values of ``soon''.

&lt;P&gt;
Meanwhile, you can fetch the Devel::Dprof module from 
&lt;FONT SIZE=-1&gt;CPAN.&lt;/FONT&gt; Assuming it's properly installed on your system,
to profile your Perl program in the file &lt;EM&gt;mycode.pl&lt;/EM&gt;, just type:

&lt;P&gt;
&lt;PRE&gt;    perl -d:DProf mycode.pl
&lt;/PRE&gt;
&lt;P&gt;
When the script terminates the profiler will dump the profile information
to a file called &lt;EM&gt;tmon.out&lt;/EM&gt;. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; tool like &lt;STRONG&gt;dprofpp&lt;/STRONG&gt; (also supplied with the Devel::DProf package) can be used to interpret the
information which is in that profile.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Debugger_support_in_perl&quot;&gt;Debugger support in perl&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
When you call the &lt;STRONG&gt;caller&lt;/STRONG&gt; function (see [perlfunc:caller|caller]) from the package 
&lt;FONT SIZE=-1&gt;DB,&lt;/FONT&gt; Perl sets the array @DB::args to contain the
arguments the corresponding stack frame was called with.

&lt;P&gt;
If perl is run with &lt;STRONG&gt;-d&lt;/STRONG&gt; option, the following additional features are enabled (cf. [perlman:perlvar]):

&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;
Perl inserts the contents of &lt;CODE&gt;$ENV{PERL5DB}&lt;/CODE&gt; (or &lt;CODE&gt;BEGIN {require
'perl5db.pl'}&lt;/CODE&gt; if not present) before the first line of the application.

&lt;P&gt;&lt;LI&gt;

The array &lt;CODE&gt;@{&amp;quot;_&amp;lt;$filename&amp;quot;}&lt;/CODE&gt; is the line-by-line contents of &lt;CODE&gt;$filename&lt;/CODE&gt; for all the compiled
files. Same for [perlfunc:eval|eval]ed strings which contain subroutines, or which are currently executed. The &lt;CODE&gt;$filename&lt;/CODE&gt;
for [perlfunc:eval|eval]ed strings looks like &lt;CODE&gt;(eval 34)&lt;/CODE&gt;.

&lt;P&gt;&lt;LI&gt;

The hash &lt;CODE&gt;%{&amp;quot;_&amp;lt;$filename&amp;quot;}&lt;/CODE&gt; contains breakpoints and action (it is keyed by line number), and
individual entries are settable (as opposed to the whole hash). Only
true/false is important to Perl, though the values used by &lt;EM&gt;perl5db.pl&lt;/EM&gt; have the form
&lt;CODE&gt;&amp;quot;$break_condition\0$action&amp;quot;&lt;/CODE&gt;. Values are magical in numeric context: they are zeros if the line is not
breakable.

&lt;P&gt;
Same for evaluated strings which contain subroutines, or which are
currently executed. The &lt;CODE&gt;$filename&lt;/CODE&gt; for [perlfunc:eval|eval]ed strings looks like
&lt;CODE&gt;(eval 34)&lt;/CODE&gt;.

&lt;P&gt;&lt;LI&gt;

The scalar &lt;CODE&gt;${&amp;quot;_&amp;lt;$filename&amp;quot;}&lt;/CODE&gt; contains &lt;CODE&gt;&amp;quot;_&amp;lt;$filename&amp;quot;&lt;/CODE&gt;. Same for evaluated strings which contain subroutines, or which are
currently executed. The &lt;CODE&gt;$filename&lt;/CODE&gt; for [perlfunc:eval|eval]ed strings looks like &lt;CODE&gt;(eval
34)&lt;/CODE&gt;.

&lt;P&gt;&lt;LI&gt;

After each [perlfunc:require|require]d file is compiled, but before it is executed,
&lt;CODE&gt;DB::postponed(*{&amp;quot;_&amp;lt;$filename&amp;quot;})&lt;/CODE&gt; is called (if subroutine
&lt;CODE&gt;DB::postponed&lt;/CODE&gt; exists). Here the &lt;CODE&gt;$filename&lt;/CODE&gt; is the expanded name of the [perlfunc:require|require]d file (as found in values of 
&lt;FONT SIZE=-1&gt;%INC).&lt;/FONT&gt;

&lt;P&gt;&lt;LI&gt;

After each subroutine &lt;CODE&gt;subname&lt;/CODE&gt; is compiled existence of
&lt;CODE&gt;$DB::postponed{subname}&lt;/CODE&gt; is checked. If this key exists,
&lt;CODE&gt;DB::postponed(subname)&lt;/CODE&gt; is called (if subroutine &lt;CODE&gt;DB::postponed&lt;/CODE&gt;
exists).

&lt;P&gt;&lt;LI&gt;


&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; hash &lt;CODE&gt;%DB::sub&lt;/CODE&gt; is maintained, with keys being subroutine names, values having the form &lt;CODE&gt;filename:startline-endline&lt;/CODE&gt;.  &lt;CODE&gt;filename&lt;/CODE&gt; has the form &lt;CODE&gt;(eval 31)&lt;/CODE&gt; for subroutines defined inside [perlfunc:eval|eval]s.

&lt;P&gt;&lt;LI&gt;

When execution of the application reaches a place that can have a
breakpoint, a call to &lt;CODE&gt;DB::DB()&lt;/CODE&gt; is performed if any one of variables $DB::trace, $DB::single, or
$DB::signal is true. (Note that these variables are not [perlfunc:local|local]izable.) This feature is disabled when the control is inside &lt;CODE&gt;DB::DB()&lt;/CODE&gt; or functions called from it (unless
&lt;CODE&gt;$^D &amp;amp; (1&amp;lt;&amp;lt;30)&lt;/CODE&gt;).

&lt;P&gt;&lt;LI&gt;

When execution of the application reaches a subroutine call, a call to &lt;CODE&gt;&amp;amp;DB::sub&lt;/CODE&gt;(&lt;EM&gt;args&lt;/EM&gt;) is performed instead, with &lt;CODE&gt;$DB::sub&lt;/CODE&gt; being the name of the called subroutine. (Unless the subroutine is compiled
in the package &lt;CODE&gt;DB&lt;/CODE&gt;.)

&lt;/UL&gt;
&lt;P&gt;
Note that if &lt;CODE&gt;&amp;amp;DB::sub&lt;/CODE&gt; needs some external data to be setup for it to work, no subroutine call is
possible until this is done. For the standard debugger &lt;CODE&gt;$DB::deep&lt;/CODE&gt; (how many levels of recursion deep into the debugger you can go before a
mandatory break) gives an example of such a dependency.

&lt;P&gt;
The minimal working debugger consists of one line

&lt;P&gt;
&lt;PRE&gt;  sub DB::DB {}
&lt;/PRE&gt;
&lt;P&gt;
which is quite handy as contents of [perlman:perlrun] environment variable:

&lt;P&gt;
&lt;PRE&gt;  env &amp;quot;PERL5DB=sub DB::DB {}&amp;quot; perl -d your-script
&lt;/PRE&gt;
&lt;P&gt;
Another (a little bit more useful) minimal debugger can be created with the
only line being

&lt;P&gt;
&lt;PRE&gt;  sub DB::DB {print ++$i; scalar &amp;lt;STDIN&amp;gt;}
&lt;/PRE&gt;
&lt;P&gt;
This debugger would print the sequential number of encountered statement,
and would wait for your &lt;CODE&gt;CR&lt;/CODE&gt; to continue.

&lt;P&gt;
The following debugger is quite functional:

&lt;P&gt;
&lt;PRE&gt;  {
    package DB;
    sub DB  {}
    sub sub {print ++$i, &amp;quot; $sub\n&amp;quot;; &amp;amp;$sub}
  }
&lt;/PRE&gt;
&lt;P&gt;
It prints the sequential number of subroutine call and the name of the
called subroutine. Note that &lt;CODE&gt;&amp;amp;DB::sub&lt;/CODE&gt; should be compiled into the package &lt;CODE&gt;DB&lt;/CODE&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Debugger_Internals&quot;&gt;Debugger Internals&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
At the start, the debugger reads your rc file (&lt;EM&gt;./.perldb&lt;/EM&gt; or
&lt;EM&gt;~/.perldb&lt;/EM&gt; under Unix), which can set important options. This file may define a
subroutine &lt;CODE&gt;&amp;amp;afterinit&lt;/CODE&gt; to be executed after the debugger is initialized.

&lt;P&gt;
After the rc file is read, the debugger reads environment variable 
&lt;FONT SIZE=-1&gt;PERLDB_OPTS&lt;/FONT&gt; and parses it as a rest of &lt;CODE&gt;O ...&lt;/CODE&gt; line in debugger prompt.

&lt;P&gt;
It also maintains magical internal variables, such as &lt;CODE&gt;@DB::dbline&lt;/CODE&gt;,
&lt;CODE&gt;%DB::dbline&lt;/CODE&gt;, which are aliases for &lt;CODE&gt;@{&amp;quot;::_&amp;lt;current_file&amp;quot;}&lt;/CODE&gt;

&lt;CODE&gt;%{&amp;quot;::_&amp;lt;current_file&amp;quot;}&lt;/CODE&gt;. Here &lt;CODE&gt;current_file&lt;/CODE&gt; is the currently selected (with the debugger's &lt;CODE&gt;f&lt;/CODE&gt; command, or by flow of execution) file.

&lt;P&gt;
Some functions are provided to simplify customization. See &lt;A HREF=&quot;#Debugger_Customization&quot;&gt;Debugger Customization&lt;/A&gt; for description of &lt;CODE&gt;DB::parse_options(string)&lt;/CODE&gt;. The function &lt;CODE&gt;DB::dump_trace(skip&amp;#091;, count&amp;#093;)&lt;/CODE&gt; skips the specified number of frames, and returns a list containing info
about the caller frames (all if &lt;CODE&gt;count&lt;/CODE&gt; is missing). Each entry is a hash with keys
&lt;CODE&gt;context&lt;/CODE&gt; (&lt;CODE&gt;$&lt;/CODE&gt; or &lt;CODE&gt;@&lt;/CODE&gt;), [perlfunc:sub|sub] (subroutine name, or info about eval), &lt;CODE&gt;args&lt;/CODE&gt; ([perlfunc:undef|undef] or a reference to an array), &lt;CODE&gt;file&lt;/CODE&gt;, and
&lt;CODE&gt;line&lt;/CODE&gt;.

&lt;P&gt;
The function &lt;CODE&gt;DB::print_trace(FH, skip&amp;#091;, count&amp;#091;, short&amp;#093;&amp;#093;)&lt;/CODE&gt; prints formatted info about caller frames. The last two functions may be
convenient as arguments to &lt;CODE&gt;&amp;lt;&lt;/CODE&gt;, &lt;CODE&gt;&amp;lt;&amp;lt;&lt;/CODE&gt; commands.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Other_resources&quot;&gt;Other resources&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
You did try the &lt;STRONG&gt;-w&lt;/STRONG&gt; switch, didn't you?

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;BUGS&quot;&gt;BUGS&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
You cannot get the stack frame information or otherwise debug functions that were not compiled by Perl, such as 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; or 
&lt;FONT SIZE=-1&gt;C++&lt;/FONT&gt; extensions.

&lt;P&gt;
If you alter your &lt;CODE&gt;@_&lt;/CODE&gt; arguments in a subroutine (such as with &lt;STRONG&gt;shift&lt;/STRONG&gt;
or &lt;STRONG&gt;pop&lt;/STRONG&gt;, the stack backtrace will not show the original values.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;Debugging_Perl_memory_usage&quot;&gt;Debugging Perl memory usage&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Perl is &lt;EM&gt;very&lt;/EM&gt; frivolous with memory. There is a saying that to estimate memory usage of
Perl, assume a reasonable algorithm of allocation, and multiply your
estimages by 10. This is not absolutely true, but may give you a good grasp
of what happens.

&lt;P&gt;
Say, an integer cannot take less than 20 bytes of memory, a float cannot take less than 24 bytes, a string cannot take less than 32 bytes (all these examples assume 32-bit architectures, the result are much worse on 64-bit architectures). If a variable is accessed in two of three different ways (which require an integer, a float, or a string), the memory footprint may increase by another 20 bytes. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; sloppy 
&lt;CODE&gt;malloc()&lt;/CODE&gt; implementation will make these numbers yet more.

&lt;P&gt;
On the opposite end of the scale, a declaration like

&lt;P&gt;
&lt;PRE&gt;  sub foo;
&lt;/PRE&gt;
&lt;P&gt;
may take (on some versions of perl) up to 500 bytes of memory.

&lt;P&gt;
Off-the-cuff anecdotal estimates of a code bloat give a factor around 8.
This means that the compiled form of reasonable (commented indented etc.)
code will take approximately 8 times more than the disk space the code
takes.

&lt;P&gt;
There are two Perl-specific ways to analyze the memory usage: 
&lt;FONT SIZE=-1&gt;$ENV{PERL_DEBUG_MSTATS}&lt;/FONT&gt; and &lt;STRONG&gt;-DL&lt;/STRONG&gt; switch. First one is available only if perl is compiled with Perl's 
&lt;CODE&gt;malloc(),&lt;/CODE&gt; the second one only
if Perl compiled with &lt;CODE&gt;-DDEBUGGING&lt;/CODE&gt; (as with giving &lt;CODE&gt;-D optimise=-g&lt;/CODE&gt;
option to &lt;EM&gt;Configure&lt;/EM&gt;).

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Using_C_ENV_PERL_DEBUG_MSTATS_&quot;&gt;Using &lt;CODE&gt;$ENV{PERL_DEBUG_MSTATS}&lt;/CODE&gt;&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
If your perl is using Perl's 
&lt;CODE&gt;malloc(),&lt;/CODE&gt; and compiled with
correct switches (this is the default), then it will print memory usage
statistics after compiling your code (if &lt;CODE&gt;$ENV{PERL_DEBUG_MSTATS}&lt;/CODE&gt; &amp;gt; 1), and before termination of the script (if
&lt;CODE&gt;$ENV{PERL_DEBUG_MSTATS}&lt;/CODE&gt; &amp;gt;= 1). The report format is similar to one in the following example:

&lt;P&gt;
&lt;PRE&gt;  env PERL_DEBUG_MSTATS=2 perl -e &amp;quot;require Carp&amp;quot;
  Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
     14216 free:   130   117    28     7     9   0   2     2   1 0 0
                437    61    36     0     5
     60924 used:   125   137   161    55     7   8   6    16   2 0 1
                 74   109   304    84    20
  Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
  Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
     30888 free:   245    78    85    13     6   2   1     3   2 0 1
                315   162    39    42    11
    175816 used:   265   176  1112   111    26  22  11    27   2 1 1
                196   178  1066   798    39
  Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.
&lt;/PRE&gt;
&lt;P&gt;
It is possible to ask for such a statistic at arbitrary moment by usind Devel::Peek::mstats() (module Devel::Peek is available on 
&lt;FONT SIZE=-1&gt;CPAN).&lt;/FONT&gt;

&lt;P&gt;
Here is the explanation of different parts of the format:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_buckets&quot;&gt;buckets SMALLEST(APPROX)..GREATEST(APPROX)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Perl's 
&lt;CODE&gt;malloc()&lt;/CODE&gt; uses bucketed
allocations. Every request is rounded up to the closest bucket size
available, and a bucket of these size is taken from the pool of the buckets
of this size.

&lt;P&gt;
The above line describes limits of buckets currently in use. Each bucket
has two sizes: memory footprint, and the maximal size of user data which
may be put into this bucket. Say, in the above example the smallest bucket
is both sizes 4. The biggest bucket has usable size 8188, and the memory
footprint 8192.  

&lt;P&gt;
With debugging Perl some buckets may have negative usable size. This means
that these buckets cannot (and will not) be used. For greater buckets the
memory footprint may be one page greater than a power of 2. In such a case
the corresponding power of two is printed instead in the &lt;CODE&gt;APPROX&lt;/CODE&gt; field above.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Free&quot;&gt;Free/Used&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The following 1 or 2 rows of numbers correspond to the number of buckets of
each size between &lt;CODE&gt;SMALLEST&lt;/CODE&gt; and &lt;CODE&gt;GREATEST&lt;/CODE&gt;. In the first row the sizes (memory footprints) of buckets are powers of
two (or possibly one page greater). In the second row (if present) the
memory footprints of the buckets are between memory footprints of two
buckets ``above''.  

&lt;P&gt;
Say, with the above example the memory footprints are (with current
algorith)

&lt;P&gt;
&lt;PRE&gt;     free:    8     16    32    64    128  256 512 1024 2048 4096 8192
           4     12    24    48    80
&lt;/PRE&gt;
&lt;P&gt;
With non-&lt;CODE&gt;DEBUGGING&lt;/CODE&gt; perl the buckets starting from &lt;CODE&gt;128&lt;/CODE&gt;-long ones have 4-byte overhead, thus 8192-long bucket may take up to
8188-byte-long allocations.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Total&quot;&gt;Total sbrk(): SBRKed/SBRKs:CONTINUOUS&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The first two fields give the total amount of memory perl 
&lt;CODE&gt;sbrk()ed,&lt;/CODE&gt; and number of 
&lt;CODE&gt;sbrk()s&lt;/CODE&gt; used. The third number is what perl thinks about continuity of returned chunks. As far as this number is positive, 
&lt;CODE&gt;malloc()&lt;/CODE&gt; will assume that it is probable that 
&lt;CODE&gt;sbrk()&lt;/CODE&gt; will provide continuous memory.

&lt;P&gt;
The amounts 
&lt;CODE&gt;sbrk()ed&lt;/CODE&gt; by external
libraries is not counted.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_pad&quot;&gt;pad: 0&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The amount of 
&lt;CODE&gt;sbrk()ed&lt;/CODE&gt; memory needed to
keep buckets aligned.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_heads&quot;&gt;heads: 2192&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
While memory overhead of bigger buckets is kept inside the bucket, for
smaller buckets it is kept in separate areas. This field gives the total
size of these areas.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_chain&quot;&gt;chain: 0&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;

&lt;CODE&gt;malloc()&lt;/CODE&gt; may want to
subdivide a bigger bucket into smaller buckets. If only a part of the
deceased-bucket is left non-subdivided, the rest is kept as an element of a
linked list. This field gives the total size of these chunks.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_tail&quot;&gt;tail: 6144&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
To minimize amount of 
&lt;CODE&gt;sbrk()s&lt;/CODE&gt; 
&lt;CODE&gt;malloc()&lt;/CODE&gt; asks for more memory. This field gives the size of the yet-unused part, which is 
&lt;CODE&gt;sbrk()ed,&lt;/CODE&gt; but never touched.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Example_of_using_B_DL_switch&quot;&gt;Example of using &lt;STRONG&gt;-DL&lt;/STRONG&gt; switch&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Below we show how to analyse memory usage by 

&lt;P&gt;
&lt;PRE&gt;  do 'lib/auto/POSIX/autosplit.ix';
&lt;/PRE&gt;
&lt;P&gt;
The file in question contains a header and 146 lines similar to

&lt;P&gt;
&lt;PRE&gt;  sub getcwd ;
&lt;/PRE&gt;
&lt;P&gt;
&lt;STRONG&gt;Note:&lt;/STRONG&gt;  &lt;EM&gt;the discussion below supposes 32-bit architecture.  In the
newer versions of perl the memory usage of the constructs discussed
here is much improved, but the story discussed below is a real-life
story.  This story is very terse, and assumes more than cursory
knowledge of Perl internals.&lt;/EM&gt;

&lt;P&gt;
Here is the itemized list of Perl allocations performed during parsing of
this file:

&lt;P&gt;
&lt;PRE&gt; !!! &amp;quot;after&amp;quot; at test.pl line 3.
    Id  subtot   4   8  12  16  20  24  28  32  36  40  48  56  64  72  80 80+
  0 02   13752   .   .   .   . 294   .   .   .   .   .   .   .   .   .   .   4
  0 54    5545   .   .   8 124  16   .   .   .   1   1   .   .   .   .   .   3
  5 05      32   .   .   .   .   .   .   .   1   .   .   .   .   .   .   .   .
  6 02    7152   .   .   .   .   .   .   .   .   .   . 149   .   .   .   .   .
  7 02    3600   .   .   .   .   . 150   .   .   .   .   .   .   .   .   .   .
  7 03      64   .  -1   .   1   .   .   2   .   .   .   .   .   .   .   .   .
  7 04    7056   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   7
  7 17   38404   .   .   .   .   .   .   .   1   .   . 442 149   .   . 147   .
  9 03    2078  17 249  32   .   .   .   .   2   .   .   .   .   .   .   .   .
&lt;/PRE&gt;
&lt;P&gt;
To see this list insert two [perlman:perlguts] statements around the call:

&lt;P&gt;
&lt;PRE&gt;  warn('!');
  do 'lib/auto/POSIX/autosplit.ix';
  warn('!!! &amp;quot;after&amp;quot;');
&lt;/PRE&gt;
&lt;P&gt;
and run it with &lt;STRONG&gt;-DL&lt;/STRONG&gt; option. The first 
&lt;CODE&gt;warn()&lt;/CODE&gt; will print memory allocation info before the parsing of the file, and will memorize the statistics at this point (we ignore what it prints). The second 
&lt;CODE&gt;warn()&lt;/CODE&gt; will print increments w.r.t. this memorized statistics. This is the above printout.

&lt;P&gt;
Different &lt;EM&gt;Id&lt;/EM&gt;s on the left correspond to different subsystems of perl interpreter, they are just first argument given to perl memory allocation 
&lt;FONT SIZE=-1&gt;API&lt;/FONT&gt; 
&lt;CODE&gt;New().&lt;/CODE&gt; To find what
 &lt;CODE&gt;9 03&lt;/CODE&gt; means [perlfunc:grep|grep] the perl source for &lt;CODE&gt;903&lt;/CODE&gt;. You will see that it is &lt;EM&gt;util.c&lt;/EM&gt;, function 
&lt;CODE&gt;savepvn().&lt;/CODE&gt; This function is used to store a copy of existing chunk of memory. Using 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; debugger, one can see that it is called either directly from 
&lt;CODE&gt;gv_init(),&lt;/CODE&gt; or via 
&lt;CODE&gt;sv_magic(),&lt;/CODE&gt; and 
&lt;CODE&gt;gv_init()&lt;/CODE&gt; is called from 
&lt;CODE&gt;gv_fetchpv()&lt;/CODE&gt; - which is called from 
&lt;CODE&gt;newSUB().&lt;/CODE&gt;

&lt;P&gt;
&lt;STRONG&gt;Note:&lt;/STRONG&gt; to reach this place in debugger and skip all the calls to savepvn during the compilation of the main script, set a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; breakpoint in 
&lt;CODE&gt;Perl_warn(),&lt;/CODE&gt;
 [perlfunc:continue|continue] this point is reached, &lt;EM&gt;then&lt;/EM&gt; set breakpoint in 
&lt;CODE&gt;Perl_savepvn().&lt;/CODE&gt; Note that you may need to skip a handful of 
&lt;CODE&gt;Perl_savepvn()&lt;/CODE&gt; which do not correspond to mass production of CVs (there are more
 &lt;CODE&gt;903&lt;/CODE&gt; allocations than 146 similar lines of
&lt;EM&gt;lib/auto/POSIX/autosplit.ix&lt;/EM&gt;). Note also that &lt;CODE&gt;Perl_&lt;/CODE&gt; prefixes are added by macroization code in perl header files to avoid
conflicts with external libraries.

&lt;P&gt;
Anyway, we see that &lt;CODE&gt;903&lt;/CODE&gt; ids correspond to creation of globs, twice per glob - for glob name, and
glob stringification magic.

&lt;P&gt;
Here are explanations for other &lt;EM&gt;Id&lt;/EM&gt;s above: 

&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_7&quot;&gt;7&lt;/A&gt;&lt;/STRONG&gt;
&lt;P&gt;
is for creation of bigger &lt;CODE&gt;XPV*&lt;/CODE&gt; structures. In the above case it creates 3 [perlman:perlguts] per subroutine, one for a list of lexical variable names, one for a
scratchpad (which contains lexical variables and
&lt;CODE&gt;targets&lt;/CODE&gt;), and one for the array of scratchpads needed for recursion.  

&lt;P&gt;
It also creates a &lt;CODE&gt;GV&lt;/CODE&gt; and a &lt;CODE&gt;CV&lt;/CODE&gt; per subroutine (all called from 
&lt;CODE&gt;start_subparse()).&lt;/CODE&gt;

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_2&quot;&gt;2&lt;/A&gt;&lt;/STRONG&gt;

Creates 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; array corresponding to the [perlman:perlguts] of scratchpads, and the scratchpad itself (the first fake entry of this
scratchpad is created though the subroutine itself is not defined yet).

&lt;P&gt;
It also creates 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; arrays to keep data for the stash (this is one 
&lt;FONT SIZE=-1&gt;HV,&lt;/FONT&gt; but it grows, thus there are 4 big allocations: the big chunks are not freeed, but are kept as additional arenas for
 [perlman:perlguts] allocations).

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;4&lt;/STRONG&gt;

creates a &lt;CODE&gt;HEK&lt;/CODE&gt; for the name of the glob for the subroutine (this name is a key in a &lt;EM&gt;stash&lt;/EM&gt;).

&lt;P&gt;
Big allocations with this &lt;EM&gt;Id&lt;/EM&gt; correspond to allocations of new arenas to keep &lt;CODE&gt;HE&lt;/CODE&gt;.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;2&lt;/STRONG&gt;

creates a &lt;CODE&gt;GP&lt;/CODE&gt; for the glob for the subroutine.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;2&lt;/STRONG&gt;

creates the &lt;CODE&gt;MAGIC&lt;/CODE&gt; for the glob for the subroutine.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;4&lt;/STRONG&gt;

creates &lt;EM&gt;arenas&lt;/EM&gt; which keep SVs.

&lt;/OL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;B_DL_details&quot;&gt;&lt;STRONG&gt;-DL&lt;/STRONG&gt; details&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
If Perl is run with &lt;STRONG&gt;-DL&lt;/STRONG&gt; option, then 
&lt;CODE&gt;warn()s&lt;/CODE&gt; which start with `!'
behave specially. They print a list of &lt;EM&gt;categories&lt;/EM&gt; of memory allocations, and statistics of allocations of different sizes for
these categories.

&lt;P&gt;
If 
&lt;CODE&gt;warn()&lt;/CODE&gt; string starts with

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;!!!&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
print changed categories only, print the differences in counts of
allocations;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;!!&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
print grown categories only; print the absolute values of counts, and
totals;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;!&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
print nonempty categories, print the absolute values of counts and totals.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Limitations_of_B_DL_statistic&quot;&gt;Limitations of &lt;STRONG&gt;-DL&lt;/STRONG&gt; statistic&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
If an extension or an external library does not use Perl 
&lt;FONT SIZE=-1&gt;API&lt;/FONT&gt; to allocate memory, these allocations are not
counted.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;Debugging_regular_expressions&quot;&gt;Debugging regular expressions&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
There are two ways to enable debugging output for regular expressions.

&lt;P&gt;
If your perl is compiled with &lt;CODE&gt;-DDEBUGGING&lt;/CODE&gt;, you may use the
&lt;STRONG&gt;-Dr&lt;/STRONG&gt; flag on the command line.

&lt;P&gt;
Otherwise, one can &lt;CODE&gt;use re 'debug'&lt;/CODE&gt;, which has effects both at compile time, and at run time (and is &lt;EM&gt;not&lt;/EM&gt; lexically scoped).

&lt;P&gt;
&lt;BR&gt;[perlman:perldebug2|More...]&lt;BR&gt;
&lt;BR&gt;Return to the [Library]&lt;BR&gt;</doctext>
  <type_nodetype>116</type_nodetype>
  <node_id>413</node_id>
  <author_user>114</author_user>
  <title>perlman:perldebug</title>
  <createtime>1999-08-25 02:59:43</createtime>
  <nodeupdated>2005-08-15 10:44:33</nodeupdated>
</node>
