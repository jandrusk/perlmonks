<node>
  <doctext>&lt;HR&gt;
&lt;P&gt;
&lt;H1&gt;&lt;A NAME=&quot;NAME&quot;&gt;NAME&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
perlrun - how to execute the Perl interpreter

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SYNOPSIS&quot;&gt;SYNOPSIS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;STRONG&gt;perl&lt;/STRONG&gt;		&amp;#091;&amp;nbsp;&lt;STRONG&gt;-sTuU&lt;/STRONG&gt;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-hv&lt;/STRONG&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;-V&lt;/STRONG&gt;&amp;#091;:&lt;EM&gt;configvar&lt;/EM&gt;&amp;#093;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-cw&lt;/STRONG&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;-d&lt;/STRONG&gt;&amp;#091;:&lt;EM&gt;debugger&lt;/EM&gt;&amp;#093;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;-D&lt;/STRONG&gt;&amp;#091;&lt;EM&gt;number/list&lt;/EM&gt;&amp;#093;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-pna&lt;/STRONG&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;-F&lt;/STRONG&gt;&lt;EM&gt;pattern&lt;/EM&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;-l&lt;/STRONG&gt;&amp;#091;&lt;EM&gt;octal&lt;/EM&gt;&amp;#093;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;-0&lt;/STRONG&gt;&amp;#091;&lt;EM&gt;octal&lt;/EM&gt;&amp;#093;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-I&lt;/STRONG&gt;&lt;EM&gt;dir&lt;/EM&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;-m&lt;/STRONG&gt;&amp;#091;&lt;STRONG&gt;-&lt;/STRONG&gt;&amp;#093;&lt;EM&gt;module&lt;/EM&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;-M&lt;/STRONG&gt;&amp;#091;&lt;STRONG&gt;-&lt;/STRONG&gt;&amp;#093;&lt;EM&gt;'module...'&lt;/EM&gt;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-P&lt;/STRONG&gt;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-S&lt;/STRONG&gt;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-x&lt;/STRONG&gt;&amp;#091;&lt;EM&gt;dir&lt;/EM&gt;&amp;#093;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-i&lt;/STRONG&gt;&amp;#091;&lt;EM&gt;extension&lt;/EM&gt;&amp;#093;&amp;nbsp;&amp;#093;
	
	&amp;#091;&amp;nbsp;&lt;STRONG&gt;-e&lt;/STRONG&gt;&amp;nbsp;&lt;EM&gt;'command'&lt;/EM&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;STRONG&gt;--&lt;/STRONG&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;EM&gt;programfile&lt;/EM&gt;&amp;nbsp;&amp;#093;&amp;nbsp;&amp;#091;&amp;nbsp;&lt;EM&gt;argument&lt;/EM&gt;&amp;nbsp;&amp;#093;...

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;DESCRIPTION&quot;&gt;DESCRIPTION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Upon startup, Perl looks for your script in one of the following places:

&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;.&lt;/A&gt;&lt;/STRONG&gt;
&lt;P&gt;
Specified line by line via &lt;STRONG&gt;-e&lt;/STRONG&gt; switches on the command line.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;

Contained in the file specified by the first filename on the command line.
(Note that systems supporting the #! notation invoke interpreters this way.
See &lt;A HREF=&quot;#Location_of_Perl&quot;&gt;Location of Perl&lt;/A&gt;.)

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;

Passed in implicitly via standard input. This works only if there are no filename arguments--to pass arguments to a 
&lt;FONT SIZE=-1&gt;STDIN&lt;/FONT&gt; script you must explicitly specify a ``-'' for the script name.

&lt;/OL&gt;
&lt;P&gt;
With methods 2 and 3, Perl starts parsing the input file from the
beginning, unless you've specified a &lt;STRONG&gt;-x&lt;/STRONG&gt; switch, in which case it scans for the first line starting with #! and
containing the word ``perl'', and starts there instead. This is useful for
running a script embedded in a larger message. (In this case you would
indicate the end of the script using the &lt;CODE&gt;__END__&lt;/CODE&gt; token.)

&lt;P&gt;
The #! line is always examined for switches as the line is being parsed.
Thus, if you're on a machine that allows only one argument with the #!
line, or worse, doesn't even recognize the #! line, you still can get
consistent switch behavior regardless of how Perl was invoked, even if &lt;STRONG&gt;-x&lt;/STRONG&gt; was used to find the beginning of the script.

&lt;P&gt;
Because many operating systems silently chop off kernel interpretation of
the #! line after 32 characters, some switches may be passed in on the
command line, and some may not; you could even get a ``-'' without its
letter, if you're not careful. You probably want to make sure that all your
switches fall either before or after that 32 character boundary. Most
switches don't actually care if they're processed redundantly, but getting
a - instead of a complete switch could cause Perl to try to execute
standard input instead of your script. And a partial &lt;STRONG&gt;-I&lt;/STRONG&gt; switch could also cause odd results.

&lt;P&gt;
Some switches do care if they are processed twice, for instance
combinations of &lt;STRONG&gt;-l&lt;/STRONG&gt; and &lt;STRONG&gt;-0&lt;/STRONG&gt;. Either put all the switches after the 32 character boundary (if
applicable), or replace the use of &lt;STRONG&gt;-0&lt;/STRONG&gt;&lt;EM&gt;digits&lt;/EM&gt; by 
&lt;CODE&gt;BEGIN{ $/ = &amp;quot;\0digits&amp;quot;; }&lt;/CODE&gt;.

&lt;P&gt;
Parsing of the #! switches starts wherever ``perl'' is mentioned in the
line. The sequences ``-*'' and ``- '' are specifically ignored so that you
could, if you were so inclined, say

&lt;P&gt;
&lt;PRE&gt;    #!/bin/sh -- # -*- perl -*- -p
    eval 'exec /usr/bin/perl -wS $0 ${1+&amp;quot;$@&amp;quot;}'
        if $running_under_some_shell;
&lt;/PRE&gt;
&lt;P&gt;
to let Perl see the &lt;STRONG&gt;-p&lt;/STRONG&gt; switch.

&lt;P&gt;
If the #! line does not contain the word ``perl'', the program named after the #! is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do #!, because they can tell a program that their 
&lt;FONT SIZE=-1&gt;SHELL&lt;/FONT&gt; is /usr/bin/perl, and Perl will then dispatch the program to the correct interpreter for them.

&lt;P&gt;
After locating your script, Perl compiles the entire script to an internal
form. If there are any compilation errors, execution of the script is not
attempted. (This is unlike the typical shell script, which might run
part-way through before finding a syntax error.)

&lt;P&gt;
If the script is syntactically correct, it is executed. If the script runs off the end without hitting an 
&lt;CODE&gt;exit()&lt;/CODE&gt; or 
&lt;CODE&gt;die()&lt;/CODE&gt; operator, an implicit

[perlfunc:exit|exit(0)] is provided to indicate successful completion.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;_and_quoting_on_non_Unix_syste&quot;&gt;#! and quoting on non-Unix systems&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Unix's #! technique can be simulated on other systems:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_OS&quot;&gt;OS/2&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Put

&lt;P&gt;
&lt;PRE&gt;    extproc perl -S -your_switches
&lt;/PRE&gt;
&lt;P&gt;
as the first line in &lt;CODE&gt;*.cmd&lt;/CODE&gt; file (&lt;CODE&gt;-S&lt;/CODE&gt; due to a bug in cmd.exe's `extproc' handling).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_MS&quot;&gt;MS-DOS&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Create a batch file to run your script, and codify it in
&lt;CODE&gt;ALTERNATIVE_SHEBANG&lt;/CODE&gt; (see the &lt;EM&gt;dosish.h&lt;/EM&gt; file in the source distribution for more information).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Win95&quot;&gt;Win95/NT&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The Win95/NT installation, when using the Activeware port of Perl, will
modify the Registry to associate the &lt;EM&gt;.pl&lt;/EM&gt; extension with the perl interpreter. If you install another port of Perl,
including the one in the Win32 directory of the Perl distribution, then
you'll have to modify the Registry yourself. Note that this means you can
no longer tell the difference between an executable Perl program and a Perl
library file.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Macintosh&quot;&gt;Macintosh&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Macintosh perl scripts will have the appropriate Creator and Type, so that
double-clicking them will invoke the perl application.

&lt;/DL&gt;
&lt;P&gt;
Command-interpreters on non-Unix systems have rather different ideas on
quoting than Unix shells. You'll need to learn the special characters in
your command-interpreter (&lt;CODE&gt;*&lt;/CODE&gt;, &lt;CODE&gt;\&lt;/CODE&gt; and &lt;CODE&gt;&amp;quot;&lt;/CODE&gt; are common) and how to protect whitespace and these characters to run
one-liners (see &lt;CODE&gt;-e&lt;/CODE&gt; below).

&lt;P&gt;
On some systems, you may have to change single-quotes to double ones, which
you must &lt;EM&gt;NOT&lt;/EM&gt; do on Unix or Plan9 systems. You might also have to change a single % to a
%%.

&lt;P&gt;
For example:

&lt;P&gt;
&lt;PRE&gt;    # Unix
    perl -e 'print &amp;quot;Hello world\n&amp;quot;'
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # MS-DOS, etc.
    perl -e &amp;quot;print \&amp;quot;Hello world\n\&amp;quot;&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Macintosh
    print &amp;quot;Hello world\n&amp;quot;
     (then Run &amp;quot;Myscript&amp;quot; or Shift-Command-R)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # VMS
    perl -e &amp;quot;print &amp;quot;&amp;quot;Hello world\n&amp;quot;&amp;quot;&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
The problem is that none of this is reliable: it depends on the command and it is entirely possible neither works. If 
&lt;FONT SIZE=-1&gt;4DOS&lt;/FONT&gt; was the command shell, this would probably work better:

&lt;P&gt;
&lt;PRE&gt;    perl -e &amp;quot;print &amp;lt;Ctrl-x&amp;gt;&amp;quot;Hello world\n&amp;lt;Ctrl-x&amp;gt;&amp;quot;&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;CMD.EXE&lt;/FONT&gt; in Windows 
&lt;FONT SIZE=-1&gt;NT&lt;/FONT&gt; slipped a lot of standard Unix functionality in when nobody was looking, but just try to find documentation for its quoting rules.

&lt;P&gt;
Under the Macintosh, it depends which environment you are using. The MacPerl shell, or 
&lt;FONT SIZE=-1&gt;MPW,&lt;/FONT&gt; is much like Unix shells in its support for several quoting variants, except that it makes free use of the Macintosh's non-ASCII characters as control characters.

&lt;P&gt;
There is no general solution to all of this. It's just a mess.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Location_of_Perl&quot;&gt;Location of Perl&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
It may seem obvious to say, but Perl is useful only when users can easily
find it. When possible, it's good for both &lt;STRONG&gt;/usr/bin/perl&lt;/STRONG&gt; and
&lt;STRONG&gt;/usr/local/bin/perl&lt;/STRONG&gt; to be symlinks to the actual binary. If that can't be done, system administrators are strongly encouraged to put (symlinks to) perl and its accompanying utilities, such as perldoc, into a directory typically found along a user's 
&lt;FONT SIZE=-1&gt;PATH,&lt;/FONT&gt; or in another obvious and convenient place.

&lt;P&gt;
In this documentation, &lt;CODE&gt;#!/usr/bin/perl&lt;/CODE&gt; on the first line of the script will stand in for whatever method works on
your system.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Switches&quot;&gt;Switches&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; single-character switch may be combined with the
following switch, if any.

&lt;P&gt;
&lt;PRE&gt;    #!/usr/bin/perl -spi.bak    # same as -s -p -i.bak
&lt;/PRE&gt;
&lt;P&gt;
Switches include:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__0_digits_&quot;&gt;-0&amp;#091;digits&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
specifies the input record separator (&lt;CODE&gt;$/&lt;/CODE&gt;) as an octal number. If there are no digits, the null character is the
separator. Other switches may precede or follow the digits. For example, if
you have a version of
&lt;STRONG&gt;find&lt;/STRONG&gt; which can print filenames terminated by the null character, you can say
this:

&lt;P&gt;
&lt;PRE&gt;    find . -name '*.bak' -print0 | perl -n0e unlink
&lt;/PRE&gt;
&lt;P&gt;
The special value 00 will cause Perl to slurp files in paragraph mode. The
value 0777 will cause Perl to slurp files whole because there is no legal
character with that value.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__a&quot;&gt;-a&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
turns on autosplit mode when used with a &lt;STRONG&gt;-n&lt;/STRONG&gt; or &lt;STRONG&gt;-p&lt;/STRONG&gt;. An implicit split command to the &lt;CODE&gt;@F&lt;/CODE&gt; array is done as the
first thing inside the implicit while loop produced by the &lt;STRONG&gt;-n&lt;/STRONG&gt; or &lt;STRONG&gt;-p&lt;/STRONG&gt;.

&lt;P&gt;
&lt;PRE&gt;    perl -ane 'print pop(@F), &amp;quot;\n&amp;quot;;'
&lt;/PRE&gt;
&lt;P&gt;
is equivalent to

&lt;P&gt;
&lt;PRE&gt;    while (&amp;lt;&amp;gt;) {
        @F = split(' ');
        print pop(@F), &amp;quot;\n&amp;quot;;
    }
&lt;/PRE&gt;
&lt;P&gt;
An alternate delimiter may be specified using &lt;STRONG&gt;-F&lt;/STRONG&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__c&quot;&gt;-c&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
causes Perl to check the syntax of the script and then exit without
executing it. Actually, it &lt;EM&gt;will&lt;/EM&gt; execute &lt;CODE&gt;BEGIN&lt;/CODE&gt;, &lt;CODE&gt;END&lt;/CODE&gt;, and [perlfunc:use|use] blocks, because these are considered as occurring outside the execution of
your program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__d&quot;&gt;-d&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
runs the script under the Perl debugger. See [perlman:perldebug|the perldebug manpage].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__d_foo&quot;&gt;-d:foo&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
runs the script under the control of a debugging or tracing module
installed as Devel::foo. E.g., &lt;STRONG&gt;-d:DProf&lt;/STRONG&gt; executes the script using the Devel::DProf profiler. See [perlman:perldebug|the perldebug manpage].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Dletters&quot;&gt;-Dletters&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Dnumber&quot;&gt;-Dnumber&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
sets debugging flags. To watch how it executes your script, use
&lt;STRONG&gt;-Dtls&lt;/STRONG&gt;. (This works only if debugging is compiled into your Perl.) Another nice
value is &lt;STRONG&gt;-Dx&lt;/STRONG&gt;, which lists your compiled syntax tree. And &lt;STRONG&gt;-Dr&lt;/STRONG&gt; displays compiled regular expressions. As an alternative, specify a number
instead of list of letters (e.g., &lt;STRONG&gt;-D14&lt;/STRONG&gt; is equivalent to &lt;STRONG&gt;-Dtls&lt;/STRONG&gt;):

&lt;P&gt;
&lt;PRE&gt;        1  p  Tokenizing and parsing
        2  s  Stack snapshots
        4  l  Context (loop) stack processing
        8  t  Trace execution
       16  o  Method and overloading resolution
       32  c  String/numeric conversions
       64  P  Print preprocessor command for -P
      128  m  Memory allocation
      256  f  Format processing
      512  r  Regular expression parsing and execution
     1024  x  Syntax tree dump
     2048  u  Tainting checks
     4096  L  Memory leaks (needs C&amp;lt;-DLEAKTEST&amp;gt; when compiling Perl)
     8192  H  Hash dump -- usurps values()
    16384  X  Scratchpad allocation
    32768  D  Cleaning up
    65536  S  Thread synchronization
&lt;/PRE&gt;
&lt;P&gt;
All these flags require &lt;CODE&gt;-DDEBUGGING&lt;/CODE&gt; when you compile the Perl executable. This flag is automatically set if you
include &lt;CODE&gt;-g&lt;/CODE&gt;
option when &lt;CODE&gt;Configure&lt;/CODE&gt; asks you about optimizer/debugger flags.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__e&quot;&gt;-e commandline&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
may be used to enter one line of script. If &lt;STRONG&gt;-e&lt;/STRONG&gt; is given, Perl will not look for a script filename in the argument list.
Multiple &lt;STRONG&gt;-e&lt;/STRONG&gt; commands may be given to build up a multi-line script. Make sure to use
semicolons where you would in a normal program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Fpattern&quot;&gt;-Fpattern&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
specifies the pattern to split on if &lt;STRONG&gt;-a&lt;/STRONG&gt; is also in effect. The pattern may be surrounded by &lt;CODE&gt;//&lt;/CODE&gt;, &lt;CODE&gt;&amp;quot;&amp;quot;&lt;/CODE&gt;, or &lt;CODE&gt;''&lt;/CODE&gt;, otherwise it will be put in single quotes.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__h&quot;&gt;-h&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
prints a summary of the options.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__i_extension_&quot;&gt;-i&amp;#091;extension&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
specifies that files processed by the &lt;CODE&gt;&amp;lt;&amp;gt;&lt;/CODE&gt; construct are to be edited in-place. It does this by renaming the input file, opening the output file by the original name, and selecting that output file as the default for 
&lt;CODE&gt;print()&lt;/CODE&gt; statements. The extension, if supplied, is used to modify the name of the old file to make a backup copy, following these rules:

&lt;P&gt;
If no extension is supplied, no backup is made and the current file is
overwritten.

&lt;P&gt;
If the extension doesn't contain a &lt;CODE&gt;*&lt;/CODE&gt; then it is appended to the end of the current filename as a suffix.

&lt;P&gt;
If the extension does contain one or more &lt;CODE&gt;*&lt;/CODE&gt; characters, then each &lt;CODE&gt;*&lt;/CODE&gt;
is replaced with the current filename. In perl terms you could think of
this as:

&lt;P&gt;
&lt;PRE&gt;    ($backup = $extension) =~ s/\*/$file_name/g;
&lt;/PRE&gt;
&lt;P&gt;
This allows you to add a prefix to the backup file, instead of (or in
addition to) a suffix:

&lt;P&gt;
&lt;PRE&gt;    $ perl -pi'bak_*' -e 's/bar/baz/' fileA     # backup to 'bak_fileA'
&lt;/PRE&gt;
&lt;P&gt;
Or even to place backup copies of the original files into another directory
(provided the directory already exists):

&lt;P&gt;
&lt;PRE&gt;    $ perl -pi'old/*.bak' -e 's/bar/baz/' fileA # backup to 'old/fileA.bak'
&lt;/PRE&gt;
&lt;P&gt;
These sets of one-liners are equivalent:

&lt;P&gt;
&lt;PRE&gt;    $ perl -pi -e 's/bar/baz/' fileA            # overwrite current file
    $ perl -pi'*' -e 's/bar/baz/' fileA         # overwrite current file
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $ perl -pi'.bak' -e 's/bar/baz/' fileA      # backup to 'fileA.bak'
    $ perl -pi'*.bak' -e 's/bar/baz/' fileA     # backup to 'fileA.bak'
&lt;/PRE&gt;
&lt;P&gt;
From the shell, saying

&lt;P&gt;
&lt;PRE&gt;    $ perl -p -i.bak -e &amp;quot;s/foo/bar/; ... &amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
is the same as using the script:

&lt;P&gt;
&lt;PRE&gt;    #!/usr/bin/perl -pi.bak
    s/foo/bar/;
&lt;/PRE&gt;
&lt;P&gt;
which is equivalent to

&lt;P&gt;
&lt;PRE&gt;    #!/usr/bin/perl
    $extension = '.bak';
    while (&amp;lt;&amp;gt;) {
        if ($ARGV ne $oldargv) {
            if ($extension !~ /\*/) {
                $backup = $ARGV . $extension;
            }
            else {
                ($backup = $extension) =~ s/\*/$ARGV/g;
            }
            rename($ARGV, $backup);
            open(ARGVOUT, &amp;quot;&amp;gt;$ARGV&amp;quot;);
            select(ARGVOUT);
            $oldargv = $ARGV;
        }
        s/foo/bar/;
    }
    continue {
        print;  # this prints to original filename
    }
    select(STDOUT);
&lt;/PRE&gt;
&lt;P&gt;
except that the &lt;STRONG&gt;-i&lt;/STRONG&gt; form doesn't need to compare &lt;CODE&gt;$ARGV&lt;/CODE&gt; to &lt;CODE&gt;$oldargv&lt;/CODE&gt; to know when the filename has changed. It does, however, use 
&lt;FONT SIZE=-1&gt;ARGVOUT&lt;/FONT&gt; for the selected filehandle. Note that 
&lt;FONT SIZE=-1&gt;STDOUT&lt;/FONT&gt; is restored as the default output filehandle after the loop.

&lt;P&gt;
As shown above, Perl creates the backup file whether or not any output is
actually changed. So this is just a fancy way to copy files:

&lt;P&gt;
&lt;PRE&gt;    $ perl -p -i'/some/file/path/*' -e 1 file1 file2 file3...
  or
    $ perl -p -i'.bak' -e 1 file1 file2 file3...
&lt;/PRE&gt;
&lt;P&gt;
You can use [perlfunc:eof|eof] without parentheses to locate the end of each input file, in case you want
to append to each file, or reset line numbering (see example in [perlfunc:eof|eof]).

&lt;P&gt;
If, for a given file, Perl is unable to create the backup file as specified
in the extension then it will skip that file and continue on with the next
one (if it exists).

&lt;P&gt;
For a discussion of issues surrounding file permissions and &lt;CODE&gt;-i&lt;/CODE&gt;, see
[perlman:perlfaq5].

&lt;P&gt;
You cannot use &lt;STRONG&gt;-i&lt;/STRONG&gt; to create directories or to strip extensions from files.

&lt;P&gt;
Perl does not expand &lt;CODE&gt;~&lt;/CODE&gt;, so don't do that.

&lt;P&gt;
Finally, note that the &lt;STRONG&gt;-i&lt;/STRONG&gt; switch does not impede execution when no files are given on the command line. In this case, no backup is made (the original file cannot, of course, be determined) and processing proceeds from 
&lt;FONT SIZE=-1&gt;STDIN&lt;/FONT&gt; to 
&lt;FONT SIZE=-1&gt;STDOUT&lt;/FONT&gt; as might be expected.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Idirectory&quot;&gt;-Idirectory&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Directories specified by &lt;STRONG&gt;-I&lt;/STRONG&gt; are prepended to the search path for modules (&lt;CODE&gt;@INC&lt;/CODE&gt;), and also tells the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; preprocessor where to search for include files. The 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; preprocessor is invoked with
 &lt;STRONG&gt;-P&lt;/STRONG&gt;; by default it searches /usr/include and /usr/lib/perl.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__l_octnum_&quot;&gt;-l&amp;#091;octnum&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
enables automatic line-ending processing. It has two effects: first, it
automatically chomps ``&lt;CODE&gt;$/&lt;/CODE&gt;'' (the input record separator) when used with &lt;STRONG&gt;-n&lt;/STRONG&gt; or &lt;STRONG&gt;-p&lt;/STRONG&gt;, and second, it assigns ``&lt;CODE&gt;$\&lt;/CODE&gt;'' (the output record separator) to have the value of &lt;EM&gt;octnum&lt;/EM&gt; so that any print statements will have that separator added back on. If
&lt;EM&gt;octnum&lt;/EM&gt; is omitted, sets ``&lt;CODE&gt;$\&lt;/CODE&gt;'' to the current value of ``&lt;CODE&gt;$/&lt;/CODE&gt;''. For instance, to trim lines to 80 columns:

&lt;P&gt;
&lt;PRE&gt;    perl -lpe 'substr($_, 80) = &amp;quot;&amp;quot;'
&lt;/PRE&gt;
&lt;P&gt;
Note that the assignment &lt;CODE&gt;$\ = $/&lt;/CODE&gt; is done when the switch is processed, so the input record separator can be
different than the output record separator if the &lt;STRONG&gt;-l&lt;/STRONG&gt; switch is followed by a &lt;STRONG&gt;-0&lt;/STRONG&gt; switch:

&lt;P&gt;
&lt;PRE&gt;    gnufind / -print0 | perl -ln0e 'print &amp;quot;found $_&amp;quot; if -p'
&lt;/PRE&gt;
&lt;P&gt;
This sets &lt;CODE&gt;$\&lt;/CODE&gt; to newline and then sets &lt;CODE&gt;$/&lt;/CODE&gt; to the null character.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__m_module&quot;&gt;-m&amp;#091;-&amp;#093;module&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__M_module&quot;&gt;-M&amp;#091;-&amp;#093;module&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__M_module&quot;&gt;-M&amp;#091;-&amp;#093;'module ...'&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__mM_module_arg_arg_&quot;&gt;-&amp;#091;mM&amp;#093;&amp;#091;-&amp;#093;module=arg&amp;#091;,arg&amp;#093;...&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
[perlman:perlop]&lt;EM&gt;module&lt;/EM&gt; executes [perlfunc:use|use]  &lt;EM&gt;module&lt;/EM&gt;  &lt;CODE&gt;();&lt;/CODE&gt; before executing your script.

&lt;P&gt;
&lt;CODE&gt;-M&lt;/CODE&gt;&lt;EM&gt;module&lt;/EM&gt; executes [perlfunc:use|use]  &lt;EM&gt;module&lt;/EM&gt;  &lt;CODE&gt;;&lt;/CODE&gt; before executing your script. You can use quotes to add extra code after
the module name, e.g., &lt;CODE&gt;-M'module qw(foo bar)'&lt;/CODE&gt;.

&lt;P&gt;
If the first character after the &lt;CODE&gt;-M&lt;/CODE&gt; or [perlman:perlop] is a dash (&lt;CODE&gt;-&lt;/CODE&gt;) then the 'use' is replaced with 'no'.

&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; little builtin syntactic sugar means you can also
say
&lt;CODE&gt;-mmodule=foo,bar&lt;/CODE&gt; or &lt;CODE&gt;-Mmodule=foo,bar&lt;/CODE&gt; as a shortcut for
&lt;CODE&gt;-M'module qw(foo bar)'&lt;/CODE&gt;. This avoids the need to use quotes when importing symbols. The actual
code generated by &lt;CODE&gt;-Mmodule=foo,bar&lt;/CODE&gt; is
&lt;CODE&gt;use module split(/,/,q{foo,bar})&lt;/CODE&gt;. Note that the &lt;CODE&gt;=&lt;/CODE&gt; form removes the distinction between [perlman:perlop] and &lt;CODE&gt;-M&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__n&quot;&gt;-n&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
causes Perl to assume the following loop around your script, which makes it
iterate over filename arguments somewhat like &lt;STRONG&gt;sed -n&lt;/STRONG&gt; or
&lt;STRONG&gt;awk&lt;/STRONG&gt;:

&lt;P&gt;
&lt;PRE&gt;    while (&amp;lt;&amp;gt;) {
        ...             # your script goes here
    }
&lt;/PRE&gt;
&lt;P&gt;
Note that the lines are not printed by default. See &lt;STRONG&gt;-p&lt;/STRONG&gt; to have lines printed. If a file named by an argument cannot be opened for
some reason, Perl warns you about it, and moves on to the next file.

&lt;P&gt;
Here is an efficient way to delete all files older than a week:

&lt;P&gt;
&lt;PRE&gt;    find . -mtime +7 -print | perl -nle 'unlink;'
&lt;/PRE&gt;
&lt;P&gt;
This is faster than using the [perlfunc:exec] switch of &lt;STRONG&gt;find&lt;/STRONG&gt; because you don't have to start a process on every filename found.

&lt;P&gt;
&lt;CODE&gt;BEGIN&lt;/CODE&gt; and &lt;CODE&gt;END&lt;/CODE&gt; blocks may be used to capture control before or after the implicit loop,
just as in &lt;STRONG&gt;awk&lt;/STRONG&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__p&quot;&gt;-p&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
causes Perl to assume the following loop around your script, which makes it
iterate over filename arguments somewhat like &lt;STRONG&gt;sed&lt;/STRONG&gt;:

&lt;P&gt;
&lt;PRE&gt;    while (&amp;lt;&amp;gt;) {
        ...             # your script goes here
    } continue {
        print or die &amp;quot;-p destination: $!\n&amp;quot;;
    }
&lt;/PRE&gt;
&lt;P&gt;
If a file named by an argument cannot be opened for some reason, Perl warns
you about it, and moves on to the next file. Note that the lines are
printed automatically. An error occuring during printing is treated as
fatal. To suppress printing use the &lt;STRONG&gt;-n&lt;/STRONG&gt; switch. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; &lt;STRONG&gt;-p&lt;/STRONG&gt;
overrides a &lt;STRONG&gt;-n&lt;/STRONG&gt; switch.

&lt;P&gt;
&lt;CODE&gt;BEGIN&lt;/CODE&gt; and &lt;CODE&gt;END&lt;/CODE&gt; blocks may be used to capture control before or after the implicit loop,
just as in awk.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__P&quot;&gt;-P&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
causes your script to be run through the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; preprocessor before compilation by Perl. (Because both comments and cpp directives begin with the # character, you should avoid starting comments with any words recognized by the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; preprocessor such as ``if'', ``else'', or ``define''.)

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__s&quot;&gt;-s&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
enables some rudimentary switch parsing for switches on the command line
after the script name but before any filename arguments (or before a &lt;STRONG&gt;--&lt;/STRONG&gt;). Any switch found there is removed from &lt;CODE&gt;@ARGV&lt;/CODE&gt; and sets the
corresponding variable in the Perl script. The following script prints
``true'' if and only if the script is invoked with a &lt;STRONG&gt;-xyz&lt;/STRONG&gt; switch.

&lt;P&gt;
&lt;PRE&gt;    #!/usr/bin/perl -s
    if ($xyz) { print &amp;quot;true\n&amp;quot;; }
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__S&quot;&gt;-S&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
makes Perl use the 
&lt;FONT SIZE=-1&gt;PATH&lt;/FONT&gt; environment variable to search for the script (unless the name of the script contains directory separators). On some platforms, this also makes Perl append suffixes to the filename while searching for it. For example, on Win32 platforms, the ``.bat'' and ``.cmd'' suffixes are appended if a lookup for the original name fails, and if the name does not already end in one of those suffixes. If your Perl was compiled with 
&lt;FONT SIZE=-1&gt;DEBUGGING&lt;/FONT&gt; turned on, using the -Dp switch to Perl shows how the search progresses.

&lt;P&gt;
If the filename supplied contains directory separators (i.e. it is an
absolute or relative pathname), and if the file is not found, platforms
that append file extensions will do so and try to look for the file with
those extensions added, one by one.

&lt;P&gt;
On DOS-like platforms, if the script does not contain directory separators, it will first be searched for in the current directory before being searched for on the 
&lt;FONT SIZE=-1&gt;PATH.&lt;/FONT&gt; On Unix platforms, the script will be searched for strictly on the 
&lt;FONT SIZE=-1&gt;PATH.&lt;/FONT&gt;

&lt;P&gt;
Typically this is used to emulate #! startup on platforms that don't
support #!. This example works on many platforms that have a shell
compatible with Bourne shell:

&lt;P&gt;
&lt;PRE&gt;    #!/usr/bin/perl
    eval 'exec /usr/bin/perl -wS $0 ${1+&amp;quot;$@&amp;quot;}'
            if $running_under_some_shell;
&lt;/PRE&gt;
&lt;P&gt;
The system ignores the first line and feeds the script to /bin/sh, which
proceeds to try to execute the Perl script as a shell script. The shell
executes the second line as a normal shell command, and thus starts up the
Perl interpreter. On some systems &lt;CODE&gt;$0&lt;/CODE&gt; doesn't always contain
the full pathname, so the &lt;STRONG&gt;-S&lt;/STRONG&gt; tells Perl to search for the script if necessary. After Perl locates the
script, it parses the lines and ignores them because the variable
&lt;CODE&gt;$running_under_some_shell&lt;/CODE&gt; is never true. If the script will be
interpreted by csh, you will need to replace &lt;CODE&gt;${1+&amp;quot;$@&amp;quot;}&lt;/CODE&gt; with &lt;CODE&gt;$*&lt;/CODE&gt;, even though that doesn't understand embedded spaces (and such) in the
argument list. To start up sh rather than csh, some systems may have to
replace the #! line with a line containing just a colon, which will be
politely ignored by Perl. Other systems can't control that, and need a
totally devious construct that will work under any of csh, sh, or Perl,
such as the following:

&lt;P&gt;
&lt;PRE&gt;        eval '(exit $?0)' &amp;amp;&amp;amp; eval 'exec /usr/bin/perl -wS $0 ${1+&amp;quot;$@&amp;quot;}'
        &amp;amp; eval 'exec /usr/bin/perl -wS $0 $argv:q'
                if $running_under_some_shell;
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__T&quot;&gt;-T&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
forces ``taint'' checks to be turned on so you can test them. Ordinarily these checks are done only when running setuid or setgid. It's a good idea to turn them on explicitly for programs run on another's behalf, such as 
&lt;FONT SIZE=-1&gt;CGI&lt;/FONT&gt; programs. See
 [perlman:perlsec|the perlsec manpage]. Note that (for security reasons) this option must be seen by Perl quite
early; usually this means it must appear early on the command line or in
the #! line (for systems which support that).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__u&quot;&gt;-u&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
causes Perl to dump core after compiling your script. You can then in
theory take this core dump and turn it into an executable file by using the
&lt;STRONG&gt;undump&lt;/STRONG&gt; program (not supplied). This speeds startup at the expense of some disk space (which you can minimize by stripping the executable). (Still, a ``hello world'' executable comes out to about 
&lt;FONT SIZE=-1&gt;200K&lt;/FONT&gt; on my machine.) If you want to execute a portion of your script before dumping, use the 
&lt;CODE&gt;dump()&lt;/CODE&gt; operator instead. Note: availability of
 &lt;STRONG&gt;undump&lt;/STRONG&gt; is platform specific and may not be available for a specific port of Perl.
It has been superseded by the new perl-to-C compiler, which is more
portable, even though it's still only considered beta.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__U&quot;&gt;-U&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
allows Perl to do unsafe operations. Currently the only ``unsafe''
operations are the unlinking of directories while running as superuser, and
running setuid programs with fatal taint checks turned into warnings. Note
that the &lt;STRONG&gt;-w&lt;/STRONG&gt; switch (or the &lt;CODE&gt;$^W&lt;/CODE&gt; variable) must be used along with this option to actually &lt;STRONG&gt;generate&lt;/STRONG&gt; the taint-check warnings.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__v&quot;&gt;-v&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
prints the version and patchlevel of your Perl executable.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__V&quot;&gt;-V&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
prints summary of the major perl configuration values and the current value of 
&lt;FONT SIZE=-1&gt;@INC.&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__V_name&quot;&gt;-V:name&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Prints to 
&lt;FONT SIZE=-1&gt;STDOUT&lt;/FONT&gt; the value of the named configuration variable.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__w&quot;&gt;-w&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
prints warnings about variable names that are mentioned only once, and
scalar variables that are used before being set. Also warns about redefined
subroutines, and references to undefined filehandles or filehandles opened
read-only that you are attempting to write on. Also warns you if you use
values as a number that doesn't look like numbers, using an array as though
it were a scalar, if your subroutines recurse more than 100 deep, and
innumerable other things.

&lt;P&gt;
You can disable specific warnings using &lt;CODE&gt;__WARN__&lt;/CODE&gt; hooks, as described in [perlman:perlvar|the perlvar manpage] and [perlfunc:warn|warn]. See also [perlman:perldiag|the perldiag manpage] and [perlman:perltrap|the perltrap manpage].

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__x&quot;&gt;-x directory&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
tells Perl that the script is embedded in a message. Leading garbage will
be discarded until the first line that starts with #! and contains the
string ``perl''. Any meaningful switches on that line will be applied. If a
directory name is specified, Perl will switch to that directory before
running the script. The &lt;STRONG&gt;-x&lt;/STRONG&gt; switch controls only the disposal of leading garbage. The script must be
terminated with &lt;CODE&gt;__END__&lt;/CODE&gt; if there is trailing garbage to be ignored (the script can process any or all of the trailing garbage via the 
&lt;FONT SIZE=-1&gt;DATA&lt;/FONT&gt; filehandle if desired).

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_HOME&quot;&gt;HOME&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Used if chdir has no argument.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_LOGDIR&quot;&gt;LOGDIR&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Used if chdir has no argument and 
&lt;FONT SIZE=-1&gt;HOME&lt;/FONT&gt; is not set.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PATH&quot;&gt;PATH&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Used in executing subprocesses, and in finding the script if &lt;STRONG&gt;-S&lt;/STRONG&gt; is used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PERL5LIB&quot;&gt;PERL5LIB&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; colon-separated list of directories in which to look for Perl library files before looking in the standard library and the current directory. If 
&lt;FONT SIZE=-1&gt;PERL5LIB&lt;/FONT&gt; is not defined, 
&lt;FONT SIZE=-1&gt;PERLLIB&lt;/FONT&gt; is used. When running taint checks (because the script was running setuid or setgid, or the

&lt;STRONG&gt;-T&lt;/STRONG&gt; switch was used), neither variable is used. The script should instead say

&lt;P&gt;
&lt;PRE&gt;    use lib &amp;quot;/my/directory&amp;quot;;
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PERL5OPT&quot;&gt;PERL5OPT&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Command-line options (switches). Switches in this variable are taken as if
they were on every Perl command line. Only the &lt;STRONG&gt;-&amp;#091;DIMUdmw&amp;#093;&lt;/STRONG&gt;
switches are allowed. When running taint checks (because the script was
running setuid or setgid, or the &lt;STRONG&gt;-T&lt;/STRONG&gt; switch was used), this variable is ignored.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PERLLIB&quot;&gt;PERLLIB&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; colon-separated list of directories in which to look for Perl library files before looking in the standard library and the current directory. If 
&lt;FONT SIZE=-1&gt;PERL5LIB&lt;/FONT&gt; is defined, 
&lt;FONT SIZE=-1&gt;PERLLIB&lt;/FONT&gt; is not used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PERL5DB&quot;&gt;PERL5DB&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The command used to load the debugger code. The default is:

&lt;P&gt;
&lt;PRE&gt;        BEGIN { require 'perl5db.pl' }
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PERL5SHELL&quot;&gt;PERL5SHELL (specific to WIN32 port)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
May be set to an alternative shell that perl must use internally for executing ``backtick'' commands or 
&lt;CODE&gt;system().&lt;/CODE&gt; Default is
 &lt;CODE&gt;cmd.exe /x/c&lt;/CODE&gt;
on WindowsNT and &lt;CODE&gt;command.com /c&lt;/CODE&gt; on Windows95. The value is considered to be space delimited. Precede any
character that needs to be protected (like a space or backslash) with a
backslash.

&lt;P&gt;
Note that Perl doesn't use 
&lt;FONT SIZE=-1&gt;COMSPEC&lt;/FONT&gt; for this purpose because 
&lt;FONT SIZE=-1&gt;COMSPEC&lt;/FONT&gt; has a high degree of variability among users, leading to portability concerns. Besides, perl can use a shell that may not be fit for interactive use, and setting 
&lt;FONT SIZE=-1&gt;COMSPEC&lt;/FONT&gt; to such a shell may interfere with the proper functioning of other programs (which usually look in 
&lt;FONT SIZE=-1&gt;COMSPEC&lt;/FONT&gt; to find a shell fit for interactive use).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PERL_DEBUG_MSTATS&quot;&gt;PERL_DEBUG_MSTATS&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Relevant only if perl is compiled with the malloc included with the perl
distribution (that is, if &lt;CODE&gt;perl -V:d_mymalloc&lt;/CODE&gt; is 'define'). If set, this causes memory statistics to be dumped after
execution. If set to an integer greater than one, also causes memory
statistics to be dumped after compilation.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_PERL_DESTRUCT_LEVEL&quot;&gt;PERL_DESTRUCT_LEVEL&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Relevant only if your perl executable was built with &lt;STRONG&gt;-DDEBUGGING&lt;/STRONG&gt;, this controls the behavior of global destruction of objects and other
references.

&lt;/DL&gt;
&lt;P&gt;
Perl also has environment variables that control how Perl handles data
specific to particular natural languages. See [perlman:perllocale|the perllocale manpage].

&lt;P&gt;
Apart from these, Perl uses no other environment variables, except to make
them available to the script being executed, and to child processes.
However, scripts running setuid would do well to execute the following
lines before doing anything else, just to keep people honest:

&lt;P&gt;
&lt;PRE&gt;    $ENV{PATH} = '/bin:/usr/bin';    # or whatever you need
    $ENV{SHELL} = '/bin/sh' if exists $ENV{SHELL};
    delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
&lt;/PRE&gt;
&lt;HR&gt;
&lt;BR&gt;Return to the [Library]&lt;BR&gt;</doctext>
  <type_nodetype>116</type_nodetype>
  <node_id>400</node_id>
  <author_user>114</author_user>
  <title>perlman:perlrun</title>
  <createtime>1999-08-25 02:40:34</createtime>
  <nodeupdated>2005-08-15 12:22:42</nodeupdated>
</node>
