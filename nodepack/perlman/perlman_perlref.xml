<node>
  <doctext>&lt;HR&gt;
&lt;P&gt;
&lt;H1&gt;&lt;A NAME=&quot;NAME&quot;&gt;NAME&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
perlref - Perl references and nested data structures

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;DESCRIPTION&quot;&gt;DESCRIPTION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Before release 5 of Perl it was difficult to represent complex data
structures, because all references had to be symbolic--and even then it was
difficult to refer to a variable instead of a symbol table entry. Perl now
not only makes it easier to use symbolic references to variables, but also
lets you have ``hard'' references to any piece of data or code. Any scalar
may hold a hard reference. Because arrays and hashes contain scalars, you
can now easily build arrays of arrays, arrays of hashes, hashes of arrays,
arrays of hashes of functions, and so on.

&lt;P&gt;
Hard references are smart--they keep track of reference counts for you,
automatically freeing the thing referred to when its reference count goes
to zero. (Note: the reference counts for values in self-referential or
cyclic data structures may not go to zero without a little help; see
[perlman:perlobj] for a detailed explanation.) If that thing happens to be an object, the
object is destructed. See
[perlman:perlobj|the perlobj manpage] for more about objects. (In a sense, everything in Perl is an object, but
we usually reserve the word for references to objects that have been
officially ``blessed'' into a class package.)

&lt;P&gt;
Symbolic references are names of variables or other objects, just as a
symbolic link in a Unix filesystem contains merely the name of a file. The [perlfunc:glob] notation is a kind of symbolic reference. (Symbolic references are
sometimes called ``soft references'', but please don't call them that;
references are confusing enough without useless synonyms.)

&lt;P&gt;
In contrast, hard references are more like hard links in a Unix file
system: They are used to access an underlying object without concern for
what its (other) name is. When the word ``reference'' is used without an
adjective, as in the following paragraph, it is usually talking about a
hard reference.

&lt;P&gt;
References are easy to use in Perl. There is just one overriding principle:
Perl does no implicit referencing or dereferencing. When a scalar is
holding a reference, it always behaves as a simple scalar. It doesn't
magically start being an array or hash or subroutine; you have to tell it
explicitly to do so, by dereferencing it.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Making_References&quot;&gt;Making References&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
References can be created in several ways.

&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;.&lt;/A&gt;&lt;/STRONG&gt;
&lt;P&gt;
By using the backslash operator on a variable, subroutine, or value. (This works much like the &amp;amp; (address-of) operator in 
&lt;FONT SIZE=-1&gt;C.)&lt;/FONT&gt; Note that this typically creates
 &lt;EM&gt;ANOTHER&lt;/EM&gt; reference to a variable, because there's already a reference to the
variable in the symbol table. But the symbol table reference might go away,
and you'll still have the reference that the backslash returned. Here are
some examples:

&lt;P&gt;
&lt;PRE&gt;    $scalarref = \$foo;
    $arrayref  = \@ARGV;
    $hashref   = \%ENV;
    $coderef   = \&amp;amp;handler;
    $globref   = \*foo;
&lt;/PRE&gt;
&lt;P&gt;
It isn't possible to create a true reference to an 
&lt;FONT SIZE=-1&gt;IO&lt;/FONT&gt; handle (filehandle or dirhandle) using the
backslash operator. The most you can get is a reference to a typeglob,
which is actually a complete symbol table entry. But see the explanation of
the &lt;CODE&gt;*foo{THING}&lt;/CODE&gt; syntax below. However, you can still use type globs and globrefs as though they were 
&lt;FONT SIZE=-1&gt;IO&lt;/FONT&gt; handles.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;


&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; reference to an anonymous array can be created using
square brackets:

&lt;P&gt;
&lt;PRE&gt;    $arrayref = &amp;#091;1, 2, &amp;#091;'a', 'b', 'c'&amp;#093;&amp;#093;;
&lt;/PRE&gt;
&lt;P&gt;
Here we've created a reference to an anonymous array of three elements
whose final element is itself a reference to another anonymous array of
three elements. (The multidimensional syntax described later can be used to
access this. For example, after the above, &lt;CODE&gt;$arrayref-&amp;gt;&amp;#091;2&amp;#093;&amp;#091;1&amp;#093;&lt;/CODE&gt; would have the value ``b''.)

&lt;P&gt;
Note that taking a reference to an enumerated list is not the same as using
square brackets--instead it's the same as creating a list of references!

&lt;P&gt;
&lt;PRE&gt;    @list = (\$a, \@b, \%c);
    @list = \($a, @b, %c);      # same thing!
&lt;/PRE&gt;
&lt;P&gt;
As a special case, &lt;CODE&gt;\(@foo)&lt;/CODE&gt; returns a list of references to the contents of &lt;CODE&gt;@foo&lt;/CODE&gt;, not a reference to &lt;CODE&gt;@foo&lt;/CODE&gt; itself. Likewise for &lt;CODE&gt;%foo&lt;/CODE&gt;.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;


&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; reference to an anonymous hash can be created using
curly brackets:

&lt;P&gt;
&lt;PRE&gt;    $hashref = {
        'Adam'  =&amp;gt; 'Eve',
        'Clyde' =&amp;gt; 'Bonnie',
    };
&lt;/PRE&gt;
&lt;P&gt;
Anonymous hash and array composers like these can be intermixed freely to produce as complicated a structure as you want. The multidimensional syntax described below works for these too. The values above are literals, but variables and expressions would work just as well, because assignment operators in Perl (even within 
&lt;CODE&gt;local()&lt;/CODE&gt; or 
&lt;CODE&gt;my())&lt;/CODE&gt; are executable statements, not compile-time declarations.

&lt;P&gt;
Because curly brackets (braces) are used for several other things including
BLOCKs, you may occasionally have to disambiguate braces at the beginning
of a statement by putting a &lt;CODE&gt;+&lt;/CODE&gt; or a [perlfunc:return|return] in front so that Perl realizes the opening brace isn't starting a 
&lt;FONT SIZE=-1&gt;BLOCK.&lt;/FONT&gt; The economy and mnemonic value of using curlies
is deemed worth this occasional extra hassle.

&lt;P&gt;
For example, if you wanted a function to make a new hash and return a
reference to it, you have these options:

&lt;P&gt;
&lt;PRE&gt;    sub hashem {        { @_ } }   # silently wrong
    sub hashem {       +{ @_ } }   # ok
    sub hashem { return { @_ } }   # ok
&lt;/PRE&gt;
&lt;P&gt;
On the other hand, if you want the other meaning, you can do this:

&lt;P&gt;
&lt;PRE&gt;    sub showem {        { @_ } }   # ambiguous (currently ok, but may change)
    sub showem {       {; @_ } }   # ok
    sub showem { { return @_ } }   # ok
&lt;/PRE&gt;
&lt;P&gt;
Note how the leading &lt;CODE&gt;+{&lt;/CODE&gt; and &lt;CODE&gt;{;&lt;/CODE&gt; always serve to disambiguate the expression to mean either the 
&lt;FONT SIZE=-1&gt;HASH&lt;/FONT&gt; reference, or the 
&lt;FONT SIZE=-1&gt;BLOCK.&lt;/FONT&gt;

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;


&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; reference to an anonymous subroutine can be created
by using
[perlfunc:sub|sub] without a subname:

&lt;P&gt;
&lt;PRE&gt;    $coderef = sub { print &amp;quot;Boink!\n&amp;quot; };
&lt;/PRE&gt;
&lt;P&gt;
Note the presence of the semicolon. Except for the fact that the code
inside isn't executed immediately, a [perlfunc:sub] is not so much a declaration as it is an operator, like [perlfunc:do] or [perlfunc:eval]. (However, no matter how many times you execute that particular line
(unless you're in an
[perlfunc:eval|eval(&amp;quot;...&amp;quot;)]), &lt;CODE&gt;$coderef&lt;/CODE&gt; will still have a reference to the &lt;EM&gt;SAME&lt;/EM&gt;
anonymous subroutine.)

&lt;P&gt;
Anonymous subroutines act as closures with respect to 
&lt;CODE&gt;my()&lt;/CODE&gt; variables, that is,
variables visible lexically within the current scope. Closure is a notion
out of the Lisp world that says if you define an anonymous function in a
particular lexical context, it pretends to run in that context even when
it's called outside of the context.

&lt;P&gt;
In human terms, it's a funny way of passing arguments to a subroutine when
you define it as well as when you call it. It's useful for setting up
little bits of code to run later, such as callbacks. You can even do
object-oriented stuff with it, though Perl already provides a different
mechanism to do that--see [perlman:perlobj|the perlobj manpage].

&lt;P&gt;
You can also think of closure as a way to write a subroutine template
without using eval. (In fact, in version 5.000, eval was the &lt;EM&gt;only&lt;/EM&gt; way to get closures. You may wish to use ``require 5.001'' if you use
closures.)

&lt;P&gt;
Here's a small example of how closures works:

&lt;P&gt;
&lt;PRE&gt;    sub newprint {
        my $x = shift;
        return sub { my $y = shift; print &amp;quot;$x, $y!\n&amp;quot;; };
    }
    $h = newprint(&amp;quot;Howdy&amp;quot;);
    $g = newprint(&amp;quot;Greetings&amp;quot;);
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Time passes...
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    &amp;amp;$h(&amp;quot;world&amp;quot;);
    &amp;amp;$g(&amp;quot;earthlings&amp;quot;);
&lt;/PRE&gt;
&lt;P&gt;
This prints

&lt;P&gt;
&lt;PRE&gt;    Howdy, world!
    Greetings, earthlings!
&lt;/PRE&gt;
&lt;P&gt;
Note particularly that &lt;CODE&gt;$x&lt;/CODE&gt; continues to refer to the value passed into 
&lt;CODE&gt;newprint()&lt;/CODE&gt;
 &lt;EM&gt;despite&lt;/EM&gt; the fact that the ``my $x'' has seemingly gone out of scope by the time the
anonymous subroutine runs. That's what closure is all about.

&lt;P&gt;
This applies only to lexical variables, by the way. Dynamic variables
continue to work as they have always worked. Closure is not something that
most Perl programmers need trouble themselves about to begin with.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;

References are often returned by special subroutines called constructors. Perl objects are just references to a special kind of object that happens to know which package it's associated with. Constructors are just special subroutines that know how to create that association. They do so by starting with an ordinary reference, and it remains an ordinary reference even while it's also being an object. Constructors are often named 
&lt;CODE&gt;new()&lt;/CODE&gt; and called indirectly:

&lt;P&gt;
&lt;PRE&gt;    $objref = new Doggie (Tail =&amp;gt; 'short', Ears =&amp;gt; 'long');
&lt;/PRE&gt;
&lt;P&gt;
But don't have to be:

&lt;P&gt;
&lt;PRE&gt;    $objref   = Doggie-&amp;gt;new(Tail =&amp;gt; 'short', Ears =&amp;gt; 'long');
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    use Term::Cap;
    $terminal = Term::Cap-&amp;gt;Tgetent( { OSPEED =&amp;gt; 9600 });
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    use Tk;
    $main    = MainWindow-&amp;gt;new();
    $menubar = $main-&amp;gt;Frame(-relief              =&amp;gt; &amp;quot;raised&amp;quot;,
                            -borderwidth         =&amp;gt; 2)
&lt;/PRE&gt;
&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;
&lt;P&gt;
References of the appropriate type can spring into existence if you
dereference them in a context that assumes they exist. Because we haven't
talked about dereferencing yet, we can't show you any examples yet.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;


&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; reference can be created by using a special syntax, lovingly known as the *foo{THING} syntax. *foo{THING} returns a reference to the 
&lt;FONT SIZE=-1&gt;THING&lt;/FONT&gt; slot in &lt;CODE&gt;*foo&lt;/CODE&gt; (which is the symbol table entry which holds everything known as foo).

&lt;P&gt;
&lt;PRE&gt;    $scalarref = *foo{SCALAR};
    $arrayref  = *ARGV{ARRAY};
    $hashref   = *ENV{HASH};
    $coderef   = *handler{CODE};
    $ioref     = *STDIN{IO};
    $globref   = *foo{GLOB};
&lt;/PRE&gt;
&lt;P&gt;
All of these are self-explanatory except for *foo{IO}. It returns the 
&lt;FONT SIZE=-1&gt;IO&lt;/FONT&gt; handle, used for file handles ([perlfunc:open|open]), sockets ([perlfunc:socket|socket] and [perlfunc:socketpair|socketpair]), and directory handles ([perlfunc:opendir|opendir]). For compatibility with previous versions of Perl, *foo{FILEHANDLE} is a
synonym for *foo{IO}.

&lt;P&gt;
*foo{THING} returns undef if that particular 
&lt;FONT SIZE=-1&gt;THING&lt;/FONT&gt; hasn't been used yet, except in the case of
scalars. *foo{SCALAR} returns a reference to an anonymous scalar if
&lt;CODE&gt;$foo&lt;/CODE&gt; hasn't been used yet. This might change in a future
release.

&lt;P&gt;
*foo{IO} is an alternative to the 
&lt;FONT SIZE=-1&gt;\*HANDLE&lt;/FONT&gt; mechanism given in
[perlman:perldata] for passing filehandles into or out of subroutines, or storing into larger
data structures. Its disadvantage is that it won't create a new filehandle
for you. Its advantage is that you have no risk of clobbering more than you
want to with a typeglob assignment, although if you assign to a scalar
instead of a typeglob, you're ok.

&lt;P&gt;
&lt;PRE&gt;    splutter(*STDOUT);
    splutter(*STDOUT{IO});
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    sub splutter {
        my $fh = shift;
        print $fh &amp;quot;her um well a hmmm\n&amp;quot;;
    }
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $rec = get_rec(*STDIN);
    $rec = get_rec(*STDIN{IO});
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    sub get_rec {
        my $fh = shift;
        return scalar &amp;lt;$fh&amp;gt;;
    }
&lt;/PRE&gt;
&lt;/OL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Using_References&quot;&gt;Using References&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
That's it for creating references. By now you're probably dying to know how
to use references to get back to your long-lost data. There are several
basic methods.

&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;
&lt;P&gt;
Anywhere you'd put an identifier (or chain of identifiers) as part of a
variable or subroutine name, you can replace the identifier with a simple
scalar variable containing a reference of the correct type:

&lt;P&gt;
&lt;PRE&gt;    $bar = $$scalarref;
    push(@$arrayref, $filename);
    $$arrayref&amp;#091;0&amp;#093; = &amp;quot;January&amp;quot;;
    $$hashref{&amp;quot;KEY&amp;quot;} = &amp;quot;VALUE&amp;quot;;
    &amp;amp;$coderef(1,2,3);
    print $globref &amp;quot;output\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
It's important to understand that we are specifically &lt;EM&gt;NOT&lt;/EM&gt; dereferencing
&lt;CODE&gt;$arrayref&amp;#091;0&amp;#093;&lt;/CODE&gt; or &lt;CODE&gt;$hashref{&amp;quot;KEY&amp;quot;}&lt;/CODE&gt; there. The dereference of the scalar variable happens &lt;EM&gt;BEFORE&lt;/EM&gt; it does any key lookups. Anything more complicated than a simple scalar
variable must use methods 2 or 3 below. However, a ``simple scalar''
includes an identifier that itself uses method 1 recursively. Therefore,
the following prints ``howdy''.

&lt;P&gt;
&lt;PRE&gt;    $refrefref = \\\&amp;quot;howdy&amp;quot;;
    print $$$$refrefref;
&lt;/PRE&gt;
&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;
&lt;P&gt;
Anywhere you'd put an identifier (or chain of identifiers) as part of a variable or subroutine name, you can replace the identifier with a 
&lt;FONT SIZE=-1&gt;BLOCK&lt;/FONT&gt; returning a reference of the correct type. In other words, the previous examples could be written like this:

&lt;P&gt;
&lt;PRE&gt;    $bar = ${$scalarref};
    push(@{$arrayref}, $filename);
    ${$arrayref}&amp;#091;0&amp;#093; = &amp;quot;January&amp;quot;;
    ${$hashref}{&amp;quot;KEY&amp;quot;} = &amp;quot;VALUE&amp;quot;;
    &amp;amp;{$coderef}(1,2,3);
    $globref-&amp;gt;print(&amp;quot;output\n&amp;quot;);  # iff IO::Handle is loaded
&lt;/PRE&gt;
&lt;P&gt;
Admittedly, it's a little silly to use the curlies in this case, but the 
&lt;FONT SIZE=-1&gt;BLOCK&lt;/FONT&gt; can contain any arbitrary expression, in
particular, subscripted expressions:

&lt;P&gt;
&lt;PRE&gt;    &amp;amp;{ $dispatch{$index} }(1,2,3);      # call correct routine
&lt;/PRE&gt;
&lt;P&gt;
Because of being able to omit the curlies for the simple case of &lt;CODE&gt;$$x&lt;/CODE&gt;, people often make the mistake of viewing the dereferencing symbols as
proper operators, and wonder about their precedence. If they were, though,
you could use parentheses instead of braces. That's not the case. Consider
the difference below; case 0 is a short-hand version of case 1,
&lt;EM&gt;NOT&lt;/EM&gt; case 2:

&lt;P&gt;
&lt;PRE&gt;    $$hashref{&amp;quot;KEY&amp;quot;}   = &amp;quot;VALUE&amp;quot;;       # CASE 0
    ${$hashref}{&amp;quot;KEY&amp;quot;} = &amp;quot;VALUE&amp;quot;;       # CASE 1
    ${$hashref{&amp;quot;KEY&amp;quot;}} = &amp;quot;VALUE&amp;quot;;       # CASE 2
    ${$hashref-&amp;gt;{&amp;quot;KEY&amp;quot;}} = &amp;quot;VALUE&amp;quot;;     # CASE 3
&lt;/PRE&gt;
&lt;P&gt;
Case 2 is also deceptive in that you're accessing a variable called
%hashref, not dereferencing through &lt;CODE&gt;$hashref&lt;/CODE&gt; to the hash it's
presumably referencing. That would be case 3.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;

Subroutine calls and lookups of individual array elements arise often
enough that it gets cumbersome to use method 2. As a form of syntactic
sugar, the examples for method 2 may be written:

&lt;P&gt;
&lt;PRE&gt;    $arrayref-&amp;gt;&amp;#091;0&amp;#093; = &amp;quot;January&amp;quot;;   # Array element
    $hashref-&amp;gt;{&amp;quot;KEY&amp;quot;} = &amp;quot;VALUE&amp;quot;;  # Hash element
    $coderef-&amp;gt;(1,2,3);            # Subroutine call
&lt;/PRE&gt;
&lt;P&gt;
The left side of the arrow can be any expression returning a reference,
including a previous dereference. Note that &lt;CODE&gt;$array&amp;#091;$x&amp;#093;&lt;/CODE&gt; is &lt;EM&gt;NOT&lt;/EM&gt; the same thing as &lt;CODE&gt;$array-&amp;gt;&amp;#091;$x&amp;#093;&lt;/CODE&gt; here:

&lt;P&gt;
&lt;PRE&gt;    $array&amp;#091;$x&amp;#093;-&amp;gt;{&amp;quot;foo&amp;quot;}-&amp;gt;&amp;#091;0&amp;#093; = &amp;quot;January&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
This is one of the cases we mentioned earlier in which references could
spring into existence when in an lvalue context. Before this statement, &lt;CODE&gt;$array&amp;#091;$x&amp;#093;&lt;/CODE&gt; may have been undefined. If so, it's automatically defined with a hash
reference so that we can look up
&lt;CODE&gt;{&amp;quot;foo&amp;quot;}&lt;/CODE&gt; in it. Likewise &lt;CODE&gt;$array&amp;#091;$x&amp;#093;-&amp;gt;{&amp;quot;foo&amp;quot;}&lt;/CODE&gt; will automatically get defined with an array reference so that we can look
up &lt;CODE&gt;&amp;#091;0&amp;#093;&lt;/CODE&gt; in it. This process is called &lt;EM&gt;autovivification&lt;/EM&gt;.

&lt;P&gt;
One more thing here. The arrow is optional &lt;EM&gt;BETWEEN&lt;/EM&gt; brackets subscripts, so you can shrink the above down to

&lt;P&gt;
&lt;PRE&gt;    $array&amp;#091;$x&amp;#093;{&amp;quot;foo&amp;quot;}&amp;#091;0&amp;#093; = &amp;quot;January&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
Which, in the degenerate case of using only ordinary arrays, gives you
multidimensional arrays just like C's:

&lt;P&gt;
&lt;PRE&gt;    $score&amp;#091;$x&amp;#093;&amp;#091;$y&amp;#093;&amp;#091;$z&amp;#093; += 42;
&lt;/PRE&gt;
&lt;P&gt;
Well, okay, not entirely like C's arrays, actually. 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; doesn't know how to grow its arrays on demand. Perl
does.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;

If a reference happens to be a reference to an object, then there are
probably methods to access the things referred to, and you should probably
stick to those methods unless you're in the class package that defines the
object's methods. In other words, be nice, and don't violate the object's
encapsulation without a very good reason. Perl does not enforce
encapsulation. We are not totalitarians here. We do expect some basic
civility though.

&lt;/OL&gt;
&lt;P&gt;
The 
&lt;CODE&gt;ref()&lt;/CODE&gt; operator may be used to
determine what type of thing the reference is pointing to. See [perlman:perlfunc|the perlfunc manpage].

&lt;P&gt;
The 
&lt;CODE&gt;bless()&lt;/CODE&gt; operator may be used
to associate the object a reference points to with a package functioning as
an object class. See [perlman:perlobj|the perlobj manpage].

&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; typeglob may be dereferenced the same way a
reference can, because the dereference syntax always indicates the kind of
reference desired. So &lt;CODE&gt;${*foo}&lt;/CODE&gt; and &lt;CODE&gt;${\$foo}&lt;/CODE&gt; both indicate the same scalar variable.

&lt;P&gt;
Here's a trick for interpolating a subroutine call into a string:

&lt;P&gt;
&lt;PRE&gt;    print &amp;quot;My sub returned @{&amp;#091;mysub(1,2,3)&amp;#093;} that time.\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
The way it works is that when the &lt;CODE&gt;@{...}&lt;/CODE&gt; is seen in the double-quoted string, it's evaluated as a block. The block
creates a reference to an anonymous array containing the results of the
call to &lt;CODE&gt;mysub(1,2,3)&lt;/CODE&gt;. So the whole block returns a reference to an array, which is then
dereferenced by &lt;CODE&gt;@{...}&lt;/CODE&gt; and stuck into the double-quoted string. This chicanery is also useful for
arbitrary expressions:

&lt;P&gt;
&lt;PRE&gt;    print &amp;quot;That yields @{&amp;#091;$n + 5&amp;#093;} widgets\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Symbolic_references&quot;&gt;Symbolic references&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
We said that references spring into existence as necessary if they are
undefined, but we didn't say what happens if a value used as a reference is
already defined, but &lt;EM&gt;ISN'T&lt;/EM&gt; a hard reference. If you use it as a reference in this case, it'll be
treated as a symbolic reference. That is, the value of the scalar is taken
to be the &lt;EM&gt;NAME&lt;/EM&gt;
of a variable, rather than a direct link to a (possibly) anonymous value.

&lt;P&gt;
People frequently expect it to work like this. So it does.

&lt;P&gt;
&lt;PRE&gt;    $name = &amp;quot;foo&amp;quot;;
    $$name = 1;                 # Sets $foo
    ${$name} = 2;               # Sets $foo
    ${$name x 2} = 3;           # Sets $foofoo
    $name-&amp;gt;&amp;#091;0&amp;#093; = 4;             # Sets $foo&amp;#091;0&amp;#093;
    @$name = ();                # Clears @foo
    &amp;amp;$name();                   # Calls &amp;amp;foo() (as in Perl 4)
    $pack = &amp;quot;THAT&amp;quot;;
    ${&amp;quot;${pack}::$name&amp;quot;} = 5;    # Sets $THAT::foo without eval
&lt;/PRE&gt;
&lt;P&gt;
This is very powerful, and slightly dangerous, in that it's possible to
intend (with the utmost sincerity) to use a hard reference, and
accidentally use a symbolic reference instead. To protect against that, you
can say

&lt;P&gt;
&lt;PRE&gt;    use strict 'refs';
&lt;/PRE&gt;
&lt;P&gt;
and then only hard references will be allowed for the rest of the enclosing
block. An inner block may countermand that with

&lt;P&gt;
&lt;PRE&gt;    no strict 'refs';
&lt;/PRE&gt;
&lt;P&gt;
Only package variables (globals, even if localized) are visible to symbolic references. Lexical variables (declared with 
&lt;CODE&gt;my())&lt;/CODE&gt; aren't in a symbol table, and thus are invisible to this mechanism. For example:

&lt;P&gt;
&lt;PRE&gt;    local $value = 10;
    $ref = \$value;
    {
        my $value = 20;
        print $$ref;
    }
&lt;/PRE&gt;
&lt;P&gt;
This will still print 10, not 20. Remember that 
&lt;CODE&gt;local()&lt;/CODE&gt; affects package
variables, which are all ``global'' to the package.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Not_so_symbolic_references&quot;&gt;Not-so-symbolic references&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; new feature contributing to readability in perl
version 5.001 is that the brackets around a symbolic reference behave more
like quotes, just as they always have within a string. That is,

&lt;P&gt;
&lt;PRE&gt;    $push = &amp;quot;pop on &amp;quot;;
    print &amp;quot;${push}over&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
has always meant to print ``pop on over'', despite the fact that push is a
reserved word. This has been generalized to work the same outside of
quotes, so that

&lt;P&gt;
&lt;PRE&gt;    print ${push} . &amp;quot;over&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
and even

&lt;P&gt;
&lt;PRE&gt;    print ${ push } . &amp;quot;over&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
will have the same effect. (This would have been a syntax error in Perl
5.000, though Perl 4 allowed it in the spaceless form.) Note that this
construct is &lt;EM&gt;not&lt;/EM&gt; considered to be a symbolic reference when you're using strict refs:

&lt;P&gt;
&lt;PRE&gt;    use strict 'refs';
    ${ bareword };      # Okay, means $bareword.
    ${ &amp;quot;bareword&amp;quot; };    # Error, symbolic reference.
&lt;/PRE&gt;
&lt;P&gt;
Similarly, because of all the subscripting that is done using single words,
we've applied the same rule to any bareword that is used for subscripting a
hash. So now, instead of writing

&lt;P&gt;
&lt;PRE&gt;    $array{ &amp;quot;aaa&amp;quot; }{ &amp;quot;bbb&amp;quot; }{ &amp;quot;ccc&amp;quot; }
&lt;/PRE&gt;
&lt;P&gt;
you can write just

&lt;P&gt;
&lt;PRE&gt;    $array{ aaa }{ bbb }{ ccc }
&lt;/PRE&gt;
&lt;P&gt;
and not worry about whether the subscripts are reserved words. In the rare
event that you do wish to do something like

&lt;P&gt;
&lt;PRE&gt;    $array{ shift }
&lt;/PRE&gt;
&lt;P&gt;
you can force interpretation as a reserved word by adding anything that
makes it more than a bareword:

&lt;P&gt;
&lt;PRE&gt;    $array{ shift() }
    $array{ +shift }
    $array{ shift @_ }
&lt;/PRE&gt;
&lt;P&gt;
The &lt;STRONG&gt;-w&lt;/STRONG&gt; switch will warn you if it interprets a reserved word as a string. But it
will no longer warn you about using lowercase words, because the string is
effectively quoted.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Pseudo_hashes_Using_an_array_as&quot;&gt;Pseudo-hashes: Using an array as a hash&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;WARNING:&lt;/FONT&gt; This section describes an experimental
feature. Details may change without notice in future versions.

&lt;P&gt;
Beginning with release 5.005 of Perl you can use an array reference in some
contexts that would normally require a hash reference. This allows you to
access array elements using symbolic names, as if they were fields in a
structure.

&lt;P&gt;
For this to work, the array must contain extra information. The first
element of the array has to be a hash reference that maps field names to
array indices. Here is an example:

&lt;P&gt;
&lt;PRE&gt;   $struct = &amp;#091;{foo =&amp;gt; 1, bar =&amp;gt; 2}, &amp;quot;FOO&amp;quot;, &amp;quot;BAR&amp;quot;&amp;#093;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   $struct-&amp;gt;{foo};  # same as $struct-&amp;gt;&amp;#091;1&amp;#093;, i.e. &amp;quot;FOO&amp;quot;
   $struct-&amp;gt;{bar};  # same as $struct-&amp;gt;&amp;#091;2&amp;#093;, i.e. &amp;quot;BAR&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   keys %$struct;   # will return (&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;) in some order
   values %$struct; # will return (&amp;quot;FOO&amp;quot;, &amp;quot;BAR&amp;quot;) in same some order
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   while (my($k,$v) = each %$struct) {
       print &amp;quot;$k =&amp;gt; $v\n&amp;quot;;
   }
&lt;/PRE&gt;
&lt;P&gt;
Perl will raise an exception if you try to delete keys from a pseudo-hash
or try to access nonexistent fields. For better performance, Perl can also
do the translation from field names to array indices at compile time for
typed object references. See &lt;U&gt;the fields manpage&lt;/U&gt;&lt;!--../lib/fields.html--&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Function_Templates&quot;&gt;Function Templates&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
As explained above, a closure is an anonymous function with access to the
lexical variables visible when that function was compiled. It retains
access to those variables even though it doesn't get run until later, such
as in a signal handler or a Tk callback.

&lt;P&gt;
Using a closure as a function template allows us to generate many functions that act similarly. Suppopose you wanted functions named after the colors that generated 
&lt;FONT SIZE=-1&gt;HTML&lt;/FONT&gt; font changes for the various colors:

&lt;P&gt;
&lt;PRE&gt;    print &amp;quot;Be &amp;quot;, red(&amp;quot;careful&amp;quot;), &amp;quot;with that &amp;quot;, green(&amp;quot;light&amp;quot;);
&lt;/PRE&gt;
&lt;P&gt;
The 
&lt;CODE&gt;red()&lt;/CODE&gt; and 
&lt;CODE&gt;green()&lt;/CODE&gt; functions would be very similar. To create these, we'll assign a closure to a typeglob of the name of the function we're trying to build.
  

&lt;P&gt;
&lt;PRE&gt;    @colors = qw(red blue green yellow orange purple violet);
    for my $name (@colors) {
        no strict 'refs';       # allow symbol table manipulation
        *$name = *{uc $name} = sub { &amp;quot;&amp;lt;FONT COLOR='$name'&amp;gt;@_&amp;lt;/FONT&amp;gt;&amp;quot; };
    } 
&lt;/PRE&gt;
&lt;P&gt;
Now all those different functions appear to exist independently. You can call 
&lt;CODE&gt;red(),&lt;/CODE&gt; 
&lt;CODE&gt;RED(),&lt;/CODE&gt; 
&lt;CODE&gt;blue(),&lt;/CODE&gt; 
&lt;CODE&gt;BLUE(),&lt;/CODE&gt; 
&lt;CODE&gt;green(),&lt;/CODE&gt; etc. This technique saves on both compile time and memory use, and is less error-prone as well, since syntax checks happen at compile time. It's critical that any variables in the anonymous subroutine be lexicals in order to create a proper closure. That's the reasons for the
 [perlfunc:my|my] on the loop iteration variable.

&lt;P&gt;
This is one of the only places where giving a prototype to a closure makes
much sense. If you wanted to impose scalar context on the arguments of
these functions (probably not a wise idea for this particular example), you
could have written it this way instead:

&lt;P&gt;
&lt;PRE&gt;    *$name = sub ($) { &amp;quot;&amp;lt;FONT COLOR='$name'&amp;gt;$_&amp;#091;0&amp;#093;&amp;lt;/FONT&amp;gt;&amp;quot; };
&lt;/PRE&gt;
&lt;P&gt;
However, since prototype checking happens at compile time, the assignment above happens too late to be of much use. You could address this by putting the whole loop of assignments within a 
&lt;FONT SIZE=-1&gt;BEGIN&lt;/FONT&gt; block, forcing it to occur during compilation.

&lt;P&gt;
Access to lexicals that change over type--like those in the &lt;CODE&gt;for&lt;/CODE&gt; loop above--only works with closures, not general subroutines. In the
general case, then, named subroutines do not nest properly, although
anonymous ones do. If you are accustomed to using nested subroutines in
other programming languages with their own private variables, you'll have
to work at it a bit in Perl. The intuitive coding of this kind of thing
incurs mysterious warnings about ``will not stay shared''. For example,
this won't work:

&lt;P&gt;
&lt;PRE&gt;    sub outer {
        my $x = $_&amp;#091;0&amp;#093; + 35;
        sub inner { return $x * 19 }   # WRONG
        return $x + inner();
    } 
&lt;/PRE&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; work-around is the following:

&lt;P&gt;
&lt;PRE&gt;    sub outer {
        my $x = $_&amp;#091;0&amp;#093; + 35;
        local *inner = sub { return $x * 19 };
        return $x + inner();
    } 
&lt;/PRE&gt;
&lt;P&gt;
Now 
&lt;CODE&gt;inner()&lt;/CODE&gt; can only be called from within 
&lt;CODE&gt;outer(),&lt;/CODE&gt; because of the temporary assignments of the closure (anonymous subroutine). But when it does, it has normal access to the lexical variable &lt;CODE&gt;$x&lt;/CODE&gt; from the scope of 
&lt;CODE&gt;outer().&lt;/CODE&gt;

&lt;P&gt;
This has the interesting effect of creating a function local to another
function, something not normally supported in Perl.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;WARNING&quot;&gt;WARNING&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
You may not (usefully) use a reference as the key to a hash. It will be
converted into a string:

&lt;P&gt;
&lt;PRE&gt;    $x{ \$a } = $a;
&lt;/PRE&gt;
&lt;P&gt;
If you try to dereference the key, it won't do a hard dereference, and you
won't accomplish what you're attempting. You might want to do something
more like

&lt;P&gt;
&lt;PRE&gt;    $r = \@a;
    $x{ $r } = $r;
&lt;/PRE&gt;
&lt;P&gt;
And then at least you can use the 
&lt;CODE&gt;values(),&lt;/CODE&gt; which will be real refs, instead of the 
&lt;CODE&gt;keys(),&lt;/CODE&gt; which won't.

&lt;P&gt;
The standard Tie::RefHash module provides a convenient workaround to this.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Besides the obvious documents, source code can be instructive. Some rather
pathological examples of the use of references can be found in the &lt;EM&gt;t/op/ref.t&lt;/EM&gt; regression test in the Perl source directory.

&lt;P&gt;
See also [perlman:perldsc|the perldsc manpage] and [perlman:perllol|the perllol manpage] for how to use references to create complex data structures, and [perlman:perltoot|the perltoot manpage], [perlman:perlobj|the perlobj manpage], and [perlman:perlbot|the perlbot manpage]
for how to use them to create objects.
&lt;HR&gt;
&lt;BR&gt;Return to the [Library]&lt;BR&gt;</doctext>
  <type_nodetype>116</type_nodetype>
  <node_id>396</node_id>
  <author_user>114</author_user>
  <title>perlman:perlref</title>
  <createtime>1999-08-25 02:36:39</createtime>
  <nodeupdated>2005-08-12 21:25:42</nodeupdated>
</node>
