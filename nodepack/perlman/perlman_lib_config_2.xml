<node>
  <doctext>&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setregid&quot;&gt;d_setregid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setregid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETREGID&lt;/CODE&gt; if 
&lt;CODE&gt;setregid()&lt;/CODE&gt; is available to
change the real and effective gid of the current process.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setresgid&quot;&gt;d_setresgid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setregid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETRESGID&lt;/CODE&gt; if 
&lt;CODE&gt;setresgid()&lt;/CODE&gt; is available
to change the real, effective and saved gid of the current process.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setresuid&quot;&gt;d_setresuid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setreuid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETREUID&lt;/CODE&gt; if 
&lt;CODE&gt;setresuid()&lt;/CODE&gt; is available
to change the real, effective and saved uid of the current process.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setreuid&quot;&gt;d_setreuid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setreuid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETREUID&lt;/CODE&gt; if 
&lt;CODE&gt;setreuid()&lt;/CODE&gt; is available to
change the real and effective uid of the current process.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setrgid&quot;&gt;d_setrgid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setrgid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETRGID&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setrgid()&lt;/CODE&gt; routine is available to change the real gid of the current program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setruid&quot;&gt;d_setruid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setruid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETRUID&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setruid()&lt;/CODE&gt; routine is available to change the real uid of the current program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setsent&quot;&gt;d_setsent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setsent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETSERVENT&lt;/CODE&gt; if 
&lt;CODE&gt;setservent()&lt;/CODE&gt; is
available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setsid&quot;&gt;d_setsid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setsid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SETSID&lt;/CODE&gt; if 
&lt;CODE&gt;setsid()&lt;/CODE&gt; is available to set
the process group &lt;CODE&gt;ID&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_setvbuf&quot;&gt;d_setvbuf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_setvbuf.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SETVBUF&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;setvbuf()&lt;/CODE&gt; routine is available to change buffering on an open stdio stream.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_sfio&quot;&gt;d_sfio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_sfio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;USE_SFIO&lt;/CODE&gt; symbol, and indicates whether sfio is available (and should be used).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_shm&quot;&gt;d_shm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_shm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SHM&lt;/CODE&gt; symbol, which indicates that the entire shm*(2) library is present.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_shmat&quot;&gt;d_shmat&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_shmat.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SHMAT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;shmat()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_shmatprototype&quot;&gt;d_shmatprototype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_shmat.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SHMAT_PROTOTYPE&lt;/CODE&gt; 
symbol, which indicates that &lt;EM&gt;sys/shm.h&lt;/EM&gt; has a prototype for shmat.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_shmctl&quot;&gt;d_shmctl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_shmctl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SHMCTL&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;shmctl()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_shmdt&quot;&gt;d_shmdt&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_shmdt.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SHMDT&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;shmdt()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_shmget&quot;&gt;d_shmget&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_shmget.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SHMGET&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;shmget()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_sigaction&quot;&gt;d_sigaction&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_sigaction.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SIGACTION&lt;/CODE&gt; symbol, which indicates that the Vr4 
&lt;CODE&gt;sigaction()&lt;/CODE&gt; routine is
available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_sigsetjmp&quot;&gt;d_sigsetjmp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_sigsetjmp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SIGSETJMP&lt;/CODE&gt; symbol, which indicates that the 
&lt;CODE&gt;sigsetjmp()&lt;/CODE&gt; routine is available to call 
&lt;CODE&gt;setjmp()&lt;/CODE&gt; and optionally save the process's signal mask.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_socket&quot;&gt;d_socket&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_socket.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SOCKET&lt;/CODE&gt;, which indicates that the &lt;CODE&gt;BSD&lt;/CODE&gt; socket interface is supported.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_sockpair&quot;&gt;d_sockpair&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_socket.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SOCKETPAIR&lt;/CODE&gt; symbol, which indicates that the &lt;CODE&gt;BSD&lt;/CODE&gt; 
&lt;CODE&gt;socketpair()&lt;/CODE&gt; is
supported.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_statblks&quot;&gt;d_statblks&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_statblks.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;USE_STAT_BLOCKS&lt;/CODE&gt; if this system has a stat structure declaring st_blksize and st_blocks.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_stdio_cnt_lval&quot;&gt;d_stdio_cnt_lval&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;STDIO_CNT_LVALUE&lt;/CODE&gt; if the
&lt;CODE&gt;FILE_cnt&lt;/CODE&gt; macro can be used as an lvalue.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_stdio_ptr_lval&quot;&gt;d_stdio_ptr_lval&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;STDIO_PTR_LVALUE&lt;/CODE&gt; if the
&lt;CODE&gt;FILE_ptr&lt;/CODE&gt; macro can be used as an lvalue.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_stdiobase&quot;&gt;d_stdiobase&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;USE_STDIO_BASE&lt;/CODE&gt; if this system has a &lt;CODE&gt;FILE&lt;/CODE&gt; structure declaring a usable _base field (or equivalent) in &lt;EM&gt;stdio.h&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_stdstdio&quot;&gt;d_stdstdio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_stdstdio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;USE_STDIO_PTR&lt;/CODE&gt; if this system has a &lt;CODE&gt;FILE&lt;/CODE&gt; structure declaring usable _ptr and _cnt fields (or equivalent) in &lt;EM&gt;stdio.h&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strchr&quot;&gt;d_strchr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strchr.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_STRCHR&lt;/CODE&gt; if 
&lt;CODE&gt;strchr()&lt;/CODE&gt; and 
&lt;CODE&gt;strrchr()&lt;/CODE&gt; are available for string searching.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strcoll&quot;&gt;d_strcoll&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strcoll.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_STRCOLL&lt;/CODE&gt; if 
&lt;CODE&gt;strcoll()&lt;/CODE&gt; is available to
compare strings using collating information.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strctcpy&quot;&gt;d_strctcpy&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strctcpy.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;USE_STRUCT_COPY&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that this 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler knows how to copy structures.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strerrm&quot;&gt;d_strerrm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strerror.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds what Strerrr is defined as to translate an error code
condition into an error message string. It could be &lt;CODE&gt;strerror&lt;/CODE&gt;
or a more &lt;CODE&gt;complex&lt;/CODE&gt; macro emulating strrror with sys_errlist&amp;#091;&amp;#093;, or the
&lt;CODE&gt;unknown&lt;/CODE&gt; string when both strerror and sys_errlist are missing.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strerror&quot;&gt;d_strerror&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strerror.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_STRERROR&lt;/CODE&gt; if 
&lt;CODE&gt;strerror()&lt;/CODE&gt; is available to
translate error numbers to strings.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strtod&quot;&gt;d_strtod&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strtod.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_STRTOD&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;strtod()&lt;/CODE&gt; routine is available to provide better numeric string conversion than 
&lt;CODE&gt;atof().&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strtol&quot;&gt;d_strtol&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strtol.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_STRTOL&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;strtol()&lt;/CODE&gt; routine is available to provide better numeric string conversion than 
&lt;CODE&gt;atoi()&lt;/CODE&gt; and friends.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strtoul&quot;&gt;d_strtoul&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strtoul.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_STRTOUL&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;strtoul()&lt;/CODE&gt; routine is available to provide conversion of strings to unsigned long.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_strxfrm&quot;&gt;d_strxfrm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strxfrm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_STRXFRM&lt;/CODE&gt; if 
&lt;CODE&gt;strxfrm()&lt;/CODE&gt; is available to
transform strings.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_suidsafe&quot;&gt;d_suidsafe&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_dosuid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;SETUID_SCRIPTS_ARE_SECURE_NOW&lt;/CODE&gt;
if setuid scripts can be secure. This test looks in &lt;EM&gt;/dev/fd/&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_symlink&quot;&gt;d_symlink&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_symlink.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SYMLINK&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;symlink()&lt;/CODE&gt; routine is available to create symbolic links.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_syscall&quot;&gt;d_syscall&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_syscall.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SYSCALL&lt;/CODE&gt; if 
&lt;CODE&gt;syscall()&lt;/CODE&gt; is available call
arbitrary system calls.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_sysconf&quot;&gt;d_sysconf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_sysconf.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_SYSCONF&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;sysconf()&lt;/CODE&gt; routine is available to determine system related limits and options.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_sysernlst&quot;&gt;d_sysernlst&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strerror.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SYS_ERRNOLIST&lt;/CODE&gt; if sys_errnolist&amp;#091;&amp;#093; is available to translate error numbers to the symbolic
name.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_syserrlst&quot;&gt;d_syserrlst&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_strerror.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SYS_ERRLIST&lt;/CODE&gt; if sys_errlist&amp;#091;&amp;#093; is available to translate error numbers to strings.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_system&quot;&gt;d_system&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_system.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_SYSTEM&lt;/CODE&gt; if 
&lt;CODE&gt;system()&lt;/CODE&gt; is available to
issue a shell command.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_tcgetpgrp&quot;&gt;d_tcgetpgrp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_tcgtpgrp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_TCGETPGRP&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;tcgetpgrp()&lt;/CODE&gt; routine is available. to get foreground process group
 &lt;CODE&gt;ID&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_tcsetpgrp&quot;&gt;d_tcsetpgrp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_tcstpgrp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_TCSETPGRP&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;tcsetpgrp()&lt;/CODE&gt; routine is available to set foreground process group
 &lt;CODE&gt;ID&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_telldir&quot;&gt;d_telldir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_readdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_TELLDIR&lt;/CODE&gt; if 
&lt;CODE&gt;telldir()&lt;/CODE&gt; is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_time&quot;&gt;d_time&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_time.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_TIME&lt;/CODE&gt; symbol, which indicates that the 
&lt;CODE&gt;time()&lt;/CODE&gt; routine exists. The 
&lt;CODE&gt;time()&lt;/CODE&gt; routine is normaly provided on
 &lt;CODE&gt;UNIX&lt;/CODE&gt; systems.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_times&quot;&gt;d_times&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_times.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_TIMES&lt;/CODE&gt; symbol, which indicates that the 
&lt;CODE&gt;times()&lt;/CODE&gt; routine exists. The 
&lt;CODE&gt;times()&lt;/CODE&gt; routine is normaly provided on
 &lt;CODE&gt;UNIX&lt;/CODE&gt; systems. You may have to include &amp;lt;sys/times.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_truncate&quot;&gt;d_truncate&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_truncate.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_TRUNCATE&lt;/CODE&gt; if 
&lt;CODE&gt;truncate()&lt;/CODE&gt; is available to
truncate files.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_tzname&quot;&gt;d_tzname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_tzname.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_TZNAME&lt;/CODE&gt; if tzname&amp;#091;&amp;#093; is available to access timezone names.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_umask&quot;&gt;d_umask&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_umask.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_UMASK&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;umask()&lt;/CODE&gt; routine is available. to set and get the value of the file creation mask.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_uname&quot;&gt;d_uname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_gethname.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_UNAME&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;uname()&lt;/CODE&gt; routine may be used to derive the host name.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_union_semun&quot;&gt;d_union_semun&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_union_senum.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_UNION_SEMUN&lt;/CODE&gt; if the union semun is defined by including &amp;lt;sys/sem.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_vfork&quot;&gt;d_vfork&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_vfork.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_VFORK&lt;/CODE&gt; symbol, which indicates the 
&lt;CODE&gt;vfork()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_void_closedir&quot;&gt;d_void_closedir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_closedir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;VOID_CLOSEDIR&lt;/CODE&gt; if 
&lt;CODE&gt;closedir()&lt;/CODE&gt; does not return
a value.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_voidsig&quot;&gt;d_voidsig&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_voidsig.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;VOIDSIG&lt;/CODE&gt; if this system declares ``void (*signal(...))()'' in &lt;EM&gt;signal.h&lt;/EM&gt;. The old way was to declare it as ``int (*signal(...))()''.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_voidtty&quot;&gt;d_voidtty&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysioctl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;USE_IOCNOTTY&lt;/CODE&gt; to indicate that the 
&lt;CODE&gt;ioctl()&lt;/CODE&gt; call with &lt;CODE&gt;TIOCNOTTY&lt;/CODE&gt; should be used to void tty association. Otherwise (on &lt;CODE&gt;USG&lt;/CODE&gt; probably), it is enough to close the standard file decriptors and do a 
&lt;CODE&gt;setpgrp().&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_volatile&quot;&gt;d_volatile&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_volatile.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HASVOLATILE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that this 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler knows about the volatile declaration.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_vprintf&quot;&gt;d_vprintf&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_vprintf.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_VPRINTF&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;vprintf()&lt;/CODE&gt; routine is available to printf with a pointer to an argument list.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_wait4&quot;&gt;d_wait4&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_wait4.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the 
&lt;FONT SIZE=-1&gt;HAS_WAIT4&lt;/FONT&gt; symbol, which indicates the 
&lt;CODE&gt;wait4()&lt;/CODE&gt; routine is available.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_waitpid&quot;&gt;d_waitpid&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_waitpid.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;HAS_WAITPID&lt;/CODE&gt; if 
&lt;CODE&gt;waitpid()&lt;/CODE&gt; is available to
wait for child process.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_wcstombs&quot;&gt;d_wcstombs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_wcstombs.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_WCSTOMBS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;wcstombs()&lt;/CODE&gt; routine is available to convert wide character strings to multibyte strings.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_wctomb&quot;&gt;d_wctomb&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_wctomb.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;HAS_WCTOMB&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the 
&lt;CODE&gt;wctomb()&lt;/CODE&gt; routine is available to convert a wide character to a multibyte.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_d_xenix&quot;&gt;d_xenix&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Guess.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the symbol &lt;CODE&gt;XENIX&lt;/CODE&gt;, which alerts the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it runs under Xenix.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_date&quot;&gt;date&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the date program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;date&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_db_hashtype&quot;&gt;db_hashtype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_db.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the type of the hash structure element in the &amp;lt;db.h&amp;gt; header file. In older versions of &lt;CODE&gt;DB&lt;/CODE&gt;, it was int, while in newer ones it is u_int32_t.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_db_prefixtype&quot;&gt;db_prefixtype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_db.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the type of the prefix structure element in the &amp;lt;db.h&amp;gt; header file. In older versions of &lt;CODE&gt;DB&lt;/CODE&gt;, it was int, while in newer ones it is size_t.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_direntrytype&quot;&gt;direntrytype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_dirent.U&lt;/EM&gt;:

&lt;P&gt;
This symbol is set to &lt;CODE&gt;struct direct&lt;/CODE&gt; or &lt;CODE&gt;struct dirent&lt;/CODE&gt; depending on whether dirent is available or not. You should use this pseudo
type to portably declare your directory entries.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_dlext&quot;&gt;dlext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;dlext.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the extension that is to be used for the dynamically
loaded modules that perl generaties.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_dlsrc&quot;&gt;dlsrc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;dlsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the name of the dynamic loading file that will be
used with the package.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_doublesize&quot;&gt;doublesize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;doublesize.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the value of the &lt;CODE&gt;DOUBLESIZE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program how many bytes there are in a double.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_dynamic_ext&quot;&gt;dynamic_ext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Extensions.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds a list of [perlman:perlguts#item_XS|perlguts#item_XS] extension files we want to link dynamically into the package. It is used by
Makefile.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;e&quot;&gt;e&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_eagain&quot;&gt;eagain&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;nblock_io.U&lt;/EM&gt;:

&lt;P&gt;
This variable bears the symbolic errno code set by 
&lt;CODE&gt;read()&lt;/CODE&gt; when no data is present
on the file and non-blocking &lt;EM&gt;I/O&lt;/EM&gt; was enabled (otherwise, 
&lt;CODE&gt;read()&lt;/CODE&gt; blocks naturally).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ebcdic&quot;&gt;ebcdic&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ebcdic.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;EBCDIC&lt;/CODE&gt; if this system uses &lt;CODE&gt;EBCDIC&lt;/CODE&gt; encoding. Among other things, this means that the character ranges are not
contiguous. See &lt;EM&gt;trnl.U&lt;/EM&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_echo&quot;&gt;echo&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the echo program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;echo&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_egrep&quot;&gt;egrep&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the egrep program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;egrep&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_emacs&quot;&gt;emacs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_eunicefix&quot;&gt;eunicefix&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Init.U&lt;/EM&gt;:

&lt;P&gt;
When running under Eunice this variable contains a command which will
convert a shell script to the proper form of text file for it to be
executable by the shell. On other systems it is a no-op.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_exe_ext&quot;&gt;exe_ext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This is an old synonym for _exe.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_expr&quot;&gt;expr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the expr program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;expr&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_extensions&quot;&gt;extensions&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Extensions.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds a list of all extension files (both [perlman:perlguts#item_XS|perlguts#item_XS] and non-xs linked into the package. It is propagated to &lt;EM&gt;Config.pm&lt;/EM&gt;
and is typically used to test whether a particular extesion is available.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;f&quot;&gt;f&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_find&quot;&gt;find&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the find program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;find&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_firstmakefile&quot;&gt;firstmakefile&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines the first file searched by make. On unix, it is
makefile (then Makefile). On case-insensitive systems, it might be
something else. This is only used to deal with convoluted make depend
tricks.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_flex&quot;&gt;flex&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_fpostype&quot;&gt;fpostype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;fpostype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines Fpos_t to be something like fpost_t, long, uint, or
whatever type is used to declare file positions in libc.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_freetype&quot;&gt;freetype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;mallocsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the return type of 
&lt;CODE&gt;free().&lt;/CODE&gt; It is usually void, but
occasionally int.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_full_csh&quot;&gt;full_csh&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_csh.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the full pathname to &lt;CODE&gt;csh&lt;/CODE&gt;, whether or not the user has specified &lt;CODE&gt;portability&lt;/CODE&gt;. This is only used in the compiled 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program, and we assume that all systems which can
share this executable will have the same full pathname to
&lt;EM&gt;csh.&lt;/EM&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_full_sed&quot;&gt;full_sed&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc_sed.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the full pathname to &lt;CODE&gt;sed&lt;/CODE&gt;, whether or not the user has specified &lt;CODE&gt;portability&lt;/CODE&gt;. This is only used in the compiled 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program, and we assume that all systems which can
share this executable will have the same full pathname to
&lt;EM&gt;sed.&lt;/EM&gt;

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;g&quot;&gt;g&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_gccversion&quot;&gt;gccversion&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;cc.U&lt;/EM&gt;:

&lt;P&gt;
If &lt;CODE&gt;GNU&lt;/CODE&gt; cc (gcc) is used, this variable holds &lt;CODE&gt;1&lt;/CODE&gt; or &lt;CODE&gt;2&lt;/CODE&gt; to indicate whether the compiler is version 1 or 2. This is used in setting
some of the default cflags. It is set to '' if not gcc.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_gidtype&quot;&gt;gidtype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;gidtype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines Gid_t to be something like gid_t, int, ushort, or whatever type is used to declare the return type of 
&lt;CODE&gt;getgid().&lt;/CODE&gt; Typically, it is the type of group ids in the kernel.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_grep&quot;&gt;grep&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the grep program. After Configure runs, the value is
reset to a plain [perlfunc:grep|grep] and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_groupcat&quot;&gt;groupcat&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;nis.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a command that produces the text of the
&lt;EM&gt;/etc/group&lt;/EM&gt; file. This is normally ``cat &lt;EM&gt;/etc/group&lt;/EM&gt;'', but can be ``ypcat group'' when &lt;CODE&gt;NIS&lt;/CODE&gt; is used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_groupstype&quot;&gt;groupstype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;groupstype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines Groups_t to be something like gid_t, int, ushort, or whatever type is used for the second argument to 
&lt;CODE&gt;getgroups()&lt;/CODE&gt; and 
&lt;CODE&gt;setgroups().&lt;/CODE&gt; Usually, this is the same as gidtype (gid_t), but sometimes it isn't.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_gzip&quot;&gt;gzip&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the gzip program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;gzip&lt;/CODE&gt; and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;h&quot;&gt;h&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_h_fcntl&quot;&gt;h_fcntl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;h_fcntl.U&lt;/EM&gt;:

&lt;P&gt;
This is variable gets set in various places to tell i_fcntl that
&amp;lt;fcntl.h&amp;gt; should be included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_h_sysfile&quot;&gt;h_sysfile&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;h_sysfile.U&lt;/EM&gt;:

&lt;P&gt;
This is variable gets set in various places to tell i_sys_file that
&amp;lt;sys/file.h&amp;gt; should be included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_hint&quot;&gt;hint&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Oldconfig.U&lt;/EM&gt;:

&lt;P&gt;
Gives the type of hints used for previous answers. May be one of
&lt;CODE&gt;default&lt;/CODE&gt;, &lt;CODE&gt;recommended&lt;/CODE&gt; or &lt;CODE&gt;previous&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_hostcat&quot;&gt;hostcat&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;nis.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a command that produces the text of the
&lt;EM&gt;/etc/hosts&lt;/EM&gt; file. This is normally ``cat &lt;EM&gt;/etc/hosts&lt;/EM&gt;'', but can be ``ypcat hosts'' when &lt;CODE&gt;NIS&lt;/CODE&gt; is used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_huge&quot;&gt;huge&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;models.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a flag which will tell the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler and loader to produce a program running
with a huge memory model. If the huge model is not supported, contains the
flag to produce large model programs. It is up to the Makefile to use this.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;i&quot;&gt;i&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_arpainet&quot;&gt;i_arpainet&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_arpainet.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_ARPA_INET&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;arpa/inet.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_bsdioctl&quot;&gt;i_bsdioctl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysioctl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_BSDIOCTL&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;sys/bsdioctl.h&amp;gt; exists and
should be included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_db&quot;&gt;i_db&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_db.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_DB&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program may include Berkeley's &lt;CODE&gt;DB&lt;/CODE&gt; include file &amp;lt;db.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_dbm&quot;&gt;i_dbm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_dbm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_DBM&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;dbm.h&amp;gt; exists and should be
included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_dirent&quot;&gt;i_dirent&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_dirent.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_DIRENT&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;dirent.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_dld&quot;&gt;i_dld&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_dld.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_DLD&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;dld.h&amp;gt; (&lt;CODE&gt;GNU&lt;/CODE&gt; dynamic loading) exists and should be included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_dlfcn&quot;&gt;i_dlfcn&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_dlfcn.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_DLFCN&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;dlfcn.h&amp;gt; exists and should be
included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_fcntl&quot;&gt;i_fcntl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_fcntl.U&lt;/EM&gt;:

&lt;P&gt;
This variable controls the value of &lt;CODE&gt;I_FCNTL&lt;/CODE&gt; (which tells the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program to include &amp;lt;fcntl.h&amp;gt;).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_float&quot;&gt;i_float&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_float.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_FLOAT&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program may include &amp;lt;float.h&amp;gt; to get symbols like &lt;CODE&gt;DBL_MAX&lt;/CODE&gt;
or &lt;CODE&gt;DBL_MIN&lt;/CODE&gt;, &lt;EM&gt;i.e&lt;/EM&gt;. machine dependent floating point values.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_gdbm&quot;&gt;i_gdbm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_gdbm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_GDBM&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;gdbm.h&amp;gt; exists and should be
included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_grp&quot;&gt;i_grp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_grp.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_GRP&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;grp.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_limits&quot;&gt;i_limits&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_limits.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_LIMITS&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program may include &amp;lt;limits.h&amp;gt; to get symbols like &lt;CODE&gt;WORD_BIT&lt;/CODE&gt;
and friends.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_locale&quot;&gt;i_locale&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_locale.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_LOCALE&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;locale.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_malloc&quot;&gt;i_malloc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_malloc.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_MALLOC&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;malloc.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_math&quot;&gt;i_math&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_math.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_MATH&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program may include &amp;lt;math.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_memory&quot;&gt;i_memory&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_memory.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_MEMORY&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;memory.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_ndbm&quot;&gt;i_ndbm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_ndbm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_NDBM&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;ndbm.h&amp;gt; exists and should be
included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_netdb&quot;&gt;i_netdb&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_netdb.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_NETDB&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;netdb.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_neterrno&quot;&gt;i_neterrno&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_neterrno.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_NET_ERRNO&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;net/errno.h&amp;gt; exists and should
be included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_niin&quot;&gt;i_niin&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_niin.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_NETINET_IN&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;netinet/in.h&amp;gt;.
Otherwise, you may try &amp;lt;sys/in.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_pwd&quot;&gt;i_pwd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_pwd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_PWD&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;pwd.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_rpcsvcdbm&quot;&gt;i_rpcsvcdbm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_dbm.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_RPCSVC_DBM&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;rpcsvc/dbm.h&amp;gt; exists and should be included. Some System 
&lt;FONT SIZE=-1&gt;V&lt;/FONT&gt; systems might need this instead of &amp;lt;dbm.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sfio&quot;&gt;i_sfio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sfio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SFIO&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sfio.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sgtty&quot;&gt;i_sgtty&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_termio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SGTTY&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;sgtty.h&amp;gt;
rather than &amp;lt;termio.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_stdarg&quot;&gt;i_stdarg&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_varhdr.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_STDARG&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;stdarg.h&amp;gt; exists and should be
included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_stddef&quot;&gt;i_stddef&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_stddef.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_STDDEF&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;stddef.h&amp;gt; exists and should be
included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_stdlib&quot;&gt;i_stdlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_stdlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_STDLIB&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;stdlib.h&amp;gt; exists and should be
included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_string&quot;&gt;i_string&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_string.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_STRING&lt;/CODE&gt; symbol, which indicates that &amp;lt;string.h&amp;gt; should be included rather
than &amp;lt;strings.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysdir&quot;&gt;i_sysdir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_DIR&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sys/dir.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysfile&quot;&gt;i_sysfile&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysfile.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_FILE&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sys/file.h&amp;gt; to get &lt;CODE&gt;R_OK&lt;/CODE&gt; and friends.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysfilio&quot;&gt;i_sysfilio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysioctl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_FILIO&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;sys/filio.h&amp;gt; exists and should
be included in preference to &amp;lt;sys/ioctl.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysin&quot;&gt;i_sysin&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_niin.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_SYS_IN&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;sys/in.h&amp;gt;
instead of &amp;lt;netinet/in.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysioctl&quot;&gt;i_sysioctl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysioctl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_IOCTL&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that &amp;lt;sys/ioctl.h&amp;gt; exists and should
be included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysndir&quot;&gt;i_sysndir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysndir.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_NDIR&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sys/ndir.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysparam&quot;&gt;i_sysparam&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysparam.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_PARAM&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sys/param.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysresrc&quot;&gt;i_sysresrc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysresrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_RESOURCE&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sys/resource.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysselct&quot;&gt;i_sysselct&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysselct.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_SYS_SELECT&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;sys/select.h&amp;gt;
in order to get the definition of struct timeval.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_syssockio&quot;&gt;i_syssockio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysioctl.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_SYS_SOCKIO&lt;/CODE&gt; to indicate to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that socket ioctl codes may be found in
&amp;lt;sys/sockio.h&amp;gt; instead of &amp;lt;sys/ioctl.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysstat&quot;&gt;i_sysstat&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysstat.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_STAT&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sys/stat.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_systime&quot;&gt;i_systime&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_time.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_SYS_TIME&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;sys/time.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_systimek&quot;&gt;i_systimek&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_time.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_SYS_TIME_KERNEL&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;sys/time.h&amp;gt; with &lt;CODE&gt;KERNEL&lt;/CODE&gt; defined.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_systimes&quot;&gt;i_systimes&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_systimes.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_TIMES&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sys/times.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_systypes&quot;&gt;i_systypes&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_systypes.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_SYS_TYPES&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;sys/types.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_sysun&quot;&gt;i_sysun&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_sysun.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_SYS_UN&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;sys/un.h&amp;gt; to get &lt;CODE&gt;UNIX&lt;/CODE&gt;
domain socket definitions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_syswait&quot;&gt;i_syswait&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_syswait.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_SYS_WAIT&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;sys/wait.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_termio&quot;&gt;i_termio&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_termio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_TERMIO&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;termio.h&amp;gt;
rather than &amp;lt;sgtty.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_termios&quot;&gt;i_termios&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_termio.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_TERMIOS&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that the &lt;CODE&gt;POSIX&lt;/CODE&gt; &amp;lt;termios.h&amp;gt; file is to be included.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_time&quot;&gt;i_time&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_time.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_TIME&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;time.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_unistd&quot;&gt;i_unistd&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_unistd.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_UNISTD&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;unistd.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_utime&quot;&gt;i_utime&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_utime.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_UTIME&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &amp;lt;utime.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_values&quot;&gt;i_values&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_values.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_VALUES&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program may include &amp;lt;values.h&amp;gt; to get symbols like &lt;CODE&gt;MAXLONG&lt;/CODE&gt;
and friends.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_varargs&quot;&gt;i_varargs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_varhdr.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines &lt;CODE&gt;I_VARARGS&lt;/CODE&gt;, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program that it should include &amp;lt;varargs.h&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_varhdr&quot;&gt;i_varhdr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_varhdr.U&lt;/EM&gt;:

&lt;P&gt;
Contains the name of the header to be included to get va_dcl definition.
Typically one of &lt;EM&gt;varargs.h&lt;/EM&gt; or &lt;EM&gt;stdarg.h&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_i_vfork&quot;&gt;i_vfork&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;i_vfork.U&lt;/EM&gt;:

&lt;P&gt;
This variable conditionally defines the &lt;CODE&gt;I_VFORK&lt;/CODE&gt; symbol, and indicates whether a 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program should include &lt;EM&gt;vfork.h&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_incpath&quot;&gt;incpath&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usrinc.U&lt;/EM&gt;:

&lt;P&gt;
This variable must preceed the normal include path to get hte right one, as
in &lt;EM&gt;$&lt;EM&gt;incpath/usr/include&lt;/EM&gt;&lt;/EM&gt; or &lt;EM&gt;$&lt;EM&gt;incpath/usr/lib&lt;/EM&gt;&lt;/EM&gt;. Value can be ``'' or &lt;EM&gt;/bsd43&lt;/EM&gt; on mips.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_inews&quot;&gt;inews&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_installarchlib&quot;&gt;installarchlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;archlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable is really the same as archlibexp but may differ on those
systems using &lt;CODE&gt;AFS&lt;/CODE&gt;. For extra portability, only this variable should be used in makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_installbin&quot;&gt;installbin&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;bin.U&lt;/EM&gt;:

&lt;P&gt;
This variable is the same as binexp unless &lt;CODE&gt;AFS&lt;/CODE&gt; is running in which case the user is explicitely prompted for it. This
variable should always be used in your makefiles for maximum portability.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_installman1dir&quot;&gt;installman1dir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;man1dir.U&lt;/EM&gt;:

&lt;P&gt;
This variable is really the same as man1direxp, unless you are using
&lt;CODE&gt;AFS&lt;/CODE&gt; in which case it points to the &lt;EM&gt;read/write&lt;/EM&gt; location whereas man1direxp only points to the read-only access location.
For extra portability, you should only use this variable within your
makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_installman3dir&quot;&gt;installman3dir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;man3dir.U&lt;/EM&gt;:

&lt;P&gt;
This variable is really the same as man3direxp, unless you are using
&lt;CODE&gt;AFS&lt;/CODE&gt; in which case it points to the &lt;EM&gt;read/write&lt;/EM&gt; location whereas man3direxp only points to the read-only access location.
For extra portability, you should only use this variable within your
makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_installprivlib&quot;&gt;installprivlib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;privlib.U&lt;/EM&gt;:

&lt;P&gt;
This variable is really the same as privlibexp but may differ on those
systems using &lt;CODE&gt;AFS&lt;/CODE&gt;. For extra portability, only this variable should be used in makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_installscript&quot;&gt;installscript&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;scriptdir.U&lt;/EM&gt;:

&lt;P&gt;
This variable is usually the same as scriptdirexp, unless you are on a
system running &lt;CODE&gt;AFS&lt;/CODE&gt;, in which case they may differ slightly. You should always use this
variable within your makefiles for portability.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_installsitearch&quot;&gt;installsitearch&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sitearch.U&lt;/EM&gt;:

&lt;P&gt;
This variable is really the same as sitearchexp but may differ on those
systems using &lt;CODE&gt;AFS&lt;/CODE&gt;. For extra portability, only this variable should be used in makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_installsitelib&quot;&gt;installsitelib&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;sitelib.U&lt;/EM&gt;:

&lt;P&gt;
This variable is really the same as sitelibexp but may differ on those
systems using &lt;CODE&gt;AFS&lt;/CODE&gt;. For extra portability, only this variable should be used in makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_intsize&quot;&gt;intsize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;intsize.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the value of the &lt;CODE&gt;INTSIZE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program how many bytes there are in an int.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;k&quot;&gt;k&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_known_extensions&quot;&gt;known_extensions&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Extensions.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds a list of all [perlman:perlguts#item_XS|perlguts#item_XS] extensions included in the package.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ksh&quot;&gt;ksh&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;l&quot;&gt;l&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_large&quot;&gt;large&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;models.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a flag which will tell the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler and loader to produce a program running
with a large memory model. It is up to the Makefile to use this.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ld&quot;&gt;ld&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;dlsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable indicates the program to be used to link libraries for
dynamic loading. On some systems, it is &lt;CODE&gt;ld&lt;/CODE&gt;. On &lt;CODE&gt;ELF&lt;/CODE&gt; systems, it should be $cc. Mostly, we'll try to respect the hint file
setting.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lddlflags&quot;&gt;lddlflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;dlsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains any special flags that might need to be passed to
&lt;CODE&gt;$ld&lt;/CODE&gt; to create a shared library suitable for dynamic loading.
It is up to the makefile to use it. For hpux, it should be &lt;CODE&gt;-b&lt;/CODE&gt;. For sunos 4.1, it is empty.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ldflags&quot;&gt;ldflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ccflags.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains any additional 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; loader flags desired by the user. It is up to the
Makefile to use this.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_less&quot;&gt;less&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the less program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;less&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lib_ext&quot;&gt;lib_ext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Unix.U&lt;/EM&gt;:

&lt;P&gt;
This is an old synonym for _a.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_libc&quot;&gt;libc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;libc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the location of the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; library.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_libperl&quot;&gt;libperl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;libperl.U&lt;/EM&gt;:

&lt;P&gt;
The perl executable is obtained by linking &lt;EM&gt;perlmain.c&lt;/EM&gt; with libperl, any static extensions (usually just DynaLoader), and any
other libraries needed on this system. libperl is usually &lt;EM&gt;libperl.a&lt;/EM&gt;, but can also be &lt;EM&gt;libperl.so.xxx&lt;/EM&gt; if the user wishes to build a perl executable with a shared library.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_libpth&quot;&gt;libpth&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;libpth.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the general path used to find libraries. It is intended
to be used by other units.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_libs&quot;&gt;libs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;libs.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the additional libraries we want to use. It is up to
the Makefile to deal with it.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_libswanted&quot;&gt;libswanted&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Myinit.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds a list of all the libraries we want to search. The order is chosen to pick up the c library ahead of ucb or bsd libraries for 
&lt;FONT SIZE=-1&gt;SVR4.&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_line&quot;&gt;line&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the line program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;line&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lint&quot;&gt;lint&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lkflags&quot;&gt;lkflags&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ccflags.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains any additional 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; partial linker flags desired by the user. It is up
to the Makefile to use this.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ln&quot;&gt;ln&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the ln program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;ln&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lns&quot;&gt;lns&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;lns.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the name of the command to make symbolic links (if they
are supported). It can be used in the Makefile. It is either &lt;CODE&gt;ln -s&lt;/CODE&gt; or &lt;CODE&gt;ln&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_locincpth&quot;&gt;locincpth&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;ccflags.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a list of additional directories to be searched by
the compiler. The appropriate &lt;CODE&gt;-I&lt;/CODE&gt; directives will be added to ccflags. This is intended to simplify setting
local directories from the Configure command line. It's not much, but it
parallels the loclibpth stuff in &lt;EM&gt;libpth.U&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_loclibpth&quot;&gt;loclibpth&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;libpth.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the paths used to find local libraries. It is prepended
to libpth, and is intended to be easily set from the command line.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_longdblsize&quot;&gt;longdblsize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_longdbl.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the value of the &lt;CODE&gt;LONG_DOUBLESIZE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program how many bytes there are in a long double,
if this system supports long doubles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_longlongsize&quot;&gt;longlongsize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;d_longlong.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the value of the &lt;CODE&gt;LONGLONGSIZE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program how many bytes there are in a long long, if
this system supports long long.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_longsize&quot;&gt;longsize&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;intsize.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the value of the &lt;CODE&gt;LONGSIZE&lt;/CODE&gt; symbol, which indicates to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; program how many bytes there are in a long.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lp&quot;&gt;lp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lpr&quot;&gt;lpr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ls&quot;&gt;ls&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the ls program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;ls&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_lseektype&quot;&gt;lseektype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;lseektype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines lseektype to be something like off_t, long, or
whatever type is used to declare lseek offset's type in the kernel (which
also appears to be lseek's return type).

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;m&quot;&gt;m&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_mail&quot;&gt;mail&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_mailx&quot;&gt;mailx&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_make&quot;&gt;make&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the make program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;make&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_make_set_make&quot;&gt;make_set_make&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;make.U&lt;/EM&gt;:

&lt;P&gt;
Some versions of &lt;CODE&gt;make&lt;/CODE&gt; set the variable &lt;CODE&gt;MAKE&lt;/CODE&gt;. Others do not. This variable contains the string to be included in &lt;EM&gt;Makefile.SH&lt;/EM&gt;
so that &lt;CODE&gt;MAKE&lt;/CODE&gt; is set if needed, and not if not needed. Possible values are:
make_set_make=&lt;CODE&gt;#&lt;/CODE&gt;		# If your make program handles this for you, make_set_make=&lt;CODE&gt;MAKE=$make&lt;/CODE&gt;	# if it doesn't. 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; used a comment character so that we can distinguish
a
&lt;CODE&gt;set&lt;/CODE&gt; value (from a previous &lt;EM&gt;config.sh&lt;/EM&gt; or Configure &lt;CODE&gt;-D&lt;/CODE&gt; option) from an uncomputed value.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_mallocobj&quot;&gt;mallocobj&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;mallocsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the name of the &lt;EM&gt;malloc.o&lt;/EM&gt; that this package generates, if that &lt;EM&gt;malloc.o&lt;/EM&gt; is preferred over the system malloc. Otherwise the value is null. This
variable is intended for generating Makefiles. See mallocsrc.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_mallocsrc&quot;&gt;mallocsrc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;mallocsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the name of the &lt;EM&gt;malloc.c&lt;/EM&gt; that comes with the package, if that &lt;EM&gt;malloc.c&lt;/EM&gt; is preferred over the system malloc. Otherwise the value is null. This
variable is intended for generating Makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_malloctype&quot;&gt;malloctype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;mallocsrc.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the kind of ptr returned by malloc and realloc.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_man1dir&quot;&gt;man1dir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;man1dir.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the name of the directory in which manual source
pages are to be put. It is the responsibility of the
&lt;EM&gt;Makefile.SH&lt;/EM&gt; to get the value of this into the proper command. You must be prepared to
do the &lt;EM&gt;~name&lt;/EM&gt; expansion yourself.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_man1direxp&quot;&gt;man1direxp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;man1dir.U&lt;/EM&gt;:

&lt;P&gt;
This variable is the same as the man1dir variable, but is filename expanded
at configuration time, for convenient use in makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_man1ext&quot;&gt;man1ext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;man1dir.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the extension that the manual page should have: one
of &lt;CODE&gt;n&lt;/CODE&gt;, &lt;CODE&gt;l&lt;/CODE&gt;, or &lt;CODE&gt;1&lt;/CODE&gt;. The Makefile must supply the &lt;EM&gt;.&lt;/EM&gt;. See man1dir.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_man3dir&quot;&gt;man3dir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;man3dir.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the name of the directory in which manual source
pages are to be put. It is the responsibility of the
&lt;EM&gt;Makefile.SH&lt;/EM&gt; to get the value of this into the proper command. You must be prepared to
do the &lt;EM&gt;~name&lt;/EM&gt; expansion yourself.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_man3direxp&quot;&gt;man3direxp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;man3dir.U&lt;/EM&gt;:

&lt;P&gt;
This variable is the same as the man3dir variable, but is filename expanded
at configuration time, for convenient use in makefiles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_man3ext&quot;&gt;man3ext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;man3dir.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the extension that the manual page should have: one
of &lt;CODE&gt;n&lt;/CODE&gt;, &lt;CODE&gt;l&lt;/CODE&gt;, or &lt;CODE&gt;3&lt;/CODE&gt;. The Makefile must supply the &lt;EM&gt;.&lt;/EM&gt;. See man3dir.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_medium&quot;&gt;medium&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;models.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains a flag which will tell the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler and loader to produce a program running
with a medium memory model. If the medium model is not supported, contains
the flag to produce large model programs. It is up to the Makefile to use
this.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_mips_type&quot;&gt;mips_type&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usrinc.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the environment type for the mips system. Possible values are 
&lt;FONT SIZE=-1&gt;``BSD&lt;/FONT&gt; 4.3'' and ``System 
&lt;FONT SIZE=-1&gt;V''.&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_mkdir&quot;&gt;mkdir&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the mkdir program. After Configure runs, the value is
reset to a plain [perlfunc:mkdir|mkdir] and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_models&quot;&gt;models&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;models.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the list of memory models supported by this system.
Possible component values are none, split, unsplit, small, medium, large,
and huge. The component values are space separated.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_modetype&quot;&gt;modetype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;modetype.U&lt;/EM&gt;:

&lt;P&gt;
This variable defines modetype to be something like mode_t, int, unsigned
short, or whatever type is used to declare file modes for system calls.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_more&quot;&gt;more&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the more program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;more&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_mv&quot;&gt;mv&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is defined but not used by Configure. The value is a plain ''
and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_myarchname&quot;&gt;myarchname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;archname.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the architecture name computed by Configure in a
previous run. It is not intended to be perused by any user and should never
be set in a hint file.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_mydomain&quot;&gt;mydomain&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;myhostname.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;MYDOMAIN&lt;/CODE&gt; symbol, which is the domain of the host the program is going to run on. The
domain must be appended to myhostname to form a complete host name. The dot
comes with mydomain, and need not be supplied by the program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_myhostname&quot;&gt;myhostname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;myhostname.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the eventual value of the &lt;CODE&gt;MYHOSTNAME&lt;/CODE&gt; symbol, which is the name of the host the program is going to run on. The
domain is not kept with hostname, but must be gotten from mydomain. The dot
comes with mydomain, and need not be supplied by the program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_myuname&quot;&gt;myuname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Oldconfig.U&lt;/EM&gt;:

&lt;P&gt;
The output of &lt;CODE&gt;uname -a&lt;/CODE&gt; if available, otherwise the hostname. On Xenix, pseudo variables
assignments in the output are stripped, thank you. The whole thing is then
lower-cased.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;n&quot;&gt;n&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_n&quot;&gt;n&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;n.U&lt;/EM&gt;:

&lt;P&gt;
This variable contains the &lt;CODE&gt;-n&lt;/CODE&gt; flag if that is what causes the echo command to suppress newline. Otherwise
it is null. Correct usage is

&lt;P&gt;
&lt;PRE&gt;        $echo $n &amp;quot;prompt for a question: $c&amp;quot;.
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_netdb_hlen_type&quot;&gt;netdb_hlen_type&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;netdbtype.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the type used for the 2nd argument to 
&lt;CODE&gt;gethostbyaddr().&lt;/CODE&gt; Usually, this is int or size_t or unsigned. This is only useful if you have 
&lt;CODE&gt;gethostbyaddr(),&lt;/CODE&gt; naturally.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_netdb_host_type&quot;&gt;netdb_host_type&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;netdbtype.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the type used for the 1st argument to 
&lt;CODE&gt;gethostbyaddr().&lt;/CODE&gt; Usually, this is char * or void *, possibly with or without a const prefix. This is only useful if you have 
&lt;CODE&gt;gethostbyaddr(),&lt;/CODE&gt; naturally.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_netdb_name_type&quot;&gt;netdb_name_type&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;netdbtype.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the type used for the argument to 
&lt;CODE&gt;gethostbyname().&lt;/CODE&gt; Usually, this is char * or const char *. This is only useful if you have 
&lt;CODE&gt;gethostbyname(),&lt;/CODE&gt; naturally.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_netdb_net_type&quot;&gt;netdb_net_type&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;netdbtype.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the type used for the 1st argument to 
&lt;CODE&gt;getnetbyaddr().&lt;/CODE&gt; Usually, this is int or long. This is only useful if you have 
&lt;CODE&gt;getnetbyaddr(),&lt;/CODE&gt; naturally.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_nm&quot;&gt;nm&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the nm program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;nm&lt;/CODE&gt; and is not useful.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_nm_opt&quot;&gt;nm_opt&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usenm.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the options that may be necessary for nm.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_nm_so_opt&quot;&gt;nm_so_opt&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;usenm.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds the options that may be necessary for nm to work on a
shared library but that can not be used on an archive library. Currently,
this is only used by Linux, where nm --dynamic is *required* to get symbols
from an &lt;CODE&gt;ELF&lt;/CODE&gt; library which has been stripped, but nm --dynamic is *fatal* on an archive
library. Maybe Linux should just always set usenm=false.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_nonxs_ext&quot;&gt;nonxs_ext&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Extensions.U&lt;/EM&gt;:

&lt;P&gt;
This variable holds a list of all non-xs extensions included in the
package. All of them will be built.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_nroff&quot;&gt;nroff&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
From &lt;EM&gt;Loc.U&lt;/EM&gt;:

&lt;P&gt;
This variable is be used internally by Configure to determine the full
pathname (if any) of the nroff program. After Configure runs, the value is
reset to a plain &lt;CODE&gt;nroff&lt;/CODE&gt; and is not useful.

&lt;/DL&gt;
&lt;P&gt;
&lt;BR&gt;[perlman:lib:Config:3|Continue to the rest of this document]
 </doctext>
  <type_nodetype>116</type_nodetype>
  <node_id>1313</node_id>
  <author_user>113</author_user>
  <title>perlman:lib:Config:2</title>
  <createtime>1999-12-22 21:50:39</createtime>
  <nodeupdated>2005-06-27 10:10:51</nodeupdated>
</node>
