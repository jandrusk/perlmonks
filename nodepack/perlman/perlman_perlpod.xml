<node>
  <doctext>&lt;HR&gt;
&lt;P&gt;
&lt;H1&gt;&lt;A NAME=&quot;NAME&quot;&gt;NAME&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
perlpod - plain old documentation

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;DESCRIPTION&quot;&gt;DESCRIPTION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; pod-to-whatever translator reads a pod file
paragraph by paragraph, and translates it to the appropriate output format.
There are three kinds of paragraphs:
&lt;A HREF=&quot;#Verbatim_Paragraph&quot;&gt;verbatim&lt;/A&gt;,
&lt;A HREF=&quot;#Command_Paragraph&quot;&gt;command&lt;/A&gt;, and
&lt;A HREF=&quot;#Ordinary_Block_of_Text&quot;&gt;ordinary text&lt;/A&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Verbatim_Paragraph&quot;&gt;Verbatim Paragraph&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; verbatim paragraph, distinguished by being indented (that is, it starts with space or tab). It should be reproduced exactly, with tabs assumed to be on 8-column boundaries. There are no special formatting escapes, so you can't italicize or anything like that. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; \ means \, and nothing else.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Command_Paragraph&quot;&gt;Command Paragraph&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
All command paragraphs start with ``='', followed by an identifier,
followed by arbitrary text that the command can use however it pleases.
Currently recognized commands are

&lt;P&gt;
&lt;PRE&gt;    =head1 heading
    =head2 heading
    =item text
    =over N
    =back
    =cut
    =pod
    =for X
    =begin X
    =end X
&lt;/PRE&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__pod&quot;&gt;=pod&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__cut&quot;&gt;=cut&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The ``=pod'' directive does nothing beyond telling the compiler to lay off
parsing code through the next ``=cut''. It's useful for adding another
paragraph to the doc if you're mixing up code and pod a lot.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__head1&quot;&gt;=head1&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__head2&quot;&gt;=head2&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Head1 and head2 produce first and second level headings, with the text in
the same paragraph as the ``=headn'' directive forming the heading
description.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__over&quot;&gt;=over&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__back&quot;&gt;=back&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__item&quot;&gt;=item&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Item, over, and back require a little more explanation: ``=over'' starts a
section specifically for the generation of a list using ``=item'' commands.
At the end of your list, use ``=back'' to end it. You will probably want to
give ``4'' as the number to ``=over'', as some formatters will use this for
indentation. This should probably be a default. Note also that there are
some basic rules to using =item: don't use them outside of an =over/=back
block, use at least one inside an =over/=back block, you don't _have_ to
include the =back if the list just runs off the document, and perhaps most
importantly, keep the items consistent: either use ``=item *'' for all of
them, to produce bullets, or use ``=item 1.'', ``=item 2.'', etc., to
produce numbered lists, or use ``=item foo'', ``=item bar'', etc., i.e.,
things that looks nothing like bullets or numbers. If you start with
bullets or numbers, stick with them, as many formatters use the first
``=item'' type to decide how to format the list.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__for&quot;&gt;=for&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__begin&quot;&gt;=begin&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__end&quot;&gt;=end&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
For, begin, and end let you include sections that are not interpreted as pod text, but passed directly to particular formatters. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; formatter that can utilize that format will use the section, otherwise it will be completely ignored. The directive ``=for'' specifies that the entire next paragraph is in the format indicated by the first word after ``=for'', like this:

&lt;P&gt;
&lt;PRE&gt; =for html &amp;lt;br&amp;gt;
  &amp;lt;p&amp;gt; This is a raw HTML paragraph &amp;lt;/p&amp;gt;
&lt;/PRE&gt;
&lt;P&gt;
The paired commands ``=begin'' and ``=end'' work very similarly to
``=for'', but instead of only accepting a single paragraph, all text from
``=begin'' to a paragraph with a matching ``=end'' are treated as a
particular format.

&lt;P&gt;
Here are some examples of how to use these:

&lt;P&gt;
&lt;PRE&gt; =begin html
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; &amp;lt;br&amp;gt;Figure 1.&amp;lt;IMG SRC=&amp;quot;figure1.png&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =end html
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =begin text
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   ---------------
   |  foo        |
   |        bar  |
   ---------------
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; ^^^^ Figure 1. ^^^^
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =end text
&lt;/PRE&gt;
&lt;P&gt;
Some format names that formatters currently are known to accept include
``roff'', ``man'', ``latex'', ``tex'', ``text'', and ``html''. (Some
formatters will treat some of these as synonyms.)

&lt;P&gt;
And don't forget, when using any command, that the command lasts up until
the end of the &lt;STRONG&gt;paragraph&lt;/STRONG&gt;, not the line. Hence in the examples below, you can see the empty lines
after each command to end its paragraph.

&lt;P&gt;
Some examples of lists include:

&lt;P&gt;
&lt;PRE&gt; =over 4
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =item *
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; First item
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =item *
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; Second item
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =back
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =over 4
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =item Foo()
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; Description of Foo function
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =item Bar()
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; Description of Bar function
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt; =back
&lt;/PRE&gt;
&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Ordinary_Block_of_Text&quot;&gt;Ordinary Block of Text&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
It will be filled, and maybe even justified. Certain interior sequences are
recognized both here and in commands:

&lt;P&gt;
&lt;PRE&gt;    I&amp;lt;text&amp;gt;     italicize text, used for emphasis or variables
    B&amp;lt;text&amp;gt;     embolden text, used for switches and programs
    S&amp;lt;text&amp;gt;     text contains non-breaking spaces
    C&amp;lt;code&amp;gt;     literal code
    L&amp;lt;name&amp;gt;     A link (cross reference) to name
                    L&amp;lt;name&amp;gt;             manual page
                    L&amp;lt;name/ident&amp;gt;       item in manual page
                    L&amp;lt;name/&amp;quot;sec&amp;quot;&amp;gt;       section in other manual page
                    L&amp;lt;&amp;quot;sec&amp;quot;&amp;gt;            section in this manual page
                                        (the quotes are optional)
                    L&amp;lt;/&amp;quot;sec&amp;quot;&amp;gt;           ditto
                same as above but only 'text' is used for output.
                (Text can not contain the characters '|' or '&amp;gt;')
                    L&amp;lt;text|name&amp;gt;
                    L&amp;lt;text|name/ident&amp;gt;
                    L&amp;lt;text|name/&amp;quot;sec&amp;quot;&amp;gt;
                    L&amp;lt;text|&amp;quot;sec&amp;quot;&amp;gt;
                    L&amp;lt;text|/&amp;quot;sec&amp;quot;&amp;gt;
                
    F&amp;lt;file&amp;gt;     Used for filenames
    X&amp;lt;index&amp;gt;    An index entry
    Z&amp;lt;&amp;gt;         A zero-width character
    &amp;escape;   A named character (very similar to HTML escapes)
                    &amp;lt;               A literal &amp;lt;
                    &amp;gt;               A literal &amp;gt;
                    (these are optional except in other interior
                     sequences and when preceded by a capital letter)
                    &amp;n;                Character number n (probably in ASCII)
                    &amp;html;             Some non-numeric HTML entity, such
                                        as &amp;Agrave;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;The_Intent&quot;&gt;The Intent&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
That's it. The intent is simplicity, not power. 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; wanted paragraphs to look like paragraphs (block format), so that they stand out visually, and so that 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; could run them through fmt easily to reformat them (that's 
&lt;FONT SIZE=-1&gt;F7&lt;/FONT&gt; in my version of
 &lt;STRONG&gt;vi&lt;/STRONG&gt;). 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; wanted the translator (and not me) to worry about whether `` or ' is a left quote or a right quote within filled text, and 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; wanted it to leave the quotes alone, dammit, in verbatim mode, so 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; could slurp in a working program, shift it over 4 spaces, and have it print out, er, verbatim. And presumably in a constant width font.

&lt;P&gt;
In particular, you can leave things like this verbatim in your text:

&lt;P&gt;
&lt;PRE&gt;    Perl
    FILEHANDLE
    $variable
    function()
    manpage(3r)
&lt;/PRE&gt;
&lt;P&gt;
Doubtless a few other commands or sequences will need to be added along the
way, but I've gotten along surprisingly well with just these.

&lt;P&gt;
Note that I'm not at all claiming this to be sufficient for producing a
book. I'm just trying to make an idiot-proof common source for nroff, TeX,
and other markup languages, as used for online documentation. Translators
exist for &lt;STRONG&gt;pod2man&lt;/STRONG&gt;  (that's for 
&lt;CODE&gt;nroff(1)&lt;/CODE&gt; and 
&lt;CODE&gt;troff(1)),&lt;/CODE&gt;

&lt;STRONG&gt;pod2text&lt;/STRONG&gt;, &lt;STRONG&gt;pod2html&lt;/STRONG&gt;, &lt;STRONG&gt;pod2latex&lt;/STRONG&gt;, and &lt;STRONG&gt;pod2fm&lt;/STRONG&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Embedding_Pods_in_Perl_Modules&quot;&gt;Embedding Pods in Perl Modules&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
You can embed pod documentation in your Perl scripts. Start your documentation with a ``=head1'' command at the beginning, and end it with a ``=cut'' command. Perl will ignore the pod text. See any of the supplied library modules for examples. If you're going to put your pods at the end of the file, and you're using an 
&lt;FONT SIZE=-1&gt;__END__&lt;/FONT&gt; or 
&lt;FONT SIZE=-1&gt;__DATA__&lt;/FONT&gt; cut mark, make sure to put an empty line there before the first pod directive.

&lt;P&gt;
&lt;PRE&gt;    __END__
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    =head1 NAME
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    modern - I am a modern module
&lt;/PRE&gt;
&lt;P&gt;
If you had not had that empty line there, then the translators wouldn't
have seen it.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Common_Pod_Pitfalls&quot;&gt;Common Pod Pitfalls&lt;/A&gt;&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;
Pod translators usually will require paragraphs to be separated by
completely empty lines. If you have an apparently empty line with some
spaces on it, this can cause odd formatting.

&lt;P&gt;&lt;LI&gt;

Translators will mostly add wording around a 
&lt;FONT SIZE=-1&gt;L&amp;lt;&amp;gt;&lt;/FONT&gt; link, so that
&lt;CODE&gt;L&amp;lt;foo(1)&amp;gt;&lt;/CODE&gt; becomes ``the &lt;EM&gt;foo&lt;/EM&gt;(1) manpage'', for example (see
&lt;STRONG&gt;pod2man&lt;/STRONG&gt; for details). Thus, you shouldn't write things like &lt;CODE&gt;the
L&amp;lt;foo&amp;gt; manpage&lt;/CODE&gt;, if you want the translated document to read sensibly.

&lt;P&gt;
If you don need or want total control of the text used for a link in the
output use the form L&amp;lt;show this text|foo&amp;gt; instead.

&lt;P&gt;&lt;LI&gt;

The script &lt;EM&gt;pod/checkpods.PL&lt;/EM&gt; in the Perl source distribution provides skeletal checking for lines that
look empty but aren't
&lt;STRONG&gt;only&lt;/STRONG&gt;, but is there as a placeholder until someone writes Pod::Checker. The best
way to check your pod is to pass it through one or more translators and
proofread the result, or print out the result and proofread that. Some of
the problems found may be bugs in the translators, which you may or may not
wish to work around.

&lt;/UL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;U&gt;the pod2man manpage&lt;/U&gt;&lt;!--../utils/pod2man.html--&gt; and [perlman:perlsyn]

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Larry Wall

&lt;HR&gt;
&lt;BR&gt;Return to the [Library]&lt;BR&gt;</doctext>
  <type_nodetype>116</type_nodetype>
  <node_id>385</node_id>
  <author_user>114</author_user>
  <title>perlman:perlpod</title>
  <createtime>1999-08-25 02:21:29</createtime>
  <nodeupdated>2005-08-14 14:04:31</nodeupdated>
</node>
