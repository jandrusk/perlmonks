<node>
  <doctext>=pod

is_constant($sub_name) - returns true if subroutine is a 
constant, false if not.  $sub_name must be the fully 
qualified name (Package::name) of a subroutine.

=cut

sub is_constant {
    no strict 'refs';
    my $name = shift;
    my $code = *{$name}{CODE};

    # must have any empty prototype to be a constant
    my $proto = prototype($code);
    return 0 if defined $proto and length $proto;

    # attempt to redefine to itself - this will cause a 
    # warning for a real constant that starts with &quot;Constant&quot;
    my $is_const;
    {
        local $SIG{__WARN__} = sub { $is_const = 1 if $_[0] =~ /^Constant/ };
        eval { *{$name} = sub () { &quot;TEST&quot; } };
    }
        
    # set it back
    {
        no warnings;
        eval { *{$name} = $code; };
    }

    # all done
    return $is_const;
}
</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>167684</node_id>
  <author_user>159343</author_user>
  <title>is_constant() - a routine that detects constant subs</title>
  <createtime>2002-05-19 14:23:08</createtime>
  <nodeupdated>2005-07-21 01:31:35</nodeupdated>
</node>
