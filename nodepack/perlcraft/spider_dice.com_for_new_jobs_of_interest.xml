<node>
  <doctext>*** BREAKAGE! On 9/16/02, dice.com changed their search and result format,
*** breaking this script. I'll post a fix once I've reverse-engineered
*** their new format.

#!/usr/bin/perl -w

# newdice -- What's new on dice.com
#
# Spider dice.com looking for new job postings of interest, and
# emit a single HTML page with all results. &quot;New&quot; is complicated
# by  recruiters who withdraw/repost a job description daily, so
# that it appears at the top of the list. To avoid this, we keep
# keep md5 hashes of the job descriptions we've already seen.
#
# To avoid having to work through jobs that are uninteresting,
# we exclude any post that contains an &quot;ignore&quot; term.
#
# N.B. To adapt this for your use, you'll need to reverse engineer
# the dice.com search form that you care about, and update
# $searchform below. You'll also need to carefully examine __DATA__
# to remove terms that might interest you. Run this once, examine
# the results, and amend __DATA__ as needed.
#
# This is all rather brute force, but it's &quot;good enough&quot; for
# my needs. If you improve it, please send me a copy (or diffs).
#
# Dave W. Smith &lt;dws@postcognitive.com&gt;
my $VERSION = &quot;0.2 06 Sep 2002&quot;;

use strict;

use HTTP::Request::Common qw(GET POST);
use HTTP::Cookies;
use LWP::UserAgent;
use Digest::MD5 qw(md5_hex);

my $cachefile = &quot;dice.cache&quot;;

my $search = &quot;http://jobsearch.dice.com/jobsearch/jobsearch.cgi&quot;;
my $searchform = [
    iquery =&gt; &quot;#or(#1(AREA 209) #1(AREA 369) #1(AREA 408)&quot; 
            . &quot; #1(AREA 415) #1(AREA 510) #1(AREA 650) #1(AREA 707)&quot;
            . &quot; #1(AREA 831) #1(AREA 925) #1(AREA 559))&quot;,
    banner =&gt; 1,
    query =&gt; &quot;&quot;,
    method =&gt; &quot;and&quot;,
    acode =&gt; 408, acode =&gt; 510, acode =&gt; 650,
    taxterm =&gt; &quot;&quot;,
    daysback =&gt; -f $cachefile ? 2 : 10,
    num_per_page =&gt; 50,
    num_to_retrieve =&gt; 2000
];


# Set up the ignore regexp. (There are faster ways, but this works.)

my @ignore;
while ( &lt;DATA&gt; ) {
    chomp;
    s/^\s+//; s/\s+$//;
    next if /^(?:;|$)/;
    push @ignore, $_;
}
my $ignore = join('|', @ignore);

# Set up a hash of md5s of the descriptions we've already seen.

my %seen;
open(IN, &quot;&lt;&quot;, $cachefile) and do {
    while ( &lt;IN&gt; ) {
        chomp;
        $seen{$_}++;		
    }
    close(IN);
};

my $ua = new LWP::UserAgent();
$ua-&gt;agent(&quot;Mozilla/4.0 (compatible; MSIE 5.01; Windows 98&quot;);

# Submit a search form. We exepct to get a 302 response with a Location:
# for the real search results.

my $req = POST $search, $searchform;
my $response = $ua-&gt;request($req);
my $resultpage = $response-&gt;headers()-&gt;header(&quot;location&quot;);

my %jobByUrl;
my %jobTitleByUrl;

$|++; print &quot;&lt;!-- &quot;; #DEBUG

# Get the first search result page

$req = GET $resultpage;
$response = $ua-&gt;request($req);

while ( 1 ) {
    last if not $response-&gt;is_success();

    print &quot;.&quot;;   #DEBUG

    my $body = $response-&gt;as_string();
    foreach my $line ( split &quot;\n&quot;, $body ) {

        if ( $line =~ m#^Position.*?href=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;(.*)# ) {
            my($url,$title,$description) = ($1,$2,$3);

            # Skip stuff we don't care about
            next if $title =~ /\b(?:$ignore)\b/io;

            # Skip stuff we've already seen
            my $md5 = md5_hex($description);
            next if defined $seen{$md5};
            $seen{$md5}++;

            $jobByUrl{$url} = $line;
            $jobTitleByUrl{$url} = $title;
        }
    }

    # If there's a next page, get it. Otherwise we're done.
    last if $body !~ /href=&quot;([^&quot;]+)&quot;&gt;Show next/;

    $req = GET $1;
    sleep(2);  # Don't hammer the server
    $response = $ua-&gt;request($req);
}

print &quot;--&gt;\n&quot;; #DEBUG

print &lt;&lt;&quot;&quot;;
&lt;!doctype html public &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;New jobs of interest on dice.com&lt;/title&gt;&lt;/head&gt;
&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;#000000&quot;
      link=&quot;#FF0000&quot; vlink=&quot;#990000&quot; alink=&quot;#FF0000&quot;&gt;

print &quot;No new jobs of interest\n&quot; if 0 == keys %jobByUrl;

# Sorting by URL groups recruiters together, which tends to group like
# jobs together. YMMV.

foreach my $url ( sort keys %jobByUrl ) {
    print $jobByUrl{$url}, &quot;\n&quot;;
}

print &lt;&lt;&quot;&quot;;
&lt;/body&gt;
&lt;/html&gt;

# Update the &quot;seen&quot; cache
open(OUT, &quot;&gt;&quot;, $cachefile) and do {
    print OUT &quot;$_\n&quot; foreach ( keys %seen );
    close(OUT);
}


__DATA__
; Exclusion patterns. Any job title that contains any of these terms gets
; ignored, so take care not to add stuff that'll give you false negatives.

; ignore various uninteresting jobs

sales
underwriter
tester
qc
administrator
technician
biologist
chemist
accounting
accountant
account
accounts
business development
acount
acounts
acounting
payroll

; ... etc. my complete list elided in the interest of space
</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>195744</node_id>
  <author_user>22308</author_user>
  <title>Spider dice.com for new jobs of interest</title>
  <createtime>2002-09-06 15:10:01</createtime>
  <nodeupdated>2004-10-10 05:31:46</nodeupdated>
</node>
