<node>
  <doctext>#!/usr/bin/perl

# This is the first game I write in Perl!.
# The classic Tic-Tac-Toe
# What you think about it?

print &quot;+---------------------------------------+\n&quot;;
print &quot;| Names :                               |\n&quot;;
print &quot;+---------------------------------------+\n&quot;;
print &quot;| Player #1 : &quot;;chomp($pl1 = &lt;STDIN&gt;);
print &quot;| Player #2 : &quot;;chomp($pl2 = &lt;STDIN&gt;);
print &quot;\n\n&quot;;

@. = (&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;);
$,=0;$_=$pl1;@s=(&quot;O&quot;,&quot;X&quot;);$S=&quot;O&quot;;$count= 0;

GAME: until ($, == 1)
        {
        verify();
        write;
        $count++;
        print &quot;$_($S) It's your turn! : &quot;;chomp($q=&lt;STDIN&gt;);

        if ($q eq &quot;bye&quot;) { print &quot;See you!\n&quot;; last GAME; }        
        elsif ($q &gt;= 10) { $count--; print &quot;$_ You lose your turn cause $q is too high!\n&quot;; }
        elsif ($q &lt;= 0) { $count--; print &quot;$_ You lose your turn cause $q is too low!\n&quot;; }
        else 
                {
                if ($.[$q] eq $s[0]) { print &quot;There is already an $s[0] in that place!\n&quot;; }
                elsif ($.[$q] eq $s[1]) { print &quot;There is already a $s[1] in that place!\n&quot;; }
                else { $.[$q] = $S; print &quot;$_ you made it putting a $S in the place $q\n&quot;; }
                }

        verify();
        if ($_ eq $pl1) { $_ = $pl2; $S = $s[1] }
        elsif ($_ eq $pl2) { $_ = $pl1; $S = $s[0] }
        else { print &quot;Something Went Wrong&quot;; last GAME; }       
        }

sub verify {
        if ($.[1] eq $S &amp;&amp; $.[2] eq $S &amp;&amp; $.[3] eq $S){print &quot;$_ You won!\nmove[1,2,3]&quot;;last GAME;}
        elsif ($.[1] eq $S &amp;&amp; $.[4] eq $S &amp;&amp; $.[7] eq $S){print &quot;$_ You won!\nmove[1,4,7]&quot;;last GAME;}
        elsif ($.[3] eq $S &amp;&amp; $.[6] eq $S &amp;&amp; $.[9] eq $S){print &quot;$_ You won!\nmove[3,6,9]&quot;;last GAME;}
        elsif ($.[1] eq $S &amp;&amp; $.[5] eq $S &amp;&amp; $.[9] eq $S){print &quot;$_ You won!\nmove[1,5,9]&quot;;last GAME;}
        elsif ($.[2] eq $S &amp;&amp; $.[5] eq $S &amp;&amp; $.[8] eq $S){print &quot;$_ You won!\nmove[2,5,8]&quot;;last GAME;}
        elsif ($.[3] eq $S &amp;&amp; $.[5] eq $S &amp;&amp; $.[7] eq $S){print &quot;$_ You won!\nmove[3,5,7]&quot;;last GAME;}
        elsif ($.[4] eq $S &amp;&amp; $.[5] eq $S &amp;&amp; $.[6] eq $S){print &quot;$_ You won!\nmove[4,5,6]&quot;;last GAME;}
        elsif ($.[7] eq $S &amp;&amp; $.[8] eq $S &amp;&amp; $.[9] eq $S){print &quot;$_ You won!\nmove[7,8,9]&quot;;last GAME;}
                
        if ($count == 9){print &quot;Good game, but, neither of you won!&quot;;last GAME;}
}

format STDOUT =
                        +---+---+---+
                        | @&lt;| @&lt;| @&lt;|
                        $.[1],$.[2],$.[3]
                        +---+---+---+
                        | @&lt;| @&lt;| @&lt;|
                        $.[4],$.[5],$.[6]
                        +---+---+---+
                        | @&lt;| @&lt;| @&lt;|
                        $.[7],$.[8],$.[9]
                        +---+---+---+
.</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>200220</node_id>
  <author_user>196171</author_user>
  <title>My first game</title>
  <createtime>2002-09-23 16:29:14</createtime>
  <nodeupdated>2005-07-04 04:34:18</nodeupdated>
</node>
