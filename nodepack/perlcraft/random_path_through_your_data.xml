<node>
  <doctext>#!/usr/bin/perl
use strict;
#
# random_path REF
#
#   Finds a random path through an arbitrary data structure. Returns the path
#   as a list of visited hash keys, array indexes, and the leaf node. Call in
#   scalar context to get back just the leaf node.
#
#   Does not support cyclical data structures.
#
sub random_path {
  my $node = shift;
  if (ref $node eq 'HASH') {
    my @keys = keys %$node;
    my $choice = $keys[rand @keys];
    return $choice, random_path( $node-&gt;{$choice} );
  }
  elsif (ref $node eq 'ARRAY') {
    my $choice =  int rand @$node;
    return $choice, random_path( $node-&gt;[$choice] );
  }
  return $node;
}

##### EXAMPLES #####

my %places = (
  CA =&gt; { 
    90210 =&gt; 'Beverly Hills',
    90003 =&gt; 'Los Angeles'
  },
  IL =&gt; { 
    60610 =&gt; 'Chicago', 
    61820 =&gt; 'Champaign',
    60024 =&gt; 'Perlville',
  },
  NY =&gt; { 
    10001 =&gt; 'New York', 
    10013 =&gt; 'Chinatown',
  },
  Cananda =&gt; [
    [qw/Ontario Manitoba Quebec Alberta/], 
    [qw/Toronto Montreal/]
  ],
);

print &quot;### Grab the entire random path as a list ###&quot;;
print &quot;\n&quot;, join ' -&gt; ', random_path \%places for 1..10;

print &quot;\n\n\n### Or just pick off the leaf node ###&quot;;
print &quot;\n&quot;, scalar random_path \%places for 1..10;
</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>159378</node_id>
  <author_user>17251</author_user>
  <title>Random Path Through Your Data</title>
  <createtime>2002-04-15 20:28:25</createtime>
  <nodeupdated>2005-07-21 01:31:16</nodeupdated>
</node>
