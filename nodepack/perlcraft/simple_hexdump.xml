<node>
  <doctext>&lt;code&gt;
# This is a simple script that dumps a hexadecimal 
# representation of a file
# It was origginally written in C, so it suffers from some 
# C syntax (mostly `for' loops could probably be redone
# in a more `perlish' way and the use of ternary operator 
# ?: is quite ugly). It also overuses printf's where a more 
# elegant solution with `unpack' could be found.
# Never-the-less, it did the job that I needed to do, so
# here it is for all to see (and maybe even use). 

use strict;
use warnings;
$#ARGV == 0 or die 'Usage: hexdump.pl file';
open my $inpt, &quot;&lt;$ARGV[0]&quot; or die &quot;Can't open $ARGV[0]&quot;;
binmode $inpt;  # for DOS and the rest...
for(my $line_no = 0; my $i = read $inpt, $_, 16; $line_no++)
{
  push my @a, split //;  # put things onto char array
  printf &quot;%05x &quot;, $line_no;  # print line number 
  # print hex codes
  printf &quot;%02x &quot;, ord() &amp; 0xff foreach @a;  
  # pad last line if neccessary
  for(my $j = $#a; $j &lt; 15; $j++) { print '   '; }   
  # if a character is a control character, print a dot, 
  # else print normal ascii char
  (ord() &lt; 32 or ord() == 127) ? print &quot;.&quot; : print foreach @a;  
  print &quot;\n&quot;;
}
close $inpt;
&lt;/code&gt;</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>173460</node_id>
  <author_user>169603</author_user>
  <title>simple hexdump</title>
  <createtime>2002-06-11 09:14:15</createtime>
  <nodeupdated>2005-07-21 01:31:46</nodeupdated>
</node>
