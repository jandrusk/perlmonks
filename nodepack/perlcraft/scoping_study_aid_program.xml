<node>
  <doctext>I had a lot of trouble understanding Perl scoping.  After
reading the FAQs, etc, I decided to try writing a program
trying out everything.  Now I think I understand it.

This code consists of a program and a perl module.  They
should be in the same directory.  Run the program.  It
will show how I tried to refer to different declared
variables and subs.

This program uses undeclared package variables
(terminology correct?), 'my' variables, and 'our'
variables.  It doesn't use 'local' variables, though I
might change it.  And it also demonstrates using AUTOLOAD
subs to react to calls to undefined subs.

I really want this to be useful.  So if you see something
I screwed up, or terminology which is wrong, etc, please
tell me.  Thanks! -tim allen

(I) THE PROGRAM (scoping.pl)
#!/usr/bin/perl
# (note: this program will generate a warning if the -w
# command line parameter is used.  This is on purpose
# to show that 'my' causes variables to be lexically scoped
# to their package. -tim)
# Program: scoping.pl
# Purpose: to try out the various ways of referring to variables
# and subs in a package, specifically using &quot;our&quot;
# Author: tim allen
# Restrictions: 1) I don't &quot;use strict&quot; here on purpose so I
#  can have variables not defined as 'my' or 'our'.
#  2) I don't declare anything 'local' -- maybe later.

# The AUTOLOAD sub is special: it catches undefined
# references to subs.  Programming Perl, p. 297
sub AUTOLOAD {
  our $AUTOLOAD;
  warn &quot;$AUTOLOAD NOT DEFINED IN scoping.pl. (AUTOLOAD)\n&quot;;
  return undef;
}

sub here_sub {
  my $in_val = shift;
  return &quot;received $in_val in here_sub&quot;;
}

use Our_package;

# DEFINITIONS
# define a package variable for *this* package
$package_variable = &quot;defined without 'my' or 'our' in main&quot;;
# ... and a lexically scoped variable as well
my $my_variable = &quot;defined with 'my' in main&quot;;
# END OF DEFINITIONS

print &quot;VARIABLES IN *THIS* PACKAGE\n&quot;;
print &quot;1) \$package_variable=$package_variable\n&quot;;
print &quot;2) \$my_variable=$my_variable\n&quot;;

print &quot;\nVARIABLE DECLARED IN *OTHER* PACKAGE\n&quot;;
print &quot;1) \$our_variable = $our_variable\n&quot; if (defined $our_variable);
print &quot;2) \$our_variable NOT DEFINED\n&quot;   if not (defined $our_variable);
print &quot;3) \$Our_package::our_variable = $Our_package::our_variable\n&quot;;
print &quot;4) \$Our_package::my_variable NOT DEFINED\n&quot;
  if not (defined $Our_package::my_variable);

print &quot;\nPACKAGE VARIABLE IN OUTSIDE PACKAGE\n&quot;;
print &quot;1) \$package_variable=$package_variable (WRONG)\n&quot;;
print &quot;2) \$Our_package::package_variable=$Our_package::package_variable\n&quot;;

print &quot;\nCALL SUBROUTINES\n&quot;;
print &quot;1) Our_package::our_sub(4) = &quot;.Our_package::our_sub(4).&quot;\n&quot;;
print &quot;2) here_sub(4) = &quot;.here_sub(4).&quot;\n&quot;;
print &quot;3) here_sub($my_variable) = &quot;.here_sub($my_variable).&quot;\n&quot;;

if ($_ = our_sub()) {
  print &quot;our_sub() = &quot;.$_.&quot;\n&quot;; 
}

if ($_ = Our_package::our_foo($my_variable)) {
  print &quot;Our_package::our_foo($my_variable) = &quot;.$_.&quot;\n&quot;;
}

(II) AND NOW THE PERL MODULE (Our_package.pm)
package Our_package;
our $our_variable = &quot;defined with 'our' in Our_package&quot;;
$package_variable = &quot;defined without 'my' or 'our' in Our_package&quot;;
my $my_variable = &quot;defined with 'my' in Our_package&quot;;

sub AUTOLOAD {
  our $AUTOLOAD;
  warn &quot;$AUTOLOAD NOT DEFINED IN Our_package.pm.(Our_package::AUTOLOAD)\n&quot;;
  return undef;
}

sub our_sub {
  my $in_val = $_[0];
  return &quot;defined in Our_package (received $in_val)&quot;;
}</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>52021</node_id>
  <author_user>49126</author_user>
  <title>Scoping Study Aid program</title>
  <createtime>2001-01-15 18:39:14</createtime>
  <nodeupdated>2005-07-19 14:08:39</nodeupdated>
</node>
