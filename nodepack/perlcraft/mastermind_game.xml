<node>
  <doctext>My endless quest for diversions caused me to write this
Mastermind game knockoff. Maybe should be Monkmind?... &lt;p&gt;

Search revealed only one implementation, [68803|here], so I thought
I'd offer this alternative. &lt;p&gt;

YuckFoo &lt;p&gt;

&lt;code&gt;
#!/usr/bin/perl

   use strict;

   my $DIGITS = 6;

   print &quot;\nFind the $DIGITS digit number:\n\n&quot;;
   print &quot;* = Right digit, right position.\n&quot;;
   print &quot;+ = Right digit, wrong position.\n&quot;;

   my $code = sprintf(&quot;%*.*d&quot;, $DIGITS, $DIGITS, int(rand(10**$DIGITS)));

   my (@trys, $try, $inp, $i);

   while ($try-&gt;{guess} ne $code) {

      print &quot;\nGuess: &quot;;

      chomp($inp = &lt;&gt;);

      $try = {};
      push (@trys, $try);
      $try-&gt;{guess} = $inp;
      $try-&gt;{score} = score($inp, $code);

      print &quot;\n&quot;;
      for ($i = 0; $i &lt; @trys; $i++) {
         $try = $trys[$i];
         printf (STDOUT &quot;%3d %-*.*s %s\n&quot;,
            $i+1, $DIGITS, $DIGITS, $try-&gt;{guess}, $try-&gt;{score});
      }
   }

#-----------------------------------------------------------
sub score {

   my ($gues, $code) = @_;

   my @codes = split('', $code);
   my @guess = split('', $gues);
   my ($str, $i, %codes, @retry);

   # check for number in right position
   for ($i = 0; $i &lt; @codes; $i++) {
      if ($codes[$i] eq $guess[$i]) {
         $str .= '*';
      }
      else {
         $codes{$codes[$i]}++;
         push (@retry, $guess[$i]);
      }
   }

   # check for number in wrong position
   for $i (@retry) {
      if ($codes{$i}-- &gt; 0) { $str .= '+'; }
   }

   return $str;
}

&lt;/code&gt;</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>171353</node_id>
  <author_user>118343</author_user>
  <title>Mastermind Game</title>
  <createtime>2002-06-03 18:40:52</createtime>
  <nodeupdated>2005-07-27 17:47:59</nodeupdated>
</node>
