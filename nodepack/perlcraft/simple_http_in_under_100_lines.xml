<node>
  <doctext>#!/usr/bin/perl -wT
use strict;
use IO::File;
use Cwd;
use HTTP::Daemon;
use HTTP::Status;

$| = 1;

# We are quite explicit about where we listen
my $d = new HTTP::Daemon
                    Reuse =&gt; 1,
                    LocalAddr =&gt; '192.168.1.100',
                    LocalPort =&gt; 8889;

my $nofork = $^O =~ /Win32/i; # For easy testing under Win32

$SIG{__WARN__} = sub { warn __stamp(shift) };
$SIG{__DIE__} = sub { die __stamp(shift) };
$SIG{CHLD} = 'IGNORE';

warn &quot;Please contact me at: &lt;URL:&quot; . $d-&gt;url . &quot;&gt;\n&quot;;

$ENV{PATH} = '/bin:/usr/bin'; # Set our path to something secure
my $root = $ARGV[0] || cwd;
$root = $1 if $root =~ /^(.*)$/; # untaint document root
$root .= &quot;/&quot; unless $root =~ m!/$!;

# This sub Copyright (c) 1996,97,98,99,2000,01 by Randal L. Schwartz
sub __stamp {
  my ($message) = @_;
  my $stamp = sprintf &quot;[$$] [%02d@%02d:%02d:%02d] &quot;, (localtime)[3,2,1,0];
  $message =~ s/^/$stamp/gm;
  $message;
}

sub handleConnection {
  local $SIG{PIPE} = 'IGNORE';
  my ($connection) = @_;
  while (my $r = $connection-&gt;get_request()) {
    warn $r-&gt;as_string; # Yes, that's verbose.

    my $url = $r-&gt;url-&gt;path;
    $url = &quot;/$url&quot; unless $url =~ m!^/!; # Remove all suspicious paths
    $url =~ s!/.?.(?=/|$)!/!g;
    $url =~ tr!\x00-\x1F!!d;

    my $response = new HTTP::Response( 404,undef,undef,&quot;404 - Not found.&quot; );
    if (-d &quot;$root$url&quot;) {
      $url = &quot;$url/&quot; unless $url =~ m!/$!;
      opendir DIR, &quot;$root$url&quot;;
      $response-&gt;code(200);
      $response-&gt;content(
            &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;$url&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$url&lt;/h1&gt;&lt;tt&gt;&quot;
            . join( &quot;&lt;br&gt;&quot;,
                map { my ($cmt,$link) = ((-s &quot;$root$url$_&quot;).&quot; bytes&quot;,$_);
                      -d _ and $cmt = &quot;directory&quot;;
                      $link =~ s/([ '&quot;?%&amp;:])/{'%'.unpack(&quot;H2&quot;,$1)}/eg;
                      &quot;&lt;A href='$url$link'&gt;$_&lt;/A&gt; $cmt&quot;
                    } sort grep { /^[^.]/ } readdir DIR )
            . &quot;&lt;/tt&gt;&lt;/body&gt;&lt;/html&gt;&quot; );
      closedir DIR;
    } else {
      my $file = new IO::File &quot;&lt; $root$url&quot;;
      if (defined $file) {
        $response-&gt;code( 200 );
        binmode $file;
        my $size = -s $file;

        my ($startrange, $endrange) = (0,$size-1);
        if (defined $r-&gt;header(&quot;Range&quot;)
            and $r-&gt;header(&quot;Range&quot;) =~ /bytes\s*=\s*(\d+)-(\d+)?/) {
          $response-&gt;code( 206 );
          ($startrange,$endrange) = ($1,$2 || $endrange);
        };
        $file-&gt;seek($startrange,0);

        $response-&gt;header(Content_Length =&gt; $endrange-$startrange);
        $response-&gt;header(Content_Range =&gt; &quot;bytes $startrange-$endrange/$size&quot;);
        $response-&gt;content( sub {
          sysread($file, my ($buf), 16*1024); # No error checking ???
          return $buf;
        });
      };
    };
    warn &quot;Response :&quot;,$response-&gt;code;
    $connection-&gt;send_response($response);
  };
  warn &quot;Handled connection (closed, &quot; . $connection-&gt;reason . &quot;)&quot;;
  $connection-&gt;close;
};

while (my $connection = $d-&gt;accept) {
  # Really condensed fork/nofork handler code
  next unless $nofork || ! fork();
  warn &quot;Forked child&quot; unless $nofork;
  handleConnection( $connection );
  die &quot;Child quit.&quot; unless $nofork;
}
</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>116767</node_id>
  <author_user>5348</author_user>
  <title>Simple HTTP in under 100 lines</title>
  <createtime>2001-10-04 17:09:09</createtime>
  <nodeupdated>2005-08-13 23:00:09</nodeupdated>
</node>
