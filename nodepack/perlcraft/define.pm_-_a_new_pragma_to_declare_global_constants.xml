<node>
  <doctext>### UPDATES ###
#
# 4-3-2002: per petral's feedback, &quot;use define;&quot; is back in
# 9-4-2004: updated to match CPAN version
#

package define;

use 5.008004;
use strict;
use warnings;

our $VERSION = '1.02';

my %AllPkgs;
my %DefPkgs;
my %Vals;

my %Forbidden = map { $_ =&gt; 1 } qw{ 
  BEGIN INIT CHECK END DESTROY AUTOLOAD 
  STDIN STDOUT STDERR ARGV ARGVOUT ENV INC SIG 
};

sub import {
  my $class = shift;
  my $pkg = (caller)[0];
  if( @_ ) {
    if( ref $_[0] eq 'HASH' ) {
      while( my( $name, $val ) = each %{$_[0]} ) {
        do_import( $pkg, $name, $val );
      }
    }
    else {
      do_import( $pkg, @_ );
    }
  }
  else {
    require Carp;
    Carp::croak &quot;Must call 'use define' with parameters&quot;;
  }
}

sub unimport {
  my $class = shift;
  my $pkg = (caller)[0];
  if( @_ ) {
    check_name( my $name = shift );
    $DefPkgs{$name}{$pkg} = 1;
    if( $Vals{$name} ) {
      makedef( $pkg, $name, @{$Vals{$name}} );
    }
    else {
      makedef( $pkg, $name );
    }
  }
  else {
    # export all Declared to pkg
    $AllPkgs{$pkg} = 1;
    while( my( $name, $val ) = each %Vals ) {
      # warn &quot;Defining ALL $pkg:$name:$val&quot;;
      makedef( $pkg, $name, @$val );
    }
  }
}

sub check_name {
  my $name = shift;
  if( $name =~ /^__/ 
      or $name !~ /^_?[^\W_0-9]\w*\z/ 
      or $Forbidden{$name} ) {
    require Carp;
    Carp::croak &quot;Define name '$name' is invalid&quot;;
  }
}

sub do_import {
  my( $pkg, $name, @vals ) = @_;
  check_name( $name );
  $DefPkgs{$name}{$pkg} = 1;
  $Vals{$name} = [ @vals ];
  my %pkgs = ( $pkg =&gt; 1, %AllPkgs, %{$DefPkgs{$name}} );
  for (keys %pkgs) {
    makedef( $_, $name, @vals );
  }
}

sub makedef {
  my ($pkg, $name, @Vals) = @_;
  my $subname = &quot;${pkg}::$name&quot;;

  no strict 'refs';

  if (defined *{$subname}{CODE}) {
    require Carp;
    Carp::carp &quot;Global constant $subname redefined&quot;;
  }

  if (@Vals &gt; 1) {
    *$subname = sub () { @Vals };
  }
  elsif (@Vals == 1) {
    my $val = $Vals[0];
    *$subname = sub () { $val };
  }
  else {
    *$subname = sub () { };
  }
}
  
1;

__END__

=head1 NAME

define - Perl pragma to declare global constants

=head1 SYNOPSIS

    #--- in package/file main ---#
    package main;
    
    # the most frequenly used application of this pragma
    use define DEBUG =&gt; 0;
    
    # define a constant list
    use define DWARVES =&gt; qw(happy sneezy grumpy);
    
    # define several at a time via a hashref list, like constant.pm
    use define {
      FOO =&gt; 1,
      BAR =&gt; 2,
      BAZ =&gt; 3,
    };

    use Some::Module;
    use My::Module;
    
    #--- in package/file Some::Module ---#
    package Some::Module
    no define DEBUG =&gt;;
    no define DWARVES =&gt;;

    # define a master object that any package can import
    sub new { ... }
    use define OBJECT =&gt; __PACKAGE__-&gt;new;

    # if DEBUG is false, the following statement isn't even compiled
    warn &quot;debugging stuff here&quot; if DEBUG;
    
    my $title = &quot;Snow white and the &quot; . scalar DWARVES . &quot; dwarves&quot;;

    #--- in package/file My::Module ---#
    package My::Module
    no define;

    warn &quot;I prefer these dwarves: &quot; join &quot; &quot;, DWARVES if DEBUG;
    OBJECT-&gt;method(DWARVES);

=head1 DESCRIPTION

Use this pragma to define global constants.

=head1 USAGE

=head2 Defining constants

Global constants are defined through the same calling conventions 
as C&lt;constant.pm&gt;:

  use define FOO =&gt; 3;
  use define BAR =&gt; ( 1, 2, 3 );
  use define { 
    BAZ =&gt; 'dogs',
    QUX =&gt; 'cats',
  };

=head2 Importing constants by name

To use a global constant, you import it into your package as follows:

  no define FOO =&gt;;

If FOO has been defined, it gets set to its defined value, otherwise it is set
to undef. Note that the reason for the '=&gt;' operator here is to parse FOO as 
a string literal rather than a bareword (you could also do C&lt;no define 'FOO'&gt;).

=head2 Importing constants willy-nilly

To import ALL defined constants into your package, you can do the following:

  no define;

This is quick, but messy, as you can't predict what symbols may clash with
those in your package's namespace.

=head1 NOTES

See L&lt;constant/&quot;constant.pm&quot;&gt;. Most of the same caveats apply here.

Your code should be arranged so that any C&lt;no define&gt; statements are executed 
after the C&lt;use define&gt; statement for a given symbol. If the order is reversed,
a warning will be emitted.

As a rule, modules shouldn't be defining global constants; they should import
constants defined by the main body of your program.

If a module does define a global constant (eg. a master object), the module 
should be use'd before any other modules (or lines of code) that refer to the
constant.

If you &lt;use define&gt; the same symbol more than once, a warning will be emitted.

=head1 AUTHOR

  Gary Gurevich (garygurevich at gmail)

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2004 by Gary Gurevich

This library is free software; you can redistribute it and/or modify it under 
the same terms as Perl itself.

=head1 SEE ALSO

constant(3), perl(1).

=cut</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>156106</node_id>
  <author_user>17251</author_user>
  <title>define.pm - a new pragma to declare global constants</title>
  <createtime>2002-04-02 15:33:06</createtime>
  <nodeupdated>2005-07-21 01:31:11</nodeupdated>
</node>
