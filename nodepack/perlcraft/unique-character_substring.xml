<node>
  <doctext>=pod

  @longest = pinyan_UCS($string)

This function returns the set of the longest substrings
in a given string.  It seems rather efficient, even though
it calls C&lt;index()&gt; quite a bit.  I found that using a hash
to figure if I'd seen a character had adverse effects.

=cut

sub pinyan_UCS {
  my $str = shift;
  my $len = length $str;
  my ($diff,$biggest) = (0,0);
  my ($jump,@ahead,@matches);

  for (my $i = 0; $i &lt; $len; ) {
    my $match = [ $i, $len ];
    if ($len - $i &gt;= $biggest) {
      for (my $k = $i; $k &lt; $match-&gt;[1]; $k++) {
        $ahead[$k] ||= index($str, substr($str,$k,1), $k+1);
        if ($ahead[$k] != -1 and $match-&gt;[1] &gt; $ahead[$k]) {
          $match-&gt;[1] = $ahead[$k];
          $jump = $k;
        }
      }

      $diff = $match-&gt;[1] - $match-&gt;[0];
  
      if ($diff &gt; $biggest) { ($biggest,@matches) = ($diff,$match) }
      elsif ($diff == $biggest) { push @matches, $match; }
    }
    else { last }
    
    $i = ++$jump;
  }   
      
  return map substr($str, $_-&gt;[0], $_-&gt;[1] - $_-&gt;[0]), @matches;
}
</doctext>
  <type_nodetype>121</type_nodetype>
  <node_id>53151</node_id>
  <author_user>1936</author_user>
  <title>Unique-Character Substring</title>
  <createtime>2001-01-19 23:46:49</createtime>
  <nodeupdated>2005-08-05 09:09:59</nodeupdated>
</node>
