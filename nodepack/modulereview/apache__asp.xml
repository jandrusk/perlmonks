<node>
  <doctext>&lt;H4&gt;Author&lt;/H4&gt;
Joshua Chamas

&lt;H4&gt;Version&lt;/H4&gt;
2.31

&lt;H4&gt;Rating&lt;/H4&gt;
**** 4 out of 5 stars
&lt;br&gt;&lt;readmore&gt;
&lt;br&gt;
Apache::ASP is a module that allows for embedding Perl into your HTML 
files and runs in concert with mod_perl.  It has been run in test 
environments as CGI, but it is recommended that in production it be run 
under mod_perl.
&lt;br&gt;
&lt;br&gt;
&lt;H4&gt;Things I Don't Like&lt;/H4&gt;
&lt;br&gt;
&lt;b&gt;Not highly configurable&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
There are lots of things that you can't easily turn on or off that 
might be nice at a page level, it may be possible, but it is not 
well/clearly documented if you can.
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Interface causes keyboard gymnastics&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
The keyboard gymnastics occur by attempting to mimic its namesake 
Microsoft ASP. To get a parameter passed with the GET method you would 
use something like:
&lt;br&gt;
&lt;br&gt;
&lt;code&gt;$Request-&gt;QueryString('param_name');&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;
To me that seems like a lot of typing, but when you keep in mind it is 
to mimic the ASP/PerlScript methods then it makes sense in that 
context. So it really isn't the authors desire to make your fingers ache 
:)
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Separate Methods for QueryString and Form parameters (default)&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
Having to remember which method was used to send the variables to the 
page is annoying.  This has been corrected in later releases with a 
$Params object. You have to set an configuration parameter in the 
httpd.conf file get this behavior.
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Custom Session Management&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
Apache::ASP uses its own Session management that only works with 
Apache::ASP.  It would be nice to have the option of using 
Apache::Session since it has proven to be very durable. No Variable 
Clean Up (default)
&lt;br&gt;
&lt;br&gt;
Not having auto variable cleanup at the end of each page compile leads 
to possible global/persistent values that can really gum up the works 
if you have old code that you would rather not have to bring up to 
&quot;strict&quot; standards to use.  I am not saying that is a good idea, but we 
all have time constraints that push us to do ugly things from time to 
time.
&lt;br&gt;
&lt;br&gt;
&lt;H4&gt;Things I Do Like&lt;/H4&gt;
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Script_OnStart t/Script_OnEnd&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
The Script_OnStart and Script_OnEnd subs in the global.asa (default 
application code) allows for particular actions to be taken on each 
page (script) load so you can verify session validity or update session 
information, add headers and footers, load default mouldes, create 
database connections, etc. inside of these subs.
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Configuration Simplicity&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
The configuration doesn't implement a bitmask like HTML::Embperl which 
can be a bit confusing to developers that aren't from a computer 
science background.  Typically you simply set the parameter with one 
option in the httpd.conf and forget about it.
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Unique Session Options&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
The cookieless sessions allow for a method in which session information 
is automaticly added to URLs so your application doesn't break when the 
user turns off cookies.  There are some caveats on this and they are 
explained in the documenation.  Paranoid sessions are best explained 
with this snipet from the documentation.
&lt;br&gt;
&lt;br&gt;&lt;i&gt;
&quot;This config option is to help prevent a brute force cookie search from 
being successful. The number of possible cookies is huge, 2^128, thus 
making such a hacking attempt VERY unlikely. However, on the off chance 
that such an attack is successful, the hacker must also present 
identical browser headers to authenticate the session, or the session 
will be destroyed. Thus the User-Agent acts as a backup to the real 
session id. The IP address of the browser cannot be used, since because 
of proxies, IP addresses may change between requests during a session.&quot;
&lt;/i&gt;
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Easy to Read Debug Information&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
The debug information that is presented to the developer is for the 
most part very clear and you can configure various levels including 
mailto debug display options. 
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Good Documentation&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
The documentation is well written and is available at the Apache::ASP 
web site.  It has a good example code section that provides simple 
examples that should get you started in short order.
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Great Support via Mailing List&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
The support provided on the mailing list is great.  My last development 
project with Apache::ASP had me posting to the mailing list or emailing 
the author directly and he was very responsive.  Since the official 
mailing list has started the response level is just as good. Previously 
support was handled via the mod_perl list.  It is not completely 
inappropriate to cross post your question since not all Apache::ASP 
users may subscribe to both lists and it is possible that your issue is 
not where you think it is.
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Separate Application Object and Session Object&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
The Application object allows for you to setup application level 
attributes at server start or first user access.  It is as flexible as 
the session data in that you can create your own key value pairs for 
your particular needs.
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Pure Perl&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
Pure Perl.  I don't know why(1), but I like to see packages that use 
only Perl and no XS extensions, even though XS extensions can provide 
speed improvements depending on the process, it is still nice to know 
that if you know Perl and not C you stand a fighting chance at hacking 
the source if you need to. 
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Good Advice on Tuning&lt;/b&gt;
&lt;br&gt;
&lt;br&gt;
There is a section called tuning in the documentation that has good 
advice on which configuration options will have the most speed impact 
on the server.
&lt;br&gt;
&lt;br&gt;
&lt;H4&gt;Caveats or Pitfalls&lt;/H4&gt;

CODE CLEAN OR DIE in Apache::ASP.  I can't say that enough.  When I 
started on the previously mentioned web project using Apache::ASP, 
development had already begun and the code was not strict compliant and 
with close to 300 pages in the application and a timeline that didn't 
allow for a complete rewrite the fact that the variables weren't 
cleaned up at the completion of every page really wrecked havoc.  So if 
you want to use Apache::ASP turn on the Strict option in the 
configuration and code cleanly.
&lt;br&gt;
&lt;br&gt;
Use the $Params settings so you don't have to keep track of how the 
parameters are coming it.  This is a feature that I helped bring into 
the module with my constant prodding of the author.  I had come from 
HTML::Embperl development and we had several scripts that were used 
with both form and QueryString based parameters depending on the page 
it was being accessed from.  This lead to even more finger gymnastics 
because we would have to create new variables with an || conditional 
for each method.
&lt;br&gt;
&lt;br&gt;
Read all the documentation.  That may sound silly, but I think it 
something that a lot of us don't do always.  I find the 
templating/framework systems such as Apache::ASP, HTML::Mason, 
HTML::Embperl all be very well documented and many a question is 
answered in the documentation.
&lt;br&gt;
&lt;br&gt;
So who should use Apache::ASP?  Some one that is coming from an ASP 
background will like the syntax for the most part, might take a bit 
getting used to the $'s and -&gt;'s if they were doing VB ASP, but at 
least the objects are named the same.  If you are running a small to 
medium size site I think Apache::ASP is a good choice, I would not 
recommend it for larger scale development, I can't back that up with 
any firm data, but having done large scale sites in HTML::Embperl and 
Apache::ASP, I found HTML::Embperl much easier to work with. 
&lt;br&gt;
&lt;br&gt;
And don't forget to read &lt;a href=&quot;http://perl.apache.org/guide&quot;&gt;the mod_perl Guide&lt;/a&gt;.
&lt;br&gt;
&lt;br&gt;
1 - Maybe it is empathy for people that know only the Microsoft way.

</doctext>
  <type_nodetype>31663</type_nodetype>
  <author_user>139427</author_user>
  <createtime>2002-02-19 20:29:39</createtime>
  <itemdescription>For developing dynamic web applications</itemdescription>
  <identifier></identifier>
  <node_id>146467</node_id>
  <usercomment></usercomment>
  <title>Apache::ASP</title>
  <nodeupdated>2005-08-15 07:52:29</nodeupdated>
</node>
