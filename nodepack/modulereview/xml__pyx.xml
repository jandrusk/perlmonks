<node>
  <doctext>&lt;h3&gt;Description&lt;/h3&gt;
  &lt;p&gt;&lt;a href=&quot;http://search.cpan.org/doc/MSERGEANT/XML-PYX-0.07/PYX.pm&quot;&gt;XML::PYX&lt;/a&gt;, based on XML::Parser is the Perl implementation. It comes
     with 3 tools: &lt;tt&gt;pyx&lt;/tt&gt; (non-validating) and &lt;tt&gt;pyxv&lt;/tt&gt; 
     (validating) output the Pyx version of the document and &lt;tt&gt;pyxw&lt;/tt&gt;
     writes an XML version of a Pyx flow. 
     See &lt;a href=&quot;http://www.xml.com/pub/2000/03/15/feature/index.html&quot;&gt;
     XML.com - Pyxie&lt;/a&gt; for a description of Pyxie
  &lt;/p&gt;
&lt;h3&gt;Why use PYX?&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;you don't want to know to much about XML&lt;/li&gt;
    &lt;li&gt;you are used to, and you like line-oriented tools&lt;/li&gt;
    &lt;li&gt;you are just extracting some data from the XML document&lt;/li&gt;
    &lt;li&gt;you are doing simple XML transformation&lt;/li&gt;
  &lt;/ul&gt;
&lt;h3&gt;Why NOT use XML::PYX&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;you want to do complex transformations&lt;/li&gt;
    &lt;li&gt;you are more at ease with tree-processing&lt;/li&gt;
    &lt;li&gt;you don't like writing all those regexps with \(&lt;/li&gt;
    &lt;li&gt;you need some information from the XML documents that Pyx does not
 	provide (comments, entity declarations...)&lt;/li&gt;
  &lt;/ul&gt;
&lt;h3&gt;Related Module&lt;/h3&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.omsdev.com/ebohlman/perlmodules/&quot;&gt;XML::TiePYX&lt;/a&gt;
     is easier to use on a Windows system&lt;/p&gt;
&lt;h3&gt;Personal notes&lt;/h3&gt;
  &lt;p&gt;Pyx is really cool to extract information from an XML file,
     or to perform simple transformations on simple XML files. The
     module is mature (it is quite simple so there shouldn't be
     too many bugs in it). I never actually use the module, only
     &lt;tt&gt;pyx&lt;/tt&gt;, which I pipe to a &lt;tt&gt;perl -n&lt;/tt&gt; or &lt;tt&gt;
     perl -p&lt;/tt&gt; script.&lt;/p&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;Print all the elements used in an XML document, with the number of occurences.&lt;/p&gt;
 &lt;pre&gt;pyx file.xml | perl -n -e '$nb{$1}++ if( m/\A\((.*)\n/); \
                            END { map { print &quot;$_ used $nb{$_} time(s)\n&quot;;} sort keys %nb;}'
  &lt;/pre&gt;
  &lt;p&gt;Warn in case of duplicate ID:&lt;/p&gt;
  &lt;pre&gt;pyx file.xml | perl -n -e '($id)=( m/^Aid (.*)\n/) or next; print &quot;duplicate id: $id\n&quot; if($id{$id});  $id{$id}=1;'
  &lt;/pre&gt;
  &lt;p&gt;Change a tag name (class to color):&lt;/p&gt;
  &lt;pre&gt;pyx wine.xml | perl -p -e 's/^(&amp;#091;()&amp;#093;)class/$1color/' | pyxw
  &lt;/pre&gt;
</doctext>
  <type_nodetype>31663</type_nodetype>
  <author_user>9346</author_user>
  <createtime>2000-09-01 10:07:18</createtime>
  <itemdescription>A line-oriended interface to XML</itemdescription>
  <identifier></identifier>
  <node_id>30698</node_id>
  <usercomment>The module's main usage is through the pyx, pyxv, pyxw and pyxhtml tools</usercomment>
  <title>XML::PYX</title>
  <nodeupdated>2005-08-12 04:23:59</nodeupdated>
</node>
