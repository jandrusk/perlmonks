<node>
  <doctext>&lt;p&gt;
Apache's .htpasswd files consist of user/password pairs, one pair per line, eg: &lt;br&gt;
&lt;code&gt;username1:unixcryptpassword
username2:unixcryptpassword
&lt;/code&gt;&lt;br&gt;

The [cpan://Apache::Htpasswd|Apache::Htpasswd] module provides the methods you will need to manage user accounts within .htpasswd (or other password files with the same format)- add and remove users, set &amp; reset passwords.  The module provides only an object orientated interface.  For a more complete user management solution you may want to look at [cpan://HTTPD::UserAdmin|HTTPD::UserAdmin] but for customised user management and integration with your site Apache::Htpasswd is a great tool.
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Drawbacks:&lt;/strong&gt;There is no way to list all the users in a passwd file.  There is  no method to find out if a specific user has an account.  The fetchInfo() method can be bent to this  purpose, but it returns &quot;0&quot; for an invalid account, otherwsise any info that is  stored for that user or undef, to test for a user I wrapped it in a sub like this-
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;
sub is_user {
        my $user = shift || return;
        my $info = $htpasswd-&gt;fetchInfo($user);
        return 0 if ($info eq '0');
        return 1;
}
&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;strong&gt;Sample code&lt;/strong&gt;
&lt;READMORE&gt;
Here is a sample CGI script to allow a user to change their own password.  It requires the user to know their own password first.  This script should be run from within a .htaccess protected directory!  It uses the $ENV{REMOTE_USER} variable which can be manipulated by an &quot;attacker&quot; however they would still then need to know the existing password for any user they specify.
&lt;/p&gt;
&lt;code&gt;
#!/usr/bin/perl -wT
#
#

BEGIN {
# make the environment safe
  delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
  $ENV{PATH} = &quot;&quot;;
}

use strict;
use CGI;
use CGI::Carp qw(fatalsToBrowser);
use Apache::Htpasswd;
my $cgi = new CGI;
$|++;

my %settings = (title    =&gt; &quot;htpasswd change page&quot;,
                dir      =&gt; &quot;/home/user/public_html/cgi-bin&quot;,
                htpasswd =&gt; &quot;.htpasswd&quot;,
                fields   =&gt; [ &quot;old_passwd&quot;, &quot;new_passwd&quot;, &quot;new_passwd2&quot; ],
               );
$settings{user} = $ENV{REMOTE_USER};

my $htpasswd = new Apache::Htpasswd(&quot;$settings{dir}/$settings{htpasswd}&quot;);

print_page_headers($settings{title});
process_form();
print_form();

exit;

sub process_form {

  return unless ( $cgi-&gt;param('change') );

  my %data;
  for my $field ($cgi-&gt;param()){
    if ( scalar grep /^\Q$field\E$/, @{$settings{fields}} ){
      # its a field we know about
      my $tmp = substr($cgi-&gt;param($field), 0, 50);
      $tmp = lc($tmp) if ( $field eq &quot;change_user_name&quot; );
      $data{$field} = $tmp || '';
    }
  }

  if ( !$data{old_passwd} or !$data{new_passwd} or !$data{new_passwd2} ){
    print $cgi-&gt;p(&quot;You must fill out all fields!&quot;);
    return;
  }

  if ( ! $htpasswd-&gt;htCheckPassword($settings{user}, $data{old_passwd}) ){
    print $cgi-&gt;p(&quot;Old password incorrect or invalid user name&quot;);
    return;
  }
 
  if ( $data{new_passwd} eq $data{old_passwd} ){
    print $cgi-&gt;p(&quot;New password must be different to old password!&quot;);
    return;
  }
 
  if ( $data{new_passwd} ne $data{new_passwd2} ){
    print $cgi-&gt;p(&quot;New passwords don't match!&quot;);
    return;
  }
 
  if ( $data{new_passwd} !~ /^\S{6,8}$/ or $data{new_passwd} !~ /[^a-zA-Z]+/ ){
    print $cgi-&gt;p(&quot;New password must be 6-8 chars and contain at least one number or punctuation character&quot;);
    return;
  }
 
  $htpasswd-&gt;htpasswd($settings{user}, $data{new_passwd}, $data{old_passwd});
  if ( my $error = $htpasswd-&gt;error() ){
    print $cgi-&gt;p(&quot;There was en error: [$error]&quot;);
  }
  else {
    print $cgi-&gt;p(&quot;Password for $settings{user} was succesfully changed&quot;);
  }
}

sub print_page_headers {
  my $title = shift || &quot;Page without a title&quot;;
  print $cgi-&gt;header();
  print $cgi-&gt;start_html($title);
  print $cgi-&gt;h2($title);
  print $cgi-&gt;hr();
  return;
}

sub print_form {
 
  for (@{$settings{fields}} ){
    $cgi-&gt;delete($_);
  } 
 
  print $cgi-&gt;start_form();
  print $cgi-&gt;b(&quot;Password Change for $settings{user}&quot;);
  print $cgi-&gt;table({-border=&gt;0},
  $cgi-&gt;Tr(
  $cgi-&gt;td(&quot;Enter your &quot;, $cgi-&gt;strong(&quot;old&quot;), &quot; password&quot;),
  $cgi-&gt;td($cgi-&gt;password_field( -name      =&gt; 'old_passwd',
                                 -value     =&gt; '',
                                 -size      =&gt; 10,
                                 -maxlength =&gt; 8))),
  $cgi-&gt;Tr($cgi-&gt;td(&quot;Enter your &quot;, $cgi-&gt;strong(&quot;new&quot;), &quot; password&quot;),
  $cgi-&gt;td($cgi-&gt;password_field( -name      =&gt; 'new_passwd',
                                 -value     =&gt; '',
                                 -size      =&gt; 10,
                                 -maxlength =&gt; 10))),
  $cgi-&gt;Tr($cgi-&gt;td(&quot;Re-Enter your new password&quot;),
  $cgi-&gt;td($cgi-&gt;password_field( -name      =&gt; 'new_passwd2',
                                 -value     =&gt; '',
                                 -size      =&gt; 10,
                                 -maxlength =&gt; 10)),
  $cgi-&gt;td($cgi-&gt;submit( -name  =&gt; 'change',
                         -value =&gt; 'Change Password'))),
  );
  print $cgi-&gt;end_form(), $cgi-&gt;hr();
  print $cgi-&gt;end_html();
  print &quot;\n&quot;;
}

&lt;/code&gt;

&lt;p&gt;
To prohibit downloading of your .htpasswd &amp; associated files your .htaccess should look something like this:&lt;br&gt;
&lt;code&gt;
AuthType Basic
AuthName &quot;Authorisation Required&quot;
AuthUserFile /path/to/.htpasswd

&lt;files ~ &quot;^\.ht&quot;&gt;
	Order allow,deny
	Deny from all
&lt;/files&gt;

&lt;Limit GET POST&gt;
	require user username
&lt;/Limit&gt;
&lt;/code&gt;
&lt;/p&gt;
</doctext>
  <type_nodetype>31663</type_nodetype>
  <author_user>56270</author_user>
  <createtime>2002-07-01 03:05:39</createtime>
  <itemdescription>A module to manage an apache .httpasswd or other Unix crypt-style password file.</itemdescription>
  <identifier></identifier>
  <node_id>178482</node_id>
  <usercomment></usercomment>
  <title>Apache::Htpasswd</title>
  <nodeupdated>2005-08-01 05:47:20</nodeupdated>
</node>
