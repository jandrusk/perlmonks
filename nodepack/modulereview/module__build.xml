<node>
  <doctext>There is much talk in the Perl world about Module::Build. Discussion surfaced originally around February 2003, when Mike Schwern published a paper of advocacy. Please refer to [id://235463|this thread] for PM's reaction at the time.&lt;p&gt;
More recently, I attended a Perl monger tech talk, at which Schwern was presenting &quot;MakeMaker is doomed!&quot;. Prior to the talk, I was somewhat skeptical. After all, Makefile.PL works, Nearly all of CPAN uses a recognised and recognisable installation process: &lt;code&gt;
perl Makefile.PL
make
make test
make install
&lt;/code&gt;I'd also heard that some prominent people in the Perl community have abandoned MakeMaker for all new modules, in favour of Module::Build. Having attended the talk, I began to see why.
&lt;h3&gt;Portability&lt;/h3&gt;
The MakeMaker method relies on two mechanisms which are not truly cross-platform:&lt;ul&gt;
&lt;li&gt;make
&lt;li&gt;the shell
&lt;/ul&gt;Why do this, when we have an excellent scripting language which is totally cross-platform? Why indeed not have a pure perl installation mechanism?&lt;p&gt;
This is indeed what Module::Build is, and it calls no modules which use XS. The steps are replaced with:&lt;code&gt;
perl Build.PL
perl Build
perl Build test
perl Build install&lt;/code&gt;
In my opinion, Build.PL should have been named Configure.PL, so as to remove completely, any confusion between the first two steps. I am raising this point with Ken Williams and others.&lt;p&gt;
I came away from Schwern's talk convinced that Module::Build is the future. Also, there is talk that it is entering the core of 5.10, which will greatly help the advocacy cause.
&lt;h3&gt;Complex configuration&lt;/h3&gt;
In the mean time, there is a circumstance when I would completely recommend adopting Module::Build. The initial step, running the perl program Makefile.PL has been greatly simplified and freed. For trivial installations, there is probably no mileage in moving to Module::Build, as the Makefile.PL contains a single call to WriteMakefile. For non-trivial installations, you might experience difficulties getting help writing and fixing your Makefile.PL.&lt;p&gt;
Module::Build uses an OO interface, and the actions that you want to do in configuration are method calls. For doing _really_ clever stuff you can subclass Module::Build.
&lt;h3&gt;Using Module::Build for other than modules&lt;/h3&gt;
This new flexibility means that Module::Build becomes available for other purposes - in fact for any kind of controlled install. For example, it can be used to deploy database schemas and suites of standalone perl scripts.
An example of a project where this has been used is on [CPAN://OpenGuides] - a project I am involved with.
&lt;h3&gt;Conclusion&lt;/h3&gt;
It seems quite stable now, and there are many people out there using it. I am not advocating a wholesale morphing of CPAN to this mechanism overnight. Once 5.10 goes in and stable with Module::Build in the core, we should push for all new modules to use it. 
&lt;h3&gt;Update, October 2004&lt;/h3&gt;
I am nowhere near as happy with Module::Build as when I originally wrote this review. In particular, I have the following issues:&lt;ul&gt;&lt;p&gt;
&lt;li&gt;Automated installs with CPAN don't happen. Though they might if you are lucky and the module author has provided a compatibility Makefile.PL that does everything Build.PL does. Apparently CPANPLUS supports Module::Build builds, but I have had problems getting CPANPLUS working at all on some platforms.&lt;p&gt;
&lt;li&gt;Build.PL does not have the standard command line options that Makefile.PL uses. In particular, there is not an equivalent of PREFIX=x, which I need for builds where I am installing to platforms where I don't have root.&lt;p&gt;
&lt;li&gt;Some module kits have a Build.PL and a Makefile.PL which build differently. This may well be an oversight on the part of the module author, but it does not reflect well on the underlying build mechanism.&lt;p&gt;
&lt;li&gt;I have also had issues building XS code with Module::Build.&lt;p&gt;&lt;/ul&gt;
With hindsight, I think that Schwern was right that ExtUtils::MakeMaker is due for review. However, Module::Build is too much of a step for most module authors, and most Perl admins. Also, Perl 5.10 is still well beyond the horizon.</doctext>
  <type_nodetype>31663</type_nodetype>
  <author_user>144850</author_user>
  <createtime>2003-04-30 12:50:32</createtime>
  <itemdescription>A replacement for ExtUtils::MakeMaker</itemdescription>
  <identifier></identifier>
  <node_id>254380</node_id>
  <usercomment>Module::Build is the future of CPAN installs</usercomment>
  <title>Module::Build</title>
  <nodeupdated>2005-08-03 08:00:48</nodeupdated>
</node>
