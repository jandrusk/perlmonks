<node>
  <doctext>&lt;p&gt;Whereas C++ and Java go to great lengths to ensure that the data types of any arguments passed to a function, match what is expected, perl is often criticised for not enforcing anything.&lt;p&gt;
Perl 6 will address this issue, but in the mean time, any subroutines you write are passed an array @_ containing a potential hotch-potch of scalars and references, blessed or otherwise. &lt;p&gt;
Although it's nice to write code that can DWIM given a parameter of varying data types, this is always an extra effort to implement. Also, what will your sub do when passed a SCALAR when it's expecting an ARRAYREF? At best, it will die with a run-time error, and a message which likely as not, would not be immediately obvious.
&lt;h4&gt;Enter Params::Validate&lt;/h4&gt;
By default, this module exports the functions validate and validate_pos. Params::Validate caters for two calling conventions: named parameters and positional parameters, which are validated by validate and validate_pos respectively. Unfortunately you can't mix them; any positional parameters before your list of key/value pairs need to be removed first. In fact, this is the way to use Params::Validate to handle method calls. 

Examples:&lt;code&gt;

sub mymethod {
    my $self = shift;
    my %args = validate( @_, {
                foo =&gt; 1,
                bar =&gt; { default =&gt; 99}
            } );
 ...
}

sub mymethod2 {
    my $self = shift;
    my ($meenie,$minie,$mo) = validate_pos( @_, 
               { type =&gt; SCALAR },
               { type =&gt; SCALAR | UNDEF },
               { type =&gt; ARRAYREF, default =&gt; [] }
       );
 ...
}

&lt;/code&gt;
As is apparent, the call to validate or validate_pos is quite straightforward and edifying to someone else looking at the code.&lt;p&gt;
It's also quite easy to add such validation to existing code, for an immediate gain in robustness without too much cognitive effort. The module provides a whole host of tools for validating your argument list - I have just scratched the surface.
&lt;h4&gt;Error handling&lt;/h4&gt;
When the parameter validation fails, the default action it to croak, with quite a helpful message about which parameter is invalid and why. You can elect to use a callback to catch validation errors instead.
&lt;h4&gt;Conclusion&lt;/h4&gt;
I am a convert to using this module. I recommend it for CPAN modules and for corporate coding standards.
&lt;h4&gt;Update&lt;/h4&gt;
I have had some interesting dependency issues with modules of mine that are using Params::Validate. I have seen CPAN pull in [cpan://Ponie] via [cpan://Attribute::Handlers]. Why would I want the Parrot/Ponie stuff coming into my production environment ?! I asked Arthur Bergman about this, and apparently it is a spurious dependency picked up by CPAN.pm, apparently sorted in a later release of Attribute::Handlers.&lt;p&gt;
I did notice also that ActiveState's module status page was showing any of my modules that use Params::Validate, as having a dependency on Ponie.</doctext>
  <type_nodetype>31663</type_nodetype>
  <author_user>144850</author_user>
  <createtime>2004-05-16 18:08:59</createtime>
  <itemdescription>Validation of parameters passed to a subroutine</itemdescription>
  <identifier></identifier>
  <node_id>353826</node_id>
  <usercomment></usercomment>
  <title>Params::Validate</title>
  <nodeupdated>2005-08-01 08:22:01</nodeupdated>
</node>
