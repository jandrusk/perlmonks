<node>
  <doctext>&lt;p&gt;&lt;i&gt;Every program expands until it can send mail.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;[cpan://Mail::Sendmail] tries to make this task easier by providing an interface to any SMTP server you specify. In hindsight, the name should rather have been Mail::Simple, but it's too late for that. An alternative to Mail::Sendmail is [cpan://Net::SMTP], which has about the same feature set except MIME, but I have not (yet) looked closely enough to make a qualified comparision.&lt;/p&gt;
&lt;h2&gt;Why use Mail::Sendmail ?&lt;/h2&gt;
&lt;p&gt;You need to send mail and you're not sure that there will be a local mailer installed. Mail::Sendmail works under Windows and Unix (most likely, Mac too) and it's a pure Perl solution. Installation is easy even if you don't have a &lt;tt&gt;make&lt;/tt&gt; utility installed, as it consists of only one file to copy. If you install [cpan://MIME::QuotedPrint], you'll also be able to easily send attachments and HTML encoded Email. It only makes one connection to the SMTP server for all recipients of the email.&lt;/p&gt;

&lt;h2&gt;Why not use Mail::Sendmail ?&lt;/h2&gt;
&lt;p&gt;Mail::Sendmail needs an existing network connection to the internet, or at least an existing network connection to the SMTP server you want it to use. It does not support local queuing or anything fancy. It modifies the headers of your email to have Content-Type and Content-transfer-encoding headers, and it will automagically try to do the right thing and quote high-ASCII characters. If you have &lt;tt&gt;warnings&lt;/tt&gt; on, it will warn quite a bit about stuff.
Mail::Sendmail only exports one function, &lt;tt&gt;&amp;sendmail()&lt;/tt&gt;. If you need finer grained feedback, like progress, etc. or if you don't have enough memory to keep your email twice! in it, Mail::Sendmail is not for you.&lt;/p&gt;

&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;Mail::Sendmail tries to do the right thing. This might bring surprising results if you use high-ASCII stuff. Mail::Sendmail tries to parse the email adresses given, but it isn't completely RFC compliant. This might bite if you have really fancy email addresses.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;The Mail::Sendmail documentation already has an exhaustive example, but I'm reposting my test script which I used to check whether Mail::Sendmail works under Win32 :&lt;/p&gt;
&lt;code&gt;
#!/usr/bin/perl -w
# Simple test script to test Mail::Sendmail under Win32

use strict;
use Mail::Sendmail;

# Set up some default configuration
unshift @{$Mail::Sendmail::mailcfg{'smtp'}} , 'smtprelay.t-online.de';
$Mail::Sendmail::mailcfg{'from'} = &quot;Corion (script) &lt;corion\@sends.no.spam&gt;&quot;;

my %mail = (
  Bcc =&gt; 'corion@wants.no.spam',
  Subject =&gt; &quot;Test 1&quot;,
  'X-Mailer' =&gt; &quot;Mail::Sendmail test script v0.01/$Mail::Sendmail::VERSION&quot;,
  Message =&gt; &quot;Test number 1&quot;,
);

sendmail( %mail ) or die &quot;Error: $Mail::Sendmail::error\n&quot;;
&lt;/code&gt;</doctext>
  <type_nodetype>31663</type_nodetype>
  <author_user>5348</author_user>
  <createtime>2001-03-22 11:34:00</createtime>
  <itemdescription>Send mail without any local mailer installed</itemdescription>
  <identifier></identifier>
  <node_id>66313</node_id>
  <usercomment></usercomment>
  <title>Mail::Sendmail</title>
  <nodeupdated>2005-08-14 01:35:19</nodeupdated>
</node>
