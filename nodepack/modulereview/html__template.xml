<node>
  <doctext>We hear about it all the time, and most, if not all of us have dabbled in it at one time.  You know what I speak of, Dynamic web content.  Well, if you prefer, or are required to use a template system, might I suggest giving HTML::Template a go.  Some may ask my main reason for endorsing it, to which I would respond with simplicity, and flexibility.  Hands down, HTML::Template gotta be the simplest way to manage templates.  Lets give an example.  
&lt;p /&gt;
Taken from the CPAN docs [cpan://HTML::Template]:
&lt;p /&gt;
Create a simple HTML page, with two template variables &lt;code&gt;HOME&lt;/code&gt; and &lt;code&gt;PATH&lt;/code&gt;, name it test.tmpl.
&lt;br /&gt;We will fill the variables with data &lt;a href=&quot;#CODE&quot;&gt;below&lt;/a&gt;.
&lt;code&gt;
  &lt;html&gt;
  &lt;head&gt;&lt;title&gt;Test Template&lt;/title&gt;
  &lt;body&gt;
  My Home Directory is &lt;TMPL_VAR NAME=HOME&gt;
  &lt;p&gt;
  My Path is set to &lt;TMPL_VAR NAME=PATH&gt;
  &lt;/body&gt;
  &lt;/html&gt;
&lt;/code&gt;
&lt;p /&gt;
Now, lets build a program to fill in those previously named variables.  The result is displayed &lt;a href=&quot;#OUT&quot;&gt;below&lt;/a&gt;
&lt;a name=&quot;CODE&quot;&gt;&lt;/a&gt;&lt;code&gt;
  #!/usr/bin/perl -w
  use HTML::Template;

  # open the html template
  my $template = HTML::Template-&gt;new(filename =&gt; 'test.tmpl');

  # fill in some parameters
  $template-&gt;param(HOME =&gt; $ENV{HOME});
  $template-&gt;param(PATH =&gt; $ENV{PATH});

  # send the obligatory Content-Type and print the template output
  print &quot;Content-Type: text/html\n\n&quot;, $template-&gt;output;
&lt;/code&gt;
&lt;p /&gt;
&lt;a name=&quot;OUT&quot;&gt;&lt;/a&gt;
Make sure its all ready to go, then point your browser to the script you just created, now, you should have output that looks kinda like this:
&lt;p /&gt;
&lt;code&gt;
  My Home Directory is /home/some/directory
  My Path is set to /bin;/usr/bin
&lt;/code&gt;
Simple, no?
&lt;p&gt;
&lt;strong&gt;It Gets Better&lt;/strong&gt;
&lt;p /&gt;
Not only does it support simple variables, you can also:
&lt;p /&gt;
&lt;li /&gt;Escape HTML from your data!
&lt;li /&gt;Set default values, if data is not supplied by param!
&lt;li /&gt;Build Loops!
&lt;li /&gt;Include other templates!
&lt;li /&gt;Build Conditionals!
&lt;li /&gt;Error handling has descriptive error output, which speeds up debugging!
&lt;li /&gt;And much more!
&lt;p /&gt;
I'm not going into much more detail here, I like to keep it simple, just know that I have found it useful.  Paired with [cpan://CGI], [cpan://DBD::mysql], [cpan://CGI::Session], and various others, I've been able to create powerful web applications.  Another note, I feel that the module is newbie friendly, as I myself is a newb ;-).  Further info can be found on CPAN, and the docs are very easy to read.  So far, I have no displeasures with this module, please, reply with your opinions.
&lt;p /&gt;
Thanks,
&lt;p /&gt;
DeFyance</doctext>
  <type_nodetype>31663</type_nodetype>
  <author_user>129189</author_user>
  <createtime>2003-03-24 13:32:19</createtime>
  <itemdescription>A great module for creating HTML templates.</itemdescription>
  <identifier></identifier>
  <node_id>245501</node_id>
  <usercomment></usercomment>
  <title>HTML::Template</title>
  <nodeupdated>2005-08-05 12:34:07</nodeupdated>
</node>
