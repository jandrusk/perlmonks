<node>
  <doctext>&lt;p&gt;Module:  Config::IniFiles
&lt;p&gt;Author:  &lt;i&gt;Scott Hutton&lt;/i&gt;, currently maintained by &lt;i&gt;Rich Bowen&lt;/i&gt;
&lt;p&gt;Where is it? &lt;a href=&quot;http://cpan.perl.org/modules/by-module/Config/RBOW/&quot;&gt;http://cpan.perl.org/modules/by-module/Config/RBOW/&lt;/a&gt;

&lt;p&gt;Config::IniFiles is a module intended to make life easier for those who rely on flat configuration files.
Specifically, files that use the &quot;Windows style&quot; format.

&lt;p&gt;Config::IniFiles offers an easy and reliable method of reading and writing configuration files that utilize the [Section] key=value format.    You can place the entire contents into a multil-dimensional hash, keyed on section, and/or easily pull those sections in their own hash.

&lt;p&gt;I tried this module out as an alternative to what were/are multiple methods of &quot;configuration&quot; being used by my currrent client.  Currently, my client's Perl CGI/batch scripts utilize a combination of database, hard-coding and tab-delimited flat files for setting default/site-specific configurations within the applications.   Method used seems to depend on the author/maintainer of the day.  
&lt;p&gt;My intent was to implement the practice of a single standard method for storing configuration information.  Although we develop and run on HP-UX, the development team that is responsible for maintenance and development are more comfortable with Windows and are all familiar with the &quot;Windows style&quot; configuration file format.   I am referring to this style as &quot;windows style&quot;, if a monk can identify this format properly, I will gladly update my use of this designation!
&lt;p&gt;The style of configuration file is as follows:
&lt;code&gt;
[Section1]
key1=value1
key2=value2

[Section2]
key1=value1
key2=value2
&lt;/code&gt;
&lt;p&gt;I am sure you've been exposed to this formatting. If not, it is pretty self-explanatory.
&lt;p&gt;My goal was to create a file similar to the following which would isolate common variables associated with the &quot;current&quot; environment that the Perl was executing in.  In this case, dev/test/prod.   The single configuration file would look similar to this (simplified for this example):
&lt;code&gt;
[prod]
ORACLE_HOME=/path/to/oracle/prod
ORACLE_SID=prod_sid
[test]
ORACLE_HOME=/path/to/oracle/test
ORACLE_SID=test_sid
[dev]
ORACLE_HOME=/path/to/oracle/dev
ORACLE_SID=dev_sid
&lt;/code&gt;
&lt;p&gt;The code itself determines which environment it is in based on the hostname
&lt;p&gt;so lets proceed to using Config::IniFiles
&lt;code&gt;

# Make the module available
use Config::IniFiles;

#  now nab the entire config file contents into the %ini hash
my $ConfigFile = &quot;/path/to/inifile/inifile&quot;;
tie my %ini, 'Config::IniFiles', (-file =&gt; $ConfigFile);

#  now grab the relevent section into it's own hash, we're assuming that it's &quot;prod&quot; for this example
my %Config = %{$ini{&quot;prod&quot;}};

# now we have access to our keys in the hash
print &quot;Oracle home is $Config{ORACLE_HOME}&quot;;
print &quot;Oracle SID is $Config{ORACLE_SID}&quot;;

&lt;/code&gt;
&lt;p&gt;While I haven't used all the features of this neat tool, here are a few features that would be real useful if we in fact utilize such a method.
&lt;code&gt;

 - val ($section, $parameter) -    Returns the value of the specified parameter in section $section.
 - setval ($section, $parameter, $value, [ $value2, ... ]) -    Sets the value of parameter $parameter in section $section to $value (or  to a set of values).
 - newval($setion, $parameter, $value [, $value2, ...]) - Adds a new value to the configuration file.
 - delval($section, $parameter) -  Deletes the specified value from the configuration file
 - Sections - Returns an array containing section names in the configuration file. If 
              the *nocase* option was turned on when the config object was created,
              the section names will be returned in lowercase.

&lt;/code&gt;
&lt;p&gt;While I have yet to receive authorization to make such changes to my client's applications, I have a good tool for making it happen.
&lt;p&gt;That is all for now...
&lt;p&gt;&lt;i&gt;Note: Updated typo 8/12/02 per demerphq's head up&lt;/i&gt;
&lt;p&gt;&lt;i&gt;Note: Updated 9/30/02 - modify &lt;cite&gt; tags to italic since cite wasn't&lt;/i&gt;
&lt;p&gt;</doctext>
  <type_nodetype>31663</type_nodetype>
  <author_user>8727</author_user>
  <createtime>2000-10-09 17:38:55</createtime>
  <itemdescription>A module for reading .ini-style configuration files.</itemdescription>
  <identifier></identifier>
  <node_id>35967</node_id>
  <usercomment>I encountered a need for such a tool.  Tried it, liked it.  Time to share.</usercomment>
  <title>Config::IniFiles</title>
  <nodeupdated>2005-08-10 23:39:15</nodeupdated>
</node>
