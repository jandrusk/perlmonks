<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
IO::Socket - Object interface to socket communications

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
&lt;CODE&gt;IO::Socket&lt;/CODE&gt; provides an object interface to creating and using sockets. It is built
upon the [perlman:IO::Handle|Handle] interface and inherits all the methods defined by [perlman:IO::Handle|Handle].

&lt;P&gt;
&lt;CODE&gt;IO::Socket&lt;/CODE&gt; only defines methods for those operations which are common to all types of
socket. Operations which are specified to a socket in a particular domain
have methods defined in sub classes of &lt;CODE&gt;IO::Socket&lt;/CODE&gt;

&lt;P&gt;
&lt;CODE&gt;IO::Socket&lt;/CODE&gt; will export all functions (and constants) defined by [perlman:lib:Socket|Socket].

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;CONSTRUCTOR&quot;&gt;CONSTRUCTOR&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_new&quot;&gt;new ( &amp;#091;ARGS&amp;#093; )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Creates an &lt;CODE&gt;IO::Socket&lt;/CODE&gt;, which is a reference to a newly created symbol (see the &lt;CODE&gt;Symbol&lt;/CODE&gt; package). &lt;CODE&gt;new&lt;/CODE&gt;
optionally takes arguments, these arguments are in key-value pairs.
&lt;CODE&gt;new&lt;/CODE&gt; only looks for one key &lt;CODE&gt;Domain&lt;/CODE&gt; which tells new which domain the socket will be in. All other arguments
will be passed to the configuration method of the package for that domain,
See below.

&lt;P&gt;
&lt;CODE&gt;IO::Socket&lt;/CODE&gt;s will be in autoflush mode after creation. Note that versions of
IO::Socket prior to 1.1603 (as shipped with Perl 5.004_04) did not do this.
So if you need backward compatibility, you should set autoflush explicitly.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;METHODS&quot;&gt;METHODS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
See [perlman:perlfunc|perlfunc] for complete descriptions of each of the following supported &lt;CODE&gt;IO::Socket&lt;/CODE&gt; methods, which are just front ends for the corresponding built-in
functions:

&lt;P&gt;
&lt;PRE&gt;    socket
    socketpair
    bind
    listen
    accept
    send
    recv
    peername (getpeername)
    sockname (getsockname)
&lt;/PRE&gt;
&lt;P&gt;
Some methods take slightly different arguments to those defined in [perlman:perlfunc|perlfunc]
in attempt to make the interface more flexible. These are

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_accept&quot;&gt;accept(&amp;#091;PKG&amp;#093;)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
perform the system call [perlfunc:accept|accept] on the socket and return a new object. The new object will be created in
the same class as the listen socket, unless
&lt;CODE&gt;PKG&lt;/CODE&gt; is specified. This object can be used to communicate with the client that
was trying to connect. In a scalar context the new socket is returned, or
undef upon failure. In an array context a two-element array is returned
containing the new socket and the peer address, the list will be empty upon
failure.

&lt;P&gt;
Additional methods that are provided are

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_timeout&quot;&gt;timeout(&amp;#091;VAL&amp;#093;)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Set or get the timeout value associated with this socket. If called without
any arguments then the current setting is returned. If called with an
argument the current setting is changed and the previous value returned.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_sockopt&quot;&gt;sockopt(OPT &amp;#091;, VAL&amp;#093;)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Unified method to both set and get options in the 
&lt;FONT SIZE=-1&gt;SOL_SOCKET&lt;/FONT&gt; level. If called with one argument then
getsockopt is called, otherwise setsockopt is called.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_sockdomain&quot;&gt;sockdomain&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the numerical number for the socket domain type. For example, for a 
&lt;FONT SIZE=-1&gt;AF_INET&lt;/FONT&gt; socket the value of &lt;CODE&gt;&amp;amp;AF_INET&lt;/CODE&gt; will be returned.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_socktype&quot;&gt;socktype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the numerical number for the socket type. For example, for a 
&lt;FONT SIZE=-1&gt;SOCK_STREAM&lt;/FONT&gt; socket the value of
&lt;CODE&gt;&amp;amp;SOCK_STREAM&lt;/CODE&gt; will be returned.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_protocol&quot;&gt;protocol&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the numerical number for the protocol being used on the socket, if known. If the protocol is unknown, as with an 
&lt;FONT SIZE=-1&gt;AF_UNIX&lt;/FONT&gt; socket, zero is returned.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SUB_CLASSES&quot;&gt;SUB-CLASSES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;IO_Socket_INET&quot;&gt;IO::Socket::INET&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
&lt;CODE&gt;IO::Socket::INET&lt;/CODE&gt; provides a constructor to create an 
&lt;FONT SIZE=-1&gt;AF_INET&lt;/FONT&gt; domain socket and some related methods. The
constructor can take the following options

&lt;P&gt;
&lt;PRE&gt;    PeerAddr    Remote host address          &amp;lt;hostname&amp;gt;&amp;#091;:&amp;lt;port&amp;gt;&amp;#093;
    PeerPort    Remote port or service       &amp;lt;service&amp;gt;&amp;#091;(&amp;lt;no&amp;gt;)&amp;#093; | &amp;lt;no&amp;gt;
    LocalAddr   Local host bind address      hostname&amp;#091;:port&amp;#093;
    LocalPort   Local host bind port         &amp;lt;service&amp;gt;&amp;#091;(&amp;lt;no&amp;gt;)&amp;#093; | &amp;lt;no&amp;gt;
    Proto       Protocol name (or number)    &amp;quot;tcp&amp;quot; | &amp;quot;udp&amp;quot; | ...
    Type        Socket type                  SOCK_STREAM | SOCK_DGRAM | ...
    Listen      Queue size for listen
    Reuse       Set SO_REUSEADDR before binding
    Timeout     Timeout value for various operations
&lt;/PRE&gt;
&lt;P&gt;
If &lt;CODE&gt;Listen&lt;/CODE&gt; is defined then a listen socket is created, else if the socket type, which is derived from the protocol, is 
&lt;FONT SIZE=-1&gt;SOCK_STREAM&lt;/FONT&gt; then 
&lt;CODE&gt;connect()&lt;/CODE&gt; is called.

&lt;P&gt;
The &lt;CODE&gt;PeerAddr&lt;/CODE&gt; can be a hostname or the IP-address on the ``xx.xx.xx.xx'' form. The &lt;CODE&gt;PeerPort&lt;/CODE&gt; can be a number or a symbolic service name. The service name might be
followed by a number in parenthesis which is used if the service is not
known by the system. The &lt;CODE&gt;PeerPort&lt;/CODE&gt; specification can also be embedded in the &lt;CODE&gt;PeerAddr&lt;/CODE&gt;
by preceding it with a ``:''.

&lt;P&gt;
If &lt;CODE&gt;Proto&lt;/CODE&gt; is not given and you specify a symbolic &lt;CODE&gt;PeerPort&lt;/CODE&gt; port, then the constructor will try to derive &lt;CODE&gt;Proto&lt;/CODE&gt; from the service name. As a last resort &lt;CODE&gt;Proto&lt;/CODE&gt; ``tcp'' is assumed. The &lt;CODE&gt;Type&lt;/CODE&gt;
parameter will be deduced from &lt;CODE&gt;Proto&lt;/CODE&gt; if not specified.

&lt;P&gt;
If the constructor is only passed a single argument, it is assumed to be a &lt;CODE&gt;PeerAddr&lt;/CODE&gt; specification.

&lt;P&gt;
Examples:

&lt;P&gt;
&lt;PRE&gt;   $sock = IO::Socket::INET-&amp;gt;new(PeerAddr =&amp;gt; 'www.perl.org',
                                 PeerPort =&amp;gt; 'http(80)',
                                 Proto    =&amp;gt; 'tcp');
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   $sock = IO::Socket::INET-&amp;gt;new(PeerAddr =&amp;gt; 'localhost:smtp(25)');
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   $sock = IO::Socket::INET-&amp;gt;new(Listen    =&amp;gt; 5,
                                 LocalAddr =&amp;gt; 'localhost',
                                 LocalPort =&amp;gt; 9000,
                                 Proto     =&amp;gt; 'tcp');
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;   $sock = IO::Socket::INET-&amp;gt;new('127.0.0.1:25');
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;METHODS&quot;&gt;METHODS&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_sockaddr&quot;&gt;sockaddr ()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the address part of the sockaddr structure for the socket

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_sockport&quot;&gt;sockport ()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the port number that the socket is using on the local host

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_sockhost&quot;&gt;sockhost ()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the address part of the sockaddr structure for the socket in a text
form xx.xx.xx.xx

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_peeraddr&quot;&gt;peeraddr ()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the address part of the sockaddr structure for the socket on the
peer host

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_peerport&quot;&gt;peerport ()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the port number for the socket on the peer host.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_peerhost&quot;&gt;peerhost ()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the address part of the sockaddr structure for the socket on the
peer host in a text form xx.xx.xx.xx

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;IO_Socket_UNIX&quot;&gt;IO::Socket::UNIX&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
&lt;CODE&gt;IO::Socket::UNIX&lt;/CODE&gt; provides a constructor to create an 
&lt;FONT SIZE=-1&gt;AF_UNIX&lt;/FONT&gt; domain socket and some related methods. The
constructor can take the following options

&lt;P&gt;
&lt;PRE&gt;    Type        Type of socket (eg SOCK_STREAM or SOCK_DGRAM)
    Local       Path to local fifo
    Peer        Path to peer fifo
    Listen      Create a listen socket
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;METHODS&quot;&gt;METHODS&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_hostpath&quot;&gt;hostpath()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the pathname to the fifo at the local end

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_peerpath&quot;&gt;peerpath()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the pathanme to the fifo at the peer end

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
[perlman:lib:Socket|Socket], [perlman:IO::Handle|Handle]

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Graham Barr &amp;lt;&lt;EM&gt;Graham.Barr@tiuk.ti.com&lt;/EM&gt;&amp;gt;

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;COPYRIGHT&quot;&gt;COPYRIGHT&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Copyright (c) 1996 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms as
Perl itself.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:52:13</createtime>
  <node_id>1219</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    use IO::Socket;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:IO::Socket</title>
  <nodeupdated>2005-08-13 22:41:57</nodeupdated>
</node>
