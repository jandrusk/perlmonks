<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
unpack - convert binary structure into normal perl variables

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
&lt;CODE&gt;Unpack()&lt;/CODE&gt; does the reverse of [perlfunc:pack|pack()]: it takes a string representing a structure and expands it out into a list value, returning the array value. (In scalar context, it returns merely the first value produced.) The 
&lt;FONT SIZE=-1&gt;TEMPLATE&lt;/FONT&gt; has the same format as in the
 [perlfunc:pack|pack()] function. Here's a subroutine that does substring:

&lt;P&gt;
&lt;PRE&gt;    sub substr {
        my($what,$where,$howmuch) = @_;
        unpack(&amp;quot;x$where a$howmuch&amp;quot;, $what);
    }
&lt;/PRE&gt;
&lt;P&gt;
and then there's

&lt;P&gt;
&lt;PRE&gt;    sub ordinal { unpack(&amp;quot;c&amp;quot;,$_&amp;#091;0&amp;#093;); } # same as ord()
&lt;/PRE&gt;
&lt;P&gt;
In addition, you may prefix a field with a %&amp;lt;number&amp;gt; to indicate that you want a &amp;lt;number&amp;gt;-bit checksum of the items instead of the items themselves. Default is a 16-bit checksum. For example, the following computes the same number as the System 
&lt;FONT SIZE=-1&gt;V&lt;/FONT&gt; sum program:

&lt;P&gt;
&lt;PRE&gt;    while (&amp;lt;&amp;gt;) {
        $checksum += unpack(&amp;quot;%16C*&amp;quot;, $_);
    }
    $checksum %= 65536;
&lt;/PRE&gt;
&lt;P&gt;
The following efficiently counts the number of set bits in a bit vector:

&lt;P&gt;
&lt;PRE&gt;    $setbits = unpack(&amp;quot;%32b*&amp;quot;, $selectmask);
&lt;/PRE&gt;
&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:42:16</createtime>
  <node_id>223</node_id>
  <synopsis>&lt;P&gt;
unpack 
&lt;FONT SIZE=-1&gt;TEMPLATE,EXPR&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:unpack</title>
  <nodeupdated>2005-08-15 07:37:39</nodeupdated>
</node>
