<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
SelfLoader - load functions only on demand

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This module tells its users that functions in the 
&lt;FONT SIZE=-1&gt;FOOBAR&lt;/FONT&gt; package are to be autoloaded from after the &lt;CODE&gt;__DATA__&lt;/CODE&gt; token. See also
[perlman:perlsub|perlsub].

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;The_DATA_token&quot;&gt;The __DATA__ token&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
The &lt;CODE&gt;__DATA__&lt;/CODE&gt; token tells the perl compiler that the perl code for compilation is
finished. Everything after the &lt;CODE&gt;__DATA__&lt;/CODE&gt; token is available for reading via the filehandle 
&lt;FONT SIZE=-1&gt;FOOBAR::DATA,&lt;/FONT&gt; where 
&lt;FONT SIZE=-1&gt;FOOBAR&lt;/FONT&gt; is the name of the current package when the
 &lt;CODE&gt;__DATA__&lt;/CODE&gt;
token is reached. This works just the same as &lt;CODE&gt;__END__&lt;/CODE&gt; does in package 'main', but for other modules data after &lt;CODE&gt;__END__&lt;/CODE&gt; is not automatically retreivable , whereas data after &lt;CODE&gt;__DATA__&lt;/CODE&gt; is. The &lt;CODE&gt;__DATA__&lt;/CODE&gt; token is not recognized in versions of perl prior to 5.001m.

&lt;P&gt;
Note that it is possible to have &lt;CODE&gt;__DATA__&lt;/CODE&gt; tokens in the same package in multiple files, and that the last &lt;CODE&gt;__DATA__&lt;/CODE&gt; token in a given package that is encountered by the compiler is the one
accessible by the filehandle. This also applies to &lt;CODE&gt;__END__&lt;/CODE&gt; and main, i.e. if the 'main' program has an &lt;CODE&gt;__END__&lt;/CODE&gt;, but a module 'require'd (_not_ 'use'd) by that program has a 'package
main;' declaration followed by an '&lt;CODE&gt;__DATA__&lt;/CODE&gt;', then the &lt;CODE&gt;DATA&lt;/CODE&gt; filehandle is set to access the data after the &lt;CODE&gt;__DATA__&lt;/CODE&gt;
in the module, _not_ the data after the &lt;CODE&gt;__END__&lt;/CODE&gt; token in the 'main' program, since the compiler encounters the 'require'd
file later.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;SelfLoader_autoloading&quot;&gt;SelfLoader autoloading&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
The &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; works by the user placing the &lt;CODE&gt;__DATA__&lt;/CODE&gt;
token &lt;EM&gt;after&lt;/EM&gt; perl code which needs to be compiled and run at 'require' time, but &lt;EM&gt;before&lt;/EM&gt; subroutine declarations that can be loaded in later - usually because they
may never be called.

&lt;P&gt;
The &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; will read from the 
&lt;FONT SIZE=-1&gt;FOOBAR::DATA&lt;/FONT&gt; filehandle to load in the data after &lt;CODE&gt;__DATA__&lt;/CODE&gt;, and load in any subroutine when it is called. The costs are the one-time
parsing of the data after &lt;CODE&gt;__DATA__&lt;/CODE&gt;, and a load delay for the _first_ call of any autoloaded function. The
benefits (hopefully) are a speeded up compilation phase, with no need to
load functions which are never used.

&lt;P&gt;
The &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; will stop reading from &lt;CODE&gt;__DATA__&lt;/CODE&gt; if it encounters the &lt;CODE&gt;__END__&lt;/CODE&gt; token - just as you would expect. If the &lt;CODE&gt;__END__&lt;/CODE&gt; token is present, and is followed by the token 
&lt;FONT SIZE=-1&gt;DATA,&lt;/FONT&gt; then the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; leaves the 
&lt;FONT SIZE=-1&gt;FOOBAR::DATA&lt;/FONT&gt; filehandle open on the line after that
token.

&lt;P&gt;
The &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; exports the &lt;CODE&gt;AUTOLOAD&lt;/CODE&gt; subroutine to the package using the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt;, and this loads the called subroutine when it is first called.

&lt;P&gt;
There is no advantage to putting subroutines which will _always_ be called
after the &lt;CODE&gt;__DATA__&lt;/CODE&gt; token.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Autoloading_and_package_lexicals&quot;&gt;Autoloading and package lexicals&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; 'my $pack_lexical' statement makes the variable
&lt;CODE&gt;$pack_lexical&lt;/CODE&gt; local _only_ to the file up to the &lt;CODE&gt;__DATA__&lt;/CODE&gt; token. Subroutines declared elsewhere _cannot_ see these types of
variables, just as if you declared subroutines in the package but in
another file, they cannot see these variables.

&lt;P&gt;
So specifically, autoloaded functions cannot see package lexicals (this
applies to both the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; and the Autoloader). The &lt;CODE&gt;vars&lt;/CODE&gt; pragma provides an alternative to defining package-level globals that will
be visible to autoloaded routines. See the documentation on &lt;STRONG&gt;vars&lt;/STRONG&gt; in the pragma section of [perlman:perlmod|perlmod].

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;SelfLoader_and_AutoLoader&quot;&gt;SelfLoader and AutoLoader&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
The &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; can replace the AutoLoader - just change 'use AutoLoader' to 'use
SelfLoader' (though note that the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; exports the 
&lt;FONT SIZE=-1&gt;AUTOLOAD&lt;/FONT&gt; function - but if you have your own 
&lt;FONT SIZE=-1&gt;AUTOLOAD&lt;/FONT&gt; and are using the AutoLoader too, you probably know what you're doing), and the
 &lt;CODE&gt;__END__&lt;/CODE&gt; token to &lt;CODE&gt;__DATA__&lt;/CODE&gt;. You will need perl version 5.001m or later to use this (version 5.001
with all patches up to patch m).

&lt;P&gt;
There is no need to inherit from the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt;.

&lt;P&gt;
The &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; works similarly to the AutoLoader, but picks up the subs from after the &lt;CODE&gt;__DATA__&lt;/CODE&gt; instead of in the 'lib/auto' directory. There is a maintainance gain in not
needing to run AutoSplit on the module at installation, and a runtime gain
in not needing to keep opening and closing files to load subs. There is a
runtime loss in needing to parse the code after the &lt;CODE&gt;__DATA__&lt;/CODE&gt;. Details of the &lt;STRONG&gt;AutoLoader&lt;/STRONG&gt; and another view of these distinctions can be found in that module's
documentation.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;_DATA_END_and_the_FOOBA&quot;&gt;__DATA__, __END__, and the FOOBAR::DATA filehandle.&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
This section is only relevant if you want to use the &lt;CODE&gt;FOOBAR::DATA&lt;/CODE&gt; together with the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt;.

&lt;P&gt;
Data after the &lt;CODE&gt;__DATA__&lt;/CODE&gt; token in a module is read using the 
&lt;FONT SIZE=-1&gt;FOOBAR::DATA&lt;/FONT&gt; filehandle. &lt;CODE&gt;__END__&lt;/CODE&gt; can still be used to denote the end of the &lt;CODE&gt;__DATA__&lt;/CODE&gt; section if followed by the token 
&lt;FONT SIZE=-1&gt;DATA&lt;/FONT&gt; - this is supported by the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt;. The &lt;CODE&gt;FOOBAR::DATA&lt;/CODE&gt; filehandle is left open if an
&lt;CODE&gt;__END__&lt;/CODE&gt; followed by a 
&lt;FONT SIZE=-1&gt;DATA&lt;/FONT&gt; is found, with the filehandle positioned at the
start of the line after the &lt;CODE&gt;__END__&lt;/CODE&gt; token. If no &lt;CODE&gt;__END__&lt;/CODE&gt; token is present, or an &lt;CODE&gt;__END__&lt;/CODE&gt; token with no 
&lt;FONT SIZE=-1&gt;DATA&lt;/FONT&gt; token on the same line, then the filehandle is
closed.

&lt;P&gt;
The &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; reads from wherever the current position of the &lt;CODE&gt;FOOBAR::DATA&lt;/CODE&gt; filehandle is, until the 
&lt;FONT SIZE=-1&gt;EOF&lt;/FONT&gt; or &lt;CODE&gt;__END__&lt;/CODE&gt;. This means that if you want to use that filehandle (and 
&lt;FONT SIZE=-1&gt;ONLY&lt;/FONT&gt; if you want to), you should either

&lt;P&gt;
1. Put all your subroutine declarations immediately after the &lt;CODE&gt;__DATA__&lt;/CODE&gt; token and put your own data after those declarations, using the &lt;CODE&gt;__END__&lt;/CODE&gt; token to mark the end of subroutine declarations. You must also ensure that
the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt;
reads first by calling 'SelfLoader-&amp;gt;load_stubs();', or by using a
function which is selfloaded;

&lt;P&gt;
or

&lt;P&gt;
2. You should read the &lt;CODE&gt;FOOBAR::DATA&lt;/CODE&gt; filehandle first, leaving the handle open and positioned at the first line
of subroutine declarations.

&lt;P&gt;
You could conceivably do both.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Classes_and_inherited_methods_&quot;&gt;Classes and inherited methods.&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
For modules which are not classes, this section is not relevant. This
section is only relevant if you have methods which could be inherited.

&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; subroutine stub (or forward declaration) looks like

&lt;P&gt;
&lt;PRE&gt;  sub stub;
&lt;/PRE&gt;
&lt;P&gt;
i.e. it is a subroutine declaration without the body of the subroutine. For
modules which are not classes, there is no real need for stubs as far as
autoloading is concerned.

&lt;P&gt;
For modules which 
&lt;FONT SIZE=-1&gt;ARE&lt;/FONT&gt; classes, and need to handle inherited methods,
stubs are needed to ensure that the method inheritance mechanism works
properly. You can load the stubs into the module at 'require' time, by
adding the statement 'SelfLoader-&amp;gt;load_stubs();' to the module to do
this.

&lt;P&gt;
The alternative is to put the stubs in before the &lt;CODE&gt;__DATA__&lt;/CODE&gt; token 
&lt;FONT SIZE=-1&gt;BEFORE&lt;/FONT&gt; releasing the module, and for this purpose the &lt;CODE&gt;Devel::SelfStubber&lt;/CODE&gt;
module is available. However this does require the extra step of ensuring that the stubs are in the module. If this is done 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; strongly recommend that this is done 
&lt;FONT SIZE=-1&gt;BEFORE&lt;/FONT&gt; releasing the module - it should 
&lt;FONT SIZE=-1&gt;NOT&lt;/FONT&gt; be done at install time in general.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;Multiple_packages_and_fully_qual&quot;&gt;Multiple packages and fully qualified subroutine names&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Subroutines in multiple packages within the same file are supported - but
you should note that this requires exporting the &lt;CODE&gt;SelfLoader::AUTOLOAD&lt;/CODE&gt; to every package which requires it. This is done automatically by the
&lt;STRONG&gt;SelfLoader&lt;/STRONG&gt; when it first loads the subs into the cache, but you should really specify
it in the initialization before the &lt;CODE&gt;__DATA__&lt;/CODE&gt; by putting a 'use SelfLoader' statement in each package.

&lt;P&gt;
Fully qualified subroutine names are also supported. For example,

&lt;P&gt;
&lt;PRE&gt;   __DATA__
   sub foo::bar {23}
   package baz;
   sub dob {32}
&lt;/PRE&gt;
&lt;P&gt;
will all be loaded correctly by the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt;, and the &lt;STRONG&gt;SelfLoader&lt;/STRONG&gt;
will ensure that the packages 'foo' and 'baz' correctly have the
&lt;STRONG&gt;SelfLoader&lt;/STRONG&gt;  &lt;CODE&gt;AUTOLOAD&lt;/CODE&gt; method when the data after &lt;CODE&gt;__DATA__&lt;/CODE&gt; is first parsed.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:49:29</createtime>
  <node_id>1125</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    package FOOBAR;
    use SelfLoader;
    
    ... (initializing code)
    
    __DATA__
    sub {....
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:lib:SelfLoader</title>
  <nodeupdated>2005-08-10 16:18:21</nodeupdated>
</node>
