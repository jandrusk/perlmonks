<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
IO::Select - 
&lt;FONT SIZE=-1&gt;OO&lt;/FONT&gt; interface to the select system call

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
The &lt;CODE&gt;IO::Select&lt;/CODE&gt; package implements an object approach to the system [perlfunc:select|select]
function call. It allows the user to see what 
&lt;FONT SIZE=-1&gt;IO&lt;/FONT&gt; handles, see [perlman:IO::Handle|Handle], are ready for reading, writing or have an error condition pending.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;CONSTRUCTOR&quot;&gt;CONSTRUCTOR&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_new&quot;&gt;new ( &amp;#091; HANDLES &amp;#093; )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The constructor creates a new object and optionally initialises it with a
set of handles.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;METHODS&quot;&gt;METHODS&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_add&quot;&gt;add ( HANDLES )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Add the list of handles to the &lt;CODE&gt;IO::Select&lt;/CODE&gt; object. It is these values that will be returned when an event occurs. &lt;CODE&gt;IO::Select&lt;/CODE&gt; keeps these values in a cache which is indexed by the [perlfunc:fileno|fileno] of the handle, so if more than one handle with the same [perlfunc:fileno|fileno] is specified then only the last one is cached.

&lt;P&gt;
Each handle can be an &lt;CODE&gt;IO::Handle&lt;/CODE&gt; object, an integer or an array reference where the first element is a &lt;CODE&gt;IO::Handle&lt;/CODE&gt; or an integer.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_remove&quot;&gt;remove ( HANDLES )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Remove all the given handles from the object. This method also works by the [perlfunc:fileno|fileno] of the handles. So the exact handles that were added need not be passed,
just handles that have an equivalent [perlfunc:fileno|fileno]

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_exists&quot;&gt;exists ( HANDLE )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a true value (actually the handle itself) if it is present. Returns
undef otherwise.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_handles&quot;&gt;handles&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return an array of all registered handles.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_can_read&quot;&gt;can_read ( &amp;#091; TIMEOUT &amp;#093; )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return an array of handles that are ready for reading. &lt;CODE&gt;TIMEOUT&lt;/CODE&gt; is the maximum amount of time to wait before returning an empty list. If
&lt;CODE&gt;TIMEOUT&lt;/CODE&gt; is not given and any handles are registered then the call will block.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_can_write&quot;&gt;can_write ( &amp;#091; TIMEOUT &amp;#093; )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Same as &lt;CODE&gt;can_read&lt;/CODE&gt; except check for handles that can be written to.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_has_error&quot;&gt;has_error ( &amp;#091; TIMEOUT &amp;#093; )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Same as &lt;CODE&gt;can_read&lt;/CODE&gt; except check for handles that have an error condition, for example 
&lt;FONT SIZE=-1&gt;EOF.&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_count&quot;&gt;count ()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns the number of handles that the object will check for when one of
the &lt;CODE&gt;can_&lt;/CODE&gt; methods is called or the object is passed to the [perlfunc:select|select] static method.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_bits&quot;&gt;bits()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the bit string suitable as argument to the core 
&lt;CODE&gt;select()&lt;/CODE&gt; call.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;bits()&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the bit string suitable as argument to the core 
&lt;CODE&gt;select()&lt;/CODE&gt; call.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_select&quot;&gt;select ( READ, WRITE, ERROR &amp;#091;, TIMEOUT &amp;#093; )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
[perlfunc:select|select] is a static method, that is you call it with the package name like &lt;CODE&gt;new&lt;/CODE&gt;. &lt;CODE&gt;READ&lt;/CODE&gt;, &lt;CODE&gt;WRITE&lt;/CODE&gt; and &lt;CODE&gt;ERROR&lt;/CODE&gt; are either [perlfunc:undef|undef]
or &lt;CODE&gt;IO::Select&lt;/CODE&gt; objects. &lt;CODE&gt;TIMEOUT&lt;/CODE&gt; is optional and has the same effect as for the core select call.

&lt;P&gt;
The result will be an array of 3 elements, each a reference to an array
which will hold the handles that are ready for reading, writing and have
error conditions respectively. Upon error an empty array is returned.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;EXAMPLE&quot;&gt;EXAMPLE&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Here is a short example which shows how &lt;CODE&gt;IO::Select&lt;/CODE&gt; could be used to write a server which communicates with several sockets
while also listening for more connections on a listen socket

&lt;P&gt;
&lt;PRE&gt;    use IO::Select;
    use IO::Socket;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $lsn = new IO::Socket::INET(Listen =&amp;gt; 1, LocalPort =&amp;gt; 8080);
    $sel = new IO::Select( $lsn );
    
    while(@ready = $sel-&amp;gt;can_read) {
        foreach $fh (@ready) {
            if($fh == $lsn) {
                # Create a new socket
                $new = $lsn-&amp;gt;accept;
                $sel-&amp;gt;add($new);
            }
            else {
                # Process socket
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;                # Maybe we have finished with the socket
                $sel-&amp;gt;remove($fh);
                $fh-&amp;gt;close;
            }
        }
    }
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Graham Barr &amp;lt;&lt;EM&gt;Graham.Barr@tiuk.ti.com&lt;/EM&gt;&amp;gt;

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;COPYRIGHT&quot;&gt;COPYRIGHT&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Copyright (c) 1995 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms as
Perl itself.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:52:13</createtime>
  <node_id>1218</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    use IO::Select;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $s = IO::Select-&amp;gt;new();
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $s-&amp;gt;add(\*STDIN);
    $s-&amp;gt;add($some_handle);
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    @ready = $s-&amp;gt;can_read($timeout);
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    @ready = IO::Select-&amp;gt;new(@ha</synopsis>
  <title>perlman:IO::Select</title>
  <nodeupdated>2005-08-13 07:06:57</nodeupdated>
</node>
