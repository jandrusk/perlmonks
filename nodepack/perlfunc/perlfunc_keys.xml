<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
keys - retrieve list of indices from a hash

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
Returns a list consisting of all the keys of the named hash. (In a scalar
context, returns the number of keys.) The keys are returned in an
apparently random order, but it is the same order as either the
[perlfunc:values|values()] or [perlfunc:each|each()] function produces (given that the hash has not been modified). As a side
effect, it resets HASH's iterator.

&lt;P&gt;
Here is yet another way to print your environment:

&lt;P&gt;
&lt;PRE&gt;    @keys = keys %ENV;
    @values = values %ENV;
    while ($#keys &amp;gt;= 0) {
        print pop(@keys), '=', pop(@values), &amp;quot;\n&amp;quot;;
    }
&lt;/PRE&gt;
&lt;P&gt;
or how about sorted by key:

&lt;P&gt;
&lt;PRE&gt;    foreach $key (sort(keys %ENV)) {
        print $key, '=', $ENV{$key}, &amp;quot;\n&amp;quot;;
    }
&lt;/PRE&gt;
&lt;P&gt;
To sort an array by value, you'll need to use a [perlfunc:sort|sort()] function. Here's a descending numeric sort of a hash by its values:

&lt;P&gt;
&lt;PRE&gt;    foreach $key (sort { $hash{$b} &amp;lt;=&amp;gt; $hash{$a} } keys %hash) {
        printf &amp;quot;%4d %s\n&amp;quot;, $hash{$key}, $key;
    }
&lt;/PRE&gt;
&lt;P&gt;
As an lvalue [perlfunc:keys|keys()] allows you to increase the number of hash buckets allocated for the given
hash. This can gain you a measure of efficiency if you know the hash is
going to get big. (This is similar to pre-extending an array by assigning a
larger number to $#array.) If you say

&lt;P&gt;
&lt;PRE&gt;    keys %hash = 200;
&lt;/PRE&gt;
&lt;P&gt;
then &lt;CODE&gt;%hash&lt;/CODE&gt; will have at least 200 buckets allocated for it--256 of them, in fact,
since it rounds up to the next power of two. These buckets will be retained
even if you do &lt;CODE&gt;%hash = ()&lt;/CODE&gt;, use &lt;CODE&gt;undef
%hash&lt;/CODE&gt; if you want to free the storage while &lt;CODE&gt;%hash&lt;/CODE&gt; is still in scope. You can't shrink the number of buckets allocated for the
hash using
[perlfunc:keys|keys()] in this way (but you needn't worry about doing this by accident, as trying
has no effect).

&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:42:13</createtime>
  <node_id>218</node_id>
  <synopsis>&lt;P&gt;
keys 
&lt;FONT SIZE=-1&gt;HASH&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:keys</title>
  <nodeupdated>2005-08-13 20:08:57</nodeupdated>
</node>
