<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
Text::ParseWords - parse text into an array of tokens or array of arrays

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
The &amp;amp;nested_quotewords() and &amp;amp;quotewords() functions accept a
delimiter (which can be a regular expression) and a list of lines and then
breaks those lines up into a list of words ignoring delimiters that appear
inside quotes. &amp;amp;quotewords() returns all of the tokens in a single long
list, while &amp;amp;nested_quotewords() returns a list of token lists
corresponding to the elements of @lines. &amp;amp;parse_line() does tokenizing
on a single string. The &amp;amp;*quotewords() functions simply call
&amp;amp;parse_lines(), so if you're only splitting one line you can call
&amp;amp;parse_lines() directly and save a function call.

&lt;P&gt;
The &lt;CODE&gt;$keep&lt;/CODE&gt; argument is a boolean flag. If true, then the tokens are split on the specified delimiter, but all other characters (quotes, backslashes, etc.) are kept in the tokens. If &lt;CODE&gt;$keep&lt;/CODE&gt; is false then the &amp;amp;*quotewords() functions remove all quotes and backslashes that are not themselves backslash-escaped or inside of single quotes (i.e., &amp;amp;quotewords() tries to interpret these characters just like the Bourne shell). 
&lt;FONT SIZE=-1&gt;NB:&lt;/FONT&gt; these semantics are significantly different from the original version of this module shipped with Perl 5.000 through 5.004. As an additional feature, &lt;CODE&gt;$keep&lt;/CODE&gt; may be the keyword ``delimiters'' which causes the functions to preserve the delimiters in each string as tokens in the token lists, in addition to preserving quote and backslash characters.

&lt;P&gt;
&amp;amp;shellwords() is written as a special case of &amp;amp;quotewords(), and it
does token parsing with whitespace as a delimiter-- similar to most Unix
shells.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;EXAMPLES&quot;&gt;EXAMPLES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The sample program:

&lt;P&gt;
&lt;PRE&gt;  use Text::ParseWords;
  @words = &amp;amp;quotewords('\s+', 0, q{this   is &amp;quot;a test&amp;quot; of\ quotewords \&amp;quot;for you});
  $i = 0;
  foreach (@words) {
      print &amp;quot;$i: &amp;lt;$_&amp;gt;\n&amp;quot;;
      $i++;
  }
&lt;/PRE&gt;
&lt;P&gt;
produces:

&lt;P&gt;
&lt;PRE&gt;  0: &amp;lt;this&amp;gt;
  1: &amp;lt;is&amp;gt;
  2: &amp;lt;a test&amp;gt;
  3: &amp;lt;of quotewords&amp;gt;
  4: &amp;lt;&amp;quot;for&amp;gt;
  5: &amp;lt;you&amp;gt;
&lt;/PRE&gt;
&lt;P&gt;
demonstrating:

&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_a_simple_word&quot;&gt;a simple word&lt;/A&gt;&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_multiple_spaces_are_skipped_beca&quot;&gt;multiple spaces are skipped because of our $delim&lt;/A&gt;&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_use_of_quotes_to_include_a_space&quot;&gt;use of quotes to include a space in a word&lt;/A&gt;&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_use_of_a_backslash_to_include_a_&quot;&gt;use of a backslash to include a space in a word&lt;/A&gt;&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_use_of_a_backslash_to_remove_the&quot;&gt;use of a backslash to remove the special meaning of a double-quote&lt;/A&gt;&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_another_simple_word_note_the_la&quot;&gt;another simple word (note the lack of effect of the
backslashed double-quote)&lt;/A&gt;&lt;/STRONG&gt;
&lt;/OL&gt;
&lt;P&gt;
Replacing &lt;CODE&gt;&amp;amp;quotewords('\s+', 0, q{this   is...})&lt;/CODE&gt;
with &lt;CODE&gt;&amp;amp;shellwords(q{this   is...})&lt;/CODE&gt;
is a simpler way to accomplish the same thing.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHORS&quot;&gt;AUTHORS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Maintainer is Hal Pomeranz &amp;lt;&lt;A
HREF=&quot;mailto:pomeranz@netcom.com&quot;&gt;pomeranz@netcom.com&lt;/A&gt;&amp;gt;, 1994-1997
(Original author unknown). Much of the code for &amp;amp;parse_line()
(including the primary regexp) from Joerk Behrends &amp;lt;&lt;A
HREF=&quot;mailto:jbehrends@multimediaproduzenten.de&quot;&gt;jbehrends@multimediaproduzenten.de&lt;/A&gt;&amp;gt;

&lt;P&gt;
Examples section another documentation provided by John Heidemann &amp;lt;&lt;A
HREF=&quot;mailto:johnh@ISI.EDU&quot;&gt;johnh@ISI.EDU&lt;/A&gt;&amp;gt;

&lt;P&gt;
Bug reports, patches, and nagging provided by lots of folks-- thanks
everybody! Special thanks to Michael Schwern &amp;lt;&lt;A
HREF=&quot;mailto:schwern@envirolink.org&quot;&gt;schwern@envirolink.org&lt;/A&gt;&amp;gt; for
assuring me that a &amp;amp;nested_quotewords() would be useful, and to Jeff
Friedl &amp;lt;&lt;A
HREF=&quot;mailto:jfriedl@yahoo-inc.com&quot;&gt;jfriedl@yahoo-inc.com&lt;/A&gt;&amp;gt; for
telling me not to worry about error-checking (sort of-- you had to be
there).

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:53:27</createtime>
  <node_id>1254</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;  use Text::ParseWords;
  @lists = &amp;amp;nested_quotewords($delim, $keep, @lines);
  @words = &amp;amp;quotewords($delim, $keep, @lines);
  @words = &amp;amp;shellwords(@lines);
  @words = &amp;amp;parse_line($delim, $keep, $line);
  @words = &amp;amp;old_shellw</synopsis>
  <title>perlman:Text::ParseWords</title>
  <nodeupdated>2005-08-11 08:27:49</nodeupdated>
</node>
