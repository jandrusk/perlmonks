<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
fields - compile-time class fields

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
The &lt;CODE&gt;fields&lt;/CODE&gt; pragma enables compile-time verified class fields. It does so by updating
the &lt;CODE&gt;%FIELDS&lt;/CODE&gt; hash in the calling package.

&lt;P&gt;
If a typed lexical variable holding a reference is used to access a hash
element and the &lt;CODE&gt;%FIELDS&lt;/CODE&gt; hash of the given type exists, then
the operation is turned into an array access at compile time. The
&lt;CODE&gt;%FIELDS&lt;/CODE&gt; hash map from hash element names to the array indices.
If the hash element is not present in the &lt;CODE&gt;%FIELDS&lt;/CODE&gt; hash, then a
compile-time error is signaled.

&lt;P&gt;
Since the &lt;CODE&gt;%FIELDS&lt;/CODE&gt; hash is used at compile-time, it must be set
up at compile-time too. This is made easier with the help of the 'fields'
and the 'base' pragma modules. The 'base' pragma will copy fields from base
classes and the 'fields' pragma adds new fields. Field names that start
with an underscore character are made private to a class and are not
visible to subclasses. Inherited fields can be overridden but will generate
a warning if used together with the &lt;CODE&gt;-w&lt;/CODE&gt;
switch.

&lt;P&gt;
The effect of all this is that you can have objects with named fields which are as compact and as fast arrays to access. This only works as long as the objects are accessed through properly typed variables. For untyped access to work you have to make sure that a reference to the proper &lt;CODE&gt;%FIELDS&lt;/CODE&gt; hash is assigned to the 0'th element of the array object (so that the objects can be treated like an pseudo-hash). 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; constructor like this does the job:

&lt;P&gt;
&lt;PRE&gt;  sub new
  {
      my $class = shift;
      no strict 'refs';
      my $self = bless &amp;#091;\%{&amp;quot;$class\::FIELDS&amp;quot;&amp;#093;, $class;
      $self;
  }
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
[perlman:lib:base|base],
[perlman:perlref|perlref]

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:49:31</createtime>
  <node_id>1138</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    {
        package Foo;
        use fields qw(foo bar _private);
    }
    ...
    my Foo $var = new Foo;
    $var-&amp;gt;{foo} = 42;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # This will generate a compile-time error.
    $var-&amp;gt;{zap} = 42;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    {
</synopsis>
  <title>perlman:lib:fields</title>
  <nodeupdated>2005-08-15 08:34:34</nodeupdated>
</node>
