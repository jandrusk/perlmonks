<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;

&lt;FONT SIZE=-1&gt;B::C&lt;/FONT&gt; - Perl compiler's 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; backend

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This compiler backend takes Perl source and generates 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; source code corresponding to the internal structures that perl uses to run your program. When the generated 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; source is compiled and run, it cuts out the time which perl would have taken to load and parse your program into its internal semi-compiled form. That means that compiling with this backend will not help improve the runtime execution speed of your program but may improve the start-up time. Depending on the environment in which your program runs this may be either a help or a hindrance.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;OPTIONS&quot;&gt;OPTIONS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
If there are any non-option arguments, they are taken to be names of
objects to be saved (probably doesn't work properly yet). Without extra
arguments, it saves the main program.

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__ofilename&quot;&gt;-ofilename&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Output to filename instead of 
&lt;FONT SIZE=-1&gt;STDOUT&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__v&quot;&gt;-v&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Verbose compilation (currently gives a few compilation statistics).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;--&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Force end of options

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__uPackname&quot;&gt;-uPackname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Force apparently unused subs from package Packname to be compiled. This
allows programs to use eval ``foo()'' even when sub foo is never seen to be
used at compile time. The down side is that any subs which really are never
used also have code generated. This option is necessary, for example, if
you have a signal handler foo which you initialise with &lt;CODE&gt;$SIG{BAR} = &amp;quot;foo&amp;quot;&lt;/CODE&gt;. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; better fix, though, is just to change it to &lt;CODE&gt;$SIG{BAR} = \&amp;amp;foo&lt;/CODE&gt;. You can have multiple &lt;STRONG&gt;-u&lt;/STRONG&gt;
options. The compiler tries to figure out which packages may possibly have
subs in which need compiling but the current version doesn't do it very
well. In particular, it is confused by nested packages (i.e. of the form &lt;CODE&gt;A::B&lt;/CODE&gt;) where package &lt;CODE&gt;A&lt;/CODE&gt; does not contain any subs.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__D&quot;&gt;-D&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Debug options (concatenated or separate flags like &lt;CODE&gt;perl -D&lt;/CODE&gt;).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Do&quot;&gt;-Do&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
OPs, prints each 
&lt;FONT SIZE=-1&gt;OP&lt;/FONT&gt; as it's processed

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Dc&quot;&gt;-Dc&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
COPs, prints COPs as processed (incl. file &amp;amp; line num)

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__DA&quot;&gt;-DA&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
prints 
&lt;FONT SIZE=-1&gt;AV&lt;/FONT&gt; information on saving

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__DC&quot;&gt;-DC&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
prints 
&lt;FONT SIZE=-1&gt;CV&lt;/FONT&gt; information on saving

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__DM&quot;&gt;-DM&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
prints 
&lt;FONT SIZE=-1&gt;MAGIC&lt;/FONT&gt; information on saving

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__f&quot;&gt;-f&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Force optimisations on or off one at a time.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fcog&quot;&gt;-fcog&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Copy-on-grow: PVs declared and initialised statically.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fno_cog&quot;&gt;-fno-cog&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
No copy-on-grow.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__On&quot;&gt;-On&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Optimisation level (n = 0, 1, 2, ...). &lt;STRONG&gt;-O&lt;/STRONG&gt; means &lt;STRONG&gt;-O1&lt;/STRONG&gt;. Currently,
&lt;STRONG&gt;-O1&lt;/STRONG&gt; and higher set &lt;STRONG&gt;-fcog&lt;/STRONG&gt;.

&lt;H1&gt;&lt;A NAME=&quot;EXAMPLES&quot;&gt;EXAMPLES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;PRE&gt;    perl -MO=C,-ofoo.c foo.pl
    perl cc_harness -o foo foo.c
&lt;/PRE&gt;
&lt;P&gt;
Note that &lt;CODE&gt;cc_harness&lt;/CODE&gt; lives in the &lt;CODE&gt;B&lt;/CODE&gt; subdirectory of your perl library directory. The utility called &lt;CODE&gt;perlcc&lt;/CODE&gt; may also be used to help make use of this compiler.

&lt;P&gt;
&lt;PRE&gt;    perl -MO=C,-v,-DcA bar.pl &amp;gt; /dev/null
&lt;/PRE&gt;
&lt;H1&gt;&lt;A NAME=&quot;BUGS&quot;&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Plenty. Current status: experimental.

&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Malcolm Beattie, &lt;CODE&gt;mbeattie@sable.ox.ac.uk&lt;/CODE&gt;

&lt;/DL&gt;
&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:50:09</createtime>
  <node_id>1155</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;        perl -MO=C&amp;#091;,OPTIONS&amp;#093; foo.pl
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:B::C</title>
  <nodeupdated>2005-08-12 23:11:40</nodeupdated>
</node>
