<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
IO::Handle - supply object methods for 
&lt;FONT SIZE=-1&gt;I/O&lt;/FONT&gt; handles

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
&lt;CODE&gt;IO::Handle&lt;/CODE&gt; is the base class for all other 
&lt;FONT SIZE=-1&gt;IO&lt;/FONT&gt; handle classes. It is not intended that objects of &lt;CODE&gt;IO::Handle&lt;/CODE&gt; would be created directly, but instead &lt;CODE&gt;IO::Handle&lt;/CODE&gt; is inherited from by several other classes in the 
&lt;FONT SIZE=-1&gt;IO&lt;/FONT&gt; hierarchy.

&lt;P&gt;
If you are reading this documentation, looking for a replacement for the &lt;CODE&gt;FileHandle&lt;/CODE&gt; package, then 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; suggest you read the documentation for &lt;CODE&gt;IO::File&lt;/CODE&gt;

&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; &lt;CODE&gt;IO::Handle&lt;/CODE&gt; object is a reference to a symbol (see the &lt;CODE&gt;Symbol&lt;/CODE&gt; package)

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;CONSTRUCTOR&quot;&gt;CONSTRUCTOR&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_new&quot;&gt;new ()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Creates a new &lt;CODE&gt;IO::Handle&lt;/CODE&gt; object.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_new_from_fd&quot;&gt;new_from_fd ( FD, MODE )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Creates a &lt;CODE&gt;IO::Handle&lt;/CODE&gt; like &lt;CODE&gt;new&lt;/CODE&gt; does. It requires two parameters, which are passed to the method &lt;CODE&gt;fdopen&lt;/CODE&gt;; if the fdopen fails, the object is destroyed. Otherwise, it is returned
to the caller.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;METHODS&quot;&gt;METHODS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
See [perlman:perlfunc|perlfunc] for complete descriptions of each of the following supported &lt;CODE&gt;IO::Handle&lt;/CODE&gt; methods, which are just front ends for the corresponding built-in
functions:

&lt;P&gt;
&lt;PRE&gt;    close
    fileno
    getc
    eof
    read
    truncate
    stat
    print
    printf
    sysread
    syswrite
&lt;/PRE&gt;
&lt;P&gt;
See [perlman:perlvar|perlvar] for complete descriptions of each of the following supported &lt;CODE&gt;IO::Handle&lt;/CODE&gt; methods:

&lt;P&gt;
&lt;PRE&gt;    autoflush
    output_field_separator
    output_record_separator
    input_record_separator
    input_line_number
    format_page_number
    format_lines_per_page
    format_lines_left
    format_name
    format_top_name
    format_line_break_characters
    format_formfeed
    format_write
&lt;/PRE&gt;
&lt;P&gt;
Furthermore, for doing normal 
&lt;FONT SIZE=-1&gt;I/O&lt;/FONT&gt; you might need these:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_fdopen&quot;&gt;$fh-&amp;gt;fdopen ( FD, MODE )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
&lt;CODE&gt;fdopen&lt;/CODE&gt; is like an ordinary [perlfunc:open|open] except that its first parameter is not a filename but rather a file handle
name, a IO::Handle object, or a file descriptor number.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_opened&quot;&gt;$fh-&amp;gt;opened&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns true if the object is currently a valid file descriptor.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_getline&quot;&gt;$fh-&amp;gt;getline&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This works like &amp;lt;$fh&amp;gt; described in [perlman:perlop|perlop]
except that it's more readable and can be safely called in an array context
but still returns just one line.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_getlines&quot;&gt;$fh-&amp;gt;getlines&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This works like &amp;lt;$fh&amp;gt; when called in an array context to read all the remaining lines in a file, except that it's more readable. It will also 
&lt;CODE&gt;croak()&lt;/CODE&gt; if accidentally called in a scalar context.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_ungetc&quot;&gt;$fh-&amp;gt;ungetc ( ORD )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Pushes a character with the given ordinal value back onto the given
handle's input stream.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_write&quot;&gt;$fh-&amp;gt;write ( BUF, LEN &amp;#091;, OFFSET }\&amp;#093; )&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This [perlfunc:write|write] is like [perlfunc:write|write] found in 
&lt;FONT SIZE=-1&gt;C,&lt;/FONT&gt; that is it is the opposite of read. The wrapper for
the perl [perlfunc:write|write] function is called &lt;CODE&gt;format_write&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_flush&quot;&gt;$fh-&amp;gt;flush&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Flush the given handle's buffer.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_error&quot;&gt;$fh-&amp;gt;error&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Returns a true value if the given handle has experienced any errors since
it was opened or since the last call to &lt;CODE&gt;clearerr&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_clearerr&quot;&gt;$fh-&amp;gt;clearerr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Clear the given handle's error indicator.

&lt;/DL&gt;
&lt;P&gt;
If the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; functions 
&lt;CODE&gt;setbuf()&lt;/CODE&gt; and/or 
&lt;CODE&gt;setvbuf()&lt;/CODE&gt; are available, then

&lt;CODE&gt;IO::Handle::setbuf&lt;/CODE&gt; and &lt;CODE&gt;IO::Handle::setvbuf&lt;/CODE&gt; set the buffering policy for an IO::Handle. The calling sequences for the Perl functions are the same as their 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; counterparts--including the constants
 &lt;CODE&gt;_IOFBF&lt;/CODE&gt;,
&lt;CODE&gt;_IOLBF&lt;/CODE&gt;, and &lt;CODE&gt;_IONBF&lt;/CODE&gt; for 
&lt;CODE&gt;setvbuf()--except&lt;/CODE&gt; that the buffer parameter specifies a scalar variable to use as a buffer. 
&lt;FONT SIZE=-1&gt;WARNING:&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; variable used as a buffer by
 &lt;CODE&gt;setbuf&lt;/CODE&gt; or &lt;CODE&gt;setvbuf&lt;/CODE&gt; must not be modified in any way until the IO::Handle is closed or &lt;CODE&gt;setbuf&lt;/CODE&gt; or &lt;CODE&gt;setvbuf&lt;/CODE&gt; is called again, or memory corruption may result! Note that you need to
import the constants &lt;CODE&gt;_IOFBF&lt;/CODE&gt;, &lt;CODE&gt;_IOLBF&lt;/CODE&gt;, and &lt;CODE&gt;_IONBF&lt;/CODE&gt; explicitly.

&lt;P&gt;
Lastly, there is a special method for working under &lt;STRONG&gt;-T&lt;/STRONG&gt; and setuid/gid scripts:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fh_untaint&quot;&gt;$fh-&amp;gt;untaint&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Marks the object as taint-clean, and as such data read from it will also be
considered taint-clean. Note that this is a very trusting action to take,
and appropriate consideration for the data source and potential
vulnerability should be kept in mind.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;NOTE&quot;&gt;NOTE&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; &lt;CODE&gt;IO::Handle&lt;/CODE&gt; object is a 
&lt;FONT SIZE=-1&gt;GLOB&lt;/FONT&gt; reference. Some modules that inherit from &lt;CODE&gt;IO::Handle&lt;/CODE&gt; may want to keep object related variables in the hash table part of the 
&lt;FONT SIZE=-1&gt;GLOB.&lt;/FONT&gt; In an attempt to prevent modules trampling on each other 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; propose the that any such module should prefix its variables with its own name separated by _'s. For example the IO::Socket module keeps a
 &lt;CODE&gt;timeout&lt;/CODE&gt; variable in 'io_socket_timeout'.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
[perlman:perlfunc|perlfunc], 
[perlman:perlop|perlop],
[perlman:IO::File|File]

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;BUGS&quot;&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Due to backwards compatibility, all filehandles resemble objects of class &lt;CODE&gt;IO::Handle&lt;/CODE&gt;, or actually classes derived from that class. They actually aren't. Which
means you can't derive your own class from &lt;CODE&gt;IO::Handle&lt;/CODE&gt; and inherit those methods.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;HISTORY&quot;&gt;HISTORY&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Derived from FileHandle.pm by Graham Barr &amp;lt;&lt;EM&gt;bodg@tiuk.ti.com&lt;/EM&gt;&amp;gt;

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:52:13</createtime>
  <node_id>1217</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    use IO::Handle;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $fh = new IO::Handle;
    if ($fh-&amp;gt;fdopen(fileno(STDIN),&amp;quot;r&amp;quot;)) {
        print $fh-&amp;gt;getline;
        $fh-&amp;gt;close;
    }
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $fh = new IO::Handle;
    if ($fh-&amp;gt;fdopen(fil</synopsis>
  <title>perlman:IO::Handle</title>
  <nodeupdated>2005-08-13 00:44:31</nodeupdated>
</node>
