<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
fileparse - split a pathname into pieces

&lt;P&gt;
basename - extract just the filename from a path

&lt;P&gt;
dirname - extract just the directory from a path

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
These routines allow you to parse file specifications into useful pieces
using the syntax of different operating systems.

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_fileparse_set_fstype&quot;&gt;fileparse_set_fstype&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
You select the syntax via the routine 
&lt;CODE&gt;fileparse_set_fstype().&lt;/CODE&gt;

&lt;P&gt;
If the argument passed to it contains one of the substrings 
&lt;FONT SIZE=-1&gt;``VMS'',&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;``MSDOS'',&lt;/FONT&gt; ``MacOS'', ``AmigaOS'' or ``MSWin32'', the file specification syntax of that operating system is used in future calls to 
&lt;CODE&gt;fileparse(),&lt;/CODE&gt; 
&lt;CODE&gt;basename(),&lt;/CODE&gt; and 
&lt;CODE&gt;dirname().&lt;/CODE&gt; If it contains none of these substrings, 
&lt;FONT SIZE=-1&gt;UNIX&lt;/FONT&gt; syntax is used. This pattern matching is case-insensitive. If you've selected 
&lt;FONT SIZE=-1&gt;VMS&lt;/FONT&gt; syntax, and the file specification you pass to one of these routines contains a ``/'', they assume you are using 
&lt;FONT SIZE=-1&gt;UNIX&lt;/FONT&gt; emulation and apply the 
&lt;FONT SIZE=-1&gt;UNIX&lt;/FONT&gt; syntax rules instead, for that function call only.

&lt;P&gt;
If the argument passed to it contains one of the substrings 
&lt;FONT SIZE=-1&gt;``VMS'',&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;``MSDOS'',&lt;/FONT&gt; ``MacOS'', ``AmigaOS'', ``os2'', ``MSWin32'' or 
&lt;FONT SIZE=-1&gt;``RISCOS'',&lt;/FONT&gt; then the pattern matching for suffix removal is performed without regard for case, since those systems are not case-sensitive when opening existing files (though some of them preserve case on file creation).

&lt;P&gt;
If you haven't called 
&lt;CODE&gt;fileparse_set_fstype(),&lt;/CODE&gt;
the syntax is chosen by examining the builtin variable &lt;CODE&gt;$^O&lt;/CODE&gt; according to these rules.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_fileparse&quot;&gt;fileparse&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The 
&lt;CODE&gt;fileparse()&lt;/CODE&gt; routine
divides a file specification into three parts: a leading &lt;STRONG&gt;path&lt;/STRONG&gt;, a file &lt;STRONG&gt;name&lt;/STRONG&gt;, and a &lt;STRONG&gt;suffix&lt;/STRONG&gt;. The
&lt;STRONG&gt;path&lt;/STRONG&gt; contains everything up to and including the last directory separator in the
input file specification. The remainder of the input file specification is
then divided into &lt;STRONG&gt;name&lt;/STRONG&gt; and &lt;STRONG&gt;suffix&lt;/STRONG&gt; based on the optional patterns you specify in &lt;CODE&gt;@suffixlist&lt;/CODE&gt;. Each element of this list is interpreted as a regular expression, and is
matched against the end of &lt;STRONG&gt;name&lt;/STRONG&gt;. If this succeeds, the matching portion of
&lt;STRONG&gt;name&lt;/STRONG&gt; is removed and prepended to &lt;STRONG&gt;suffix&lt;/STRONG&gt;. By proper use of
&lt;CODE&gt;@suffixlist&lt;/CODE&gt;, you can remove file types or versions for examination.

&lt;P&gt;
You are guaranteed that if you concatenate &lt;STRONG&gt;path&lt;/STRONG&gt;, &lt;STRONG&gt;name&lt;/STRONG&gt;, and
&lt;STRONG&gt;suffix&lt;/STRONG&gt; together in that order, the result will denote the same file as the input
file specification.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;EXAMPLES&quot;&gt;EXAMPLES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Using 
&lt;FONT SIZE=-1&gt;UNIX&lt;/FONT&gt; file syntax:

&lt;P&gt;
&lt;PRE&gt;    ($base,$path,$type) = fileparse('/virgil/aeneid/draft.book7',
                                    '\.book\d+');
&lt;/PRE&gt;
&lt;P&gt;
would yield

&lt;P&gt;
&lt;PRE&gt;    $base eq 'draft'
    $path eq '/virgil/aeneid/',
    $type eq '.book7'
&lt;/PRE&gt;
&lt;P&gt;
Similarly, using 
&lt;FONT SIZE=-1&gt;VMS&lt;/FONT&gt; syntax:

&lt;P&gt;
&lt;PRE&gt;    ($name,$dir,$type) = fileparse('Doc_Root:&amp;#091;Help&amp;#093;Rhetoric.Rnh',
                                   '\..*');
&lt;/PRE&gt;
&lt;P&gt;
would yield

&lt;P&gt;
&lt;PRE&gt;    $name eq 'Rhetoric'
    $dir  eq 'Doc_Root:&amp;#091;Help&amp;#093;'
    $type eq '.Rnh'
&lt;/PRE&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_basename&quot;&gt;basename&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The 
&lt;CODE&gt;basename()&lt;/CODE&gt; routine returns the first element of the list produced by calling 
&lt;CODE&gt;fileparse()&lt;/CODE&gt; with the same arguments, except that it always quotes metacharacters in the given suffixes. It is provided for programmer compatibility with the 
&lt;FONT SIZE=-1&gt;UNIX&lt;/FONT&gt; shell command 
&lt;CODE&gt;basename(1).&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_dirname&quot;&gt;dirname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The 
&lt;CODE&gt;dirname()&lt;/CODE&gt; routine returns the directory portion of the input file specification. When using 
&lt;FONT SIZE=-1&gt;VMS&lt;/FONT&gt; or MacOS syntax, this is identical to the second element of the list produced by calling 
&lt;CODE&gt;fileparse()&lt;/CODE&gt; with the same input file specification. (Under 
&lt;FONT SIZE=-1&gt;VMS,&lt;/FONT&gt; if there is no directory information in the input file specification, then the current default device and directory are returned.) When using 
&lt;FONT SIZE=-1&gt;UNIX&lt;/FONT&gt; or 
&lt;FONT SIZE=-1&gt;MSDOS&lt;/FONT&gt; syntax, the return value conforms to the behavior of the 
&lt;FONT SIZE=-1&gt;UNIX&lt;/FONT&gt; shell command 
&lt;CODE&gt;dirname(1).&lt;/CODE&gt; This is usually the same as the behavior of 
&lt;CODE&gt;fileparse(),&lt;/CODE&gt; but differs in some cases. For example, for the input file specification
 &lt;EM&gt;lib/&lt;/EM&gt;, 
&lt;CODE&gt;fileparse()&lt;/CODE&gt; considers the
directory name to be &lt;EM&gt;lib/&lt;/EM&gt;, while 
&lt;CODE&gt;dirname()&lt;/CODE&gt; considers the
directory name to be &lt;EM&gt;.&lt;/EM&gt;).

&lt;/DL&gt;
&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:51:48</createtime>
  <node_id>1201</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    use &lt;A HREF=&quot;File::Basename&quot;&gt;File::Basename&lt;/A&gt;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    ($name,$path,$suffix) = fileparse($fullname,@suffixlist)
    fileparse_set_fstype($os_string);
    $basename = basename($fullname,@suffixlist);
    $dirname = dirname($full</synopsis>
  <title>perlman:File::Basename</title>
  <nodeupdated>2005-08-14 03:03:22</nodeupdated>
</node>
