<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
Math::Complex - complex numbers and associated mathematical functions

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This package lets you create and manipulate complex numbers. By default,
&lt;EM&gt;Perl&lt;/EM&gt; limits itself to real numbers, but an extra [perlfunc:use|use] statement brings full complex support, along with a full set of
mathematical functions typically associated with and/or extended to complex
numbers.

&lt;P&gt;
If you wonder what complex numbers are, they were invented to be able to
solve the following equation:

&lt;P&gt;
&lt;PRE&gt;        x*x = -1
&lt;/PRE&gt;
&lt;P&gt;
and by definition, the solution is noted &lt;EM&gt;i&lt;/EM&gt; (engineers use &lt;EM&gt;j&lt;/EM&gt; instead since
&lt;EM&gt;i&lt;/EM&gt; usually denotes an intensity, but the name does not matter). The number
&lt;EM&gt;i&lt;/EM&gt; is a pure &lt;EM&gt;imaginary&lt;/EM&gt; number.

&lt;P&gt;
The arithmetics with pure imaginary numbers works just like you would
expect it with real numbers... you just have to remember that

&lt;P&gt;
&lt;PRE&gt;        i*i = -1
&lt;/PRE&gt;
&lt;P&gt;
so you have:

&lt;P&gt;
&lt;PRE&gt;        5i + 7i = i * (5 + 7) = 12i
        4i - 3i = i * (4 - 3) = i
        4i * 2i = -8
        6i / 2i = 3
        1 / i = -i
&lt;/PRE&gt;
&lt;P&gt;
Complex numbers are numbers that have both a real part and an imaginary
part, and are usually noted:

&lt;P&gt;
&lt;PRE&gt;        a + bi
&lt;/PRE&gt;
&lt;P&gt;
where &lt;CODE&gt;a&lt;/CODE&gt; is the &lt;EM&gt;real&lt;/EM&gt; part and &lt;CODE&gt;b&lt;/CODE&gt; is the &lt;EM&gt;imaginary&lt;/EM&gt; part. The arithmetic with complex numbers is straightforward. You have to
keep track of the real and the imaginary parts, but otherwise the rules
used for real numbers just apply:

&lt;P&gt;
&lt;PRE&gt;        (4 + 3i) + (5 - 2i) = (4 + 5) + i(3 - 2) = 9 + i
        (2 + i) * (4 - i) = 2*4 + 4i -2i -i*i = 8 + 2i + 1 = 9 + 2i
&lt;/PRE&gt;
&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; graphical representation of complex numbers is
possible in a plane (also called the &lt;EM&gt;complex plane&lt;/EM&gt;, but it's really a 
&lt;FONT SIZE=-1&gt;2D&lt;/FONT&gt; plane). The number

&lt;P&gt;
&lt;PRE&gt;        z = a + bi
&lt;/PRE&gt;
&lt;P&gt;
is the point whose coordinates are (a, b). Actually, it would be the vector
originating from (0, 0) to (a, b). It follows that the addition of two
complex numbers is a vectorial addition.

&lt;P&gt;
Since there is a bijection between a point in the 
&lt;FONT SIZE=-1&gt;2D&lt;/FONT&gt; plane and a complex number (i.e. the mapping is
unique and reciprocal), a complex number can also be uniquely identified
with polar coordinates:

&lt;P&gt;
&lt;PRE&gt;        &amp;#091;rho, theta&amp;#093;
&lt;/PRE&gt;
&lt;P&gt;
where &lt;CODE&gt;rho&lt;/CODE&gt; is the distance to the origin, and &lt;CODE&gt;theta&lt;/CODE&gt; the angle between the vector and the &lt;EM&gt;x&lt;/EM&gt; axis. There is a notation for this using the exponential form, which is:

&lt;P&gt;
&lt;PRE&gt;        rho * exp(i * theta)
&lt;/PRE&gt;
&lt;P&gt;
where &lt;EM&gt;i&lt;/EM&gt; is the famous imaginary number introduced above. Conversion between this
form and the cartesian form &lt;CODE&gt;a + bi&lt;/CODE&gt; is immediate:

&lt;P&gt;
&lt;PRE&gt;        a = rho * cos(theta)
        b = rho * sin(theta)
&lt;/PRE&gt;
&lt;P&gt;
which is also expressed by this formula:

&lt;P&gt;
&lt;PRE&gt;        z = rho * exp(i * theta) = rho * (cos theta + i * sin theta)
&lt;/PRE&gt;
&lt;P&gt;
In other words, it's the projection of the vector onto the &lt;EM&gt;x&lt;/EM&gt; and &lt;EM&gt;y&lt;/EM&gt;
axes. Mathematicians call &lt;EM&gt;rho&lt;/EM&gt; the &lt;EM&gt;norm&lt;/EM&gt; or &lt;EM&gt;modulus&lt;/EM&gt; and &lt;EM&gt;theta&lt;/EM&gt;
the &lt;EM&gt;argument&lt;/EM&gt; of the complex number. The &lt;EM&gt;norm&lt;/EM&gt; of &lt;CODE&gt;z&lt;/CODE&gt; will be noted [perlfunc:abs|abs].

&lt;P&gt;
The polar notation (also known as the trigonometric representation) is much
more handy for performing multiplications and divisions of complex numbers,
whilst the cartesian notation is better suited for additions and
subtractions. Real numbers are on the &lt;EM&gt;x&lt;/EM&gt;
axis, and therefore &lt;EM&gt;theta&lt;/EM&gt; is zero or &lt;EM&gt;pi&lt;/EM&gt;.

&lt;P&gt;
All the common operations that can be performed on a real number have been
defined to work on complex numbers as well, and are merely
&lt;EM&gt;extensions&lt;/EM&gt; of the operations defined on real numbers. This means they keep their
natural meaning when there is no imaginary part, provided the number is
within their definition set.

&lt;P&gt;
For instance, the [perlfunc:sqrt|sqrt] routine which computes the square root of its argument is only defined for
non-negative real numbers and yields a non-negative real number (it is an
application from &lt;STRONG&gt;R+&lt;/STRONG&gt; to &lt;STRONG&gt;R+&lt;/STRONG&gt;). If we allow it to return a complex number, then it can be extended to
negative real numbers to become an application from &lt;STRONG&gt;R&lt;/STRONG&gt; to &lt;STRONG&gt;C&lt;/STRONG&gt; (the set of complex numbers):

&lt;P&gt;
&lt;PRE&gt;        sqrt(x) = x &amp;gt;= 0 ? sqrt(x) : sqrt(-x)*i
&lt;/PRE&gt;
&lt;P&gt;
It can also be extended to be an application from &lt;STRONG&gt;C&lt;/STRONG&gt; to &lt;STRONG&gt;C&lt;/STRONG&gt;, whilst its restriction to &lt;STRONG&gt;R&lt;/STRONG&gt; behaves as defined above by using the following definition:

&lt;P&gt;
&lt;PRE&gt;        sqrt(z = &amp;#091;r,t&amp;#093;) = sqrt(r) * exp(i * t/2)
&lt;/PRE&gt;
&lt;P&gt;
Indeed, a negative real number can be noted &lt;CODE&gt;&amp;#091;x,pi&amp;#093;&lt;/CODE&gt; (the modulus
&lt;EM&gt;x&lt;/EM&gt; is always non-negative, so &lt;CODE&gt;&amp;#091;x,pi&amp;#093;&lt;/CODE&gt; is really &lt;CODE&gt;-x&lt;/CODE&gt;, a negative number) and the above definition states that

&lt;P&gt;
&lt;PRE&gt;        sqrt(&amp;#091;x,pi&amp;#093;) = sqrt(x) * exp(i*pi/2) = &amp;#091;sqrt(x),pi/2&amp;#093; = sqrt(x)*i
&lt;/PRE&gt;
&lt;P&gt;
which is exactly what we had defined for negative real numbers above. The [perlfunc:sqrt|sqrt] returns only one of the solutions: if you want the both, use the &lt;CODE&gt;root&lt;/CODE&gt; function.

&lt;P&gt;
All the common mathematical functions defined on real numbers that are
extended to complex numbers share that same property of working
&lt;EM&gt;as usual&lt;/EM&gt; when the imaginary part is zero (otherwise, it would not be called an
extension, would it?).

&lt;P&gt;

&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; &lt;EM&gt;new&lt;/EM&gt; operation possible on a complex number that is the identity for real
numbers is called the &lt;EM&gt;conjugate&lt;/EM&gt;, and is noted with an horizontal bar above the number, or &lt;CODE&gt;~z&lt;/CODE&gt; here.

&lt;P&gt;
&lt;PRE&gt;         z = a + bi
        ~z = a - bi
&lt;/PRE&gt;
&lt;P&gt;
Simple... Now look:

&lt;P&gt;
&lt;PRE&gt;        z * ~z = (a + bi) * (a - bi) = a*a + b*b
&lt;/PRE&gt;
&lt;P&gt;
We saw that the norm of &lt;CODE&gt;z&lt;/CODE&gt; was noted [perlfunc:abs|abs] and was defined as the distance to the origin, also known as:

&lt;P&gt;
&lt;PRE&gt;        rho = abs(z) = sqrt(a*a + b*b)
&lt;/PRE&gt;
&lt;P&gt;
so

&lt;P&gt;
&lt;PRE&gt;        z * ~z = abs(z) ** 2
&lt;/PRE&gt;
&lt;P&gt;
If z is a pure real number (i.e. &lt;CODE&gt;b == 0&lt;/CODE&gt;), then the above yields:

&lt;P&gt;
&lt;PRE&gt;        a * a = abs(a) ** 2
&lt;/PRE&gt;
&lt;P&gt;
which is true ([perlfunc:abs|abs] has the regular meaning for real number, i.e. stands for the absolute
value). This example explains why the norm of &lt;CODE&gt;z&lt;/CODE&gt; is noted [perlfunc:abs|abs]: it extends the [perlfunc:abs|abs] function to complex numbers, yet is the regular [perlfunc:abs|abs] we know when the complex number actually has no imaginary part... This
justifies &lt;EM&gt;a posteriori&lt;/EM&gt; our use of the [perlfunc:abs|abs]
notation for the norm.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;OPERATIONS&quot;&gt;OPERATIONS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Given the following notations:

&lt;P&gt;
&lt;PRE&gt;        z1 = a + bi = r1 * exp(i * t1)
        z2 = c + di = r2 * exp(i * t2)
        z = &amp;lt;any complex or real number&amp;gt;
&lt;/PRE&gt;
&lt;P&gt;
the following (overloaded) operations are supported on complex numbers:

&lt;P&gt;
&lt;PRE&gt;        z1 + z2 = (a + c) + i(b + d)
        z1 - z2 = (a - c) + i(b - d)
        z1 * z2 = (r1 * r2) * exp(i * (t1 + t2))
        z1 / z2 = (r1 / r2) * exp(i * (t1 - t2))
        z1 ** z2 = exp(z2 * log z1)
        ~z = a - bi
        abs(z) = r1 = sqrt(a*a + b*b)
        sqrt(z) = sqrt(r1) * exp(i * t/2)
        exp(z) = exp(a) * exp(i * b)
        log(z) = log(r1) + i*t
        sin(z) = 1/2i (exp(i * z1) - exp(-i * z))
        cos(z) = 1/2 (exp(i * z1) + exp(-i * z))
        atan2(z1, z2) = atan(z1/z2)
&lt;/PRE&gt;
&lt;P&gt;
The following extra operations are supported on both real and complex
numbers:

&lt;P&gt;
&lt;PRE&gt;        Re(z) = a
        Im(z) = b
        arg(z) = t
        abs(z) = r
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        cbrt(z) = z ** (1/3)
        log10(z) = log(z) / log(10)
        logn(z, n) = log(z) / log(n)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        tan(z) = sin(z) / cos(z)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        csc(z) = 1 / sin(z)
        sec(z) = 1 / cos(z)
        cot(z) = 1 / tan(z)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        asin(z) = -i * log(i*z + sqrt(1-z*z))
        acos(z) = -i * log(z + i*sqrt(1-z*z))
        atan(z) = i/2 * log((i+z) / (i-z))
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        acsc(z) = asin(1 / z)
        asec(z) = acos(1 / z)
        acot(z) = atan(1 / z) = -i/2 * log((i+z) / (z-i))
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        sinh(z) = 1/2 (exp(z) - exp(-z))
        cosh(z) = 1/2 (exp(z) + exp(-z))
        tanh(z) = sinh(z) / cosh(z) = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        csch(z) = 1 / sinh(z)
        sech(z) = 1 / cosh(z)
        coth(z) = 1 / tanh(z)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        asinh(z) = log(z + sqrt(z*z+1))
        acosh(z) = log(z + sqrt(z*z-1))
        atanh(z) = 1/2 * log((1+z) / (1-z))
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        acsch(z) = asinh(1 / z)
        asech(z) = acosh(1 / z)
        acoth(z) = atanh(1 / z) = 1/2 * log((1+z) / (z-1))
&lt;/PRE&gt;
&lt;P&gt;
&lt;EM&gt;arg&lt;/EM&gt;, &lt;EM&gt;abs&lt;/EM&gt;, &lt;EM&gt;log&lt;/EM&gt;, &lt;EM&gt;csc&lt;/EM&gt;, &lt;EM&gt;cot&lt;/EM&gt;, &lt;EM&gt;acsc&lt;/EM&gt;, &lt;EM&gt;acot&lt;/EM&gt;, &lt;EM&gt;csch&lt;/EM&gt;,
&lt;EM&gt;coth&lt;/EM&gt;, &lt;EM&gt;acosech&lt;/EM&gt;, &lt;EM&gt;acotanh&lt;/EM&gt;, have aliases &lt;EM&gt;rho&lt;/EM&gt;, &lt;EM&gt;theta&lt;/EM&gt;, &lt;EM&gt;ln&lt;/EM&gt;,
&lt;EM&gt;cosec&lt;/EM&gt;, &lt;EM&gt;cotan&lt;/EM&gt;, &lt;EM&gt;acosec&lt;/EM&gt;, &lt;EM&gt;acotan&lt;/EM&gt;, &lt;EM&gt;cosech&lt;/EM&gt;, &lt;EM&gt;cotanh&lt;/EM&gt;,
&lt;EM&gt;acosech&lt;/EM&gt;, &lt;EM&gt;acotanh&lt;/EM&gt;, respectively.  &lt;CODE&gt;Re&lt;/CODE&gt;, &lt;CODE&gt;Im&lt;/CODE&gt;, &lt;CODE&gt;arg&lt;/CODE&gt;, [perlfunc:abs|abs],
&lt;CODE&gt;rho&lt;/CODE&gt;, and &lt;CODE&gt;theta&lt;/CODE&gt; can be used also also mutators. The &lt;CODE&gt;cbrt&lt;/CODE&gt;
returns only one of the solutions: if you want all three, use the
&lt;CODE&gt;root&lt;/CODE&gt; function.

&lt;P&gt;
The &lt;EM&gt;root&lt;/EM&gt; function is available to compute all the &lt;EM&gt;n&lt;/EM&gt;
roots of some complex, where &lt;EM&gt;n&lt;/EM&gt; is a strictly positive integer. There are exactly &lt;EM&gt;n&lt;/EM&gt; such roots, returned as a list. Getting the number mathematicians call &lt;CODE&gt;j&lt;/CODE&gt; such that:

&lt;P&gt;
&lt;PRE&gt;        1 + j + j*j = 0;
&lt;/PRE&gt;
&lt;P&gt;
is a simple matter of writing:

&lt;P&gt;
&lt;PRE&gt;        $j = ((root(1, 3))&amp;#091;1&amp;#093;;
&lt;/PRE&gt;
&lt;P&gt;
The &lt;EM&gt;k&lt;/EM&gt;th root for &lt;CODE&gt;z = &amp;#091;r,t&amp;#093;&lt;/CODE&gt; is given by:

&lt;P&gt;
&lt;PRE&gt;        (root(z, n))&amp;#091;k&amp;#093; = r**(1/n) * exp(i * (t + 2*k*pi)/n)
&lt;/PRE&gt;
&lt;P&gt;
The &lt;EM&gt;spaceship&lt;/EM&gt; comparison operator, &amp;lt;=&amp;gt;, is also defined. In order to ensure its
restriction to real numbers is conform to what you would expect, the
comparison is run on the real part of the complex number first, and
imaginary parts are compared only when the real parts match.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;CREATION&quot;&gt;CREATION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
To create a complex number, use either:

&lt;P&gt;
&lt;PRE&gt;        $z = Math::Complex-&amp;gt;make(3, 4);
        $z = cplx(3, 4);
&lt;/PRE&gt;
&lt;P&gt;
if you know the cartesian form of the number, or

&lt;P&gt;
&lt;PRE&gt;        $z = 3 + 4*i;
&lt;/PRE&gt;
&lt;P&gt;
if you like. To create a number using the polar form, use either:

&lt;P&gt;
&lt;PRE&gt;        $z = Math::Complex-&amp;gt;emake(5, pi/3);
        $x = cplxe(5, pi/3);
&lt;/PRE&gt;
&lt;P&gt;
instead. The first argument is the modulus, the second is the angle (in
radians, the full circle is 2*pi). (Mnemonic: &lt;CODE&gt;e&lt;/CODE&gt; is used as a notation for complex numbers in the polar form).

&lt;P&gt;
It is possible to write:

&lt;P&gt;
&lt;PRE&gt;        $x = cplxe(-3, pi/4);
&lt;/PRE&gt;
&lt;P&gt;
but that will be silently converted into &lt;CODE&gt;&amp;#091;3,-3pi/4&amp;#093;&lt;/CODE&gt;, since the modulus must be non-negative (it represents the distance to the
origin in the complex plane).

&lt;P&gt;
It is also possible to have a complex number as either argument of either
the &lt;CODE&gt;make&lt;/CODE&gt; or &lt;CODE&gt;emake&lt;/CODE&gt;: the appropriate component of the argument will be used.

&lt;P&gt;
&lt;PRE&gt;        $z1 = cplx(-2,  1);
        $z2 = cplx($z1, 4);
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;STRINGIFICATION&quot;&gt;STRINGIFICATION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
When printed, a complex number is usually shown under its cartesian form &lt;EM&gt;a+bi&lt;/EM&gt;, but there are legitimate cases where the polar format
&lt;EM&gt;&amp;#091;r,t&amp;#093;&lt;/EM&gt; is more appropriate.

&lt;P&gt;
By calling the routine &lt;CODE&gt;Math::Complex::display_format&lt;/CODE&gt; and supplying either
&lt;CODE&gt;&amp;quot;polar&amp;quot;&lt;/CODE&gt; or &lt;CODE&gt;&amp;quot;cartesian&amp;quot;&lt;/CODE&gt;, you override the default display format, which is &lt;CODE&gt;&amp;quot;cartesian&amp;quot;&lt;/CODE&gt;. Not supplying any argument returns the current setting.

&lt;P&gt;
This default can be overridden on a per-number basis by calling the
&lt;CODE&gt;display_format&lt;/CODE&gt; method instead. As before, not supplying any argument returns the current
display format for this number. Otherwise whatever you specify will be the
new display format for &lt;EM&gt;this&lt;/EM&gt; particular number.

&lt;P&gt;
For instance:

&lt;P&gt;
&lt;PRE&gt;        use Math::Complex;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        Math::Complex::display_format('polar');
        $j = ((root(1, 3))&amp;#091;1&amp;#093;;
        print &amp;quot;j = $j\n&amp;quot;;               # Prints &amp;quot;j = &amp;#091;1,2pi/3&amp;#093;
        $j-&amp;gt;display_format('cartesian');
        print &amp;quot;j = $j\n&amp;quot;;               # Prints &amp;quot;j = -0.5+0.866025403784439i&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
The polar format attempts to emphasize arguments like &lt;EM&gt;k*pi/n&lt;/EM&gt;
(where &lt;EM&gt;n&lt;/EM&gt; is a positive integer and &lt;EM&gt;k&lt;/EM&gt; an integer within &amp;#091;-9,+9&amp;#093;).

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;USAGE&quot;&gt;USAGE&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Thanks to overloading, the handling of arithmetics with complex numbers is
simple and almost transparent.

&lt;P&gt;
Here are some examples:

&lt;P&gt;
&lt;PRE&gt;        use Math::Complex;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        $j = cplxe(1, 2*pi/3);  # $j ** 3 == 1
        print &amp;quot;j = $j, j**3 = &amp;quot;, $j ** 3, &amp;quot;\n&amp;quot;;
        print &amp;quot;1 + j + j**2 = &amp;quot;, 1 + $j + $j**2, &amp;quot;\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        $z = -16 + 0*i;                 # Force it to be a complex
        print &amp;quot;sqrt($z) = &amp;quot;, sqrt($z), &amp;quot;\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        $k = exp(i * 2*pi/3);
        print &amp;quot;$j - $k = &amp;quot;, $j - $k, &amp;quot;\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        $z-&amp;gt;Re(3);                      # Re, Im, arg, abs,
        $j-&amp;gt;arg(2);                     # (the last two aka rho, theta)
                                        # can be used also as mutators.
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;ERRORS_DUE_TO_DIVISION_BY_ZERO_O&quot;&gt;ERRORS DUE TO DIVISION BY ZERO OR LOGARITHM OF ZERO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The division (/) and the following functions

&lt;P&gt;
&lt;PRE&gt;        log     ln      log10   logn
        tan     sec     csc     cot
        atan    asec    acsc    acot
        tanh    sech    csch    coth
        atanh   asech   acsch   acoth
&lt;/PRE&gt;
&lt;P&gt;
cannot be computed for all arguments because that would mean dividing by
zero or taking logarithm of zero. These situations cause fatal runtime
errors looking like this

&lt;P&gt;
&lt;PRE&gt;        cot(0): Division by zero.
        (Because in the definition of cot(0), the divisor sin(0) is 0)
        Died at ...
&lt;/PRE&gt;
&lt;P&gt;
or

&lt;P&gt;
&lt;PRE&gt;        atanh(-1): Logarithm of zero.
        Died at...
&lt;/PRE&gt;
&lt;P&gt;
For the &lt;CODE&gt;csc&lt;/CODE&gt;, &lt;CODE&gt;cot&lt;/CODE&gt;, &lt;CODE&gt;asec&lt;/CODE&gt;, &lt;CODE&gt;acsc&lt;/CODE&gt;, &lt;CODE&gt;acot&lt;/CODE&gt;, &lt;CODE&gt;csch&lt;/CODE&gt;, &lt;CODE&gt;coth&lt;/CODE&gt;,
&lt;CODE&gt;asech&lt;/CODE&gt;, &lt;CODE&gt;acsch&lt;/CODE&gt;, the argument cannot be &lt;CODE&gt;0&lt;/CODE&gt; (zero). For the the logarithmic functions and the &lt;CODE&gt;atanh&lt;/CODE&gt;, &lt;CODE&gt;acoth&lt;/CODE&gt;, the argument cannot be &lt;CODE&gt;1&lt;/CODE&gt; (one). For the &lt;CODE&gt;atanh&lt;/CODE&gt;, &lt;CODE&gt;acoth&lt;/CODE&gt;, the argument cannot be
&lt;CODE&gt;-1&lt;/CODE&gt; (minus one). For the &lt;CODE&gt;atan&lt;/CODE&gt;, &lt;CODE&gt;acot&lt;/CODE&gt;, the argument cannot be
&lt;CODE&gt;i&lt;/CODE&gt; (the imaginary unit). For the &lt;CODE&gt;atan&lt;/CODE&gt;, &lt;CODE&gt;acoth&lt;/CODE&gt;, the argument cannot be &lt;CODE&gt;-i&lt;/CODE&gt; (the negative imaginary unit). For the &lt;CODE&gt;tan&lt;/CODE&gt;,
&lt;CODE&gt;sec&lt;/CODE&gt;, &lt;CODE&gt;tanh&lt;/CODE&gt;, the argument cannot be &lt;EM&gt;pi/2 + k * pi&lt;/EM&gt;, where &lt;EM&gt;k&lt;/EM&gt;
is any integer.

&lt;P&gt;
Note that because we are operating on approximations of real numbers, these
errors can happen when merely `too close' to the singularities listed
above. For example &lt;CODE&gt;tan(2*atan2(1,1)+1e-15)&lt;/CODE&gt; will die of division by zero.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;ERRORS_DUE_TO_INDIGESTIBLE_ARGUM&quot;&gt;ERRORS DUE TO INDIGESTIBLE ARGUMENTS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The &lt;CODE&gt;make&lt;/CODE&gt; and &lt;CODE&gt;emake&lt;/CODE&gt; accept both real and complex arguments. When they cannot recognize the
arguments they will die with error messages like the following

&lt;P&gt;
&lt;PRE&gt;    Math::Complex::make: Cannot take real part of ...
    Math::Complex::make: Cannot take real part of ...
    Math::Complex::emake: Cannot take rho of ...
    Math::Complex::emake: Cannot take theta of ...
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;BUGS&quot;&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Saying &lt;CODE&gt;use Math::Complex;&lt;/CODE&gt; exports many mathematical routines in the caller environment and even
overrides some ([perlfunc:sqrt|sqrt], [perlfunc:log|log]). This is construed as a feature by the Authors, actually... ;-)

&lt;P&gt;
All routines expect to be given real or complex numbers. Don't attempt to
use BigFloat, since Perl has currently no rule to disambiguate a '+'
operation (for instance) between two overloaded entities.

&lt;P&gt;
In Cray 
&lt;FONT SIZE=-1&gt;UNICOS&lt;/FONT&gt; there is some strange numerical instability that results in 
&lt;CODE&gt;root(),&lt;/CODE&gt; 
&lt;CODE&gt;cos(),&lt;/CODE&gt; 
&lt;CODE&gt;sin(),&lt;/CODE&gt; 
&lt;CODE&gt;cosh(),&lt;/CODE&gt; 
&lt;CODE&gt;sinh(),&lt;/CODE&gt; losing accuracy fast. Beware. The bug may be in 
&lt;FONT SIZE=-1&gt;UNICOS&lt;/FONT&gt; math libs, in 
&lt;FONT SIZE=-1&gt;UNICOS&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler, in Math::Complex. Whatever it is, it does not manifest itself anywhere else where Perl runs.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHORS&quot;&gt;AUTHORS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Raphael Manfredi &amp;lt;&lt;EM&gt;Raphael_Manfredi@grenoble.hp.com&lt;/EM&gt;&amp;gt; and Jarkko Hietaniemi &amp;lt;&lt;EM&gt;jhi@iki.fi&lt;/EM&gt;&amp;gt;.

&lt;P&gt;
Extensive patches by Daniel 
&lt;FONT SIZE=-1&gt;S.&lt;/FONT&gt; Lewart &amp;lt;&lt;EM&gt;d-lewart@uiuc.edu&lt;/EM&gt;&amp;gt;.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 20:30:56</createtime>
  <node_id>1287</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;        use Math::Complex;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;        $z = Math::Complex-&amp;gt;make(5, 6);
        $t = 4 - 3*i + $z;
        $j = cplxe(1, 2*pi/3);
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:Math::Complex</title>
  <nodeupdated>2005-08-10 16:15:22</nodeupdated>
</node>
