<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
die - raise an exception or bail out

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
Outside an [perlfunc:eval|eval()], prints the value of 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt; to &lt;CODE&gt;STDERR&lt;/CODE&gt; and exits with the current value of &lt;CODE&gt;$!&lt;/CODE&gt; (errno). If &lt;CODE&gt;$!&lt;/CODE&gt; is &lt;CODE&gt;0&lt;/CODE&gt;, exits with the value of
&lt;CODE&gt;($? &amp;gt;&amp;gt; 8)&lt;/CODE&gt; (backtick `command` status). If &lt;CODE&gt;($? &amp;gt;&amp;gt; 8)&lt;/CODE&gt;
is &lt;CODE&gt;0&lt;/CODE&gt;, exits with &lt;CODE&gt;255&lt;/CODE&gt;. Inside an [perlfunc:eval|eval(),] the error message is stuffed into
&lt;CODE&gt;$@&lt;/CODE&gt; and the [perlfunc:eval|eval()] is terminated with the undefined value. This makes
[perlfunc:die|die()] the way to raise an exception.

&lt;P&gt;
Equivalent examples:

&lt;P&gt;
&lt;PRE&gt;    die &amp;quot;Can't cd to spool: $!\n&amp;quot; unless chdir '/usr/spool/news';
    chdir '/usr/spool/news' or die &amp;quot;Can't cd to spool: $!\n&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
If the value of 
&lt;FONT SIZE=-1&gt;EXPR&lt;/FONT&gt; does not end in a newline, the current script
line number and input line number (if any) are also printed, and a newline
is supplied. Hint: sometimes appending &lt;CODE&gt;&amp;quot;, stopped&amp;quot;&lt;/CODE&gt; to your message will cause it to make better sense when the string &lt;CODE&gt;&amp;quot;at foo line 123&amp;quot;&lt;/CODE&gt; is appended. Suppose you are running script ``canasta''.

&lt;P&gt;
&lt;PRE&gt;    die &amp;quot;/etc/games is no good&amp;quot;;
    die &amp;quot;/etc/games is no good, stopped&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
produce, respectively

&lt;P&gt;
&lt;PRE&gt;    /etc/games is no good at canasta line 123.
    /etc/games is no good, stopped at canasta line 123.
&lt;/PRE&gt;
&lt;P&gt;
See also [perlfunc:exit|exit()] and [%linkNodeTitle &quot;perlman:perlguts|warn()&quot;, $NODE, &quot;warn()&quot;,{anchor=&gt;&quot;item_warn&quot;};%].

&lt;P&gt;
If 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt; is empty and &lt;CODE&gt;$@&lt;/CODE&gt; already contains a value (typically from a previous eval) that value is
reused after appending &lt;CODE&gt;&amp;quot;\t...propagated&amp;quot;&lt;/CODE&gt;. This is useful for propagating exceptions:

&lt;P&gt;
&lt;PRE&gt;    eval { ... };
    die unless $@ =~ /Expected exception/;
&lt;/PRE&gt;
&lt;P&gt;
If &lt;CODE&gt;$@&lt;/CODE&gt; is empty then the string &lt;CODE&gt;&amp;quot;Died&amp;quot;&lt;/CODE&gt; is used.

&lt;P&gt;
You can arrange for a callback to be run just before the [perlfunc:die|die()] does its deed, by setting the &lt;CODE&gt;$SIG{__DIE__}&lt;/CODE&gt; hook. The associated handler will be called with the error text and can
change the error message, if it sees fit, by calling [perlfunc:die|die()] again. See [%linkNodeTitle &quot;perlman:perlvar|$SIG{expr}&quot;, $NODE, &quot;$SIG{expr}&quot;,{anchor=&gt;&quot;_SIG_expr_&quot;};%] for details on setting &lt;CODE&gt;%SIG&lt;/CODE&gt; entries, and &lt;U&gt;eval BLOCK&lt;/U&gt; for some examples.

&lt;P&gt;
Note that the &lt;CODE&gt;$SIG{__DIE__}&lt;/CODE&gt; hook is called even inside 
&lt;CODE&gt;eval()ed&lt;/CODE&gt; blocks/strings. If
one wants the hook to do nothing in such situations, put

&lt;P&gt;
&lt;PRE&gt;        die @_ if $^S;
&lt;/PRE&gt;
&lt;P&gt;
as the first line of the handler (see [%linkNodeTitle &quot;perlman:perlvar|$^S&quot;, $NODE, &quot;$^S&quot;,{anchor=&gt;&quot;_S&quot;};%]).

&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:42:23</createtime>
  <node_id>235</node_id>
  <synopsis>&lt;P&gt;
die 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:die</title>
  <nodeupdated>2005-08-14 14:13:48</nodeupdated>
</node>
