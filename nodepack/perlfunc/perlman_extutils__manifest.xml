<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
ExtUtils::Manifest - utilities to write and check a 
&lt;FONT SIZE=-1&gt;MANIFEST&lt;/FONT&gt; file

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;

&lt;CODE&gt;Mkmanifest()&lt;/CODE&gt; writes all
files in and below the current directory to a file named in the global
variable $ExtUtils::Manifest::MANIFEST (which defaults to &lt;CODE&gt;MANIFEST&lt;/CODE&gt;) in the current directory. It works similar to

&lt;P&gt;
&lt;PRE&gt;    find . -print
&lt;/PRE&gt;
&lt;P&gt;
but in doing so checks each line in an existing &lt;CODE&gt;MANIFEST&lt;/CODE&gt; file and includes any comments that are found in the existing &lt;CODE&gt;MANIFEST&lt;/CODE&gt; file in the new one. Anything between white space and an end of line within
a &lt;CODE&gt;MANIFEST&lt;/CODE&gt; file is considered to be a comment. Filenames and comments are seperated by one or more 
&lt;FONT SIZE=-1&gt;TAB&lt;/FONT&gt; characters in the output. All files that match any regular expression in a file

&lt;CODE&gt;MANIFEST.SKIP&lt;/CODE&gt; (if such a file exists) are ignored.

&lt;P&gt;

&lt;CODE&gt;Manicheck()&lt;/CODE&gt; checks if all
the files within a &lt;CODE&gt;MANIFEST&lt;/CODE&gt; in the current directory really do exist. It only reports discrepancies and exits silently if 
&lt;FONT SIZE=-1&gt;MANIFEST&lt;/FONT&gt; and the tree below the current directory are in sync.

&lt;P&gt;

&lt;CODE&gt;Filecheck()&lt;/CODE&gt; finds files
below the current directory that are not mentioned in the &lt;CODE&gt;MANIFEST&lt;/CODE&gt; file. An optional file &lt;CODE&gt;MANIFEST.SKIP&lt;/CODE&gt;
will be consulted. Any file matching a regular expression in such a file
will not be reported as missing in the &lt;CODE&gt;MANIFEST&lt;/CODE&gt; file.

&lt;P&gt;

&lt;CODE&gt;Fullcheck()&lt;/CODE&gt; does both a 
&lt;CODE&gt;manicheck()&lt;/CODE&gt; and a 
&lt;CODE&gt;filecheck().&lt;/CODE&gt;

&lt;P&gt;

&lt;CODE&gt;Skipcheck()&lt;/CODE&gt; lists all the
files that are skipped due to your
&lt;CODE&gt;MANIFEST.SKIP&lt;/CODE&gt; file.

&lt;P&gt;

&lt;CODE&gt;Manifind()&lt;/CODE&gt; retruns a hash
reference. The keys of the hash are the files found below the current
directory.

&lt;P&gt;

&lt;CODE&gt;Maniread($file)&lt;/CODE&gt; reads
a named &lt;CODE&gt;MANIFEST&lt;/CODE&gt; file (defaults to
&lt;CODE&gt;MANIFEST&lt;/CODE&gt; in the current directory) and returns a 
&lt;FONT SIZE=-1&gt;HASH&lt;/FONT&gt; reference with files being the keys and comments being the values of the 
&lt;FONT SIZE=-1&gt;HASH.&lt;/FONT&gt; Blank lines and lines which start with
 &lt;CODE&gt;#&lt;/CODE&gt; in the &lt;CODE&gt;MANIFEST&lt;/CODE&gt; file are discarded.

&lt;P&gt;
&lt;EM&gt;Manicopy($read,$target,$how)&lt;/EM&gt; copies the files that are the keys in the 
&lt;FONT SIZE=-1&gt;HASH&lt;/FONT&gt; &lt;EM&gt;%$read&lt;/EM&gt; to the named target directory. The 
&lt;FONT SIZE=-1&gt;HASH&lt;/FONT&gt; reference
&lt;EM&gt;$read&lt;/EM&gt; is typically returned by the 
&lt;CODE&gt;maniread()&lt;/CODE&gt; function. This
function is useful for producing a directory tree identical to the intended
distribution tree. The third parameter &lt;CODE&gt;$how&lt;/CODE&gt; can be used to
specify a different methods of ``copying''. Valid values are &lt;CODE&gt;cp&lt;/CODE&gt;, which actually copies the files, &lt;CODE&gt;ln&lt;/CODE&gt; which creates hard links, and
&lt;CODE&gt;best&lt;/CODE&gt; which mostly links the files but copies any symbolic link to make a tree
without any symbolic link. Best is the default.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;MANIFEST_SKIP&quot;&gt;MANIFEST.SKIP&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The file 
&lt;FONT SIZE=-1&gt;MANIFEST.SKIP&lt;/FONT&gt; may contain regular expressions of files that should be ignored by 
&lt;CODE&gt;mkmanifest()&lt;/CODE&gt; and 
&lt;CODE&gt;filecheck().&lt;/CODE&gt; The regular expressions should appear one on each line. Blank lines and lines which start with
 &lt;CODE&gt;#&lt;/CODE&gt; are skipped. Use &lt;CODE&gt;\#&lt;/CODE&gt; if you need a regular expression to start with a sharp character. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; typical example:

&lt;P&gt;
&lt;PRE&gt;    \bRCS\b
    ^MANIFEST\.
    ^Makefile$
    ~$
    \.html$
    \.old$
    ^blib/
    ^MakeMaker-\d
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;EXPORT_OK&quot;&gt;EXPORT_OK&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;CODE&gt;&amp;amp;mkmanifest&lt;/CODE&gt;, &lt;CODE&gt;&amp;amp;manicheck&lt;/CODE&gt;, &lt;CODE&gt;&amp;amp;filecheck&lt;/CODE&gt;, &lt;CODE&gt;&amp;amp;fullcheck&lt;/CODE&gt;,
&lt;CODE&gt;&amp;amp;maniread&lt;/CODE&gt;, and &lt;CODE&gt;&amp;amp;manicopy&lt;/CODE&gt; are exportable.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;GLOBAL_VARIABLES&quot;&gt;GLOBAL VARIABLES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;CODE&gt;$ExtUtils::Manifest::MANIFEST&lt;/CODE&gt; defaults to &lt;CODE&gt;MANIFEST&lt;/CODE&gt;. Changing it results in both a different &lt;CODE&gt;MANIFEST&lt;/CODE&gt; and a different
&lt;CODE&gt;MANIFEST.SKIP&lt;/CODE&gt; file. This is useful if you want to maintain different distributions for different audiences (say a user version and a developer version including 
&lt;FONT SIZE=-1&gt;RCS).&lt;/FONT&gt;

&lt;P&gt;
&lt;CODE&gt;$ExtUtils::Manifest::Quiet&lt;/CODE&gt; defaults to 0. If set to a true value, all functions act silently.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;DIAGNOSTICS&quot;&gt;DIAGNOSTICS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
All diagnostic output is sent to &lt;CODE&gt;STDERR&lt;/CODE&gt;.

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Not&quot;&gt;Not in MANIFEST: file&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
is reported if a file is found, that is missing in the &lt;CODE&gt;MANIFEST&lt;/CODE&gt;
file which is excluded by a regular expression in the file
&lt;CODE&gt;MANIFEST.SKIP&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_No&quot;&gt;No such file: file&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
is reported if a file mentioned in a &lt;CODE&gt;MANIFEST&lt;/CODE&gt; file does not exist.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_MANIFEST&quot;&gt;MANIFEST: $!&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
is reported if &lt;CODE&gt;MANIFEST&lt;/CODE&gt; could not be opened.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Added&quot;&gt;Added to MANIFEST: file&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
is reported by 
&lt;CODE&gt;mkmanifest()&lt;/CODE&gt; if &lt;CODE&gt;$Verbose&lt;/CODE&gt; is set and a file is added to 
&lt;FONT SIZE=-1&gt;MANIFEST.&lt;/FONT&gt; &lt;CODE&gt;$Verbose&lt;/CODE&gt; is set to 1 by default.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
[perlman:ExtUtils::MakeMaker|MakeMaker] which has handy targets for most of the functionality.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Andreas Koenig &amp;lt;&lt;EM&gt;koenig@franz.ww.TU-Berlin.DE&lt;/EM&gt;&amp;gt;

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:51:44</createtime>
  <node_id>1194</node_id>
  <synopsis>&lt;P&gt;
&lt;CODE&gt;require ExtUtils::Manifest;&lt;/CODE&gt;

&lt;P&gt;
&lt;CODE&gt;ExtUtils::Manifest::mkmanifest;&lt;/CODE&gt;

&lt;P&gt;
&lt;CODE&gt;ExtUtils::Manifest::manicheck;&lt;/CODE&gt;

&lt;P&gt;
&lt;CODE&gt;ExtUtils::Manifest::filecheck;&lt;/CODE&gt;

&lt;P&gt;
&lt;CODE&gt;ExtUtils::Manifest::fullcheck;&lt;/CODE&gt;

&lt;P&gt;
&lt;CODE&gt;E</synopsis>
  <title>perlman:ExtUtils::Manifest</title>
  <nodeupdated>2005-08-10 16:23:30</nodeupdated>
</node>
