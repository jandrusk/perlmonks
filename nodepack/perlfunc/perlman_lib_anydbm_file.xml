<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
AnyDBM_File - provide framework for multiple DBMs

&lt;P&gt;
NDBM_File, DB_File, GDBM_File, SDBM_File, ODBM_File - various 
&lt;FONT SIZE=-1&gt;DBM&lt;/FONT&gt; implementations

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This module is a ``pure virtual base class''--it has nothing of its own. It's just there to inherit from one of the various 
&lt;FONT SIZE=-1&gt;DBM&lt;/FONT&gt; packages. It prefers ndbm for compatibility reasons with Perl 4, then Berkeley 
&lt;FONT SIZE=-1&gt;DB&lt;/FONT&gt; (See

[perlman:lib:DB_File|DB_File]), 
&lt;FONT SIZE=-1&gt;GDBM,&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;SDBM&lt;/FONT&gt; (which is always there--it comes with Perl), and finally 
&lt;FONT SIZE=-1&gt;ODBM.&lt;/FONT&gt; This way old programs that used to use 
&lt;FONT SIZE=-1&gt;NDBM&lt;/FONT&gt; via 
&lt;CODE&gt;dbmopen()&lt;/CODE&gt; can still do so, but new ones can reorder 
&lt;FONT SIZE=-1&gt;@ISA:&lt;/FONT&gt;

&lt;P&gt;
&lt;PRE&gt;    BEGIN { @AnyDBM_File::ISA = qw(DB_File GDBM_File NDBM_File) }
    use AnyDBM_File;
&lt;/PRE&gt;
&lt;P&gt;
Having multiple 
&lt;FONT SIZE=-1&gt;DBM&lt;/FONT&gt; implementations makes it trivial to copy database
formats:

&lt;P&gt;
&lt;PRE&gt;    use POSIX; use NDBM_File; use DB_File;
    tie %newhash,  'DB_File', $new_filename, O_CREAT|O_RDWR;
    tie %oldhash,  'NDBM_File', $old_filename, 1, 0;
    %newhash = %oldhash;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;DBM_Comparisons&quot;&gt;DBM Comparisons&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Here's a partial table of features the different packages offer:

&lt;P&gt;
&lt;PRE&gt;                         odbm    ndbm    sdbm    gdbm    bsd-db
                         ----    ----    ----    ----    ------
 Linkage comes w/ perl   yes     yes     yes     yes     yes
 Src comes w/ perl       no      no      yes     no      no
 Comes w/ many unix os   yes     yes&amp;#091;0&amp;#093;  no      no      no
 Builds ok on !unix      ?       ?       yes     yes     ?
 Code Size               ?       ?       small   big     big
 Database Size           ?       ?       small   big?    ok&amp;#091;1&amp;#093;
 Speed                   ?       ?       slow    ok      fast
 FTPable                 no      no      yes     yes     yes
 Easy to build          N/A     N/A      yes     yes     ok&amp;#091;2&amp;#093;
 Size limits             1k      4k      1k&amp;#091;3&amp;#093;   none    none
 Byte-order independent  no      no      no      no      yes
 Licensing restrictions  ?       ?       no      yes     no
&lt;/PRE&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__0_&quot;&gt;&amp;#091;0&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
on mixed universe machines, may be in the bsd compat library, which is
often shunned.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__1_&quot;&gt;&amp;#091;1&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Can be trimmed if you compile for one access method.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__2_&quot;&gt;&amp;#091;2&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
See [perlman:lib:DB_File|DB_File]. Requires symbolic links.  

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__3_&quot;&gt;&amp;#091;3&amp;#093;&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
By default, but can be redefined.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;

&lt;CODE&gt;dbm(3),&lt;/CODE&gt; 
&lt;CODE&gt;ndbm(3),&lt;/CODE&gt; 
&lt;CODE&gt;DB_File(3)&lt;/CODE&gt;

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:49:22</createtime>
  <node_id>1093</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    use AnyDBM_File;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:lib:AnyDBM_File</title>
  <nodeupdated>2005-08-14 02:22:16</nodeupdated>
</node>
