<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
system - run a separate program 

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
Does exactly the same thing as ``&lt;CODE&gt;exec LIST&lt;/CODE&gt;'' except that a fork is done first, and the parent process waits for the child process to complete. Note that argument processing varies depending on the number of arguments. If there is more than one argument in 
&lt;FONT SIZE=-1&gt;LIST,&lt;/FONT&gt; or if 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt; is an array with more than one value, starts the program given by the first element of the list with arguments given by the rest of the list. If there is only one scalar argument, the argument is checked for shell metacharacters, and if there are any, the entire argument is passed to the system's command shell for parsing (this is

&lt;CODE&gt;/bin/sh -c&lt;/CODE&gt; on Unix platforms, but varies on other platforms). If there are no shell
metacharacters in the argument, it is split into words and passed directly
to &lt;CODE&gt;execvp()&lt;/CODE&gt;, which is more efficient.

&lt;P&gt;
The return value is the exit status of the program as returned by the [perlfunc:wait|wait()] call. To get the actual exit value divide by 256. See also [perlfunc:exec|exec]. This is &lt;EM&gt;NOT&lt;/EM&gt; what you want to use to capture the output from a command, for that you
should use merely backticks or
[%linkNodeTitle &quot;perlman:perlop|qx//&quot;, $NODE %], as described in [%linkNodeTitle(&quot;perlman:perlop|`STRING`&quot;, $NODE, &quot;`STRING`&quot;,{anchor=&gt;&quot;_STRING_&quot;});%].

&lt;P&gt;
Like [perlfunc:exec|exec()], [perlfunc:system|system()] allows you to lie to a program about its name if you use the ``&lt;CODE&gt;system PROGRAM LIST&lt;/CODE&gt;'' syntax. Again, see [perlfunc:exec|exec].

&lt;P&gt;
Because [perlfunc:system|system()] and backticks block &lt;CODE&gt;SIGINT&lt;/CODE&gt; and &lt;CODE&gt;SIGQUIT&lt;/CODE&gt;, killing the program they're running doesn't actually interrupt your
program.

&lt;P&gt;
&lt;PRE&gt;    @args = (&amp;quot;command&amp;quot;, &amp;quot;arg1&amp;quot;, &amp;quot;arg2&amp;quot;);
    system(@args) == 0
         or die &amp;quot;system @args failed: $?&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
You can check all the failure possibilities by inspecting
&lt;CODE&gt;$?&lt;/CODE&gt; like this:

&lt;P&gt;
&lt;PRE&gt;    $exit_value  = $? &amp;gt;&amp;gt; 8;
    $signal_num  = $? &amp;amp; 127;
    $dumped_core = $? &amp;amp; 128;
&lt;/PRE&gt;
&lt;P&gt;
When the arguments get executed via the system shell, results and return
codes will be subject to its quirks and capabilities. See [% linkNodeTitle(&quot;perlman:perlop|`STRING`&quot;, $NODE, &quot;`STRING`&quot;)%] and [perlfunc:exec|exec] for details.

&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:43:16</createtime>
  <node_id>321</node_id>
  <synopsis>&lt;P&gt;
system 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt;

&lt;P&gt;
system 
&lt;FONT SIZE=-1&gt;PROGRAM&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:system</title>
  <nodeupdated>2005-08-15 10:23:30</nodeupdated>
</node>
