<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
Tie::Scalar, Tie::StdScalar - base class definitions for tied scalars

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This module provides some skeletal methods for scalar-tying classes. See
[perlman:perltie|perltie] for a list of the functions required in tying a scalar to a package. The
basic &lt;STRONG&gt;Tie::Scalar&lt;/STRONG&gt; package provides a &lt;CODE&gt;new&lt;/CODE&gt; method, as well as methods &lt;CODE&gt;TIESCALAR&lt;/CODE&gt;, &lt;CODE&gt;FETCH&lt;/CODE&gt; and &lt;CODE&gt;STORE&lt;/CODE&gt;. The &lt;STRONG&gt;Tie::StdScalar&lt;/STRONG&gt;
package provides all the methods specified in  [perlman:perltie|perltie]. It inherits from
&lt;STRONG&gt;Tie::Scalar&lt;/STRONG&gt; and causes scalars tied to it to behave exactly like the built-in scalars,
allowing for selective overloading of methods. The &lt;CODE&gt;new&lt;/CODE&gt;
method is provided as a means of grandfathering, for classes that forget to
provide their own &lt;CODE&gt;TIESCALAR&lt;/CODE&gt; method.

&lt;P&gt;
For developers wishing to write their own tied-scalar classes, the methods
are summarized below. The [perlman:perltie|perltie] section not only documents these, but has sample code as well:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_TIESCALAR&quot;&gt;TIESCALAR classname, LIST&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The method invoked by the command &lt;CODE&gt;tie $scalar, classname&lt;/CODE&gt;. Associates a new scalar instance with the specified class. &lt;CODE&gt;LIST&lt;/CODE&gt; would represent additional arguments (along the lines of [perlman:lib:AnyDBM_File|AnyDBM_File] and compatriots) needed to complete the association.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_FETCH&quot;&gt;FETCH this&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Retrieve the value of the tied scalar referenced by &lt;EM&gt;this&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_STORE&quot;&gt;STORE this, value&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Store data &lt;EM&gt;value&lt;/EM&gt; in the tied scalar referenced by &lt;EM&gt;this&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_DESTROY&quot;&gt;DESTROY this&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Free the storage associated with the tied scalar referenced by &lt;EM&gt;this&lt;/EM&gt;. This is rarely needed, as Perl manages its memory quite well. But the
option exists, should a class wish to perform specific actions upon the
destruction of an instance.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;MORE_INFORMATION&quot;&gt;MORE INFORMATION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The [perlman:perltie|perltie] section uses a good example of tying scalars by associating process IDs
with priority.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:53:37</createtime>
  <node_id>1267</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    package NewScalar;
    require Tie::Scalar;
     
    @ISA = (Tie::Scalar);
     
    sub FETCH { ... }           # Provide a needed method
    sub TIESCALAR { ... }       # Overrides inherited method
         
     
    package NewStdScalar</synopsis>
  <title>perlman:Tie::Scalar</title>
  <nodeupdated>2005-08-14 15:23:07</nodeupdated>
</node>
