<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
dbmopen - create binding on a tied dbm file

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
&amp;#091;This function has been superseded by the [perlfunc:tie|tie()] function.&amp;#093;

&lt;P&gt;
This binds a 
&lt;CODE&gt;dbm(3),&lt;/CODE&gt; 
&lt;CODE&gt;ndbm(3),&lt;/CODE&gt; 
&lt;CODE&gt;sdbm(3),&lt;/CODE&gt; 
&lt;CODE&gt;gdbm(3),&lt;/CODE&gt; or Berkeley 
&lt;FONT SIZE=-1&gt;DB&lt;/FONT&gt; file to a hash. 
&lt;FONT SIZE=-1&gt;HASH&lt;/FONT&gt; is the name of the hash. (Unlike normal
 [perlfunc:open|open()], the first argument is &lt;EM&gt;NOT&lt;/EM&gt; a filehandle, even though it looks like one). 
&lt;FONT SIZE=-1&gt;DBNAME&lt;/FONT&gt; is the name of the database (without the &lt;EM&gt;.dir&lt;/EM&gt; or &lt;EM&gt;.pag&lt;/EM&gt; extension if any). If the database does not exist, it is created with protection specified by 
&lt;FONT SIZE=-1&gt;MODE&lt;/FONT&gt; (as modified by the
 [perlfunc:umask|umask()]). If your system supports only the older 
&lt;FONT SIZE=-1&gt;DBM&lt;/FONT&gt; functions, you may perform only one [perlfunc:dbmopen|dbmopen()] in your program. In older versions of Perl, if your system had neither 
&lt;FONT SIZE=-1&gt;DBM&lt;/FONT&gt; nor ndbm, calling [perlfunc:dbmopen|dbmopen()] produced a fatal error; it now falls back to 
&lt;CODE&gt;sdbm(3).&lt;/CODE&gt;

&lt;P&gt;
If you don't have write access to the 
&lt;FONT SIZE=-1&gt;DBM&lt;/FONT&gt; file, you can only read hash variables, not set
them. If you want to test whether you can write, either use file tests or
try setting a dummy hash entry inside an [perlfunc:eval|eval()], which will trap the error.

&lt;P&gt;
Note that functions such as [perlfunc:keys|keys()] and [perlfunc:values|values()] may return huge lists when used on large 
&lt;FONT SIZE=-1&gt;DBM&lt;/FONT&gt; files. You may prefer to use the [perlfunc:each|each()]
function to iterate over large 
&lt;FONT SIZE=-1&gt;DBM&lt;/FONT&gt; files. Example:

&lt;P&gt;
&lt;PRE&gt;    # print out history file offsets
    dbmopen(%HIST,'/usr/lib/news/history',0666);
    while (($key,$val) = each %HIST) {
        print $key, ' = ', unpack('L',$val), &amp;quot;\n&amp;quot;;
    }
    dbmclose(%HIST);
&lt;/PRE&gt;
&lt;P&gt;
See also [perlfunc:../../lib/AnyDBM_File|the AnyDBM_File manpage] for a more general description of the pros and cons of the various dbm
approaches, as well as [perlfunc:../../lib/DB_File|the DB_File manpage] for a particularly rich implementation.

&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:43:27</createtime>
  <node_id>340</node_id>
  <synopsis>&lt;P&gt;
dbmopen 
&lt;FONT SIZE=-1&gt;HASH,DBNAME,MODE&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:dbmopen</title>
  <nodeupdated>2005-08-12 18:23:51</nodeupdated>
</node>
