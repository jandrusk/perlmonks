<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
B::Lint - Perl lint

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
The B::Lint module is equivalent to an extended version of the &lt;STRONG&gt;-w&lt;/STRONG&gt;
option of &lt;STRONG&gt;perl&lt;/STRONG&gt;. It is named after the program &lt;STRONG&gt;lint&lt;/STRONG&gt; which carries out a similar process for 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; programs.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;OPTIONS_AND_LINT_CHECKS&quot;&gt;OPTIONS AND LINT CHECKS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Option words are separated by commas (not whitespace) and follow the usual
conventions of compiler backend options. Following any options (indicated
by a leading &lt;STRONG&gt;-&lt;/STRONG&gt;) come lint check arguments. Each such argument (apart from the special &lt;STRONG&gt;all&lt;/STRONG&gt; and &lt;STRONG&gt;none&lt;/STRONG&gt; options) is a word representing one possible lint check (turning on that
check) or is &lt;STRONG&gt;no-foo&lt;/STRONG&gt; (turning off that check). Before processing the check arguments, a standard
list of checks is turned on. Later options override earlier ones. Available
options are:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_context&quot;&gt;context&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Produces a warning whenever an array is used in an implicit scalar context.
For example, both of the lines

&lt;P&gt;
&lt;PRE&gt;    $foo = length(@bar);
    $foo = @bar;
will elicit a warning. Using an explicit B&amp;lt;scalar()&amp;gt; silences the
warning. For example,
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $foo = scalar(@bar);
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_implicit&quot;&gt;implicit-read and implicit-write&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
These options produce a warning whenever an operation implicitly reads or
(respectively) writes to one of Perl's special variables. For example, &lt;STRONG&gt;implicit-read&lt;/STRONG&gt; will warn about these:

&lt;P&gt;
&lt;PRE&gt;    /foo/;
&lt;/PRE&gt;
&lt;P&gt;
and &lt;STRONG&gt;implicit-write&lt;/STRONG&gt; will warn about these:

&lt;P&gt;
&lt;PRE&gt;    s/foo/bar/;
&lt;/PRE&gt;
&lt;P&gt;
Both &lt;STRONG&gt;implicit-read&lt;/STRONG&gt; and &lt;STRONG&gt;implicit-write&lt;/STRONG&gt; warn about this:

&lt;P&gt;
&lt;PRE&gt;    for (@a) { ... }
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_dollar&quot;&gt;dollar-underscore&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This option warns whenever &lt;CODE&gt;$_&lt;/CODE&gt; is used either explicitly
anywhere or as the implicit argument of a &lt;STRONG&gt;print&lt;/STRONG&gt; statement.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_private&quot;&gt;private-names&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This option warns on each use of any variable, subroutine or method name
that lives in a non-current package but begins with an underscore (``_'').
Warnings aren't issued for the special case of the single character name
``_'' by itself (e.g. &lt;CODE&gt;$_&lt;/CODE&gt; and @_).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_undefined&quot;&gt;undefined-subs&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This option warns whenever an undefined subroutine is invoked. This option
will only catch explicitly invoked subroutines such as &lt;CODE&gt;foo()&lt;/CODE&gt; and not indirect invocations such as &lt;CODE&gt;&amp;amp;$subref()&lt;/CODE&gt;
or &lt;CODE&gt;$obj-&amp;gt;meth()&lt;/CODE&gt;. Note that some programs or modules delay definition of subs until runtime by means of the 
&lt;FONT SIZE=-1&gt;AUTOLOAD&lt;/FONT&gt; mechanism.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_regexp&quot;&gt;regexp-variables&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This option warns whenever one of the regexp variables $', $&amp;amp; or $' is
used. Any occurrence of any of these variables in your program can slow
your whole program down. See [perlman:perlre|perlre] for details.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_all&quot;&gt;all&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Turn all warnings on.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_none&quot;&gt;none&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Turn all warnings off.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;NON_LINT_CHECK_OPTIONS&quot;&gt;NON LINT-CHECK OPTIONS&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__u&quot;&gt;-u Package&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Normally, Lint only checks the main code of the program together with all
subs defined in package main. The &lt;STRONG&gt;-u&lt;/STRONG&gt; option lets you include other package names whose subs are then checked by
Lint.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;BUGS&quot;&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
This is only a very preliminary version.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Malcolm Beattie, &lt;A
HREF=&quot;mailto:mbeattie@sable.ox.ac.uk.&quot;&gt;mbeattie@sable.ox.ac.uk.&lt;/A&gt;

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:50:09</createtime>
  <node_id>1160</node_id>
  <synopsis>&lt;P&gt;
perl -MO=Lint&amp;#091;,OPTIONS&amp;#093; foo.pl

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:B::Lint</title>
  <nodeupdated>2005-08-12 23:18:24</nodeupdated>
</node>
