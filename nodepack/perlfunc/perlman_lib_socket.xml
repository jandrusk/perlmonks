<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
Socket, sockaddr_in, sockaddr_un, inet_aton, inet_ntoa - load the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; socket.h defines and structure manipulators 

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This module is just a translation of the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; &lt;EM&gt;socket.h&lt;/EM&gt; file. Unlike the old mechanism of requiring a translated &lt;EM&gt;socket.ph&lt;/EM&gt;
file, this uses the &lt;STRONG&gt;h2xs&lt;/STRONG&gt; program (see the Perl source distribution) and your native 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; compiler. This means that it has a far more likely chance of getting the numbers right. This includes all of the commonly used pound-defines like 
&lt;FONT SIZE=-1&gt;AF_INET,&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;SOCK_STREAM,&lt;/FONT&gt; etc.

&lt;P&gt;
Also, some common socket ``newline'' constants are provided: the constants &lt;CODE&gt;CR&lt;/CODE&gt;, &lt;CODE&gt;LF&lt;/CODE&gt;, and &lt;CODE&gt;CRLF&lt;/CODE&gt;, as well as &lt;CODE&gt;$CR&lt;/CODE&gt;, &lt;CODE&gt;$LF&lt;/CODE&gt;, and
&lt;CODE&gt;$CRLF&lt;/CODE&gt;, which map to &lt;CODE&gt;\015&lt;/CODE&gt;, &lt;CODE&gt;\012&lt;/CODE&gt;, and &lt;CODE&gt;\015\012&lt;/CODE&gt;. If you do not want to use the literal characters in your programs, then
use the constants provided here. They are not exported by default, but can
be imported individually, and with the &lt;CODE&gt;:crlf&lt;/CODE&gt; export tag:

&lt;P&gt;
&lt;PRE&gt;    use Socket qw(:DEFAULT :crlf);
&lt;/PRE&gt;
&lt;P&gt;
In addition, some structure manipulation functions are available:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_inet_aton&quot;&gt;inet_aton HOSTNAME&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Takes a string giving the name of a host, and translates that to the 4-byte
string (structure). Takes arguments of both the 'rtfm.mit.edu' type and
'18.181.0.24'. If the host name cannot be resolved, returns undef. For
multi-homed hosts (hosts with more than one address), the first address
found is returned.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_inet_ntoa&quot;&gt;inet_ntoa IP_ADDRESS&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Takes a four byte ip address (as returned by 
&lt;CODE&gt;inet_aton())&lt;/CODE&gt; and
translates it into a string of the form 'd.d.d.d' where the 'd's are
numbers less than 256 (the normal readable four dotted number notation for
internet addresses).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_INADDR_ANY&quot;&gt;INADDR_ANY&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Note: does not return a number, but a packed string.

&lt;P&gt;
Returns the 4-byte wildcard ip address which specifies any of the hosts ip addresses. 
&lt;FONT SIZE=-1&gt;(A&lt;/FONT&gt; particular machine can have more than one ip address, each address corresponding to a particular network interface. This wildcard address allows you to bind to all of them simultaneously.) Normally equivalent to 
&lt;CODE&gt;inet_aton('0.0.0.0').&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_INADDR_BROADCAST&quot;&gt;INADDR_BROADCAST&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Note: does not return a number, but a packed string.

&lt;P&gt;
Returns the 4-byte 'this-lan' ip broadcast address. This can be useful for some protocols to solicit information from all servers on the same 
&lt;FONT SIZE=-1&gt;LAN&lt;/FONT&gt; cable. Normally equivalent to 
&lt;CODE&gt;inet_aton('255.255.255.255').&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_INADDR_LOOPBACK&quot;&gt;INADDR_LOOPBACK&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Note - does not return a number.

&lt;P&gt;
Returns the 4-byte loopback address. Normally equivalent to 
&lt;CODE&gt;inet_aton('localhost').&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_INADDR_NONE&quot;&gt;INADDR_NONE&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Note - does not return a number.

&lt;P&gt;
Returns the 4-byte 'invalid' ip address. Normally equivalent to 
&lt;CODE&gt;inet_aton('255.255.255.255').&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_sockaddr_in&quot;&gt;sockaddr_in PORT, ADDRESS&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;sockaddr_in SOCKADDR_IN&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
In an array context, unpacks its 
&lt;FONT SIZE=-1&gt;SOCKADDR_IN&lt;/FONT&gt; argument and returns an array consisting of 
&lt;FONT SIZE=-1&gt;(PORT,&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;ADDRESS).&lt;/FONT&gt; In a scalar context, packs its 
&lt;FONT SIZE=-1&gt;(PORT,&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;ADDRESS)&lt;/FONT&gt; arguments as a 
&lt;FONT SIZE=-1&gt;SOCKADDR_IN&lt;/FONT&gt; and returns it. If this is confusing, use 
&lt;CODE&gt;pack_sockaddr_in()&lt;/CODE&gt; and 
&lt;CODE&gt;unpack_sockaddr_in()&lt;/CODE&gt; explicitly.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_pack_sockaddr_in&quot;&gt;pack_sockaddr_in PORT, IP_ADDRESS&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Takes two arguments, a port number and a 4 byte 
&lt;FONT SIZE=-1&gt;IP_ADDRESS&lt;/FONT&gt; (as returned by 
&lt;CODE&gt;inet_aton()).&lt;/CODE&gt; Returns the sockaddr_in structure with those arguments packed in with 
&lt;FONT SIZE=-1&gt;AF_INET&lt;/FONT&gt; filled in. For internet domain sockets, this structure is normally what you need for the arguments in 
&lt;CODE&gt;bind(),&lt;/CODE&gt; 
&lt;CODE&gt;connect(),&lt;/CODE&gt; and 
&lt;CODE&gt;send(),&lt;/CODE&gt; and is also returned by 
&lt;CODE&gt;getpeername(),&lt;/CODE&gt; 
&lt;CODE&gt;getsockname()&lt;/CODE&gt; and 
&lt;CODE&gt;recv().&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_unpack_sockaddr_in&quot;&gt;unpack_sockaddr_in SOCKADDR_IN&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Takes a sockaddr_in structure (as returned by 
&lt;CODE&gt;pack_sockaddr_in())&lt;/CODE&gt; and returns an array of two elements: the port and the 4-byte ip-address. Will croak if the structure does not have 
&lt;FONT SIZE=-1&gt;AF_INET&lt;/FONT&gt; in the right place.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_sockaddr_un&quot;&gt;sockaddr_un PATHNAME&lt;/A&gt;&lt;/STRONG&gt;&lt;DD&gt;
&lt;DT&gt;&lt;STRONG&gt;sockaddr_un SOCKADDR_UN&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
In an array context, unpacks its 
&lt;FONT SIZE=-1&gt;SOCKADDR_UN&lt;/FONT&gt; argument and returns an array consisting of 
&lt;FONT SIZE=-1&gt;(PATHNAME).&lt;/FONT&gt; In a scalar context, packs its 
&lt;FONT SIZE=-1&gt;PATHNAME&lt;/FONT&gt; arguments as a 
&lt;FONT SIZE=-1&gt;SOCKADDR_UN&lt;/FONT&gt; and returns it. If this is confusing, use 
&lt;CODE&gt;pack_sockaddr_un()&lt;/CODE&gt; and 
&lt;CODE&gt;unpack_sockaddr_un()&lt;/CODE&gt; explicitly. These are only supported if your system has &amp;lt;
&lt;EM&gt;sys/un.h&lt;/EM&gt;&amp;gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_pack_sockaddr_un&quot;&gt;pack_sockaddr_un PATH&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Takes one argument, a pathname. Returns the sockaddr_un structure with that path packed in with 
&lt;FONT SIZE=-1&gt;AF_UNIX&lt;/FONT&gt; filled in. For unix domain sockets, this structure is normally what you need for the arguments in 
&lt;CODE&gt;bind(),&lt;/CODE&gt; 
&lt;CODE&gt;connect(),&lt;/CODE&gt; and 
&lt;CODE&gt;send(),&lt;/CODE&gt; and is also returned by 
&lt;CODE&gt;getpeername(),&lt;/CODE&gt; 
&lt;CODE&gt;getsockname()&lt;/CODE&gt; and 
&lt;CODE&gt;recv().&lt;/CODE&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_unpack_sockaddr_un&quot;&gt;unpack_sockaddr_un SOCKADDR_UN&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Takes a sockaddr_un structure (as returned by 
&lt;CODE&gt;pack_sockaddr_un())&lt;/CODE&gt; and returns the pathname. Will croak if the structure does not have 
&lt;FONT SIZE=-1&gt;AF_UNIX&lt;/FONT&gt; in the right place.

&lt;/DL&gt;
&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:49:29</createtime>
  <node_id>1127</node_id>
  <synopsis>&lt;PRE&gt;    use Socket;
    $proto = getprotobyname('udp');
    socket(Socket_Handle, PF_INET, SOCK_DGRAM, $proto);
    $iaddr = gethostbyname('hishost.com');
    $port = getservbyname('time', 'udp');
    $sin = sockaddr_in($port, $iaddr...
&lt;/pre&gt;</synopsis>
  <title>perlman:lib:Socket</title>
  <nodeupdated>2005-08-12 08:57:52</nodeupdated>
</node>
