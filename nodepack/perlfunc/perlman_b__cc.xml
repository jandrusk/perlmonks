<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;

&lt;FONT SIZE=-1&gt;B::CC&lt;/FONT&gt; - Perl compiler's optimized 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; translation backend

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This compiler backend takes Perl source and generates 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; source code corresponding to the flow of your
program. In other words, this backend is somewhat a ``real'' compiler in
the sense that many people think about compilers. Note however that,
currently, it is a very poor compiler in that although it generates
(mostly, or at least sometimes) correct code, it performs relatively few
optimisations. This will change as the compiler develops. The result is
that running an executable compiled with this backend may start up more
quickly than running the original Perl program (a feature shared by the &lt;STRONG&gt;C&lt;/STRONG&gt; compiler backend--see &lt;EM&gt;B::C&lt;/EM&gt;) and may also execute slightly faster. This is by no means a good
optimising compiler--yet.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;OPTIONS&quot;&gt;OPTIONS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
If there are any non-option arguments, they are taken to be names of
objects to be saved (probably doesn't work properly yet). Without extra
arguments, it saves the main program.

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__ofilename&quot;&gt;-ofilename&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Output to filename instead of 
&lt;FONT SIZE=-1&gt;STDOUT&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__v&quot;&gt;-v&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Verbose compilation (currently gives a few compilation statistics).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__&quot;&gt;--&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Force end of options

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__uPackname&quot;&gt;-uPackname&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Force apparently unused subs from package Packname to be compiled. This
allows programs to use eval ``foo()'' even when sub foo is never seen to be
used at compile time. The down side is that any subs which really are never
used also have code generated. This option is necessary, for example, if
you have a signal handler foo which you initialise with &lt;CODE&gt;$SIG{BAR} = &amp;quot;foo&amp;quot;&lt;/CODE&gt;. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; better fix, though, is just to change it to &lt;CODE&gt;$SIG{BAR} = \&amp;amp;foo&lt;/CODE&gt;. You can have multiple &lt;STRONG&gt;-u&lt;/STRONG&gt;
options. The compiler tries to figure out which packages may possibly have
subs in which need compiling but the current version doesn't do it very
well. In particular, it is confused by nested packages (i.e. of the form &lt;CODE&gt;A::B&lt;/CODE&gt;) where package &lt;CODE&gt;A&lt;/CODE&gt; does not contain any subs.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__mModulename&quot;&gt;-mModulename&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Instead of generating source for a runnable executable, generate source for an 
&lt;FONT SIZE=-1&gt;XSUB&lt;/FONT&gt; module. The boot_Modulename function (which DynaLoader can look for) does the appropriate initialisation and runs the main part of the Perl source that is being compiled.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__D&quot;&gt;-D&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Debug options (concatenated or separate flags like &lt;CODE&gt;perl -D&lt;/CODE&gt;).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Dr&quot;&gt;-Dr&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Writes debugging output to 
&lt;FONT SIZE=-1&gt;STDERR&lt;/FONT&gt; just as it's about to write to the program's runtime (otherwise writes debugging info as comments in its 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; output).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__DO&quot;&gt;-DO&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Outputs each 
&lt;FONT SIZE=-1&gt;OP&lt;/FONT&gt; as it's compiled

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Ds&quot;&gt;-Ds&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Outputs the contents of the shadow stack at each 
&lt;FONT SIZE=-1&gt;OP&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Dp&quot;&gt;-Dp&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Outputs the contents of the shadow pad of lexicals as it's loaded for each
sub or the main program.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Dq&quot;&gt;-Dq&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Outputs the name of each fake 
&lt;FONT SIZE=-1&gt;PP&lt;/FONT&gt; function in the queue as it's about to process it.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Dl&quot;&gt;-Dl&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Output the filename and line number of each original line of Perl code as
it's processed (&lt;CODE&gt;pp_nextstate&lt;/CODE&gt;).

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__Dt&quot;&gt;-Dt&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Outputs timing information of compilation stages.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__f&quot;&gt;-f&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Force optimisations on or off one at a time.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__ffreetmps_each_bblock&quot;&gt;-ffreetmps-each-bblock&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Delays 
&lt;FONT SIZE=-1&gt;FREETMPS&lt;/FONT&gt; from the end of each statement to the end of
the each basic block.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__ffreetmps_each_loop&quot;&gt;-ffreetmps-each-loop&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Delays 
&lt;FONT SIZE=-1&gt;FREETMPS&lt;/FONT&gt; from the end of each statement to the end of
the group of basic blocks forming a loop. At most one of the
freetmps-each-* options can be used.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__fomit_taint&quot;&gt;-fomit-taint&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Omits generating code for handling perl's tainting mechanism.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item__On&quot;&gt;-On&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Optimisation level (n = 0, 1, 2, ...). &lt;STRONG&gt;-O&lt;/STRONG&gt; means &lt;STRONG&gt;-O1&lt;/STRONG&gt;. Currently, &lt;STRONG&gt;-O1&lt;/STRONG&gt; sets &lt;STRONG&gt;-ffreetmps-each-bblock&lt;/STRONG&gt; and &lt;STRONG&gt;-O2&lt;/STRONG&gt;
sets &lt;STRONG&gt;-ffreetmps-each-loop&lt;/STRONG&gt;.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;EXAMPLES&quot;&gt;EXAMPLES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;PRE&gt;        perl -MO=CC,-O2,-ofoo.c foo.pl
        perl cc_harness -o foo foo.c
&lt;/PRE&gt;
&lt;P&gt;
Note that &lt;CODE&gt;cc_harness&lt;/CODE&gt; lives in the &lt;CODE&gt;B&lt;/CODE&gt; subdirectory of your perl library directory. The utility called &lt;CODE&gt;perlcc&lt;/CODE&gt; may also be used to help make use of this compiler.

&lt;P&gt;
&lt;PRE&gt;        perl -MO=CC,-mFoo,-oFoo.c Foo.pm
        perl cc_harness -shared -c -o Foo.so Foo.c
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;BUGS&quot;&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Plenty. Current status: experimental.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;DIFFERENCES&quot;&gt;DIFFERENCES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
These aren't really bugs but they are constructs which are heavily tied to
perl's compile-and-go implementation and with which this compiler backend
cannot cope.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Loops&quot;&gt;Loops&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Standard perl calculates the target of ``next'', ``last'', and ``redo'' at
run-time. The compiler calculates the targets at compile-time. For example,
the program

&lt;P&gt;
&lt;PRE&gt;    sub skip_on_odd { next NUMBER if $_&amp;#091;0&amp;#093; % 2 }
    NUMBER: for ($i = 0; $i &amp;lt; 5; $i++) {
        skip_on_odd($i);
        print $i;
    }
&lt;/PRE&gt;
&lt;P&gt;
produces the output

&lt;P&gt;
&lt;PRE&gt;    024
&lt;/PRE&gt;
&lt;P&gt;
with standard perl but gives a compile-time error with the compiler.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Context_of_&quot;&gt;Context of &quot;..&quot;&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
The context (scalar or array) of the ``..'' operator determines whether it
behaves as a range or a flip/flop. Standard perl delays until runtime the
decision of which context it is in but the compiler needs to know the
context at compile-time. For example,

&lt;P&gt;
&lt;PRE&gt;    @a = (4,6,1,0,0,1);
    sub range { (shift @a)..(shift @a) }
    print range();
    while (@a) { print scalar(range()) }
&lt;/PRE&gt;
&lt;P&gt;
generates the output

&lt;P&gt;
&lt;PRE&gt;    456123E0
&lt;/PRE&gt;
&lt;P&gt;
with standard Perl but gives a compile-time error with compiled Perl.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Arithmetic&quot;&gt;Arithmetic&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Compiled Perl programs use native 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; arithemtic much more frequently than standard perl.
Operations on large numbers or on boundary cases may produce different
behaviour.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Deprecated_features&quot;&gt;Deprecated features&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Features of standard perl such as &lt;CODE&gt;$&amp;#091;&lt;/CODE&gt; which have been deprecated in standard perl since Perl5 was released have
not been implemented in the compiler.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Malcolm Beattie, &lt;CODE&gt;mbeattie@sable.ox.ac.uk&lt;/CODE&gt;

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:50:09</createtime>
  <node_id>1156</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;        perl -MO=CC&amp;#091;,OPTIONS&amp;#093; foo.pl
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:B::CC</title>
  <nodeupdated>2005-08-12 23:13:34</nodeupdated>
</node>
