<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
Time::Local - efficiently compute time from local and 
&lt;FONT SIZE=-1&gt;GMT&lt;/FONT&gt; time

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
These routines are quite efficient and yet are always guaranteed to agree with 
&lt;CODE&gt;localtime()&lt;/CODE&gt; and 
&lt;CODE&gt;gmtime().&lt;/CODE&gt; We manage this by caching the start times of any months we've seen before. If we know the start time of the month, we can always calculate any time within the month. The start times themselves are guessed by successive approximation starting at the current time, since most dates seen in practice are close to the current date. Unlike algorithms that do a binary search (calling gmtime once for each bit of the time value, resulting in 32 calls), this algorithm calls it at most 6 times, and usually only once or twice. If you hit the month cache, of course, it doesn't call it at all.

&lt;P&gt;
timelocal is implemented using the same cache. We just assume that we're translating a 
&lt;FONT SIZE=-1&gt;GMT&lt;/FONT&gt; time, and then fudge it when we're done for the timezone and daylight savings arguments. The timezone is determined by examining the result of 
&lt;CODE&gt;localtime(0)&lt;/CODE&gt; when the package is initialized. The daylight savings offset is currently assumed to be one hour.

&lt;P&gt;
Both routines return -1 if the integer limit is hit. I.e. for dates after
the 1st of January, 2038 on most machines.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:53:41</createtime>
  <node_id>1271</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    $time = timelocal($sec,$min,$hours,$mday,$mon,$year);
    $time = timegm($sec,$min,$hours,$mday,$mon,$year);
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:Time::Local</title>
  <nodeupdated>2005-08-13 02:48:52</nodeupdated>
</node>
