<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
ExtUtils::Embed - Utilities for embedding Perl in 
&lt;FONT SIZE=-1&gt;C/C++&lt;/FONT&gt; applications

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
ExtUtils::Embed provides utility functions for embedding a Perl interpreter and extensions in your 
&lt;FONT SIZE=-1&gt;C/C++&lt;/FONT&gt; applications. Typically, an application
 &lt;STRONG&gt;Makefile&lt;/STRONG&gt; will invoke ExtUtils::Embed functions while building your application.  

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;_EXPORT&quot;&gt;@EXPORT&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
ExtUtils::Embed exports the following functions:

&lt;P&gt;

&lt;CODE&gt;xsinit(),&lt;/CODE&gt; 
&lt;CODE&gt;ldopts(),&lt;/CODE&gt; 
&lt;CODE&gt;ccopts(),&lt;/CODE&gt; 
&lt;CODE&gt;perl_inc(),&lt;/CODE&gt; 
&lt;CODE&gt;ccflags(),&lt;/CODE&gt; 
&lt;CODE&gt;ccdlflags(),&lt;/CODE&gt; 
&lt;CODE&gt;xsi_header(),&lt;/CODE&gt; 
&lt;CODE&gt;xsi_protos(),&lt;/CODE&gt; 
&lt;CODE&gt;xsi_body()&lt;/CODE&gt;

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;FUNCTIONS&quot;&gt;FUNCTIONS&lt;/A&gt;&lt;/H1&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_xsinit&quot;&gt;xsinit()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Generate 
&lt;FONT SIZE=-1&gt;C/C++&lt;/FONT&gt; code for the 
&lt;FONT SIZE=-1&gt;XS&lt;/FONT&gt; initializer function.

&lt;P&gt;
When invoked as &lt;CODE&gt;`perl -MExtUtils::Embed -e xsinit --`&lt;/CODE&gt;
the following options are recognized:

&lt;P&gt;
&lt;STRONG&gt;-o&lt;/STRONG&gt; &amp;lt;output filename&amp;gt; (Defaults to &lt;STRONG&gt;perlxsi.c&lt;/STRONG&gt;)

&lt;P&gt;
&lt;STRONG&gt;-o STDOUT&lt;/STRONG&gt; will print to 
&lt;FONT SIZE=-1&gt;STDOUT.&lt;/FONT&gt;

&lt;P&gt;
&lt;STRONG&gt;-std&lt;/STRONG&gt; (Write code for extensions that are linked with the current Perl.)

&lt;P&gt;
Any additional arguments are expected to be names of modules to generate
code for.

&lt;P&gt;
When invoked with parameters the following are accepted and optional:

&lt;P&gt;
&lt;CODE&gt;xsinit($filename,$std,&amp;#091;@modules&amp;#093;)&lt;/CODE&gt;

&lt;P&gt;
Where,

&lt;P&gt;
&lt;STRONG&gt;$filename&lt;/STRONG&gt; is equivalent to the &lt;STRONG&gt;-o&lt;/STRONG&gt; option.

&lt;P&gt;
&lt;STRONG&gt;$std&lt;/STRONG&gt; is boolean, equivalent to the &lt;STRONG&gt;-std&lt;/STRONG&gt; option.  

&lt;P&gt;
&lt;STRONG&gt;&amp;#091;@modules&amp;#093;&lt;/STRONG&gt; is an array ref, same as additional arguments mentioned above.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Examples&quot;&gt;Examples&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e xsinit -- -o xsinit.c Socket
&lt;/PRE&gt;
&lt;P&gt;
This will generate code with an &lt;STRONG&gt;xs_init&lt;/STRONG&gt; function that glues the perl &lt;STRONG&gt;Socket::bootstrap&lt;/STRONG&gt; function to the 
&lt;FONT SIZE=-1&gt;C&lt;/FONT&gt; &lt;STRONG&gt;boot_Socket&lt;/STRONG&gt; function and writes it to a file named ``xsinit.c''.

&lt;P&gt;
Note that &lt;STRONG&gt;DynaLoader&lt;/STRONG&gt; is a special case where it must call &lt;STRONG&gt;boot_DynaLoader&lt;/STRONG&gt; directly.

&lt;P&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e xsinit
&lt;/PRE&gt;
&lt;P&gt;
This will generate code for linking with &lt;STRONG&gt;DynaLoader&lt;/STRONG&gt; and each static extension found in &lt;STRONG&gt;$Config{static_ext}&lt;/STRONG&gt;. The code is written to the default file name &lt;STRONG&gt;perlxsi.c&lt;/STRONG&gt;.

&lt;P&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e xsinit -- -o xsinit.c -std DBI DBD::Oracle
&lt;/PRE&gt;
&lt;P&gt;
Here, code is written for all the currently linked extensions along with
code for &lt;STRONG&gt;DBI&lt;/STRONG&gt; and &lt;STRONG&gt;DBD::Oracle&lt;/STRONG&gt;.

&lt;P&gt;
If you have a working &lt;STRONG&gt;DynaLoader&lt;/STRONG&gt; then there is rarely any need to statically link in any other extensions.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ldopts&quot;&gt;ldopts()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Output arguments for linking the Perl library and extensions to your
application.

&lt;P&gt;
When invoked as &lt;CODE&gt;`perl -MExtUtils::Embed -e ldopts --`&lt;/CODE&gt;
the following options are recognized:

&lt;P&gt;
&lt;STRONG&gt;-std&lt;/STRONG&gt; 

 

&lt;P&gt;
Output arguments for linking the Perl library and any extensions linked
with the current Perl.

&lt;P&gt;
&lt;STRONG&gt;-I&lt;/STRONG&gt; &amp;lt;path1:path2&amp;gt;

&lt;P&gt;
Search path for ModuleName.a archives. Default path is &lt;STRONG&gt;@INC&lt;/STRONG&gt;. Library archives are expected to be found as 
&lt;STRONG&gt;/some/path/auto/ModuleName/ModuleName.a&lt;/STRONG&gt;
For example, when looking for &lt;STRONG&gt;Socket.a&lt;/STRONG&gt; relative to a search path, we should find &lt;STRONG&gt;auto/Socket/Socket.a&lt;/STRONG&gt;  

  

&lt;P&gt;
When looking for &lt;STRONG&gt;DBD::Oracle&lt;/STRONG&gt; relative to a search path, we should find &lt;STRONG&gt;auto/DBD/Oracle/Oracle.a&lt;/STRONG&gt;

&lt;P&gt;
Keep in mind, you can always supply &lt;STRONG&gt;/my/own/path/ModuleName.a&lt;/STRONG&gt;
as an additional linker argument.

&lt;P&gt;
&lt;STRONG&gt;--&lt;/STRONG&gt;  &amp;lt;list of linker args&amp;gt;

&lt;P&gt;
Additional linker arguments to be considered.

&lt;P&gt;
Any additional arguments found before the &lt;STRONG&gt;--&lt;/STRONG&gt; token are expected to be names of modules to generate code for.

&lt;P&gt;
When invoked with parameters the following are accepted and optional:

&lt;P&gt;
&lt;CODE&gt;ldopts($std,&amp;#091;@modules&amp;#093;,&amp;#091;@link_args&amp;#093;,$path)&lt;/CODE&gt;

&lt;P&gt;
Where,

&lt;P&gt;
&lt;STRONG&gt;$std&lt;/STRONG&gt; is boolean, equivalent to the &lt;STRONG&gt;-std&lt;/STRONG&gt; option.  

&lt;P&gt;
&lt;STRONG&gt;&amp;#091;@modules&amp;#093;&lt;/STRONG&gt; is equivalent to additional arguments found before the &lt;STRONG&gt;--&lt;/STRONG&gt; token.

&lt;P&gt;
&lt;STRONG&gt;&amp;#091;@link_args&amp;#093;&lt;/STRONG&gt; is equivalent to arguments found after the &lt;STRONG&gt;--&lt;/STRONG&gt; token.

&lt;P&gt;
&lt;STRONG&gt;$path&lt;/STRONG&gt; is equivalent to the &lt;STRONG&gt;-I&lt;/STRONG&gt; option.

&lt;P&gt;
In addition, when ldopts is called with parameters, it will return the argument string rather than print it to 
&lt;FONT SIZE=-1&gt;STDOUT.&lt;/FONT&gt;

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;Examples&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e ldopts
&lt;/PRE&gt;
&lt;P&gt;
This will print arguments for linking with &lt;STRONG&gt;libperl.a&lt;/STRONG&gt;, &lt;STRONG&gt;DynaLoader&lt;/STRONG&gt; and extensions found in &lt;STRONG&gt;$Config{static_ext}&lt;/STRONG&gt;. This includes libraries found in &lt;STRONG&gt;$Config{libs}&lt;/STRONG&gt; and the first ModuleName.a library for each extension that is found by
searching &lt;STRONG&gt;@INC&lt;/STRONG&gt; or the path specifed by the &lt;STRONG&gt;-I&lt;/STRONG&gt; option. In addition, when ModuleName.a is found, additional linker
arguments are picked up from the &lt;STRONG&gt;extralibs.ld&lt;/STRONG&gt; file in the same directory.

&lt;P&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e ldopts -- -std Socket
&lt;/PRE&gt;
&lt;P&gt;
This will do the same as the above example, along with printing additional
arguments for linking with the &lt;STRONG&gt;Socket&lt;/STRONG&gt; extension.

&lt;P&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e ldopts -- DynaLoader
&lt;/PRE&gt;
&lt;P&gt;
This will print arguments for linking with just the &lt;STRONG&gt;DynaLoader&lt;/STRONG&gt; extension and &lt;STRONG&gt;libperl.a&lt;/STRONG&gt;.

&lt;P&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e ldopts -- -std Msql -- -L/usr/msql/lib -lmsql
&lt;/PRE&gt;
&lt;P&gt;
Any arguments after the second '--' token are additional linker arguments
that will be examined for potential conflict. If there is no conflict, the
additional arguments will be part of the output.  

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_perl_inc&quot;&gt;perl_inc()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
For including perl header files this function simply prints:

&lt;P&gt;
&lt;PRE&gt; -I$Config{archlibexp}/CORE  
&lt;/PRE&gt;
&lt;P&gt;
So, rather than having to say:

&lt;P&gt;
&lt;PRE&gt; perl -MConfig -e 'print &amp;quot;-I$Config{archlibexp}/CORE&amp;quot;'
&lt;/PRE&gt;
&lt;P&gt;
Just say:

&lt;P&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e perl_inc
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ccflags&quot;&gt;ccflags(), ccdlflags()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
These functions simply print $Config{ccflags} and $Config{ccdlflags}

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_ccopts&quot;&gt;ccopts()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This function combines 
&lt;CODE&gt;perl_inc(),&lt;/CODE&gt; 
&lt;CODE&gt;ccflags()&lt;/CODE&gt; and 
&lt;CODE&gt;ccdlflags()&lt;/CODE&gt; into one.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_xsi_header&quot;&gt;xsi_header()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This function simply returns a string defining the same &lt;STRONG&gt;EXTERN_C&lt;/STRONG&gt; macro as
&lt;STRONG&gt;perlmain.c&lt;/STRONG&gt; along with #including &lt;STRONG&gt;perl.h&lt;/STRONG&gt; and &lt;STRONG&gt;EXTERN.h&lt;/STRONG&gt;.  

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_xsi_protos&quot;&gt;xsi_protos(@modules)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This function returns a string of &lt;STRONG&gt;boot_$ModuleName&lt;/STRONG&gt; prototypes for each @modules.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_xsi_body&quot;&gt;xsi_body(@modules)&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
This function returns a string of calls to &lt;STRONG&gt;newXS()&lt;/STRONG&gt; that glue the module &lt;STRONG&gt;bootstrap&lt;/STRONG&gt;
function to &lt;STRONG&gt;boot_ModuleName&lt;/STRONG&gt; for each @modules.

&lt;P&gt;
&lt;STRONG&gt;xsinit()&lt;/STRONG&gt; uses the xsi_* functions to generate most of it's code.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;EXAMPLES&quot;&gt;EXAMPLES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
For examples on how to use &lt;STRONG&gt;ExtUtils::Embed&lt;/STRONG&gt; for building 
&lt;FONT SIZE=-1&gt;C/C++&lt;/FONT&gt; applications with embedded perl, see the eg/
directory and [perlman:perlembed|perlembed].

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
[perlman:perlembed|perlembed]

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Doug MacEachern &amp;lt;&lt;EM&gt;dougm@osf.org&lt;/EM&gt;&amp;gt;

&lt;P&gt;
Based on ideas from Tim Bunce &amp;lt;&lt;EM&gt;Tim.Bunce@ig.co.uk&lt;/EM&gt;&amp;gt; and
&lt;STRONG&gt;minimod.pl&lt;/STRONG&gt; by Andreas Koenig &amp;lt;&lt;EM&gt;k@anna.in-berlin.de&lt;/EM&gt;&amp;gt; and Tim Bunce.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:51:42</createtime>
  <node_id>1185</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt; perl -MExtUtils::Embed -e xsinit 
 perl -MExtUtils::Embed -e ldopts 
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlman:ExtUtils::Embed</title>
  <nodeupdated>2005-08-10 16:19:00</nodeupdated>
</node>
