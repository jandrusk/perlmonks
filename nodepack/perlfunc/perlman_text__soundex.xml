<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
Text::Soundex - Implementation of the Soundex Algorithm as Described by
Knuth

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This module implements the soundex algorithm as described by Donald Knuth
in Volume 3 of &lt;STRONG&gt;The Art of Computer Programming&lt;/STRONG&gt;. The algorithm is intended to hash words (in particular surnames) into a
small space using a simple model which approximates the sound of the word
when spoken by an English speaker. Each word is reduced to a four character
string, the first character being an upper case letter and the remaining
three being digits.

&lt;P&gt;
If there is no soundex code representation for a string then the value of
&lt;CODE&gt;$soundex_nocode&lt;/CODE&gt; is returned. This is initially set to [perlfunc:undef|undef], but many people seem to prefer an &lt;EM&gt;unlikely&lt;/EM&gt; value like &lt;CODE&gt;Z000&lt;/CODE&gt;
(how unlikely this is depends on the data set being dealt with.) Any value
can be assigned to &lt;CODE&gt;$soundex_nocode&lt;/CODE&gt;.

&lt;P&gt;
In scalar context &lt;CODE&gt;soundex&lt;/CODE&gt; returns the soundex code of its first argument, and in array context a list
is returned in which each element is the soundex code for the corresponding
argument passed to &lt;CODE&gt;soundex&lt;/CODE&gt; e.g.

&lt;P&gt;
&lt;PRE&gt;  @codes = soundex qw(Mike Stok);
&lt;/PRE&gt;
&lt;P&gt;
leaves &lt;CODE&gt;@codes&lt;/CODE&gt; containing &lt;CODE&gt;('M200', 'S320')&lt;/CODE&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;EXAMPLES&quot;&gt;EXAMPLES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Knuth's examples of various names and the soundex codes they map to are
listed below:

&lt;P&gt;
&lt;PRE&gt;  Euler, Ellery -&amp;gt; E460
  Gauss, Ghosh -&amp;gt; G200
  Hilbert, Heilbronn -&amp;gt; H416
  Knuth, Kant -&amp;gt; K530
  Lloyd, Ladd -&amp;gt; L300
  Lukasiewicz, Lissajous -&amp;gt; L222
&lt;/PRE&gt;
&lt;P&gt;
so:

&lt;P&gt;
&lt;PRE&gt;  $code = soundex 'Knuth';              # $code contains 'K530'
  @list = soundex qw(Lloyd Gauss);      # @list contains 'L300', 'G200'
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;LIMITATIONS&quot;&gt;LIMITATIONS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
As the soundex algorithm was originally used a &lt;STRONG&gt;long&lt;/STRONG&gt; time ago in the 
&lt;FONT SIZE=-1&gt;US&lt;/FONT&gt; it considers only the English alphabet and
pronunciation.

&lt;P&gt;
As it is mapping a large space (arbitrary length strings) onto a small
space (single letter plus 3 digits) no inference can be made about the
similarity of two strings which end up with the same soundex code. For
example, both &lt;CODE&gt;Hilbert&lt;/CODE&gt; and &lt;CODE&gt;Heilbronn&lt;/CODE&gt; end up with a soundex code of &lt;CODE&gt;H416&lt;/CODE&gt;.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
This code was implemented by Mike Stok (&lt;CODE&gt;stok@cybercom.net&lt;/CODE&gt;) from the description given by Knuth. Ian Phillips (&lt;CODE&gt;ian@pipex.net&lt;/CODE&gt;) and Rich Pinder (&lt;CODE&gt;rpinder@hsc.usc.edu&lt;/CODE&gt;) supplied ideas and spotted mistakes.
&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:53:27</createtime>
  <node_id>1255</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;  use Text::Soundex;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;  $code = soundex $string;            # get soundex code for a string
  @codes = soundex @list;             # get list of codes for list of strings
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;  # set value to be returned for strings wit</synopsis>
  <title>perlman:Text::Soundex</title>
  <nodeupdated>2005-08-10 15:45:23</nodeupdated>
</node>
