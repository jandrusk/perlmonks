<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
CGI::Cookie - Interface to Netscape Cookies

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
CGI::Cookie is an interface to Netscape 
&lt;FONT SIZE=-1&gt;(HTTP/1.1)&lt;/FONT&gt; cookies, an innovation that allows Web
servers to store persistent information on the browser's side of the
connection. Although CGI::Cookie is intended to be used in conjunction with
CGI.pm (and is in fact used by it internally), you can use this module
independently.

&lt;P&gt;
For full information on cookies see 

&lt;P&gt;
&lt;PRE&gt;        &lt;A HREF=&quot;http://www.ics.uci.edu/pub/ietf/http/rfc2109.txt&quot;&gt;http://www.ics.uci.edu/pub/ietf/http/rfc2109.txt&lt;/A&gt;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;USING_CGI_Cookie&quot;&gt;USING CGI::Cookie&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
CGI::Cookie is object oriented. Each cookie object has a name and a value.
The name is any scalar value. The value is any scalar or array value
(associative arrays are also allowed). Cookies also have several optional
attributes, including:

&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_expiration_date&quot;&gt;expiration date&lt;/A&gt;&lt;/STRONG&gt;
&lt;P&gt;
The expiration date tells the browser how long to hang on to the cookie. If
the cookie specifies an expiration date in the future, the browser will
store the cookie information in a disk file and return it to the server
every time the user reconnects (until the expiration date is reached). If
the cookie species an expiration date in the past, the browser will remove
the cookie from the disk file. If the expiration date is not specified, the
cookie will persist only until the user quits the browser.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_domain&quot;&gt;domain&lt;/A&gt;&lt;/STRONG&gt;

This is a partial or complete domain name for which the cookie is valid.
The browser will return the cookie to any host that matches the partial
domain name. For example, if you specify a domain name of
``.capricorn.com'', then Netscape will return the cookie to Web servers
running on any of the machines ``www.capricorn.com'',
``ftp.capricorn.com'', ``feckless.capricorn.com'', etc. Domain names must
contain at least two periods to prevent attempts to match on top level
domains like ``.edu''. If no domain is specified, then the browser will
only return the cookie to servers on the host the cookie originated from.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_path&quot;&gt;path&lt;/A&gt;&lt;/STRONG&gt;

If you provide a cookie path attribute, the browser will check it against your script's 
&lt;FONT SIZE=-1&gt;URL&lt;/FONT&gt; before returning the cookie. For example, if you specify the path ``/cgi-bin'', then the cookie will be returned to each of the scripts ``/cgi-bin/tally.pl'', ``/cgi-bin/order.pl'', and ``/cgi-bin/customer_service/complain.pl'', but not to the script ``/cgi-private/site_admin.pl''. By default, path is set to ``/'', which causes the cookie to be sent to any 
&lt;FONT SIZE=-1&gt;CGI&lt;/FONT&gt; script on your site.

&lt;P&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_secure_flag&quot;&gt;secure flag&lt;/A&gt;&lt;/STRONG&gt;

If the ``secure'' attribute is set, the cookie will only be sent to your script if the 
&lt;FONT SIZE=-1&gt;CGI&lt;/FONT&gt; request is occurring on a secure channel, such as 
&lt;FONT SIZE=-1&gt;SSL.&lt;/FONT&gt;

&lt;/OL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Creating_New_Cookies&quot;&gt;Creating New Cookies&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
&lt;PRE&gt;        $c = new CGI::Cookie(-name    =&amp;gt;  'foo',
                             -value   =&amp;gt;  'bar',
                             -expires =&amp;gt;  '+3M',
                             -domain  =&amp;gt;  '.capricorn.com',
                             -path    =&amp;gt;  '/cgi-bin/database'
                             -secure  =&amp;gt;  1
                            );
&lt;/PRE&gt;
&lt;P&gt;
Create cookies from scratch with the &lt;STRONG&gt;new&lt;/STRONG&gt; method. The &lt;STRONG&gt;-name&lt;/STRONG&gt; and
&lt;STRONG&gt;-value&lt;/STRONG&gt; parameters are required. The name must be a scalar value. The value can be
a scalar, an array reference, or a hash reference. (At some point in the
future cookies will support one of the Perl object serialization protocols
for full generality).

&lt;P&gt;
&lt;STRONG&gt;-expires&lt;/STRONG&gt; accepts any of the relative or absolute date formats recognized by CGI.pm, for example 
&lt;FONT SIZE=-1&gt;``+3M''&lt;/FONT&gt; for three months in the future. See CGI.pm's documentation for details.

&lt;P&gt;
&lt;STRONG&gt;-domain&lt;/STRONG&gt; points to a domain name or to a fully qualified host name. If not
specified, the cookie will be returned only to the Web server that created
it.

&lt;P&gt;
&lt;STRONG&gt;-path&lt;/STRONG&gt; points to a partial 
&lt;FONT SIZE=-1&gt;URL&lt;/FONT&gt; on the current server. The cookie will be returned
to all URLs beginning with the specified path. If not specified, it
defaults to '/', which returns the cookie to all pages at your site.

&lt;P&gt;
&lt;STRONG&gt;-secure&lt;/STRONG&gt; if set to a true value instructs the browser to return the cookie only when
a cryptographic protocol is in use.

&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Sending_the_Cookie_to_the_Browse&quot;&gt;Sending the Cookie to the Browser&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Within a 
&lt;FONT SIZE=-1&gt;CGI&lt;/FONT&gt; script you can send a cookie to the browser by creating one or more Set-Cookie: fields in the 
&lt;FONT SIZE=-1&gt;HTTP&lt;/FONT&gt; header. Here is a typical sequence:

&lt;P&gt;
&lt;PRE&gt;  my $c = new CGI::Cookie(-name    =&amp;gt;  'foo',
                          -value   =&amp;gt;  &amp;#091;'bar','baz'&amp;#093;,
                          -expires =&amp;gt;  '+3M');
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;  print &amp;quot;Set-Cookie: $c\n&amp;quot;;
  print &amp;quot;Content-Type: text/html\n\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
To send more than one cookie, create several Set-Cookie: fields.
Alternatively, you may concatenate the cookies together with ``; '' and
send them in one field.

&lt;P&gt;
If you are using CGI.pm, you send cookies by providing a -cookie argument to the 
&lt;CODE&gt;header()&lt;/CODE&gt; method:

&lt;P&gt;
&lt;PRE&gt;  print header(-cookie=&amp;gt;$c);
&lt;/PRE&gt;
&lt;P&gt;
Mod_perl users can set cookies using the request object's 
&lt;CODE&gt;header_out()&lt;/CODE&gt; method:

&lt;P&gt;
&lt;PRE&gt;  $r-&amp;gt;header_out('Set-Cookie',$c);
&lt;/PRE&gt;
&lt;P&gt;
Internally, Cookie overloads the ``'' operator to call its 
&lt;CODE&gt;as_string()&lt;/CODE&gt; method when incorporated into the 
&lt;FONT SIZE=-1&gt;HTTP&lt;/FONT&gt; header. 
&lt;CODE&gt;as_string()&lt;/CODE&gt; turns the Cookie's internal representation into an RFC-compliant text representation. You may call 
&lt;CODE&gt;as_string()&lt;/CODE&gt; yourself if you prefer:

&lt;P&gt;
&lt;PRE&gt;  print &amp;quot;Set-Cookie: &amp;quot;,$c-&amp;gt;as_string,&amp;quot;\n&amp;quot;;
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Recovering_Previous_Cookies&quot;&gt;Recovering Previous Cookies&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
&lt;PRE&gt;        %cookies = fetch CGI::Cookie;
&lt;/PRE&gt;
&lt;P&gt;
&lt;STRONG&gt;fetch&lt;/STRONG&gt; returns an associative array consisting of all cookies returned by the
browser. The keys of the array are the cookie names. You can iterate
through the cookies this way:

&lt;P&gt;
&lt;PRE&gt;        %cookies = fetch CGI::Cookie;
        foreach (keys %cookies) {
           do_something($cookies{$_});
        }
&lt;/PRE&gt;
&lt;P&gt;
In a scalar context, 
&lt;CODE&gt;fetch()&lt;/CODE&gt; returns a hash reference, which may be more efficient if you are manipulating multiple cookies. CGI.pm uses the 
&lt;FONT SIZE=-1&gt;URL&lt;/FONT&gt; escaping methods to save and restore reserved characters in its cookies. If you are trying to retrieve a cookie set by a foreign server, this escaping method may trip you up. Use 
&lt;CODE&gt;raw_fetch()&lt;/CODE&gt; instead, which has the same semantics as 
&lt;CODE&gt;fetch(),&lt;/CODE&gt; but performs no unescaping.

&lt;P&gt;
You may also retrieve cookies that were stored in some external form using the 
&lt;CODE&gt;parse()&lt;/CODE&gt; class method:

&lt;P&gt;
&lt;PRE&gt;       $COOKIES = `cat /usr/tmp/Cookie_stash`;
       %cookies = parse CGI::Cookie($COOKIES);
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H2&gt;&lt;A NAME=&quot;Manipulating_Cookies&quot;&gt;Manipulating Cookies&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;
Cookie objects have a series of accessor methods to get and set cookie
attributes. Each accessor has a similar syntax. Called without arguments,
the accessor returns the current value of the attribute. Called with an
argument, the accessor changes the attribute and returns its new value.

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_name&quot;&gt;name()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Get or set the cookie's name. Example:

&lt;P&gt;
&lt;PRE&gt;        $name = $c-&amp;gt;name;
        $new_name = $c-&amp;gt;name('fred');
&lt;/PRE&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_value&quot;&gt;value()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Get or set the cookie's value. Example:

&lt;P&gt;
&lt;PRE&gt;        $value = $c-&amp;gt;value;
        @new_value = $c-&amp;gt;value(&amp;#091;'a','b','c','d'&amp;#093;);
&lt;/PRE&gt;
&lt;P&gt;
&lt;STRONG&gt;value()&lt;/STRONG&gt; is context sensitive. In an array context it will return the current value
of the cookie as an array. In a scalar context it will return the &lt;STRONG&gt;first&lt;/STRONG&gt; value of a multivalued cookie.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_domain&quot;&gt;domain()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Get or set the cookie's domain.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_path&quot;&gt;path()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Get or set the cookie's path.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_expires&quot;&gt;expires()&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Get or set the cookie's expiration time.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR_INFORMATION&quot;&gt;AUTHOR INFORMATION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
be used and modified freely, but 
&lt;FONT SIZE=-1&gt;I&lt;/FONT&gt; do request that this copyright notice remain
attached to the file. You may modify this module as you wish, but if you
redistribute a modified version, please attach a note listing the
modifications you have made.

&lt;P&gt;
Address bug reports and comments to: &lt;A
HREF=&quot;mailto:lstein@genome.wi.mit.edu&quot;&gt;lstein@genome.wi.mit.edu&lt;/A&gt;

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;BUGS&quot;&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
This section intentionally left blank.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;SEE_ALSO&quot;&gt;SEE ALSO&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
[perlman:CGI::Carp|Carp], [perlman:lib:CGI|CGI]
 
=cut
&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:50:49</createtime>
  <node_id>1166</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    use CGI qw/:standard/;
    use CGI::Cookie;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # Create new cookies and send them
    $cookie1 = new CGI::Cookie(-name=&amp;gt;'ID',-value=&amp;gt;123456);
    $cookie2 = new CGI::Cookie(-name=&amp;gt;'preferences',
</synopsis>
  <title>perlman:CGI::Cookie</title>
  <nodeupdated>2005-08-14 01:10:19</nodeupdated>
</node>
