<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
syscall - execute an arbitrary system call

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
Calls the system call specified as the first element of the list, passing
the remaining elements as arguments to the system call. If unimplemented,
produces a fatal error. The arguments are interpreted as follows: if a
given argument is numeric, the argument is passed as an int. If not, the
pointer to the string value is passed. You are responsible to make sure a
string is pre-extended long enough to receive any result that might be
written into a string. You can't use a string literal (or other read-only
string) as an argument to [perlfunc:syscall|syscall()]
because Perl has to assume that any string pointer might be written
through. If your integer arguments are not literals and have never been
interpreted in a numeric context, you may need to add &lt;CODE&gt;0&lt;/CODE&gt; to them to force them to look like numbers. This emulates the [perlfunc:syswrite|syswrite()] function (or vice versa):

&lt;P&gt;
&lt;PRE&gt;    require 'syscall.ph';               # may need to run h2ph
    $s = &amp;quot;hi there\n&amp;quot;;
    syscall(&amp;amp;SYS_write, fileno(STDOUT), $s, length $s);
&lt;/PRE&gt;
&lt;P&gt;
Note that Perl supports passing of up to only 14 arguments to your system
call, which in practice should usually suffice.

&lt;P&gt;
Syscall returns whatever value returned by the system call it calls. If the
system call fails, [perlfunc:syscall|syscall()] returns &lt;CODE&gt;-1&lt;/CODE&gt; and sets &lt;CODE&gt;$!&lt;/CODE&gt; (errno). Note that some system calls can legitimately return &lt;CODE&gt;-1&lt;/CODE&gt;. The proper way to handle such calls is to assign &lt;CODE&gt;$!=0;&lt;/CODE&gt; before the call and check the value of &lt;CODE&gt;$!&lt;/CODE&gt; if syscall returns &lt;CODE&gt;-1&lt;/CODE&gt;.

&lt;P&gt;
There's a problem with [perlfunc:syscall|syscall(&amp;amp;SYS_pipe)]: it returns the file number of the read end of the pipe it creates. There
is no way to retrieve the file number of the other end. You can avoid this
problem by using [perlfunc:pipe|pipe()] instead.

&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:42:12</createtime>
  <node_id>217</node_id>
  <synopsis>&lt;P&gt;
syscall 
&lt;FONT SIZE=-1&gt;LIST&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:syscall</title>
  <nodeupdated>2005-08-12 22:17:58</nodeupdated>
</node>
