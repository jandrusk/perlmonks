<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
Tie::Hash, Tie::StdHash - base class definitions for tied hashes

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
This module provides some skeletal methods for hash-tying classes. See
[perlman:perltie|perltie] for a list of the functions required in order to tie a hash to a package.
The basic &lt;STRONG&gt;Tie::Hash&lt;/STRONG&gt; package provides a &lt;CODE&gt;new&lt;/CODE&gt; method, as well as methods &lt;CODE&gt;TIEHASH&lt;/CODE&gt;, &lt;CODE&gt;EXISTS&lt;/CODE&gt; and &lt;CODE&gt;CLEAR&lt;/CODE&gt;. The &lt;STRONG&gt;Tie::StdHash&lt;/STRONG&gt; package provides most methods required for hashes in [perlman:perltie|perltie]. It inherits from
&lt;STRONG&gt;Tie::Hash&lt;/STRONG&gt;, and causes tied hashes to behave exactly like standard hashes, allowing
for selective overloading of methods. The &lt;CODE&gt;new&lt;/CODE&gt; method is provided as grandfathering in the case a class forgets to include
a &lt;CODE&gt;TIEHASH&lt;/CODE&gt; method.

&lt;P&gt;
For developers wishing to write their own tied hashes, the required methods
are briefly defined below. See the [perlman:perltie|perltie] section for more detailed descriptive, as well as example code:

&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_TIEHASH&quot;&gt;TIEHASH classname, LIST&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
The method invoked by the command &lt;CODE&gt;tie %hash, classname&lt;/CODE&gt;. Associates a new hash instance with the specified class. &lt;CODE&gt;LIST&lt;/CODE&gt; would represent additional arguments (along the lines of [perlman:lib:AnyDBM_File|AnyDBM_File] and compatriots) needed to complete the association.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_STORE&quot;&gt;STORE this, key, value&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Store datum &lt;EM&gt;value&lt;/EM&gt; into &lt;EM&gt;key&lt;/EM&gt; for the tied hash &lt;EM&gt;this&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_FETCH&quot;&gt;FETCH this, key&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Retrieve the datum in &lt;EM&gt;key&lt;/EM&gt; for the tied hash &lt;EM&gt;this&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_FIRSTKEY&quot;&gt;FIRSTKEY this&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the (key, value) pair for the first key in the hash.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_NEXTKEY&quot;&gt;NEXTKEY this, lastkey&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Return the next key for the hash.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_EXISTS&quot;&gt;EXISTS this, key&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Verify that &lt;EM&gt;key&lt;/EM&gt; exists with the tied hash &lt;EM&gt;this&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_DELETE&quot;&gt;DELETE this, key&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Delete the key &lt;EM&gt;key&lt;/EM&gt; from the tied hash &lt;EM&gt;this&lt;/EM&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_CLEAR&quot;&gt;CLEAR this&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Clear all values from the tied hash &lt;EM&gt;this&lt;/EM&gt;.

&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;CAVEATS&quot;&gt;CAVEATS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The [perlman:perltie|perltie] documentation includes a method called &lt;CODE&gt;DESTROY&lt;/CODE&gt; as a necessary method for tied hashes. Neither &lt;STRONG&gt;Tie::Hash&lt;/STRONG&gt; nor &lt;STRONG&gt;Tie::StdHash&lt;/STRONG&gt;
define a default for this method. This is a standard for class packages,
but may be omitted in favor of a simple default.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;MORE_INFORMATION&quot;&gt;MORE INFORMATION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The packages relating to various DBM-related implemetations (&lt;EM&gt;DB_File&lt;/EM&gt;,
&lt;EM&gt;NDBM_File&lt;/EM&gt;, etc.) show examples of general tied hashes, as does the
[perlman:lib:Config|Config] module. While these do not utilize &lt;STRONG&gt;Tie::Hash&lt;/STRONG&gt;, they serve as good working examples.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 19:53:37</createtime>
  <node_id>1266</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;    package NewHash;
    require Tie::Hash;
    
    @ISA = (Tie::Hash);
    
    sub DELETE { ... }          # Provides needed method
    sub CLEAR { ... }           # Overrides inherited method
    
    
    package NewStdHash;
    require Tie</synopsis>
  <title>perlman:Tie::Hash</title>
  <nodeupdated>2005-08-14 16:41:33</nodeupdated>
</node>
