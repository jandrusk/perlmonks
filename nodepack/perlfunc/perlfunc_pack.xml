<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
pack - convert a list into a binary representation

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
Takes an array or list of values and packs it into a binary structure, returning the string containing the structure. The 
&lt;FONT SIZE=-1&gt;TEMPLATE&lt;/FONT&gt; is a sequence of characters that give the order and type of values, as follows:

&lt;P&gt;
&lt;PRE&gt;    A   An ascii string, will be space padded.
    a   An ascii string, will be null padded.
    b   A bit string (ascending bit order, like vec()).
    B   A bit string (descending bit order).
    h   A hex string (low nybble first).
    H   A hex string (high nybble first).
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    c   A signed char value.
    C   An unsigned char value.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    s   A signed short value.
    S   An unsigned short value.
          (This 'short' is _exactly_ 16 bits, which may differ from
           what a local C compiler calls 'short'.)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    i   A signed integer value.
    I   An unsigned integer value.
          (This 'integer' is _at_least_ 32 bits wide.  Its exact
           size depends on what a local C compiler calls 'int',
           and may even be larger than the 'long' described in
           the next item.)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    l   A signed long value.
    L   An unsigned long value.
          (This 'long' is _exactly_ 32 bits, which may differ from
           what a local C compiler calls 'long'.)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    n   A short in &amp;quot;network&amp;quot; (big-endian) order.
    N   A long in &amp;quot;network&amp;quot; (big-endian) order.
    v   A short in &amp;quot;VAX&amp;quot; (little-endian) order.
    V   A long in &amp;quot;VAX&amp;quot; (little-endian) order.
          (These 'shorts' and 'longs' are _exactly_ 16 bits and
           _exactly_ 32 bits, respectively.)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    f   A single-precision float in the native format.
    d   A double-precision float in the native format.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    p   A pointer to a null-terminated string.
    P   A pointer to a structure (fixed-length string).
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    u   A uuencoded string.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    w   A BER compressed integer.  Its bytes represent an unsigned
        integer in base 128, most significant digit first, with as
        few digits as possible.  Bit eight (the high bit) is set
        on each byte except the last.
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    x   A null byte.
    X   Back up a byte.
    @   Null fill to absolute position.
&lt;/PRE&gt;
&lt;P&gt;
Each letter may optionally be followed by a number giving a repeat count.
With all types except &lt;CODE&gt;&amp;quot;a&amp;quot;&lt;/CODE&gt;, &lt;CODE&gt;&amp;quot;A&amp;quot;&lt;/CODE&gt;, &lt;CODE&gt;&amp;quot;b&amp;quot;&lt;/CODE&gt;, &lt;CODE&gt;&amp;quot;B&amp;quot;&lt;/CODE&gt;, &lt;CODE&gt;&amp;quot;h&amp;quot;&lt;/CODE&gt;, &lt;CODE&gt;&amp;quot;H&amp;quot;&lt;/CODE&gt;, and &lt;CODE&gt;&amp;quot;P&amp;quot;&lt;/CODE&gt; the pack function will gobble up that many values from the 
&lt;FONT SIZE=-1&gt;LIST.&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt;
 &lt;CODE&gt;*&lt;/CODE&gt; for the repeat count means to use however many items are left. The &lt;CODE&gt;&amp;quot;a&amp;quot;&lt;/CODE&gt; and &lt;CODE&gt;&amp;quot;A&amp;quot;&lt;/CODE&gt;
types gobble just one value, but pack it as a string of length count,
padding with nulls or spaces as necessary. (When unpacking, &lt;CODE&gt;&amp;quot;A&amp;quot;&lt;/CODE&gt; strips trailing spaces and nulls, but &lt;CODE&gt;&amp;quot;a&amp;quot;&lt;/CODE&gt; does not.) Likewise, the &lt;CODE&gt;&amp;quot;b&amp;quot;&lt;/CODE&gt; and &lt;CODE&gt;&amp;quot;B&amp;quot;&lt;/CODE&gt;
fields pack a string that many bits long. The &lt;CODE&gt;&amp;quot;h&amp;quot;&lt;/CODE&gt; and &lt;CODE&gt;&amp;quot;H&amp;quot;&lt;/CODE&gt; fields pack a string that many nybbles long. The &lt;CODE&gt;&amp;quot;p&amp;quot;&lt;/CODE&gt; type packs a pointer to a null- terminated string. You are responsible for
ensuring the string is not a temporary value (which can potentially get
deallocated before you get around to using the packed result). The &lt;CODE&gt;&amp;quot;P&amp;quot;&lt;/CODE&gt; packs a pointer to a structure of the size indicated by the length. 
&lt;FONT SIZE=-1&gt;A&lt;/FONT&gt; 
&lt;FONT SIZE=-1&gt;NULL&lt;/FONT&gt; pointer is created if the corresponding value for
 &lt;CODE&gt;&amp;quot;p&amp;quot;&lt;/CODE&gt; or &lt;CODE&gt;&amp;quot;P&amp;quot;&lt;/CODE&gt; is [perlfunc:undef|undef]. Real numbers (floats and doubles) are in the native machine format only; due to the multiplicity of floating formats around, and the lack of a standard ``network'' representation, no facility for interchange has been made. This means that packed floating point data written on one machine may not be readable on another - even if both use 
&lt;FONT SIZE=-1&gt;IEEE&lt;/FONT&gt; floating point arithmetic (as the endian-ness of the memory representation is not part of the 
&lt;FONT SIZE=-1&gt;IEEE&lt;/FONT&gt; spec). Note that Perl uses doubles internally for all numeric calculation, and converting from double into float and thence back to double again will lose precision (i.e.,

&lt;CODE&gt;unpack(&amp;quot;f&amp;quot;, pack(&amp;quot;f&amp;quot;, $foo)&lt;/CODE&gt;) will not in general equal &lt;CODE&gt;$foo&lt;/CODE&gt;).

&lt;P&gt;
Examples:

&lt;P&gt;
&lt;PRE&gt;    $foo = pack(&amp;quot;cccc&amp;quot;,65,66,67,68);
    # foo eq &amp;quot;ABCD&amp;quot;
    $foo = pack(&amp;quot;c4&amp;quot;,65,66,67,68);
    # same thing
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $foo = pack(&amp;quot;ccxxcc&amp;quot;,65,66,67,68);
    # foo eq &amp;quot;AB\0\0CD&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $foo = pack(&amp;quot;s2&amp;quot;,1,2);
    # &amp;quot;\1\0\2\0&amp;quot; on little-endian
    # &amp;quot;\0\1\0\2&amp;quot; on big-endian
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $foo = pack(&amp;quot;a4&amp;quot;,&amp;quot;abcd&amp;quot;,&amp;quot;x&amp;quot;,&amp;quot;y&amp;quot;,&amp;quot;z&amp;quot;);
    # &amp;quot;abcd&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $foo = pack(&amp;quot;aaaa&amp;quot;,&amp;quot;abcd&amp;quot;,&amp;quot;x&amp;quot;,&amp;quot;y&amp;quot;,&amp;quot;z&amp;quot;);
    # &amp;quot;axyz&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $foo = pack(&amp;quot;a14&amp;quot;,&amp;quot;abcdefg&amp;quot;);
    # &amp;quot;abcdefg\0\0\0\0\0\0\0&amp;quot;
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    $foo = pack(&amp;quot;i9pl&amp;quot;, gmtime);
    # a real struct tm (on my system anyway)
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    sub bintodec {
        unpack(&amp;quot;N&amp;quot;, pack(&amp;quot;B32&amp;quot;, substr(&amp;quot;0&amp;quot; x 32 . shift, -32)));
    }
&lt;/PRE&gt;
&lt;P&gt;
The same template may generally also be used in the unpack function.

&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:42:14</createtime>
  <node_id>220</node_id>
  <synopsis>&lt;P&gt;
pack 
&lt;FONT SIZE=-1&gt;TEMPLATE,LIST&lt;/FONT&gt;

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:pack</title>
  <nodeupdated>2005-08-15 09:05:35</nodeupdated>
</node>
