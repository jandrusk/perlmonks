<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
getgrent - get next group record 

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
These routines perform the same functions as their counterparts in the
system library. In list context, the return values from the various get
routines are as follows:

&lt;P&gt;
&lt;PRE&gt;    ($name,$passwd,$uid,$gid,
       $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*
    ($name,$passwd,$gid,$members) = getgr*
    ($name,$aliases,$addrtype,$length,@addrs) = gethost*
    ($name,$aliases,$addrtype,$net) = getnet*
    ($name,$aliases,$proto) = getproto*
    ($name,$aliases,$port,$proto) = getserv*
&lt;/PRE&gt;
&lt;P&gt;
(If the entry doesn't exist you get a null list.)

&lt;P&gt;
In scalar context, you get the name, unless the function was a lookup by
name, in which case you get the other thing, whatever it is. (If the entry
doesn't exist you get the undefined value.) For example:

&lt;P&gt;
&lt;PRE&gt;    $uid   = getpwnam($name);
    $name  = getpwuid($num);
    $name  = getpwent();
    $gid   = getgrnam($name);
    $name  = getgrgid($num;
    $name  = getgrent();
    #etc.
&lt;/PRE&gt;
&lt;P&gt;
In &lt;EM&gt;getpw*()&lt;/EM&gt; the fields &lt;CODE&gt;$quota&lt;/CODE&gt;, &lt;CODE&gt;$comment&lt;/CODE&gt;, and &lt;CODE&gt;$expire&lt;/CODE&gt; are special cases in the sense that in many systems they are unsupported.
If the
&lt;CODE&gt;$quota&lt;/CODE&gt; is unsupported, it is an empty scalar. If it is supported, it usually
encodes the disk quota. If the &lt;CODE&gt;$comment&lt;/CODE&gt; field is unsupported, it is an empty scalar. If it is supported it usually
encodes some administrative comment about the user. In some systems the
&lt;CODE&gt;$quota&lt;/CODE&gt; field may be &lt;CODE&gt;$change&lt;/CODE&gt; or &lt;CODE&gt;$age&lt;/CODE&gt;, fields that have to do with password aging. In some systems the &lt;CODE&gt;$comment&lt;/CODE&gt; field may be &lt;CODE&gt;$class&lt;/CODE&gt;. The &lt;CODE&gt;$expire&lt;/CODE&gt;
field, if present, encodes the expiration period of the account or the password. For the availability and the exact meaning of these fields in your system, please consult your 
&lt;CODE&gt;getpwnam(3)&lt;/CODE&gt; documentation and your

&lt;EM&gt;pwd.h&lt;/EM&gt; file. You can also find out from within Perl which meaning your &lt;CODE&gt;$quota&lt;/CODE&gt; and &lt;CODE&gt;$comment&lt;/CODE&gt; fields have and whether you have the &lt;CODE&gt;$expire&lt;/CODE&gt;
field by using the &lt;CODE&gt;Config&lt;/CODE&gt; module and the values &lt;CODE&gt;d_pwquota&lt;/CODE&gt;, &lt;CODE&gt;d_pwage&lt;/CODE&gt;,
&lt;CODE&gt;d_pwchange&lt;/CODE&gt;, &lt;CODE&gt;d_pwcomment&lt;/CODE&gt;, and &lt;CODE&gt;d_pwexpire&lt;/CODE&gt;.

&lt;P&gt;
The &lt;CODE&gt;$members&lt;/CODE&gt; value returned by &lt;EM&gt;getgr*()&lt;/EM&gt; is a space separated list of the login names of the members of the group.

&lt;P&gt;
For the &lt;EM&gt;gethost*()&lt;/EM&gt; functions, if the &lt;CODE&gt;h_errno&lt;/CODE&gt; variable is supported in 
&lt;FONT SIZE=-1&gt;C,&lt;/FONT&gt; it will be returned to you via &lt;CODE&gt;$?&lt;/CODE&gt; if the function call fails. The
&lt;CODE&gt;@addrs&lt;/CODE&gt; value returned by a successful call is a list of the raw addresses returned
by the corresponding system library call. In the Internet domain, each
address is four bytes long and you can unpack it by saying something like:

&lt;P&gt;
&lt;PRE&gt;    ($a,$b,$c,$d) = unpack('C4',$addr&amp;#091;0&amp;#093;);
&lt;/PRE&gt;
&lt;P&gt;
If you get tired of remembering which element of the return list contains
which return value, by-name interfaces are also provided in modules:
&lt;CODE&gt;File::stat&lt;/CODE&gt;, &lt;CODE&gt;Net::hostent&lt;/CODE&gt;, &lt;CODE&gt;Net::netent&lt;/CODE&gt;, &lt;CODE&gt;Net::protoent&lt;/CODE&gt;, &lt;CODE&gt;Net::servent&lt;/CODE&gt;,
&lt;CODE&gt;Time::gmtime&lt;/CODE&gt;, &lt;CODE&gt;Time::localtime&lt;/CODE&gt;, and &lt;CODE&gt;User::grent&lt;/CODE&gt;. These override the normal built-in, replacing them with versions that
return objects with the appropriate names for each field. For example:

&lt;P&gt;
&lt;PRE&gt;   use &lt;U&gt;File::stat&lt;/U&gt;;
   use User::pwent;
   $is_his = (stat($filename)-&amp;gt;uid == pwent($whoever)-&amp;gt;uid);
&lt;/PRE&gt;
&lt;P&gt;
Even though it looks like they're the same method calls (uid), they aren't,
because a &lt;CODE&gt;File::stat&lt;/CODE&gt; object is different from a &lt;CODE&gt;User::pwent&lt;/CODE&gt; object.

&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:41:42</createtime>
  <node_id>166</node_id>
  <synopsis>&lt;P&gt;
getgrent

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:getgrent</title>
  <nodeupdated>2005-08-12 19:05:06</nodeupdated>
</node>
