<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
Math::BigInt - Arbitrary size integer math package

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>113</author_user>
  <description>&lt;P&gt;
All basic math operations are overloaded if you declare your big integers
as

&lt;P&gt;
&lt;PRE&gt;  $i = new Math::BigInt '123 456 789 123 456 789';
&lt;/PRE&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Canonical&quot;&gt;Canonical notation&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Big integer value are strings of the form &lt;CODE&gt;/^&amp;#091;+-&amp;#093;\d+$/&lt;/CODE&gt; with leading zeros suppressed.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Input&quot;&gt;Input&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Input values to these routines may be strings of the form
&lt;CODE&gt;/^\s*&amp;#091;+-&amp;#093;?&amp;#091;\d\s&amp;#093;+$/&lt;/CODE&gt;.

&lt;P&gt;&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_Output&quot;&gt;Output&lt;/A&gt;&lt;/STRONG&gt;&lt;P&gt;
&lt;DD&gt;
Output values always always in canonical form

&lt;/DL&gt;
&lt;P&gt;
Actual math is done in an internal format consisting of an array whose
first element is the sign (/^&amp;#091;+-&amp;#093;$/) and whose remaining elements are base
100000 digits with the least significant digit first. The string 'NaN' is
used to represent the result when input arguments are not numbers, as well
as the result of dividing by zero.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;EXAMPLES&quot;&gt;EXAMPLES&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
&lt;PRE&gt;   '+0'                            canonical zero value
   '   -123 123 123'               canonical value '-123123123'
   '1 23 456 7890'                 canonical value '+1234567890'
&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;Autocreating_constants&quot;&gt;Autocreating constants&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
After &lt;CODE&gt;use Math::BigInt ':constant'&lt;/CODE&gt; all the integer decimal constants in the given scope are converted to &lt;CODE&gt;Math::BigInt&lt;/CODE&gt;. This conversion happens at compile time.

&lt;P&gt;
In particular

&lt;P&gt;
&lt;PRE&gt;  perl -MMath::BigInt=:constant -e 'print 2**100'
&lt;/PRE&gt;
&lt;P&gt;
print the integer value of &lt;CODE&gt;2**100&lt;/CODE&gt;. Note that without convertion of constants the expression 2**100 will be
calculatted as floating point number.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;BUGS&quot;&gt;BUGS&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
The current version of this module is a preliminary version of the real
thing that is currently (as of perl5.002) under development.

&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;AUTHOR&quot;&gt;AUTHOR&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;
Mark Biggar, overloaded interface by Ilya Zakharevich.

&lt;HR&gt;
</description>
  <createtime>1999-12-22 20:30:56</createtime>
  <node_id>1285</node_id>
  <synopsis>&lt;P&gt;
&lt;PRE&gt;  use Math::BigInt;
  $i = Math::BigInt-&amp;gt;new($string);
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;  $i-&amp;gt;bneg return BINT               negation
  $i-&amp;gt;babs return BINT               absolute value
  $i-&amp;gt;bcmp(BINT) return CODE         compare numbers (undef,&amp;lt;</synopsis>
  <title>perlman:Math::BigInt</title>
  <nodeupdated>2005-08-13 01:18:36</nodeupdated>
</node>
