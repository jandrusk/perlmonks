<node>
  <doctext></doctext>
  <type_nodetype>119</type_nodetype>
  <name>&lt;P&gt;
eof - test a filehandle for its end

&lt;P&gt;
&lt;HR&gt;
</name>
  <author_user>114</author_user>
  <description>&lt;P&gt;
Returns 1 if the next read on 
&lt;FONT SIZE=-1&gt;FILEHANDLE&lt;/FONT&gt; will return end of file, or if 
&lt;FONT SIZE=-1&gt;FILEHANDLE&lt;/FONT&gt; is not open. 
&lt;FONT SIZE=-1&gt;FILEHANDLE&lt;/FONT&gt; may be an expression whose value gives the real filehandle. (Note that this function actually reads a character and then
 &lt;CODE&gt;ungetc()&lt;/CODE&gt;s it, so isn't very useful in an interactive context.) Do not read from a
terminal file (or call
[perlfunc:eof|eof(FILEHANDLE)] on it) after end-of-file is reached. Filetypes such as terminals may lose
the end-of-file condition if you do.

&lt;P&gt;
An [perlfunc:eof|eof] without an argument uses the last file read as argument. Using [perlfunc:eof|eof()] with empty parentheses is very different. It indicates the pseudo file
formed of the files listed on the command line, i.e., [perlfunc:eof|eof()] is reasonable to use inside a &lt;CODE&gt;while (&amp;lt;&amp;gt;)&lt;/CODE&gt; loop to detect the end of only the last file. Use [perlfunc:eof|eof(ARGV)] or eof without the parentheses to test
&lt;EM&gt;EACH&lt;/EM&gt; file in a while (&amp;lt;&amp;gt;) loop. Examples:

&lt;P&gt;
&lt;PRE&gt;    # reset line numbering on each input file
    while (&amp;lt;&amp;gt;) {
        next if /^\s*#/;        # skip comments 
        print &amp;quot;$.\t$_&amp;quot;;
    } continue {
        close ARGV  if eof;     # Not eof()!
    }
&lt;/PRE&gt;
&lt;P&gt;
&lt;PRE&gt;    # insert dashes just before last line of last file
    while (&amp;lt;&amp;gt;) {
        if (eof()) {            # check for end of current file
            print &amp;quot;--------------\n&amp;quot;;
            close(ARGV);        # close or break; is needed if we
                                # are reading from the terminal
        }
        print;
    }
&lt;/PRE&gt;
&lt;P&gt;
Practical hint: you almost never need to use [perlfunc:eof|eof] in Perl, because the input operators return false values when they run out
of data, or if there was an error.

&lt;HR&gt;
</description>
  <createtime>1999-08-24 18:42:27</createtime>
  <node_id>241</node_id>
  <synopsis>&lt;P&gt;
eof 
&lt;FONT SIZE=-1&gt;FILEHANDLE&lt;/FONT&gt;

&lt;P&gt;
eof ()

&lt;P&gt;
eof

&lt;P&gt;
&lt;HR&gt;
</synopsis>
  <title>perlfunc:eof</title>
  <nodeupdated>2005-08-15 09:58:29</nodeupdated>
</node>
