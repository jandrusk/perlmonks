<node>
  <doctext>Regular expressions can be used to break up strings.  This is what [perlfunc:split|split] does.  The [perlfunc:join|join] function on the other hand 
takes a list of strings and combines them together again.
&lt;BR&gt;&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
$line=&quot;Bart  Lisa Maggie Marge Homer&quot;;
@simpsons=split(/\s/, $line); #splits $line and uses a piece of whitespace as a delimiter.

#@simpsons now contains (&quot;Bart&quot;,&quot;&quot;,&quot;Lisa&quot;,&quot;Maggie&quot;,&quot;Marge&quot;,&quot;Homer&quot;);
#notice there is an extra space between Bart and Lisa so we get an empty element in the array there.
#lets try a better delimiter that will eliminate that from happening

@simpsons=split(/\s+/ $line); #now splits $line on 1 or more whitespace characters
#@simpsons now containts (&quot;Bart&quot;,&quot;Lisa&quot;,&quot;Maggie&quot;,&quot;Marge&quot;,&quot;Homer&quot;);
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;BR&gt;
Suppose we had a list of records of the form&lt;BR&gt;
Name|Phone Number|Address&lt;BR&gt;
We could open a file while which contained those records and do something like this:&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
open FILE, &quot;data.txt&quot;;
while(&lt;FILE&gt;)
   chomp;
   ($name,$phone,$address)=split(/\|/); #splits the default variable $_ on |
                                        #notice we have to put \| since | is a metacharacter
                                        #that represents or. Otherwise we'd be matching
                                        #empty string or empty string
                                        #then we place the results in variables instead of a list
                                        #the parentheses around the variable names need
                                        #to be there for this to work properly
   print &quot;Name: $name\n&quot;;               #Now we print out the information in a more readable form
   print &quot;Phone Number: $phone\n&quot;;
   print &quot;Address: $address\n\n&quot;;
}
close FILE;
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;BR&gt;
The function [perlfunc:join|join] can be used to reconstruct split up values into one string again. 
The syntax for calling this function is &lt;I&gt;join($glue, @array)&lt;/I&gt; or &lt;I&gt;join($glue,$var1,$var2....)&lt;/I&gt; The glue is simply
the string that goes between two strings to hold them together. 
Here are a few examples:&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
$string=join(&quot; &quot;,@simpsons);
  #string now equals &quot;Bart Lisa Maggie Marge Homer&quot;;
$name=&quot;Bob&quot;;
$phone=&quot;555-5555&quot;;
$address=&quot;42 Tulip Lane, Holland MI, 49423&quot;;
$string=join(&quot;|&quot;,$name,$phone,$address);
#$string is now equal to &quot;Bob|555-5555|42 Tulip Lane, Holland MI, 49423&quot;
&lt;/CODE&gt;&lt;/PRE&gt;

</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>970</node_id>
  <author_user>113</author_user>
  <title>split and join</title>
  <createtime>1999-11-11 21:46:09</createtime>
  <nodeupdated>2006-12-27 07:48:31</nodeupdated>
</node>
