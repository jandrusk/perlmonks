<node>
  <doctext>Perl has three basic datatypes: scalars, arrays, and hashes.&lt;BR&gt;&lt;BR&gt;
&lt;H2&gt;Scalars&lt;/H2&gt;
Scalars are the most basic type of data in Perl they can represent a number(int, float, whatever) or a string of text(we won't tell you about scalars as references just yet). Here are some examples of scalar assignments:&lt;BR&gt;
&lt;CODE&gt;$a=5;
$b=&quot;five&quot;;
$c=5.0
&lt;/CODE&gt;&lt;BR&gt;
One important thing to take note of is that since scalars can be either numbers or strings you need to test for equality in different ways. For numbers use == and != to test for equality and nonequality.
For strings you use &lt;B&gt;eq&lt;/B&gt; and &lt;B&gt;ne&lt;/B&gt; to test for the same things. Here's an example: (Note scalar variables begin with an $)&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
$a=&quot;5.0&quot;; # set up our variables
$b=&quot;5&quot;;   # # to the end of a line is a comment in perl
print &quot;Are these variables equal as numbers? &quot;,$a==$b,&quot;\n&quot;;
print &quot;Are the variables equal as strings? &quot;,$a eq $b,&quot;\n&quot;;
print &quot;These variables are equal as strings\n&quot; if($a eq $b);
print &quot;These variables are equal numerically\n&quot; if($a==$b);

&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR&gt;&lt;BR&gt;
If you ran this you would see a 1 is placed in the place of $a==$b.  When we compare them with a numerical comparison
they are processed as numbers and therefore 5.0 and 5 are equal and it returns a 1
 which means true in Perl. $a eq $b is replaced with nothing in the print statement because as strings the two variables are not equivalent.
  This is equivalent to false in Perl along with 0 and a few other things.
For information about these type of things check [What is true and false in Perl?]&lt;BR&gt;
&lt;BR&gt;
For more information on each of these types of scalars check:&lt;BR&gt;
[Integer Literals in Perl]&lt;BR&gt;
[Float Literals in Perl]&lt;BR&gt;
[String Literals in Perl|Strings in Perl]&lt;BR&gt;
&lt;BR&gt;

&lt;STRONG&gt;&lt;A NAME=&quot;item_Functions&quot;&gt;Functions for SCALARs or strings&lt;/A&gt;&lt;/STRONG&gt;
&lt;BR&gt;[perlfunc:chomp|chomp], [perlfunc:chop|chop], [perlfunc:chr|chr], [perlfunc:crypt|crypt], [perlfunc:hex|hex], [perlfunc:index|index], [perlfunc:lc|lc], [perlfunc:lcfirst|lcfirst],
[perlfunc:length|length], [perlfunc:oct|oct], [perlfunc:ord|ord], [perlfunc:pack|pack], [perlfunc:q_STRING|q/STRING/], [perlfunc:qq_STRING|qq/STRING/], [perlfunc:reverse|reverse],
[perlfunc:rindex|rindex], [perlfunc:sprintf|sprintf], [perlfunc:substr|substr], [perlfunc:tr|tr///], [perlfunc:uc|uc], [perlfunc:ucfirst|ucfirst], [perlfunc:y|y///]
&lt;BR&gt;
&lt;BR&gt;
&lt;H2&gt;Arrays&lt;/H2&gt;
Arrays are basically a collection of scalars stored next
to each other and accessed by indices from zero to the number
of elements minus one.  Here are examples of some arrays in action. Note: when we're referring to an entire array we use the @ at the beginning of its name.  If we're referring to only one of its elements(which is a scalar) we use a $.&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
@a=(1,2,3);
@simpsonsfamily=(&quot;homer&quot;,&quot;marge&quot;,&quot;lisa&quot;,&quot;maggie&quot;,&quot;bart&quot;);
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;BR&gt;
Arrays can store either strings or numbers or both. Now lets see how we can get at an individual element of an array.&lt;BR&gt;
&lt;PRE&gt;
$a&amp;#091;0&amp;#093;; #This returns the first element in @a which is 1
$simpsonsfamily&amp;#091;4&amp;#093;; #This returns the fifth element which is bart
$a&amp;#091;3&amp;#093;=4; #This sets the 4th element in @a to 4.
&lt;/PRE&gt;
&lt;BR&gt;
One nice thing about arrays in Perl is that you don't have to set the size of them when you start so they will grow for you when you need them to.
To find the size of an array you can you can do [perlfunc:scalar|scalar(@a)] which would return 3 originally and 4 after $a&amp;#091;4&amp;#093; was set to 4;
You can get at the highest index by using the variable $# with the arrayname attached to the end. For example $#simpsonsfamily would be equal to 4.
&lt;BR&gt;&lt;BR&gt;
Some other functions I will quickly mention are [perlfunc:push|push] and [perlfunc:reverse|reverse].  [perlfunc:push|push] is followed by the array you want to add to, and then a value or list of values that you want added to the end.
 It would look something like:&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
push @array, $value; #puts $value onto the end of @array.
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;BR&gt;The [perlfunc:reverse|reverse] function simply takes a list or array and reverses it.  For example, to reverse the order
 of an array permanently you would just type something like:&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
@array=reverse @array;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR&gt;&lt;BR&gt;
&lt;STRONG&gt;Functions for real @ARRAYs&lt;/STRONG&gt;&lt;BR&gt;
[perlfunc:pop|pop], [perlfunc:push|push], [perlfunc:shift|shift], [perlfunc:splice|splice], [perlfunc:unshift|unshift]

&lt;P&gt;
&lt;STRONG&gt;Functions for list data&lt;/STRONG&gt;&lt;BR&gt;
[perlfunc:grep|grep], [perlfunc:join|join], [perlfunc:map|map], [perlfunc:qw_STRING|qw/STRING/], [perlfunc:reverse|reverse], [perlfunc:sort|sort], [perlfunc:unpack|unpack]
&lt;BR&gt;&lt;BR&gt;
&lt;H2&gt;Hashes&lt;/H2&gt;
Hashes are collections of scalars like arrays only they have indices or keys which are strings instead of integers.
Hash variables are named with a % followed by at least one letter and then maybe a mix of some more numbers, letters, and underscores.  Key and value are two important hash terms.  The key is what you use to look up a value.  The key is like the index 
in an array and the value is like the data stored there.  Hashes can also be thought of as an array filled with key value pairs as you will soon see.  Now we'll show you how you can initialize and access elements of an array.&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
@array=(&quot;key1&quot;,&quot;value1&quot;,&quot;key2&quot;,&quot;value2&quot;);   #an array filled with key value pairs
%hash1=(&quot;key1&quot;=&gt;&quot;value1&quot;,&quot;key2&quot;=&gt;&quot;value2&quot;); #one way to initialize a hash (key=&gt;value,key2=&gt;value2,..)
%hash2=@array;                              #making %hash2 out of a collection of key value pairs in an array
$hash3{&quot;key1&quot;}=&quot;value1&quot;;                    #creates key of &quot;key1&quot; and value of &quot;value1&quot;
$hash3{&quot;key2&quot;}=&quot;value2&quot;;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR&gt;
Now %hash1, %hash2, %hash3 all contain the very same keys and values.
&lt;BR&gt;&lt;BR&gt;
&lt;STRONG&gt;Functions for real %HASHes&lt;/STRONG&gt;
&lt;BR&gt;[perlfunc:delete|delete], [perlfunc:each|each], [perlfunc:exists|exists], [perlfunc:keys|keys], [perlfunc:values|values]
&lt;BR&gt;&lt;BR&gt;
&lt;B&gt;Some other things you might want to check out are:&lt;/B&gt;&lt;BR&gt;
[Control statements and looping]&lt;BR&gt;
[Some things that will make your life easier as a Perl coder]&lt;BR&gt;
</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>861</node_id>
  <author_user>113</author_user>
  <title>the basic datatypes, three</title>
  <createtime>1999-10-28 21:53:20</createtime>
  <nodeupdated>2005-08-15 15:17:08</nodeupdated>
</node>
