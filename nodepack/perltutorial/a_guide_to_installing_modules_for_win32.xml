<node>
  <doctext>&lt;p&gt;This article is meant as an extension to [tachyon]'s well written [id://128077].
But this one focuses on the peculiarites of installation on Windows machines.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;#whyppm&quot;&gt;Why ppm?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#invoking&quot;&gt;Invoking ppm&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#installing&quot;&gt;Installing modules&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#whatis&quot;&gt;What is a repository?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#adding&quot;&gt;Adding a repository&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#repositories&quot;&gt;Repositories.pm&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#proxy&quot;&gt;Getting around the proxy&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#creating&quot;&gt;Creating a local repository&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#manual&quot;&gt;Manual installation&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;readmore&gt;
&lt;h3&gt;&lt;a name=&quot;whyppm&quot;&gt;Why ppm?&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Installing modules directly from [http://www.cpan.org|CPAN] is easy, as long as the module contains no XS-extensions (C-code).
Most Windows installations don't have a C-compiler, and even if there is one, the compilation of the XS-extensions is a tricky thingy, that can easily fail. So what can you do if you can't compile?
The answer is: use a precompiled version.&lt;/p&gt;

&lt;p&gt;The probably most popular port of Perl for Win32 is [http://www.activestate.com/Products/ActivePerl/|ActivePerl] from [http://www.activestate.com/|ActiveState]. It ships with a tool named &lt;i&gt;ppm&lt;/i&gt;, aka the &lt;i&gt;Programmer's Package Manager&lt;/i&gt;. ppm is a tool for installing modules, similar to the CPAN-shell. With it you can download and install modules, with or without XS-Extensions, with a few keystrokes.&lt;/p&gt;
&lt;p&gt;The following describes the ppm Version that comes with Perl 5.8.0 and above. It differs slightly from the pppm that came with Perl 5.6&lt;/p&gt;

&lt;p&gt;Sidenote:&lt;br /&gt; Perl modules built for Perl 5.8 are &lt;b&gt;not&lt;/b&gt; binary compatible with modules build for Perl 5.6! That means they are not interchangeable.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Advantages and features of ppm&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need for a C/C++ compiler and 'make' utility&lt;/li&gt;
&lt;li&gt;Automatic installation and deinstallation of modules&lt;/li&gt;
&lt;li&gt;Automatic resolution of module dependencies&lt;/li&gt;
&lt;li&gt;Automatic integration of module documentation into the html-documentation that comes with ActivePerl.&lt;/li&gt;
&lt;li&gt;Maintainance of a database of installed modules and module versions.&lt;/li&gt;
&lt;li&gt;An easy-to-use shell&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As always, there are some tripwires and things you should know.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Disadvantages&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core modules are not part of ppm's database&lt;/li&gt;
&lt;li&gt;Less security. You cannot tell if the supplier added evil code to the XS-part of a module.
&lt;/ul&gt;

&lt;h3&gt;&lt;a name=&quot;invoking&quot;&gt;Invoking ppm&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;To invoke ppm, simply type &lt;i&gt;ppm&lt;/i&gt; at the Windows console (&quot;DOS&quot;) command line. The result will look similar to this:&lt;/p&gt;
&lt;code&gt;
C:\&gt;ppm
PPM - Programmer's Package Manager version 3.1.
Copyright (c) 2001 ActiveState Corp. All Rights Reserved.
ActiveState is a devision of Sophos.

Entering interactive shell. Using Term::ReadLine::Stub as readline library.

Type 'help' to get started.

ppm&gt;
&lt;/code&gt;

&lt;p&gt;To get immediate help in the ppm-shell, type &lt;code&gt;help&lt;/code&gt; or &lt;code&gt;help &lt;command&gt;&lt;/code&gt;.&lt;p&gt;


&lt;h3&gt;&lt;a name=&quot;installing&quot;&gt;Installing modules&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In order to install a module you have basically two possibilities.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specify a module to install directly&lt;/li&gt;
&lt;li&gt;Search for a module and choose a one from the results shown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Direct install&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To install a module (here: Death::Star) directly, simply type&lt;/p&gt;
&lt;code&gt;
ppm&gt; install Death::Star
&lt;/code&gt;
&lt;p&gt;There is a drawback to using this method. If ppm finds more than one version of a module, you cannot choose which one gets installed. Naturally the most recent version gets installed, but there may be a case when you need to install another version. E.g. the most recent version can be buggy, or incompatible with another module you use.&lt;/p&gt;
&lt;p&gt;You don't neccessarily need to use the ppm-shell to install a module. You can also use the following command to install a module directly from the command line.
&lt;code&gt;
C:\&gt; ppm install Death::Star
&lt;/code&gt;

&lt;p&gt;&lt;b&gt;Search-and-Install&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To search for a module you use the &lt;code&gt;search &lt;string&gt;&lt;/code&gt;-command. The parameter &lt;code&gt;&lt;string&gt;&lt;/code&gt; for &lt;code&gt;search&lt;/code&gt; is a case insensitive regex, thus if you don't know the module's full name, you can also search for pieces of it and you will get a list to choose from.&lt;/p&gt;

&lt;code&gt;
ppm&gt; search Death::Star
Searching in Active Repositories
    1. Death::Star              [1.0] a module to kill planets
    2. Death::Star              [2.0] kill planets with more firepower
ppm&gt;
&lt;/code&gt;

&lt;p&gt;You can find out more about a module by using the &lt;code&gt;desc &lt;module&gt;&lt;/code&gt;-command.&lt;/p&gt;
&lt;code&gt;
ppm&gt; desc 2
====================
Package 2:
    Name: Death::Star
 Version: 2.0
  Author: Darth Vader (anakin@the-empire.com)
   Title: The Deathstar
Abstract: a planet killing module
Location: ActiveState PPM2 Repository
Available Platforms:
       1. MSWin32-x86-multi-thread-5.8
====================
&lt;/code&gt;

&lt;p&gt;To install a module from the list, type install, followed by the module's number.&lt;/p&gt;
&lt;code&gt;
ppm&gt; install 2
&lt;/code&gt;

&lt;p&gt;Regardless which method you choose, ppm will start to install the module and produce output like this:&lt;/p&gt;

&lt;code&gt;
Package 2:
====================
Install 'Death::Star' version 2.0 in ActivePerl 5.8.6.811.
====================
Downloaded 4657 bytes.
Installing C:\Perl\html\site\lib\Death\Star.html
Installing C:\Perl\site\lib\Death\Star.pm
Successfully installed Death::Star version 2.0 in ActivePerl 5.8.6.811.

ppm&gt;
&lt;/code&gt;
&lt;p&gt;If the module has dependencies (that is, it requires another module to work correctly) the dependencies are installed first.&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;whatis&quot;&gt;What is a repository?&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;From above, you may have noticed the term &lt;i&gt;Active Repositories&lt;/i&gt;. ppm downloads the modules from special websites that are called &lt;i&gt;repositories&lt;/i&gt;. A repository is a just a directory or a script that serves a list of ppd files to ppm. From these ppd files, ppm gets the actual location of the module's tarball. A freshly installed ActivePerl will come with two repositories. To find out about them, type &lt;code&gt;rep&lt;/code&gt;.&lt;/p&gt;

&lt;code&gt;
ppm&gt; rep
Repositories:
[ 1] ActiveState PPM2 Repository
[ 2] ActiveState Package Repository
ppm&gt;
&lt;/code&gt;

&lt;p&gt;In order to find out, which url a repository points to, you can use the &lt;code&gt;rep desc &lt;repository&gt;&lt;/code&gt;-command.&lt;/p&gt;
&lt;code&gt;
ppm&gt; rep desc 1
Describing Active Repository 1:
    Name: ActiveState PPM2 Repository
Location:
http://ppm.ActiveState.com/cgibin/PPM/ppmserver-5.8-windows.pl?urn:/PPMServer
    Type: PPMServer 2.0
ppm&gt;
&lt;/code&gt;

&lt;h3&gt;&lt;a name=&quot;adding&quot;&gt;Adding a repository&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A lot of modules are not available from the standard repositories. Thank crunchy, the community provides a lot of alternative repositories that offer the missing modules. For example our fellow brother [jenda] hosts a repository at [http://jenda.krynicky.cz/perl].&lt;/p&gt;
&lt;p&gt;If you want to add such a repository to ppm you will have to use the &lt;code&gt;rep add &lt;name&gt; &lt;location&gt;&lt;/code&gt;-command.&lt;/p&gt;
&lt;code&gt;
ppm&gt; rep add jenda http://jenda.krynicky.cz/perl
Repositories:
[ 1] ActiveState PPM2 Repository
[ 2] ActiveState Package Repository
[ 3] jenda
ppm&gt;
&lt;/code&gt;
&lt;p&gt;From there on, the repository is known to ppm and will be used for future searches.

&lt;p&gt;You don't need to permanently add a repository to install a module from it. You can specify the repository from the command line.
&lt;code&gt;
C:\&gt; ppm install http://the.empire-rules.com/ppm/Death-Star.ppd
&lt;/code&gt;

&lt;h3&gt;&lt;a name=&quot;repositories&quot;&gt;Repositories.pm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; So how, you might ask, do I find out where these repositories are? The answer to this question is &lt;code&gt;PPM::Repositories.pm&lt;/code&gt;. That's a module that basically consists of a list of all known repositories. The, at the time of this writing, most recent version (0.9) is available at bribe's repository at [http://www.bribes.org/perl/ppm/]&lt;/p&gt;
With the following script, you can use &lt;code&gt;PPM::Repositories.pm&lt;/code&gt; to add all known repositories to your ppm.
&lt;code&gt;
use PPM::Repositories;

for ( keys %Repositories )
{
	print `ppm repository add $_ $Repositories{$_}-&gt;{location}`;
}
&lt;/code&gt;
&lt;p&gt;You should be aware that the more repositories you add, the longer it takes for a search to finish.&lt;/p&gt;
&lt;a name=&quot;proxy&quot;&gt;&lt;h3&gt;Getting around the proxy&lt;/h3&gt;&lt;/a&gt;
&lt;p&gt;If you are behind a proxy, you will notice that ppm cannot connect to the internet. To make it work, you will have to set a bunch of environment-variables, where xxx.xxx.xxx.x is the ip-address of the proxy, and y the port:
&lt;code&gt;
c:\&gt; set http_proxy=http://xxx.xxx.xxx.x:yyyy
c:\&gt; set http_proxy_user=username
c:\&gt; set http_proxy_pass=password
&lt;/code&gt;
&lt;p&gt;Instead of entering the variables each time you before you start ppm,
you have other possibilities to set them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click Start-&gt;Settings-&gt;Control Panel-&gt;System. Select the Expanded Tab, Click Environment. Click New, enter the appropriate values and click &lt;i&gt;Ok&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;/perl/bin/ppm.bat&lt;/code&gt; and insert above lines right after &lt;code&gt;@echo off&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a name=&quot;creating&quot;&gt;Creating a local repository&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Still there may be some environments where that fails. But don't worry, there is an alternative, namely creating a local repository.&lt;/p&gt;
&lt;p&gt;The first step doing so is to create a directory on your system that serves as the repository. Name and position of that directory is not important, I use &lt;code&gt;/perl/ppm/repository&lt;/code&gt; as an example.&lt;/p&gt;
&lt;p&gt;Then add that directory to your ppm using the command described in &lt;a href=&quot;#adding&quot;&gt;adding a repository.&lt;/a&gt;
&lt;code&gt;
ppm&gt; rep add myRepository /perl/ppm/repository
&lt;/code&gt;
The next step is to download the ppd file of the module and save it to your repository. A ppd file is a xml file that contains information about the module's position, version, etc. It looks like
&lt;code&gt;
&lt;SOFTPKG NAME=&quot;Death-Star&quot; VERSION=&quot;2,00,0,0&quot;&gt;
	&lt;TITLE&gt;The Deathstar&lt;/TITLE&gt;
	&lt;ABSTRACT&gt;a planet killing module&lt;/ABSTRACT&gt;
	&lt;AUTHOR&gt;Darth Vader (anakin@the-empire.com)&lt;/AUTHOR&gt;
	&lt;IMPLEMENTATION&gt;
		&lt;ARCHITECTURE NAME=&quot;MSWin32-x86-multi-thread-5.8&quot; /&gt;
		&lt;OS NAME=&quot;MSWin32&quot; /&gt;
		&lt;CODEBASE HREF=&quot;x86/Death-Star-2.0.tar.gz&quot; /&gt;
	&lt;/IMPLEMENTATION&gt;
&lt;/SOFTPKG&gt;
&lt;/code&gt;
&lt;p&gt;Identify the line that says &lt;code&gt;&lt;CODEBASE HREF=&quot;x86/Death-Star-2.0.tar.gz&quot; /&gt;&lt;/code&gt;. It informs you about the relative position of the module's tar.gz-file, aka tarball. Now download that tarball and save it into the same relative postion. In this example that would be &lt;code&gt;/perl/ppm/repository/x86/Death-Star-2.0.tar.gz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you can use ppm to install the module from your local repository.&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;manual&quot;&gt;Manual installation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You also have the choice to install the module manually. To do so, simply download the tarball and extract it with WinZip or a similar program.
&lt;p&gt;A typical ppm-distribution looks like this:&lt;p&gt;
&lt;code&gt;
C:/blib/
+---arch/
&#166;   +---auto/
&#166;       +---Death/
&#166;           +---Star/
&#166;               #Star.dll
+---html/
&#166;   +---site/
&#166;       +---lib/
&#166;           +--Death/
&#166;              #Star.html
+---lib/
    +---Death/
        #Star.pm
&lt;/code&gt;
&lt;p&gt; Now you can copy the files manually into your Perl's library tree, namely

&lt;code&gt;
C:\&gt; copy \blib\lib\Death\Star.pm \Perl\site\lib\Death\Star.pm
C:\&gt; copy \blib\arch\auto\Death\Star\Star.dll \Perl\site\lib\auto\Death\Star\Star.pm
C:\&gt; copy \blib\html\site\lib\Death\Star.html \Perl\html\site\lib\Death\Star.html
&lt;/code&gt;

&lt;p&gt;Be aware that the module's html-documentation will &lt;b&gt;not&lt;/b&gt; be integrated into the ActiveState-docs automatically. But if you do a complete rebuild of the HTML documentation, it will be added:&lt;/p&gt;
&lt;c&gt;
perl -MActivePerl::DocTools -e &quot;UpdateHTML(1)&quot;
&lt;/c&gt;

&lt;h3&gt;&lt;a name=&quot;resources&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;
[http://aspn.activestate.com/ASPN/docs/ActivePerl/faq/ActivePerl-faq2.html|Using PPM to install modules]&lt;br /&gt;
[http://search.cpan.org/~rkobes/PPM-Make-0.75/lib/PPM/Make.pm|PPM::Make - Make a ppm package from a CPAN distribution]&lt;br /&gt;
[http://aspn.activestate.com/ASPN/docs/ActivePerl/bin/ppm3.html|ppm3 - Programmer's Package Manager, version 3.1]&lt;br /&gt;
[http://jenda.krynicky.cz/perl/PPM.html|how to create a ppm-distribution]&lt;br /&gt;
[id://113448]&lt;br /&gt;
&lt;hr&gt;
&lt;/readmore&gt;
I hope this article can make its way into the [Tutorials|tutorials] section. I hereby invite every monk to improve this document.&lt;br&gt;&lt;br&gt;
&lt;b&gt;Update:&lt;/b&gt; Corrected error concerning &quot;Getting around the proxy&quot;&lt;br /&gt;
&lt;b&gt;Update:&lt;/b&gt; Included [thundergnat]'s [id://454695|tip] in the text, as suggested by [GrandFather].
&lt;div class=&quot;pmsig&quot;&gt;&lt;div class=&quot;pmsig-241598&quot;&gt;
&lt;br&gt;&lt;br&gt;holli, &lt;i&gt;/regexed monk/&lt;/i&gt;
&lt;/div&gt;&lt;/div&gt;</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>434813</node_id>
  <author_user>241598</author_user>
  <title>A guide to installing modules for Win32</title>
  <createtime>2005-02-26 15:15:00</createtime>
  <nodeupdated>2005-08-15 14:21:22</nodeupdated>
</node>
