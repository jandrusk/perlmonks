<node>
  <doctext>&lt;B&gt;How do I write messy (and sometimes entertaining code code?&lt;/B&gt;
&lt;p&gt;
The first thing you will probably notice is that this tutorial is a bit Obfuscated. I thought I would match the theme :) Often one may ask how to write highly obfuscated code in Perl. Its easy to write code. But can you write unreadable code? This is a simple tutorial guide, if you want to become a pro, practice your art.
&lt;hr&gt;
1) Take advantage of Perl's end of line character &quot;;&quot;. Use it to dirty up your code. For example, if you want to go for a certain shape you can use &quot;;&quot;'s to spruce it up:&lt;code&gt;
   my $cash_in;
   my $cash_ot ;
   my $cash_iz  ;
   my $cash_zi   ;
   my $cash_zo  ;
   my $cash_is ;
   my $cash_if;
&lt;/code&gt;
Languages that use ';' as a &quot;end line&quot; character are generally better for obfuscated because you can mush your code like so:&lt;code&gt;
my $var=&quot;null\n&quot;;chomp($var);if ($var=&quot;null&quot;){print &quot;Good&quot;;}
&lt;/code&gt;
You can also make an off beat pattern for your ';''s to add a bit of confusion, like so:&lt;code&gt;
my $var=&quot;null\n&quot;
;chomp($var)
;if ($var=&quot;null&quot;) {print &quot;Good&quot;
;}
&lt;/code&gt;
&lt;hr&gt;
2) Always break up your equal signs. Ie:
&lt;p&gt;
Try to do: &lt;code&gt;
$myvar =
&quot;fdfdjsk&quot;;
&lt;/code&gt;
instead of:&lt;code&gt;
$myvar = &quot;fdfdjsk&quot;;
&lt;/code&gt;
&lt;hr&gt;
3) Don't forget that, if you need better &quot;shaping&quot;, always break up your strings with a new line character &quot;\n&quot;;
&lt;hr&gt;
4) Regular expressions make for messy code, and that is what we are going for. Use them in excess whenever possible.
&lt;hr&gt;
5) Add comments. Sometimes adding odd comments here and there can help enhance the shaping of your code. An example of this is found in my work : &quot;modern (perl) art&quot; in the Obfuscated Code section of www.perlmonks.org. However,never comment in a way that would clarify your code.
&lt;hr&gt;
6) Try to name your variables in a simplistic, yet inconherent way. &quot;woodzy&quot; has done a great job of this with his work called &quot;Email sig. Old news. :/&quot; on www.perlmonks.org. For example:
&lt;pre&gt;
  instead of $payroll, try $p
  instead of $atom, try $a
&lt;/pre&gt;&lt;hr&gt;
7) Keep working. Practice enough and you WILL get good results. Someday you will even do lettering. You don't beleive that thats possible? Check out &quot;Yet Another Perl Conference&quot; by Erudil and you will see what I mean.
&lt;hr&gt;
8) Keep your code as mathematical as possible. Never leave a simple expression alone, ie (4+4), but rather turn it into (((1*3)+1) + ((100*((1*2)+2)) /(10*10))). Doing this will make your code unreadable real soon.
&lt;hr&gt;
9) Packing and unpacking will cause your code to be just a bit more unreadble. You will find many examples of this in www.perlmonks.org Obfuscated Code board.
&lt;hr&gt;
10) Be sure to view some of the code found in Obfuscated Code section of www.perlmonks.org, its real helpfull on giving you some ideas on where to get started at making your code more un-readable. Please note that this is
by no means a complete tutorial. I really hope that some
other &quot;perl obfuscator&quot; will jump in and write a tutorial
much better than this.
&lt;hr&gt;
Thank you and have a good obfuscated night.
&lt;p&gt;&lt;small&gt;Edit 2001-04-03 by [tye]
&lt;!-- remove &lt;pre&gt; and a whole bunch of &lt;br&gt;s, replace '-'x$n w/ &lt;hr&gt; --&gt;&lt;/small&gt;&lt;/p&gt;
</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>20312</node_id>
  <author_user>19894</author_user>
  <title>Writing highly obfuscated code in Perl</title>
  <createtime>2000-06-29 01:49:40</createtime>
  <nodeupdated>2005-08-14 02:57:18</nodeupdated>
</node>
