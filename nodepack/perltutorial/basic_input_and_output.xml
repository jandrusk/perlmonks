<node>
  <doctext>Perl makes input and output extremely easy.  When you know
just a few simple things you'll find that you can read from
the keyboard and display output to your monitor with ease.
Once you get that down you'll find that reading and writing
to files isn't much more difficult.&lt;BR&gt;
&lt;BR&gt;
First we will show you how to read a line of text from the keyboard.
It doesn't take much.  All you need is the diamond, or spaceship
operator which looks something like this: &lt;&gt;.  You may also have
the name of an optional stream inside of the diamond operator like: 
&amp;lt;STDIN&amp;gt; or &amp;lt;FILE&amp;gt;.&lt;BR&gt;
&lt;BR&gt;
&lt;&gt; or &amp;lt;STDIN&amp;gt; amount to input from the keyboard unless you
have redefined  &amp;lt;STDIN&amp;gt; or redirected a file to STDIN.
The diamond operator by default reads to a newline or what ever is
in [perlman:perlvar|$/] is set to.  Ok enough talking, now for some
quick examples.&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
$a=&lt;&gt;;       #reads one line in from the keyboard including
             #the newline character (\n) and puts it into $a
$b=&lt;STDIN&gt;;  #does the same thing only puts it into $b;

while(&lt;&gt;){        #reads lines until end of file or a Control-D from the keyboard
   print &quot;$_&quot;;    #prints lines back out
}
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR&gt;
Note in the while loop above Perl automatically put the input into
the default variable: [perlman:perlvar|$_].  Perl does this whenever
a test for a loop consists of only reading input like &lt;..&gt;.  If
this is the case Perl just plops the line read into $_;&lt;BR&gt;
Some useful functions to use with &lt;&gt; are [perlfunc:chomp|chomp] and 
[perlfunc:chop|chop].  Both remove things from the end of a string.
In chop's case it removes the last character from a string.  In chomp's
case it removes the suffix of the string only if it matches the input
record separator [perlman:perlvar|$/] which is by default the
newline character(\n).  Both can take a scalar or array of strings
to act on as their argument.  If no argument is used the default of
[perlman:perlvar|$_] is assumed.&lt;BR&gt;&lt;BR&gt;
Output is straightforward with perl.  Basically the print statement
takes a string or list of strings and sends them to standard output.
Here are some examples:&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
print &quot;Hello World\n&quot;;    #the simplest sort of print
print &quot;Hello &quot;,&quot;World\n&quot;; #this prints the same thing but uses a list of strings to do the same thing
print (&quot;1+1=&quot;,(1+1));     #prints 1+1=2 first prints the string 1+1= and then what 1+1 evaluates to(2);
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;BR&gt;
The [perlfunc:printf|printf] function gives you a lot more control over your output.  If you're
familiar with C you'll know basically how this works. A quick example:
&lt;PRE&gt;&lt;CODE&gt;&lt;BR&gt;
printf &quot;%3d %7.2f %5s\n&quot;,$a,$b,$c;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR&gt;
This results in $a getting printed as an integer in a 3 space field followed by a space, then $b printed as a float in a field of size seven with 2 decimal digits, then a space and then $c as 5 character field.
&lt;BR&gt;
&lt;BR&gt;You should now learn about [File Input and Output]


</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>955</node_id>
  <author_user>113</author_user>
  <title>Basic Input and Output</title>
  <createtime>1999-11-05 00:53:26</createtime>
  <nodeupdated>2005-08-15 15:37:32</nodeupdated>
</node>
