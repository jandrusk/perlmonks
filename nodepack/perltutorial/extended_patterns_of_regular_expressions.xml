<node>
  <doctext>&lt;b&gt;&lt;i&gt;EXTENDED PATTERNS IN 
REGULAR EXPRESSIONS - Reference to Tutorial &lt;/i&gt;&lt;/b&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt;The extended patterns in regular expressions document in perlre serves as a reference than a tutorial content. The perl programmers who are aspiring (like me who is trying ) to learn the language consummately are finding difficulties in the perlre document that is like a reference document than a tutorial document and hence I am attempting to elucidate the extended patterns of the regular expressions alone  &lt;/p&gt;

&lt;p&gt;The Extended patterns are named as they serve as extensions to the existing syntax that is already similar to those in awk and sed. The extended patterns are indicated by a syntax that begins with a parenthesis and a question mark and the extended pattern itself.&lt;/p&gt;

&lt;b&gt;(?&lt;/b&gt;=\|)

&lt;p&gt;The Perl document insists on two points as reasons for choosing the question mark as an indicator for the extended patterns. &lt;/p&gt;
&lt;readmore&gt;
&lt;p&gt;The first being that the question marks are rare in regular expressions and the next being that question marks make one, stop and think over. I think like when it is used in backtracking to give non-greedy search patterns, one stops to think.&lt;/p&gt;

&lt;p&gt;Some Extended patterns are considered experimental and may be removed at anytime and hence I shall try to discuss on the other extended patterns.&lt;/p&gt;

&lt;b&gt;(?imsx-imsx)&lt;/b&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt;This extended pattern is for having one or more pattern-match modifiers in the regular expression pattern.&lt;/p&gt;&lt;BR&gt;&lt;BR&gt;

Here as an example (?i) is for case insensitive pattern match&lt;BR&gt;&lt;BR&gt;

This pattern can be combined with the other patterns.&lt;BR&gt;&lt;BR&gt;

&lt;i&gt;Practical Use:&lt;/i&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt;This type of extended pattern match is used for matching dynamic file contents, user input strings that we do not really know or have a hold on the contents.&lt;/p&gt;

&lt;p&gt;In a practical scenario, let us assume we have an oracle instance which has a schema that has a column named cust-code. This column has two parts, one is a fixed characters set and the other is a free textual part that indicates the text for the sub-contractors a customer has.&lt;/p&gt;

&lt;p&gt;Let us say, we have a condition that should match a part of the string exactly with the cases intact and the other case insensitive (checking for the pattern in both capital and small alphabets) and do the required and hence the PATTERN that has to be matched is a combination of both case sensitive and case insensitive text. &lt;/p&gt;

To enforce such a pattern in the regular expression we could use:&lt;BR&gt;&lt;BR&gt;
&lt;code&gt;
my $cust_code  = &#8220;SILICONEXSiliconex-wafers&#8221;;

my $pattern = &quot;SILICONEX((?i)siliconex-wafers)&quot;;
if ($cust_code =~ /$pattern/){

                               print &quot;[$&amp;]\n&quot;;

                             }
__END__
[SILICONEXSiliconex-wafers]

&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;


&lt;p&gt;SILICONEX is the following case sensitive text that forms the pattern and the other part is ((?!)siliconex-wafers) which is  the extended pattern that matches the case insensitive text which is , siliconex-wafers in small and capital cases  . The cust_code with the value, &quot;SILICONEXSILICONEX-WAFERS&quot; also matches along with the other small and capital alphabets for the pattern indicated.&lt;/p&gt;

&lt;p&gt;To insist on the above a regular expression pattern, the one here shall match any small or capital alphabets of the string and not the exact string &quot;SILICONEXsiliconex-wafers&quot;&lt;/p&gt;

&lt;code&gt;

my $pattern = &quot;(?i)SILICONEXsiliconex-wafers&quot;;
if ($cust_code =~ /$pattern/){

                                 print &quot;$&amp;\n&quot;;

                             }

&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;


&lt;p&gt;The value of &quot;siliconexSILICONEX-WAFERS&quot; would also match the pattern indicated by the above code because the case sensitive (?i) makes the whole string case insensitive and  matches all case insensitive alphabets in $pattern, &quot; SILICONEXsiliconex-wafers&quot; &lt;/p&gt;

&lt;B&gt;(?:pattern)&lt;/B&gt;&lt;BR&gt;&lt;BR&gt;

This type of pattern is for clustering into a sub-group forming a group of patterns &lt;BR&gt;&lt;BR&gt;

The (?:pattern) is essentially a grouping syntax rather than backreferencing as a group.&lt;BR&gt;&lt;BR&gt;

&lt;i&gt;Practical use:&lt;/i&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt;The text from a user entered form for an address could be any free textual form element or when you actually migrate from informix to oracle some columns that have the address or manager note that can have a free textual value can have some control M characters that translate to a carriage return characters thus separating the characters to different lines. &lt;/p&gt;
&lt;p&gt;This can happen the other way around a free textual column value with carriage returns translate into ^M character when extracted to a unix ascii file that has to be loaded
 to Oracle schema.&lt;/p&gt;

 &lt;p&gt;For such complex strings, the pattern to match can be difficult without an extended pattern match that can give you the flexibility of having &lt;BR&gt;&lt;BR&gt;

&lt;code&gt;


&#8226; a  pattern that is searched with a certain flag for a part of the pattern and that which has no flags in the pattern
&#8226; to sub-group the pattern and effectively use flags of

     (?m) as /m for mult-line strings,
     (?s) as /s for single line strings,
     (?x) as /x for extended search including comment lines  and space delimiters and 
     (?i) as /i for case sensitive pattern notation 
          or a combination of the flags

&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;


This (?:pattern) match can be used along with the previous (?imsx-imsx) by this syntax &lt;BR&gt;&lt;BR&gt;

(?imsx-imsx:pattern) to create a more flexible extended pattern . &lt;BR&gt;&lt;BR&gt;

Let the String from a schema or the free textual column &lt;BR&gt;&lt;BR&gt;

&lt;code&gt;

my $sub_contract=&quot;SILICONEXsiliconex-wafers ^M NOTE1-- a shipment in ^M backlog calc note for 
the shipping dates the contract is delivered &quot;;

my $pattern = &quot;SILICONEX((?i)siliconex-wafers)&quot;;
                                       

if ($sub_contract =~ /$pattern/)
{

     $sub_contract =~ s/(?m:(\^M|--))/ /g;   
     my ($shipment_note, $sub_contract_keynote ) = 
          reverse split(/(?i)NOTE/ ,$sub_contract);
     print &quot;[ $sub_contract_keynote ] [ $shipment_note ]\n&quot;;
          
}

__END__

[ for 
the shipping dates the contract is delivered ] [ 1 a shipment in  backlog calc note ]

&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt; The &lt;code&gt;
    s/(?m:(\^M|--))/ /g &lt;/code&gt; is involving both the checking of the ^M or | and changing it to a space and a &lt;b&gt; - &lt;/b&gt; actually swithces of the option and then actually you split with a case insensitive &quot;NOTE&quot; as a string value in the split function &lt;BR&gt;&lt;BR&gt;

    &lt;code&gt; split((?i)NOTE,$sub_contract); &lt;/code&gt;&lt;BR&gt;&lt;BR&gt;




&lt;h2&gt;&lt;b&gt; (?=pattern)     (?&lt;=pattern)     (?!pattern)      (?&lt;!pattern)&lt;/b&gt;&lt;/h2&gt;

     &lt;p&gt;This part of the regular expression is a forward (look_ahead) and backward (look_behind) assertions pattern match .There is also positive and negative connotations to it in that whether you match a positive or negative  assertion either in forward or backward direction to it.&lt;/p&gt;

&lt;code&gt;

(?=     indicates a positive forward(look_ahead) assertion
(?!     indicates a negative forward(look_ahead) assertion
(?&lt;=    indicates a positive backward(look_behind) assertion
(?&lt;!    indicates a negative backward(look_behind) assertion

&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;

Then there is a concept of regular and variable width assertion.&lt;BR&gt;&lt;BR&gt;

The &lt;b&gt;positive and negative forward (look_ahead) assertions &lt;/B&gt;allow &lt;B&gt;variable width &lt;/B&gt; assertions&lt;BR&gt;

The positive and negative backward (look_behind) assertions allow fixed width assertions alone &lt;BR&gt;

&lt;i&gt;Practical Use:&lt;/i&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt;The contents of the extracted data from the schemas always is a delimited file in the os.&lt;BR&gt;&lt;BR&gt;

Usually if the extracted file is to be loaded to another database's schema, with a not null value for varchar2 fields in the schema, then you add the space for the fields in the data where it is empty .We had an instance where the delimiter was x|x as there were pipes also in the data. &lt;/p&gt;

The regular expression for the pattern of x|x, shall look as&lt;BR&gt;&lt;BR&gt;

    &lt;code&gt;
     $product = &quot;MOTOROLAx|xx|xx|x01-01-1900x|xYx|x&quot;;
     $product =~ s/x\|xx\|x/x\|x x\|x/g;
     print &quot;[ $product ]\n&quot;;
     __END__

     [ MOTOROLAx|x x|xx|x01-01-1900x|xYx|x ]

&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt;But that which really happens is that if there are two fields that are empty together, then this expression of pattern match shall not do the required in both places, that which actually happens is &lt;/p&gt;&lt;BR&gt;&lt;BR&gt;


 &lt;code&gt;
 [ MOTOROLAx|x x|xx|x01-01-1900x|xYx|x ]&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt;The Regular expression that usually is used on the wake does add space between the first occurrences of xx thus making x x, the next pattern xx that goes together with the first pattern is not added a space between.&lt;/p&gt;
 &lt;p&gt;This is because ,  as the first x|xx|x is matched and a space is added as x|x x|x . Then there is second empty string delimited by x|x that occurs together with the first match .The regular expression skips the match as it has already crossed the initial part of the pattern and hence does not match and the second occurrence is not spaced.&lt;/p&gt;

This is actually handled by &lt;B&gt;look_ahead&lt;/B&gt; and &lt;B&gt;look_behind assertions&lt;/B&gt; &lt;BR&gt;&lt;BR&gt;




&lt;code&gt;
$product = &quot;MOTOROLAx|xx|xx|x01-01-1900x|xYx|x&quot;;
$product =~ s/(?&lt;=\|)xx(?=\|)/x x/g;
print &quot;[ $product ]\n&quot;;
__END__

[ MOTOROLAx|x x|x x|x01-01-1900x|xYx|x ]

&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;

&lt;p&gt;The pattern with the look_ahead and look_behind assertions are looking for a pattern of xx that is following a &quot;|&quot; and is followed by a &quot;|&quot;  ,  but the $&amp; is actually the xx and the action is changing it to x x which solves the pattern match. &lt;BR&gt;&lt;BR&gt;

The look_ahead pattern matches enable a variable width assertion in that &lt;/p&gt;

?= (\||$) or (?=\|*) is entertained and the string&lt;BR&gt;&lt;BR&gt;

&lt;code&gt;
$product = &quot;MOTOROLAx|xx|xx|x01-01-1900x|xYx|xx&quot;;
$product =~ s/(?&lt;=\|)xx(?=(\||$)/x x/g;
print &quot;[ $product ]\n&quot;;
__END__


[ MOTOROLAx|x x|x x|x01-01-1900x|xYx|x x ]
&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;

 &lt;p&gt;The great monks like tachyon , BrowserUk have helped me in an earlier node regarding this extended pattern . &lt;/p&gt;

&lt;p&gt;The string that has the edge cases in the look_ahead pattern   is not solved by the fixed width match stated with the first code , hence we use the variable width look_ahead assertion .&lt;BR&gt;&lt;BR&gt;

The variable width assertion is not entertained for the look_behind assertions and this actually means that one has to be defining a fixed pattern for the look_behind assertions . One can never try to use (?&lt;=x*) or (?&lt;!(x|^)) &lt;/p&gt;

The experimental extended patterns of the regular expressions include &lt;BR&gt;&lt;BR&gt;

&lt;p&gt;
(?{code}) which enables including an anonymous block of code in the place of &quot;code&quot;
(?{{code}}) which evaluates the &quot;code&quot; at runtime and considers that as a pattern as if it  was there before the runtime 
((?condition)yes pattern|no pattern) which is conditional pattern match and other strings
(?&gt;pattern) which is named as independent sub expression, that which matches
 a stand-alone pattern if it is anchored at the given position . &lt;/p&gt;

&lt;a href=&quot;http://www.perldoc.com/perl5.6/pod/perlre.html#Extended-Patterns&quot;&gt;the extended patterns which might be removed &lt;/a&gt;
&lt;p&gt;The elucidation of these, I have left it out giving the links to perlre, cause of the experimental nature of the patterns, the fellow monks have nodes where in they use these patterns of regular expressions. I consider this document complete only with the comments and explanations of anything or many things extra to the outlined tutorial content .&lt;/p&gt;


&lt;p/&gt;
&lt;/readmore&gt;
&lt;small&gt;&lt;b&gt;update&lt;/b&gt; (broquaint): title change (was &lt;i&gt;EXTENDED PATTERNS OF REGULAR EXPRESSIONS&lt;/i&gt;)&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Edit by [tye], add READMORE&lt;/small&gt;&lt;/p&gt;</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>236866</node_id>
  <author_user>223707</author_user>
  <title>Extended Patterns of Regular Expressions</title>
  <createtime>2003-02-19 17:47:15</createtime>
  <nodeupdated>2005-08-15 08:07:47</nodeupdated>
</node>
