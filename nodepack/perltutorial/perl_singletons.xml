<node>
  <doctext>&lt;h1&gt;Perl Singleton Objects&lt;/h1&gt;

This is a quick introduction to perl Singleton objects.
A singleton object is an object that is only instantiated 
once throughout an application. 

&lt;h2&gt;Singleton Uses&lt;/h2&gt;
Singletons can be used for many things. If you only want one
database connection for a particular application, or a limited
number of connections a singleton database class can handle
managing your open connections.

&lt;h3&gt;How to implement&lt;/h3&gt;
The following is an example of how to put together a
database object that opens a database connection and returns
an existing connection to the caller.This allows your userid/password 
to be set in a single location as well. You don't have to have every
piece of code that accesses the database use userid/password. Just use the
DBConnector object and then issue your database calls.

	&lt;CODE&gt;
	package DBconnector;

	my $singleton;

	sub new {
		my $class = shift;
		$singleton ||= bless {}, $class;
	}

	sub connect {
		my $self = shift;
    			if (exists $self-&gt;{dbh}) {
  				$self-&gt;{dbh};
    			} else {
                   my $connection = &quot;dbi:mysql:host=$self-&gt;{host} \
                   dbname=$self-&gt;{name}&quot;;
                   $self-&gt;{dbh} =  DBI-&gt;connect($connection, \
                   $self-&gt;{user},$self-&gt;{password});
			}
	}
	&lt;/code&gt;


&lt;h3&gt;Summary&lt;/h3&gt;
There are many ways to use singletons. This is just a basic example, but
provides what is needed to create a singleton object.
</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>183417</node_id>
  <author_user>104333</author_user>
  <title>Perl Singletons</title>
  <createtime>2002-07-19 15:45:12</createtime>
  <nodeupdated>2005-08-15 11:45:23</nodeupdated>
</node>
