<node>
  <doctext>&lt;p&gt;
Note: This is a copy of [http://juerd.nl/site.plp/perlpodtut] (2003-04-23). The version on my website may be more up to date.
&lt;/p&gt;

&lt;a name=1&gt;&lt;/a&gt;&lt;h1&gt;Plain Old Documentation in 5 minutes&lt;/h1&gt;

&lt;a name=2&gt;&lt;/a&gt;&lt;h2&gt;Documentation is important&lt;/h2&gt;

&lt;p&gt;We all know that, and everyone knows why. I'll skip this section because any
detailed discussion of why documentation is important would break my promise
that you can learn to document in five minutes.&lt;/p&gt;

&lt;a name=3&gt;&lt;/a&gt;&lt;h2&gt;Documentation in Perl&lt;/h2&gt;

&lt;p&gt;Perl source code can contain documentation in POD format. POD stands for Plain
Old Documentation. You can either mix POD with code, put the POD at the
beginning of the file or put the POD at the end of the file. This depends only
on what you like. You choose.&lt;/p&gt;

&lt;a name=4&gt;&lt;/a&gt;&lt;h2&gt;Headings in POD&lt;/h2&gt;
&lt;readmore&gt;
&lt;p&gt;Logical structure is important. So we use headings. There are four levels, and
this should be enough. We use the &lt;tt&gt;=head1&lt;/tt&gt; .. &lt;tt&gt;=head4&lt;/tt&gt; commands (They are
called &lt;i&gt;command paragraphs&lt;/i&gt; officially. They are paragraphs because they're
separated from the rest of the POD by blank lines).&lt;/p&gt;

&lt;pre&gt;&lt;tt&gt;=head1 NAME
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
My::Module - An example module&lt;/tt&gt;&lt;/pre&gt;

&lt;a name=5&gt;&lt;/a&gt;&lt;h2&gt;Common sections&lt;/h2&gt;

&lt;p&gt;To keep things clear, we all use the same sections everywhere. You already saw
the NAME section. Yes, it is customary to write head1 paragraphs in ALLCAPS.
If you author modules for CPAN, you have to use this style. If not, or if you
use POD for other purposes than code documentation (it is a great format to
write articles and reports in), it is your own choice.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;em&gt;NAME&lt;/em&gt; contains the module or script name, a dash and a short description.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SYNOPSIS&lt;/em&gt; means &amp;#34;see together&amp;#34; and shows example usage.&lt;/li&gt;

&lt;li&gt;&lt;em&gt;DESCRIPTION&lt;/em&gt; contains a long description of what the module does and
lists functions.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;BUGS&lt;/em&gt; or &lt;em&gt;CAVEATS&lt;/em&gt; tells about bugs or issues the user should know
about.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ACKNOWLEDGEMENTS&lt;/em&gt; is where you thank bug fixers, testers and you parents.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;COPYRIGHT&lt;/em&gt; or &lt;em&gt;LICENSE&lt;/em&gt; mentions copyright restrictions. Don't put
the entire GPL there, though :)&lt;/li&gt;

&lt;li&gt;&lt;em&gt;AVAILABILITY&lt;/em&gt; says where newer versions can be pulled from.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;AUTHOR&lt;/em&gt; explains who made it, if COPYRIGHT didn't already do so.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SEE ALSO&lt;/em&gt; refers to additional documentation.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Those are all for &lt;tt&gt;=head1&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Functions, methods and things like that are usually explained in a &lt;tt&gt;=head2&lt;/tt&gt;
within DESCRIPTION.&lt;/p&gt;

&lt;p&gt;At the very least, document what arguments a function takes and what the
function returns. If there is any precondition, mention it. If your function
returns  &lt;i&gt;undef&lt;/i&gt; on error, let people know!&lt;/p&gt;

&lt;p&gt;It is okay to write short sentences. Avoid long sentences.&lt;/p&gt;

&lt;a name=6&gt;&lt;/a&gt;&lt;h2&gt;Code examples&lt;/h2&gt;

&lt;p&gt;Indented paragraphs render as code, with indenting intact. It's that easy!&lt;/p&gt;

&lt;pre&gt;&lt;tt&gt;=head1 SYNOPSIS
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    use My::Module;
    my $object = My::Module-&amp;#62;new();
    print $object-&amp;#62;as_string;&lt;/tt&gt;&lt;/pre&gt;

&lt;p&gt;This is called a &lt;i&gt;verbatim paragraph&lt;/i&gt;.&lt;/p&gt;

&lt;a name=7&gt;&lt;/a&gt;&lt;h2&gt;Markup&lt;/h2&gt;

&lt;p&gt;POD supports a small set of markup elements. To keep my time promise, I'll just
list them:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;tt&gt;B&amp;#60;bold text here&amp;#62;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;I&amp;#60;italic text here&amp;#62;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;U&amp;#60;underlined text here&amp;#62;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;C&amp;#60;code text here&amp;#62;&lt;/tt&gt;&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;B&amp;#60;and you can I&amp;#60;nest&amp;#62; them&amp;#62;&lt;/tt&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;And there are F, S, X and Z, but they're rarely used so not worth explaining in
a simple tutorial.&lt;/p&gt;

&lt;p&gt;If you ever need to include a &lt;tt&gt;&amp;#62;&lt;/tt&gt; character within a &lt;i&gt;formatting code&lt;/i&gt;,
you have two options. If you want to render &lt;tt&gt;$foo-&amp;#62;bar&lt;/tt&gt; in a code font, this
is what you can do:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;tt&gt;C&amp;#60;$foo-E&amp;#60;gt&amp;#62;bar&amp;#62;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;C&amp;#60;&amp;#60; $foo-&amp;#62;bar &amp;#62;&amp;#62;&lt;/tt&gt; (inner whitespace is required!)&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;C&amp;#60;&amp;#60;&amp;#60; $foo-&amp;#62;bar &amp;#62;&amp;#62;&amp;#62;&lt;/tt&gt; (inner whitespace is required!)&lt;/li&gt;&lt;/ul&gt;

&lt;a name=8&gt;&lt;/a&gt;&lt;h2&gt;Entities&lt;/h2&gt;

&lt;p&gt;You saw how E can be used for entities. These are like HTML entities, with the
addition of:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;em&gt;verbar&lt;/em&gt; for a vertical bar&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sol&lt;/em&gt; for a slash (solidus)&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Numeric entities are decimal, octal (prefixed with 0) or hexadecimal (prefixed
with 0x).&lt;/p&gt;

&lt;a name=9&gt;&lt;/a&gt;&lt;h2&gt;Lists&lt;/h2&gt;

&lt;p&gt;An example is much clearer than an explanation here.&lt;/p&gt;

&lt;pre&gt;&lt;tt&gt;=head2 Methods
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=over 12
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=item C&amp;#60;new&amp;#62;
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
Returns a new My::Module object.
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=item C&amp;#60;as_string&amp;#62;
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
Returns a stringified representation of
the object. This is mainly for debugging
purposes.
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=back&lt;/tt&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we start this definition list with &lt;tt&gt;=over&lt;/tt&gt; and we end it
with &lt;tt&gt;=back&lt;/tt&gt;. In between are &lt;tt&gt;=item&lt;/tt&gt;s. The number after over is the

&lt;i&gt;indentlevel&lt;/i&gt;, used mainly by text renderers for a nice horizontal layout.
pod2text renders the previous example as:&lt;/p&gt;

&lt;pre&gt;&lt;tt&gt;&lt;span&gt;&lt;/span&gt;  Methods
      &amp;#34;new&amp;#34;       Returns a new
                  My::Module object.
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
      &amp;#34;as_string&amp;#34; Returns a stringified
                  representation of the
                  object. This is mainly
                  for debugging purposes.&lt;/tt&gt;&lt;/pre&gt;

&lt;a name=10&gt;&lt;/a&gt;&lt;h2&gt;Other POD coolness&lt;/h2&gt;

&lt;p&gt;You can use L to link to sections and other documents. Pod is ended with
&lt;tt&gt;=cut&lt;/tt&gt; to go back to Perl. There are special commands for different output
formats. To read the complete POD documentation, type on a command prompt:&lt;/p&gt;

&lt;pre&gt;&lt;tt&gt;perldoc perlpod&lt;/tt&gt;&lt;/pre&gt;

&lt;a name=11&gt;&lt;/a&gt;&lt;h2&gt;A complete example&lt;/h2&gt;

&lt;pre&gt;&lt;tt&gt;=head1 NAME
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
My::Module - An example module
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=head1 SYNOPSIS
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    use My::Module;
    my $object = My::Module-&amp;#62;new();
    print $object-&amp;#62;as_string;
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=head1 DESCRIPTION
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
This module does not really exist, it
was made for the sole purpose of
demonstrating how POD works.
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=head2 Methods
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=over 12
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=item C&amp;#60;new&amp;#62;
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
Returns a new My::Module object.
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=item C&amp;#60;as_string&amp;#62;
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
Returns a stringified representation of
the object. This is mainly for debugging
purposes.
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=back
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=head1 AUTHOR
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
Juerd - &amp;#60;http://juerd.nl/&amp;#62;
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=head1 SEE ALSO
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
L&amp;#60;perlpod&amp;#62;, L&amp;#60;perlpodspec&amp;#62;
&lt;a href=&quot;&quot;&gt;&lt;/a&gt;
=cut&lt;/tt&gt;&lt;/pre&gt;
&lt;/readmore&gt;
&lt;a name=12&gt;&lt;/a&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Documenting using POD is easy. Have fun!
&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Edit by [tye], add READMORE&lt;/small&gt;&lt;/p&gt;</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>252477</node_id>
  <author_user>132236</author_user>
  <title>POD in 5 minutes</title>
  <createtime>2003-04-23 04:28:33</createtime>
  <nodeupdated>2005-08-15 17:08:00</nodeupdated>
</node>
