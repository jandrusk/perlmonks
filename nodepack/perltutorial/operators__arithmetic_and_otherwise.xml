<node>
  <doctext>&lt;B&gt;The Basic Arithmetic Opertators&lt;/B&gt;&lt;BR&gt;&lt;BR&gt;
&lt;TABLE border=1&gt;
&lt;TR&gt;&lt;TD&gt;Example&lt;/TD&gt;&lt;TD&gt;Type&lt;/TD&gt;&lt;TD&gt;Result&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;$a+$b&lt;/TD&gt;&lt;TD&gt;Addition&lt;/TD&gt;&lt;TD&gt;Sum of $a and $b&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;$a-$b&lt;/TD&gt;&lt;TD&gt;Subtraction&lt;/TD&gt;&lt;TD&gt;Result of $b subtracted from $a&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;$a*$b&lt;/TD&gt;&lt;TD&gt;Multiplication&lt;/TD&gt;&lt;TD&gt;Product of $a and $b&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;$a/$b&lt;/TD&gt;&lt;TD&gt;Division&lt;/TD&gt;&lt;TD&gt;Result of $a divided by $b&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;$a%$b&lt;/TD&gt;&lt;TD&gt;Modulus&lt;/TD&gt;&lt;TD&gt;Remainder when $a is divided by $b&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;$a**$b&lt;/TD&gt;&lt;TD&gt;Exponentiation&lt;/TD&gt;&lt;TD&gt;$a to the power of $b&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;BR&gt;&lt;BR&gt;
&lt;B&gt;String Operators&lt;/B&gt;&lt;BR&gt;
To prevent confusion strings have their own operators.  Perl has its own addition and mulitply operators for strings.  These operators are . and x respectively.  
We'll show you how these work compared to their arithmetic counterparts.&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
$a=2;
$a=3;
print $a+$b   #arithmetic operator prints 5
print $a.$b   #string operator prints 2 plus the three or 23
print $a*$b   #arithmetic operator prints 6
print $a x $b #string operators prints $a $b times or 2 three times. ie 222
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;BR&gt;
&lt;BR&gt;
&lt;B&gt;Assignment Operators&lt;/B&gt;&lt;BR&gt;&lt;BR&gt;
Assignment simply set values on the left side of a = to what is on the right side.  This works for both strings and numbers in Perl.  You can speed an assignment like $a=$a*3; by using a handy shortcut used in C and C++.  You can simplify &lt;I&gt;variable=variable operator expression&lt;/I&gt; to &lt;I&gt;variable operator=expression&lt;/I&gt;.  
We'll demonstrate this with some quick examples.&lt;BR&gt;
&lt;PRE&gt;&lt;CODE&gt;
$a=3;
$b=&quot;x&quot;;
$c=4;
$a*=3;     #$a=$a*3; $a now equal to 9;
$a/=3;     #$a=$a/3; $a (9) divided by three which equals 3;
$a+=2;     #$a=$a+2; $a is now equal to 5;
$a-=2;     #$a=$a-2; $a is now equal to 3;
$b x=3;    #$b=$b x $3 $b is now equal to &quot;xxx&quot;;
$b .=&quot;33&quot;; #b=$b.&quot;33&quot;  $b is now equal to &quot;xxx33&quot;;
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;BR&gt;Another assignment operator often used is ||= which sets a variable equal to a value if the value isn't already set.&lt;BR&gt;
&lt;BR&gt;
&lt;B&gt;Comparison Operators&lt;/B&gt;
&lt;TABLE border=1&gt;
&lt;TR&gt;&lt;TD&gt;Type&lt;/TD&gt;&lt;TD&gt;Numeric&lt;/TD&gt;&lt;TD&gt;String&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;Greater Than&lt;/TD&gt;&lt;TD&gt;&gt;&lt;/TD&gt;&lt;TD&gt;gt&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;Less Than&lt;/TD&gt;&lt;TD&gt;&lt;&lt;/TD&gt;&lt;TD&gt;lt&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;Equal to&lt;/TD&gt;&lt;TD&gt;==&lt;/TD&gt;&lt;TD&gt;eq&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;Not equal&lt;/TD&gt;&lt;TD&gt;!=&lt;/TD&gt;&lt;TD&gt;ne&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;Less than or equal to&lt;/TD&gt;&lt;TD&gt;&lt;=&lt;/TD&gt;&lt;TD&gt;le&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;Greater than or equal to&lt;/TD&gt;&lt;TD&gt;&gt;=&lt;/TD&gt;&lt;TD&gt;ge&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;BR&gt;Another comparison operator is the &lt;=&gt; operator which returns -1 if the second term is greater, 1 if the first term is greater and 0 if the terms are equal.  The string equivalent of &lt;=&gt; is cmp.&lt;BR&gt;&lt;BR&gt;
&lt;B&gt;Autoincrement and Autodecrement operators&lt;/B&gt;
These operators simply add or subtract one from a given variable.  If the operator comes before the variable the value of the variable after the operation is returned.  If the operation comes after the variable the value before the operation is returned.  For example&lt;Br&gt;
&lt;PRE&gt;&lt;CODE&gt;
$a=1;
print $a++; #prints a as one then adds 1 to it
print $a;   #now $a is 2
print ++$a; #adds one to $a and then prints its value which is now 3;
print $a--; #prints 3 then subtracts one from $a;
&lt;/CODE&gt;&lt;/PRE&gt;
&lt;BR&gt;
&lt;BR&gt;
&lt;B&gt;Logical Operators&lt;/B&gt;
&lt;TABLE BORDER=1&gt;
&lt;TR&gt;&lt;TD&gt;Examples&lt;/TD&gt;&lt;TD&gt;Short Version&lt;/TD&gt;&lt;TD&gt;Textual Version&lt;/TD&gt;&lt;TD&gt;Meaning&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;$a and $b; $a &amp;&amp; b&lt;/TD&gt;&lt;TD&gt;&amp;&amp;&lt;/TD&gt;&lt;TD&gt;and&lt;/TD&gt;&lt;TD&gt;returns true if $a and $b are both defined and nonzero&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;$a or $b; $a||$b&lt;/TD&gt; &lt;TD&gt;||&lt;/TD&gt;&lt;TD&gt;or&lt;/TD&gt;&lt;TD&gt;returns true if either $a or $b is defined and nonzero&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;!$a; not $a&lt;/TD&gt;&lt;TD&gt;!&lt;/TD&gt;&lt;TD&gt;not&lt;/TD&gt;&lt;TD&gt;returns the opposite of what an expression would otherwise&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;BR&gt;
&lt;BR&gt;
Note those operators are useful for controlling execution based on the way short-circuiting occurs.  
If you want something to happen only if the first condition isn't met you can use an or.
&lt;BR&gt;&lt;BR&gt;&lt;code&gt;$a or print '$a is notdefined or is equal to zero';&lt;/code&gt;&lt;BR&gt;&lt;BR&gt;
You can also use an and to allow something to execute only if the first criteria evaluates to 0; &lt;BR&gt;
&lt;BR&gt;&lt;BR&gt;&lt;code&gt;$isMonday and print &quot;Today is Monday\n&quot;;&lt;/code&gt;&lt;BR&gt;
&lt;BR&gt;&lt;BR&gt;[perlman:perlop|If you want to find ALL the information on ALL the operators here's your place]</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>990</node_id>
  <author_user>113</author_user>
  <title>Operators: arithmetic and otherwise</title>
  <createtime>1999-11-16 20:12:48</createtime>
  <nodeupdated>2005-08-15 16:25:06</nodeupdated>
</node>
