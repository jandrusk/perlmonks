<node>
  <doctext>&lt;p&gt;The basic principle of technical writing is simple: Tell them what you're going to tell them. Tell them. Then, tell them what you've told them. &lt;/p&gt;

&lt;p&gt;Why am I telling you this? Because, like it or not, documentation is part of programming. Good documentation will make your life substantially easier. Consider this - even if you know your code inside and out without documentation, others may not. Would you prefer that every user pester you with questions, or that your documentation take care of that, leaving you time to code in peace? &lt;/p&gt;

&lt;p&gt;This tutorial isn't going to focus on documenting code on a line-by-line basis, or on POD (&quot;Plain Old Documentation&quot;), but rather on the larger picture of how documentation is prepared. Its purpose is not to turn each and every Perl Monk into a technical writer, but rather to give you (the coder) an idea of how documentation is produced. &lt;/p&gt;

&lt;p&gt;Obviously, if you're the only person working on a project, it's unlikely you'll hire a technical writer to create in depth documentation. In such a case, you'll end up doing the documentation yourself. If you work in an environment in which documentation is farmed out to a technical writer, don't think you're off the hook. Think of this tutorial as &lt;em&gt;How to Get Along with your Technical Writer 101&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Principles of Technical Writing&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Handbook of Technical Writing, 6th edition&lt;/em&gt; (Alred et al), lists five steps to successful technical writing:&lt;/p&gt;
	&lt;ol&gt;
	&lt;li&gt;Preparation&lt;/li&gt;
	&lt;li&gt;Research&lt;/li&gt;
	&lt;li&gt;Organization&lt;/li&gt;
	&lt;li&gt;Writing a draft&lt;/li&gt;
	&lt;li&gt;Revision&lt;/li&gt;
	&lt;/ol&gt;
&lt;p&gt;In the next few sections I will go through these steps in more detail, with an eye to highlighting points particularly relevant to software documentation.&lt;/p&gt;

&lt;h3&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Writing requires preparation. You can think of this step as being broken down into four tasks:
	&lt;ul&gt;
	&lt;li&gt;Establishing the purpose of the document&lt;/li&gt;
	&lt;li&gt;Assessing the audience&lt;/li&gt;
	&lt;li&gt;Determining the scope&lt;/li&gt;
	&lt;li&gt;Selecting the appropriate medium&lt;/li&gt;
	&lt;/ul&gt;

&lt;p&gt;Let's look at this document. Before I sat down to write this tutorial, I asked myself some questions.&lt;/p&gt;

	&lt;p&gt;&lt;strong&gt;What is the purpose of the tutorial?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
		To provide an introduction to technical writing/documentation.&lt;/p&gt;

	&lt;p&gt;&lt;strong&gt;Who is the audience and what do I know about them?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
		The audience is members of the Perl Monks community. This community is focused on Perl. It's a diverse community with wide skill levels from complete novice to Perl gurus, but since this is a tutorial, I'm covering fairly basic material. It's a fairly friendly and informal place, so a conversational writing tone is appropriate.&lt;/p&gt;
	
	&lt;p&gt;&lt;strong&gt;What is the scope?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
		This is an introductory tutorial. The purpose is not to turn each and every Perl Monk into a technical writer, but to give an overview of the documentation process.&lt;/p&gt;
	
	&lt;p&gt;&lt;strong&gt;What is the medium?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
		Perl Monks, of course! More generally, this tutorial is an online article presented on a web site. This is important: writing for the web is not the same as writing for print or any other media. What works well on paper may not work on the web. The web also has features that print does not, such as the ability to link to more information. Use these features to the fullest.&lt;/p&gt;

&lt;h3&gt;Research&lt;/h3&gt;

&lt;p&gt;The purpose of documentation is to convey information. In order to convey information, you must understand it. In this case we are talking about your code, so hopefully you understand it - but can you explain it?&lt;/p&gt;

&lt;p&gt;If you have worked with a technical writer, you have undoubtedly faced a barrage of questions. &quot;What does this do?&quot; &quot;What does that do?&quot; &quot;How does one...?&quot; This is research. It is necessary. You can help it along by commenting your code. The expertise of technical writers varies widely. [chromatic|Some are expert coders themselves]. Others may not have expertise beyond their tools of the trade. In any case, having comments in your code will help their research and reduce the amount of time they spend pestering you.&lt;/p&gt;

&lt;p&gt;How should you comment your code? In &lt;a href=&quot;http://www.gamedev.net/reference/programming/features/codedoc/page4.asp&quot;&gt;The Art of Code Documentation&lt;/a&gt; Drew Sikora distinguishes between commenting for developers and commenting a finished program. When your code is still being developed, it is likely being read only by other developers. In this case, simple comments are fine. When code is finished, comments should be expanded into documentation so that users or future developers can get up to speed with what you were thinking when you were developing the program.&lt;/p&gt;

&lt;p&gt;If you are not working with a technical writer, you will need to take on more of the research. You may understand your code, but do you understand how the modules used in your code work? What will users of your program need to know about what the program does? Keep in mind the answers to your questions from the preparation stage.&lt;/p&gt;

&lt;h3&gt;Organization&lt;/h3&gt;

&lt;p&gt;Poorly organized documentation may in fact be worse than no documentation. Consider what you need to tell users, and how that information can best be conveyed. For example, if you're writing installation instructions for a program, you will want to go with a sequential method of development: step 1, step 2, and so on. If you're writing a history of versions, use a chronological method of development. Choose the method that best suits your subject, your readers, and your purpose.&lt;/p&gt;

&lt;p&gt;In software, often used methods of development are division and classification (explain each parts function and how the parts work together) and general-to-specific. In general-to-specific development, you begin with general information about the function of the software, and move to more specific information.&lt;/p&gt;

&lt;p&gt;Once you've decided on an organization scheme, prepare an outline. This provides a road map for your writing. How you outline is a personal choice. Personally, I use an iterative approach: I start with a very broad outline, such as &lt;/p&gt;

&lt;pre&gt;
	Technical Writing/Documentation Tutorial
	Introduction
	Principles of Technical Writing
		Preparation
		Research
		Organization
		Draft
		Revision
	Conclusion
	References
&lt;/pre&gt;

&lt;p&gt;I then go through my outline and break categories into sub-categories and sub-sub-categories until I feel I have a clear enough map. For example, I broke the Preparation category up in this manner:&lt;/p&gt;

		&lt;p&gt;Preparation&lt;/p&gt;
			&lt;ul&gt;
			&lt;li&gt;Purpose&lt;/li&gt;
			&lt;li&gt;Audience&lt;/li&gt;
			&lt;li&gt;Scope&lt;/li&gt;
			&lt;li&gt;Medium&lt;/li&gt;
			&lt;/ul&gt;

&lt;h3&gt;Writing a Draft&lt;/h3&gt;

&lt;p&gt;Once you have your outline, you can begin writing. Expand your outline into paragraphs. Some advise not worrying about matters such as grammar, spelling, punctuation, and layout at this point. Personally, I find it difficult to follow this advice. I usually write fairly polished drafts. Regardless of your tactic, you will be revising your work in the next step.&lt;/p&gt;

&lt;p&gt;You may wish to save the introduction for last, since you will have a better idea of what is covered in the body of the document. You will also need to write a conclusion to your document - remember the basic rule of technical writing:&lt;/p&gt;

	&lt;blockquote&gt;Tell them what you're going to tell them. (Introduction)&lt;br /&gt;
	Tell them. (Body)&lt;br /&gt;
	Tell them what you've told them. (Conclusion)&lt;/blockquote&gt;

&lt;h3&gt;Revision&lt;/h3&gt;

Revision is one of the longest steps of this process. In my technical writing text, there's a checklist for all five steps of the writing process. The first four fit on the first page, and revision takes up a page of its own.&lt;/p&gt;

When revising, check for completeness and accuracy. Check that your writing is concise, and covers a topic clearly. Check your spelling and grammar. Use spell check, but don't use it as a substitute for proof-reading. Review the mechanics: are abbreviations, acronyms, and initialisms expanded at their first usage? &lt;/p&gt;

Don't do your revision in one step. I'm sure many of you have had the experience of spending hours looking for a bug in your code. You give up, frustrated, and the next day come back to see the problem staring out at you, as if in boldface. Likewise, having someone proofread your work is a good idea. How many times have you been frustrated by a bug and posted it on Perl Monks, only to get a quick response from someone else pointing out the problem? The same thing works for revision.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You may regard documentation as a chore. You may regard it as an opportunity to learn. Regardless, you do need to document your code. In this tutorial, I've presented the steps used in technical writing/documentation: preparation, research, organization, writing, and revision. &lt;/p&gt;

&lt;p&gt;In preparation, key points discussed were: establishing the purpose, assessing the audience, determining the scope, and selecting the appropriate medium. The research section covered the reasons for research and strategies for commenting code. In organization, methods of development used in software documentation were introduced: sequential, chronological, division and classification, and general-to-specific. Outlining was also discussed. Finally, strategies for writing and revision were covered.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;Aldred, Gerald J. et al, 2000. &lt;/em&gt;Handbook of Technical Writing, 6th edition&lt;/em&gt;. Boston: Bedford/St. Martin's.&lt;/p&gt;

&lt;p&gt;Sikora, Drew. &lt;em&gt;The Art of Code Documentation&lt;/em&gt;. Game Dev. &lt;a  href=&quot;http://www.gamedev.net/reference/programming/features/codedoc/&quot;&gt;http://www.gamedev.net/reference/programming/features/codedoc/&lt;/a&gt;&lt;/p&gt;</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>130249</node_id>
  <reputation>139</reputation>
  <author_user>39362</author_user>
  <title>Introduction to Technical Writing/Documentation</title>
  <createtime>2001-12-07 16:47:15</createtime>
  <nodeupdated>2005-08-15 11:49:56</nodeupdated>
</node>
