<node>
  <doctext>&lt;p&gt;&lt;strong&gt;Intro&lt;/strong&gt;&lt;br&gt;
I love this module - you maybe able to tell from the fulsome praise below. I've been admiring the principle from afar for a long time now, and finally decided to get my feet wet a little while ago. I'm still paddling, so this is as much a way of me reviewing what I've learnt as it is a tutorial for others, but as there is nothing already out there other than [TheDamian]'s original paper and the POD (basically derived from it), I thought I'd throw this in the water as a possible lifebelt, especially for those (like myself) who have little formal grammar under their belt.

&lt;p&gt;&lt;strong&gt;Lingua::What?&lt;/strong&gt;&lt;br&gt;
A module (henceforth referred to as L::R::P to save typing) by [TheDamian] that allows perl programming using Latin prose.

&lt;p&gt;&lt;strong&gt;How?&lt;/strong&gt;&lt;br&gt;
[cpan://Filter::Util] and a big &lt;strike&gt;[cpan://Parse::Yapp|YAPP]&lt;/strike&gt; (Sorry Damian - and I quote &quot;YAPP couldn't handle the stress, nor P::RD&quot;) home-brewed parser. If you &lt;code&gt;use L::R::P 'converte';&lt;/code&gt;, you can see what the translated-back-to-perl looks like - &lt;code&gt;use L::R::P 'discribe'&lt;/code&gt;(classify) and &lt;code&gt;use L::R::P 'investiga'&lt;/code&gt; (trace) for even more info on the magic - handy when you're debugging.

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;br&gt;
The answer given in the &lt;a href='http://www.csse.monash.edu.au/~damian/papers/HTML/Perligata.html'&gt;definitive paper&lt;/a&gt; (and duplicated in the POD)
is &quot;If you have to ask why, you probably won't understand the answer&quot;. Feeling that a little harsh maybe, I'd prepend &quot;Because you can&quot;. If you &lt;i&gt;still&lt;/i&gt; have to ask why, then we start getting into complicated issues of aesthetics and linguistics...

&lt;p&gt;&lt;strong&gt;Nope - still why?&lt;/strong&gt;&lt;br&gt;
OK - here's where the linguistics bit starts - sorry, but you did ask :) In English, word order matters greatly - &quot;man bites dog&quot; is very different in meaning to &quot;dog bites man&quot;. In some (generally older) languages though, this is not the case. They can say &quot;The man bit the dog&quot;, &quot;The dog was bitten by the man&quot;, &quot;The dog by the man was bitten&quot;, &quot;Biting was done to the dog by the man&quot; etc. etc. using &lt;i&gt;all the same words&lt;/i&gt; (rather than &quot;bit, &quot;was bitten&quot;,&quot;biting was&quot; etc.) in &lt;i&gt;any order&lt;/i&gt;.
&lt;p&gt;Word order is important in most programming languages too - &lt;code&gt;$x = $y&lt;/code&gt; being rather different to &lt;code&gt;$y = $x&lt;/code&gt; (I know - we've all been there...). Wouldn't it be nice if that particular 'bug' &lt;i&gt;never cropped up again&lt;/i&gt;? If you could say &quot;$x is to be acted upon by $y&quot; &lt;i&gt;or&lt;/i&gt; &quot;$y is to act upon $x&quot; - the way you already can in perl with &lt;code&gt;if $x {foo}&lt;/code&gt; and &lt;code&gt;foo if $x&lt;/code&gt;?
&lt;p&gt;As for the aesthetics...well, IMHO, this exemplifies the aesthetics of perl itself. And if that's not enough for all you youngsters out there, then how about &quot;*Man!* You can write a CGI script in *Latin* and show it to all your friends? Just How Cool Is That?&quot;. Groovy.

&lt;p&gt;&lt;strong&gt;Sold - so How, again?&lt;/strong&gt;&lt;br&gt;
The way to do this easily is by using different word-endings, or &lt;i&gt;inflection&lt;/i&gt; - the thing that distinguishes &quot;thing&quot; from &quot;things&quot;, or determines whether you thinged, are thinging, or will thing. That's about it for English - we distinguish singular from plural, and the timeframe (tense). Many other languages use inflection (or 'inflexion', as all you non-Brits have it :) ) to determine things like the gender of the subject - an Italian male may be &quot;bello&quot; , or 'handsome', while a female is &quot;bella&quot;, or 'pretty'.&lt;/p&gt;
&lt;p&gt;Now...Latin also uses inflection to determine the &lt;i&gt;role&lt;/i&gt; of the word - for instance, whether it is &quot;doing&quot; (the 'subject') , or &quot;having done to&quot; (the 'object').
&lt;br&gt;(Meat of this example nicked from the Introduction to the &lt;a href='http://www.csse.monash.edu.au/~damian/papers/HTML/Perligata.html'&gt;paper&lt;/a&gt; mentioned earlier, as (a) It's about as clear as you can get, and (b) I can't be bothered to drag out my Latin textbooks to contrive another one - maybe I'll expand on 'man bites dog' later.)&lt;br&gt;
The phrase &quot;Puer dedit cani escam&quot; means &quot;The boy gave the dog the food&quot;. Each word's ending determines its role in the sentence, so one could also say &quot;Escam dedit puer cani&quot; (&quot;The food was given by the boy to the dog&quot;), or (most commonly) 'reverse Polish', with the verb at the end: &quot;Puer cani escam dedit. &quot; (&quot;The boy to the dog the food did give&quot;). Same words, different order.&lt;/p&gt;
&lt;p&gt;&quot;Puer&quot; (boy), is the subject of the sentence - the one that was doing the giving, so it takes no ending. &quot;esca&quot; (food), becomes &quot;escam&quot;, as it's the  &lt;i&gt;direct&lt;/i&gt; object - the thing that is being given. The &quot;canis&quot; (dog) drops the 's' to become the &lt;i&gt;indirect&lt;/i&gt; object - the thing that is being given to. If the dog gave some food back, it would be &quot;Canis puero escam dedit&quot;- the 'o' denoting that the &lt;i&gt;boy&lt;/i&gt; is now the indirect object.&lt;/p&gt;
&lt;p&gt;Before you start sweating - don't worry. Although Latin is the uber-grammar language, and has been known to make small boys wet themselves rather than attempt to decline &quot;to beat soundly&quot;, you'll only need to learn a few of these endings to write L::R::P.

&lt;p&gt;&lt;strong&gt;Enough with the theory already - show me some code.&lt;/strong&gt;&lt;br&gt;
Being rather canonical, here's something that should be recognisable.
&lt;code&gt;
scribe egresso dictum sic Hello World cis.
&lt;/code&gt;
Literally translated, that comes out as..&quot;Write to the Exit the result of saying (as follows) Hello world (to here).&quot;.&lt;br&gt;
Or, more loosely, &quot;&lt;code&gt;print STDOUT q{Hello World};&lt;/code&gt;&quot;.&lt;br&gt;
Note that it ends, as in English, with a period rather than a semi-colon. L::R::P doesn't like anything except alphanumerics and periods - all sigils are completely out of the egresso.&lt;/p&gt;
&lt;p&gt;Taking that apart, we get &quot;scribe&quot; (print - that's an easy one we still use in English) , &quot;egresso&quot; (STDOUT, literally 'the exit') , &quot;dictum&quot; (like 'dictate' - a quote operator) and the 'brackets' &quot;sic&quot; and &quot;cis&quot; ('as follows' and 'to here'  - almost too good to be true...). Even if you're not thinking about writing any code, check out the THESAURUS PERLIGATUS in the POD just for a laugh at the translations - my favourites are STDERR ('oraculo' - a place where doom is pronounced) and rmdir ('excide', or raze, as in '...to the ground').&lt;/p&gt;
&lt;p&gt;(Actually, the more usual way of saying this would be...
&lt;code&gt;Hello tum World inquementum scribe egresso.&lt;/code&gt;
...or &quot;print the result of saying Hello then World&quot; but that &lt;i&gt;particular&lt;/i&gt; example doesn't work. &lt;code&gt;Hiya tum World ...&lt;/code&gt; is OK though, for reasons to be explained shortly.)&lt;/p&gt;
&lt;p&gt;Without further ado, let's get straight to...
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;$var = 8;&lt;/code&gt; would be expressed as...
&lt;code&gt;
varo VIII da.    # or 'da varo VIII' or 'da VIII varo' or...
&lt;/code&gt; 
(or &quot;&lt;i&gt;meo&lt;/i&gt; varo VIII da.&quot; if you're using strict  - guess what 'meo' is :)&lt;br&gt;&lt;br&gt;
&quot;da&quot; is &quot;=&quot; ('to give'). &quot;var&quot;, as the indirect object (the thing being given to - remember?) takes an 'o' to become &quot;varo&quot;. And it's being given 'VIII' - yup - even the &lt;i&gt;numbers&lt;/i&gt; are in Latin. For 1-10, you can use some names as well - 'unum', 'duo', 'tres' etc. , and zero is &quot;nullum&quot;.
&lt;p&gt;When it comes to printing it out, on the other hand, 'var' is now an &lt;i&gt;rvalue&lt;/i&gt; (rather than the lvalue it was when it was being assigned to), and is the &lt;i&gt;subject&lt;/i&gt; of the 'print' verb, so...
&lt;code&gt;
varum scribe egresso.
&lt;/code&gt;
...and that's basically how the trick is done. That's why you can say &lt;i&gt;either&lt;/i&gt;&quot;scribe egresso varum&quot; or &quot;varum scribe egresso&quot; - &quot;um&quot; denotes that it can &lt;i&gt;only&lt;/i&gt; be used as an rvalue, so under the hood, &quot;print&quot; knows that the &quot;whatever-um&quot; next to it is to be printed ( as opposed to the &quot;eggress-o&quot;, which it's doing the printing *to*, and which BTW is why 'Hello' as a 'bareword' gets translated to '$Hell'). &quot;varum scribe egresso&quot;, &quot;scribe egresso varum&quot;, &quot;egresso scribe varum&quot;, &quot;scribe varum egresso&quot;, &quot;varum egresso scribe&quot;, &quot;egresso varum scribe&quot;. All the combinations. They all work. Isn't that &lt;i&gt;lovely&lt;/i&gt;?  &lt;/p&gt;
&lt;p&gt;That's scalars - arrays and hashes are similar, except they use a couple of different plural forms (as perl uses '@' or '%') to distinguish them from $ingulars. &lt;br&gt;
(Two different types of plurals? Oh Yes - Latin can be a nightmare...&lt;code&gt;
  BRIAN:	  R-- Romanus?
  CENTURION:  Goes like...?
  BRIAN:	  'Annus'?
  CENTURION:  Vocative plural of 'annus' is...?
  BRIAN:	  Eh. 'Anni'?
  CENTURION:  'Romani'!
&lt;/code&gt;
Romani ite Damian's Domum. )

&lt;p&gt;So, we get this...
&lt;code&gt;
da meo arrayis I tum II tum III.             # my @array = (1,2,3);
arraya scribe egresso.
meo hashibus key1 tum I tum key2 tum II da.  # my %hash=(key1=&gt;1,key2=&gt;2)
hashus scribe egresso.
&lt;/code&gt;
'tum' ('and then') is a comma, so we have &quot;give 1 then 2 then 3 to the array&quot;.
&lt;p&gt;If you got this far, you don't need me any more - get straight to the [cpan://Lingua::Romana::Perligata|manual] and start coding. Remember about 'converte', 'discribe' and 'investiga' - you'll find them very useful. Any suggestions regarding further material to add to this tutorial (or places where I've got it plain wrong) as ever welcome.&lt;/p&gt;
&lt;p&gt;Thanks to [ybiC] for the obligatory &lt;a href='http://www.stone-dead.asn.au/movies/life-of-brian/scene-09.html'&gt;Monty Python&lt;/a&gt; link.&lt;br&gt;
Minor formatting / syntax updates 29/04/03
&lt;p&gt;Ben

</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>253797</node_id>
  <author_user>218773</author_user>
  <title>Lingua::Romana::Perligata - Basica Basicum Basicus</title>
  <createtime>2003-04-28 15:12:35</createtime>
  <nodeupdated>2005-08-15 08:17:41</nodeupdated>
</node>
