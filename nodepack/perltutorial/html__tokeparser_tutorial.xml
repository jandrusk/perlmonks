<node>
  <doctext>&lt;A NAME=&quot;__index__&quot;&gt;&lt;/A&gt;
&lt;!-- INDEX BEGIN --&gt;

&lt;UL&gt;

	&lt;LI&gt;&lt;A HREF=&quot;#name&quot;&gt;NAME&lt;/A&gt;&lt;/LI&gt;
	&lt;LI&gt;&lt;A HREF=&quot;#description&quot;&gt;DESCRIPTION&lt;/A&gt;&lt;/LI&gt;
	&lt;UL&gt;

		&lt;LI&gt;&lt;A HREF=&quot;#the cpan nodelet faker (what's it do)&quot;&gt;The CPAN Nodelet Faker (What's It Do?)&lt;/A&gt;&lt;/LI&gt;
		&lt;LI&gt;&lt;A HREF=&quot;#why didn't i just use html::linkextor&quot;&gt;Why Didn't I just use HTML::LinkExtor?&lt;/A&gt;&lt;/LI&gt;
	&lt;/UL&gt;

	&lt;LI&gt;&lt;A HREF=&quot;#html::tokeparser&quot;&gt;HTML::TokeParser&lt;/A&gt;&lt;/LI&gt;
	&lt;UL&gt;

		&lt;LI&gt;&lt;A HREF=&quot;#description (mostly verbatim from the pod)&quot;&gt;DESCRIPTION (mostly verbatim from the pod)&lt;/A&gt;&lt;/LI&gt;
		&lt;LI&gt;&lt;A HREF=&quot;#functions&quot;&gt;FUNCTIONS&lt;/A&gt;&lt;/LI&gt;
	&lt;/UL&gt;

	&lt;LI&gt;&lt;A HREF=&quot;#triggers (there are only two)&quot;&gt;TRIGGERS (there are only two)&lt;/A&gt;&lt;/LI&gt;
	&lt;LI&gt;&lt;A HREF=&quot;#linebyline code explanation&quot;&gt;LINE-by-LINE CODE EXPLANATION&lt;/A&gt;&lt;/LI&gt;
	&lt;LI&gt;&lt;A HREF=&quot;#line numbered code listing&quot;&gt;LINE NUMBERED CODE LISTING&lt;/A&gt;&lt;/LI&gt;
	&lt;LI&gt;&lt;A HREF=&quot;#song in a minor&quot;&gt;Song in A minor&lt;/A&gt;&lt;/LI&gt;
&lt;/UL&gt;
&lt;!-- INDEX END --&gt;

&lt;HR&gt;
&lt;P&gt;
&lt;H1&gt;&lt;A NAME=&quot;name&quot;&gt;NAME&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;&lt;TT&gt;HTML::TokeParser&lt;/TT&gt; Tutorial (a.k.a.  The CPAN Nodelet Faker)&lt;/P&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;description&quot;&gt;DESCRIPTION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;Want to parse HTML the right (and &lt;EM&gt;easy&lt;/EM&gt;) way?
Well read this tutorial and you can!!!&lt;/P&gt;
&lt;P&gt;(I'd like to thank [damian1301] and [derek3000] for asking for
  help, which made me read the pod, and eventually write this.)&lt;/P&gt;
&lt;P&gt;
&lt;H2&gt;&lt;A NAME=&quot;the cpan nodelet faker (what's it do)&quot;&gt;The CPAN Nodelet Faker (What's It Do?)&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;My example program, The CPAN Nodelet Faker, besides teaching you how
to use &lt;TT&gt;HTML::TokeParser&lt;/TT&gt;, fetches the latest 20 modules added to
&lt;A HREF=&quot;http://search.cpan.org/recent&quot;&gt;http://search.cpan.org/recent.&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;You can download the source code (without the line numbers, ready to run),
as well as this tutorial and sample input/output
from &lt;A HREF=&quot;http://crazyinsomniac.perlmonk.org/perl/htmltokeparsertutorial&quot;&gt;http://crazyinsomniac.perlmonk.org/perl/htmltokeparsertutorial&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;
&lt;H2&gt;&lt;A NAME=&quot;why didn't i just use html::linkextor&quot;&gt;Why Didn't I just use HTML::LinkExtor?&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;This is an &lt;TT&gt;HTML::TokeParser&lt;/TT&gt; tutorial.
Besides, &lt;TT&gt;HTML::TokeParser&lt;/TT&gt; will fit most, if not all, your
HTML parsing needs.  And, anyway, &lt;TT&gt;HTML::LinkExtor&lt;/TT&gt; is built
on top of &lt;TT&gt;HTML::Parser&lt;/TT&gt; just like &lt;TT&gt;HTML::TokeParser&lt;/TT&gt;.&lt;/P&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;html::tokeparser&quot;&gt;HTML::TokeParser&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;&lt;EM&gt;My comments begin with # and are &lt;STRONG&gt;italicized&lt;/STRONG&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;
&lt;H2&gt;&lt;A NAME=&quot;description (mostly verbatim from the pod)&quot;&gt;DESCRIPTION (mostly verbatim from the pod)&lt;/A&gt;&lt;/H2&gt;
&lt;P&gt;HTML::TokeParser - Alternative HTML::Parser interface&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;# What's an n worth to ya -- why couldn't he just call it TokenParser?
  # Maybe he's a hesher, who knows?&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;The HTML::TokeParser is an alternative interface to the HTML::Parser class.
It basically turns the HTML::Parser inside out. You associate a file
(or any IO::Handle object or string) with the parser at construction time
and then repeatedly call $parser-&amp;gt;get_token to obtain the tags and text
found in the parsed document. No need to make a subclass to make the parser
do anything.&lt;/P&gt;
&lt;P&gt;Calling the methods defined by the HTML::Parser base class will be confusing,
so don't do that. Use the following methods instead:&lt;/P&gt;
&lt;P&gt;
&lt;H2&gt;&lt;A NAME=&quot;functions&quot;&gt;FUNCTIONS&lt;/A&gt;&lt;/H2&gt;
&lt;DL&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_new&quot;&gt;&lt;TT&gt;$p=HTML::TokeParser-&amp;gt;new($filename || FILEHANDLE ||\$filecontents);&lt;/TT&gt;&lt;/A&gt;&lt;/STRONG&gt;&lt;BR&gt;
&lt;DD&gt;
The object constructor argument is either a file name, a file handle object,
or the complete document to be parsed. 
If the argument is a plain scalar, then it is taken as the name of a file to
be opened and parsed. If the file can't be opened for reading, then the
constructor will return an undefined value and $! will tell you why it failed.
&lt;P&gt;If the argument is a reference to a plain scalar, then this scalar is taken
to be the literal document to parse. The value of this scalar should not be
changed before all tokens have been extracted.&lt;/P&gt;
&lt;P&gt;Otherwise the argument is taken to be some object that the HTML::TokeParser
can &lt;TT&gt;read()&lt;/TT&gt; from when it needs more data. Typically it will be a file handle
of some kind. The stream will be &lt;TT&gt;read()&lt;/TT&gt; until EOF, but not closed.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_get_token&quot;&gt;&lt;TT&gt;$p-&amp;gt;get_token&lt;/TT&gt;&lt;/A&gt;&lt;/STRONG&gt;&lt;BR&gt;
&lt;DD&gt;
This method will return the next token found in the HTML document, or undef at
the end of the document. The token is returned as an array reference. The first
element of the array will be a (mostly) single character string denoting the
type of this token: ``S'' for start tag, ``E'' for end tag, ``T'' for text,
``C'' for comment, ``D'' for declaration, and ``PI'' for process instructions.
The rest of the array is the same as the arguments passed to the corresponding
HTML::Parser v2 compatible callbacks (see the HTML::Parser manpage).
In summary, returned tokens look like this:
&lt;PRE&gt;
  &amp;#91;&amp;quot;S&amp;quot;,  $tag, $attr, $attrseq, $text&amp;#93;
  &amp;#91;&amp;quot;E&amp;quot;,  $tag, $text&amp;#93;
  &amp;#91;&amp;quot;T&amp;quot;,  $text, $is_data&amp;#93;
  &amp;#91;&amp;quot;C&amp;quot;,  $text&amp;#93;
  &amp;#91;&amp;quot;D&amp;quot;,  $text&amp;#93;
  &amp;#91;&amp;quot;PI&amp;quot;, $token0, $text&amp;#93;&lt;/PRE&gt;
&lt;P&gt;Where $attr is a hash reference, $attrseq is an array reference and the rest is plain scalars.&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;# $text contains the ``raw'' html, and in the case of text, is actual text;-)``&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;# $is_data is a ``boolean'' and corresponds to $is_cdata in &amp;#91;HTML::Parser&amp;#93;
and if it is set to ``false'', it means that $text contains encoded entities
(see &amp;#91;HTML::Entities&amp;#93;)&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;# If you're not clear on what a token is, a token is any html tag
(including declaration comment or otherwise), and all stuff in between tags.&lt;/EM&gt;
&lt;EM&gt;Basically, anything (which is a type of text - ascii/ansi/unicode...) that
is somehow grouped or separated by any kind of html tag, is a token, including
the tags themselves.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_unget_token&quot;&gt;&lt;TT&gt;$p-&amp;gt;unget_token($token,...)&lt;/TT&gt;&lt;/A&gt;&lt;/STRONG&gt;&lt;BR&gt;
&lt;DD&gt;
If you find out you have read too many tokens you can push them back, so that
they are returned the next time $p-&amp;gt;get_token is called.
&lt;P&gt;&lt;EM&gt;# Basically, HTML::TokeParser keeps an internal ``cursor'' of where in the&lt;/EM&gt;&amp;nbsp;
&lt;EM&gt;file it is, and you can use this method to back up.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;# Recomended usage: ``as a last resort'', because there's easier ways to
parse HTML without the need to ``seek'' through the file&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_get_tag&quot;&gt;&lt;TT&gt;$p-&amp;gt;get_tag(&amp;#91;$tag, ...&amp;#93;)&lt;/TT&gt;&lt;/A&gt;&lt;/STRONG&gt;&lt;BR&gt;
&lt;DD&gt;
This method returns the next start or end tag (skipping any other tokens), or
undef if there are no more tags in the document. If one or more arguments are
given, then we skip tokens until one of the specified tag types is found. For
example:
&lt;PRE&gt;
   $p-&amp;gt;get_tag(&amp;quot;font&amp;quot;, &amp;quot;/font&amp;quot;);&lt;/PRE&gt;
&lt;P&gt;will find the &lt;STRONG&gt;next&lt;/STRONG&gt; start or end tag for a font-element.&lt;/P&gt;
&lt;P&gt;The tag information is returned as an array reference in the same form as for
$p-&amp;gt;get_token above, but the type code (first element) is missing. A start tag
will be returned like this:&lt;/P&gt;
&lt;PRE&gt;
  &amp;#91;$tag, $attr, $attrseq, $text&amp;#93;&lt;/PRE&gt;
&lt;P&gt;The tagname of end tags are prefixed with ``/'', i.e. end tag is returned
like this:&lt;/P&gt;
&lt;PRE&gt;
  &amp;#91;&amp;quot;/$tag&amp;quot;, $text&amp;#93;&lt;/PRE&gt;
&lt;P&gt;&lt;EM&gt;# Use with *caution* as this is a dangerous method, one that could
force you to use unget_token($token,...), as mentioned above&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;#Reccomended usage: if you wanted to start grabbing stuff only after you encounter
BODY (or some other tag)&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_get_text&quot;&gt;&lt;TT&gt;$p-&amp;gt;get_text(&amp;#91;$endtag&amp;#93;)&lt;/TT&gt;&lt;/A&gt;&lt;/STRONG&gt;&lt;BR&gt;
&lt;DD&gt;
This method returns all text found at the current position. It will return a
zero length string if the next token is not text. The optional $endtag argument
specifies that any text occurring before the given tag is to be returned. Any
entities will be converted to their corresponding character.
&lt;P&gt;The $p-&amp;gt;{textify} attribute is a hash that defines how certain tags can be
treated as text. If the name of a start tag matches a key in this hash then
this tag is converted to text. The hash value is used to specify which tag
attribute to obtain the text from. If this tag attribute is missing, then the
upper case name of the tag enclosed in brackets is returned, e.g. ``&amp;#91;IMG&amp;#93;''.
The hash value can also be a subroutine reference. In this case the routine
is called with the start tag token content as its argument and the return
value is treated as the text.&lt;/P&gt;
&lt;P&gt;The default $p-&amp;gt;{textify} value is:&lt;/P&gt;
&lt;PRE&gt;
  {img =&amp;gt; &amp;quot;alt&amp;quot;, applet =&amp;gt; &amp;quot;alt&amp;quot;}&lt;/PRE&gt;
&lt;P&gt;This means that &lt;TT&gt;&amp;lt;IMG&lt;/TT&gt;&amp;gt; and &lt;TT&gt;&amp;lt;APPLET&lt;/TT&gt;&amp;gt; tags are treated as text, and
that the text to substitute can be found in the ALT attribute.&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;# don't use the $p-&amp;gt;{textify} ``technique'', as it is just a bad idea,
except in extremely rare cases&lt;/EM&gt;
&lt;EM&gt;# however, if you do use something like:&lt;/EM&gt;&lt;/P&gt;
&lt;PRE&gt;
 $p-&amp;gt;{textify}= {img =&amp;gt; \&amp;amp;ttextify }&lt;/PRE&gt;
&lt;P&gt;&lt;EM&gt;# note that ttextify will receive an actuall array (pass by value),
as opposed to an arrayref&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;DT&gt;&lt;STRONG&gt;&lt;A NAME=&quot;item_get_trimmed_text&quot;&gt;&lt;TT&gt;$p-&amp;gt;get_trimmed_text(&amp;#91;$endtag&amp;#93;)&lt;/TT&gt;&lt;/A&gt;&lt;/STRONG&gt;&lt;BR&gt;
&lt;DD&gt;
Same as $p-&amp;gt;get_text above, but will collapse any sequences of white space to
a single space character. Leading and trailing white space is removed.
&lt;P&gt;&lt;EM&gt;#useful when you got a bunch of text, separated by nonsensical whitespace (like in our third trigger)&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/DL&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;triggers (there are only two)&quot;&gt;TRIGGERS (there are only two)&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;The first trigger looks like:&lt;/P&gt;
&lt;PRE&gt;
 &amp;lt;a href=&amp;quot;/search?dist=cyrillic-2.08&amp;quot;&amp;gt;cyrillic-2.08&amp;lt;/a&amp;gt;&lt;/PRE&gt;
&lt;P&gt;We're looking for a ``S''tarting tag, that is called ``a'', and whose,
href attribute begins with /search?dist=&lt;/P&gt;
&lt;P&gt;The third trigger (:&#8364;:) looks like:&lt;/P&gt;
&lt;PRE&gt;
 &amp;lt;tr&amp;gt;&amp;lt;td colspan=2&amp;gt;
115 distributions have been uploaded
 since 15th July 2001 
&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/PRE&gt;
&lt;P&gt;We're looking for a ``S''tart tag, that is called ``td'', which has a
``colspan'' attribute whose value is ``2''&lt;/P&gt;
&lt;P&gt;The catch phrase is distributions have been uploaded&lt;/P&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;linebyline code explanation&quot;&gt;LINE-by-LINE CODE EXPLANATION&lt;/A&gt;&lt;/H1&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 1-5:&lt;/TT&gt;&lt;/STRONG&gt; self explanatory (see [perlman] if you don't understand)&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 6-8:&lt;/TT&gt;&lt;/STRONG&gt; unbuffer output (autoflush)&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 9:&lt;/TT&gt;&lt;/STRONG&gt; $cpanurl is the url of the recently added CPAN modules&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 11-13:&lt;/TT&gt;&lt;/STRONG&gt; Declare the array that will contain the latest 20 modules.
  Initialize the scalar that will contain the number of modules
that were added, along with the date.  Attempt to ``download'' the page,
and load it's contents into $rawHTML using &lt;TT&gt;LWP::Simple::get&lt;/TT&gt;.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 15:&lt;/TT&gt;&lt;/STRONG&gt; check to make sure &lt;TT&gt;get($cpanurl)&lt;/TT&gt; returned something.
We don't wanna create an entire HTML::TokeParser object, if we have
no data to feed it.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 18:&lt;/TT&gt;&lt;/STRONG&gt; create a new HTML::TokeParser object (&lt;TT&gt;$tp&lt;/TT&gt;).
The die statement is left-over, from when I passed it a filename,
but it doesn't hurt much, and something can always go wrong.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;---Lines 22-77:START&lt;/TT&gt;&lt;/STRONG&gt; like &lt;STRONG&gt;&lt;TT&gt;Line 21&lt;/TT&gt;&lt;/STRONG&gt; says, a generic HTML::TokeParser loop;&#186;)&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 25:&lt;/TT&gt;&lt;/STRONG&gt; dereference &lt;TT&gt;$token&lt;/TT&gt;, &lt;TT&gt;shift&lt;/TT&gt; the first value (tag type),
save it to &lt;TT&gt;$ttype&lt;/TT&gt;.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 27:&lt;/TT&gt;&lt;/STRONG&gt; check to see if we have a start tag (as if you couldn't tell)&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 29:&lt;/TT&gt;&lt;/STRONG&gt; since it was a start tag, &lt;TT&gt;$token&lt;/TT&gt; is supposed to have 4 more
values for us (which for clarity, we've named &lt;TT&gt;$tag, $attr, $attrseq, $rawtxt&lt;/TT&gt;)&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 31:&lt;/TT&gt;&lt;/STRONG&gt; check to see if we have an &lt;TT&gt;anchor(link)&lt;/TT&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 32-36:&lt;/TT&gt;&lt;/STRONG&gt; since we have an anchor, fetch the value of href, as well as
the text in between the opening and closing anchor tag.  Since there can be other tokens in between
(&lt;EM&gt;ex:&lt;/EM&gt; &lt;TT&gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt; ... &amp;lt;B&amp;gt;...&amp;lt;/a&amp;gt;&lt;/TT&gt;),
even though this particular page won't have any, we use the explicit
&lt;A HREF=&quot;#item_get_trimmed_text&quot;&gt;&lt;TT&gt;$tp-&amp;gt;get_trimmed_text(&amp;quot;/a&amp;quot;);&lt;/TT&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 40-42:&lt;/TT&gt;&lt;/STRONG&gt; push onto &lt;TT&gt;@newest20&lt;/TT&gt; an array reference, containing the
value of the href attribute of our anchor, as well as the text enclosed by
the anchor, but only if the href attribute contains our first trigger
(&lt;TT&gt;/search?dist=&lt;/TT&gt;)&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 44:&lt;/TT&gt;&lt;/STRONG&gt; Since our &lt;TT&gt;$tag&lt;/TT&gt; was not an anchor, we test to see if it
is a ``td'' with a colspan of 2 (our third trigger).&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 48:&lt;/TT&gt;&lt;/STRONG&gt; Since we do have  $tag that fits the general description,
we go ahead and get the trimmed text up until the next token.
(Comments follow, of the same importance as those on &lt;STRONG&gt;&lt;TT&gt;Lines 32-36&lt;/TT&gt;&lt;/STRONG&gt;)&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 58-59:&lt;/TT&gt;&lt;/STRONG&gt; if the trimmed text (&lt;TT&gt;$p_text&lt;/TT&gt;) contains the catch phrase
from our third trigger, se assign it to &lt;TT&gt;$lastupdated&lt;/TT&gt;, thus completing
half of our task.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 61-73:&lt;/TT&gt;&lt;/STRONG&gt; if it's not a start tag, check to see if it's any
other tag we recognize, and do nothing with that information, since
for this particular program, we don't need to.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 75:&lt;/TT&gt;&lt;/STRONG&gt; break out of the while loop, if we got our latest 20 modules.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;---Lines 22-77:END&lt;/TT&gt;&lt;/STRONG&gt; the end of the generic HTML::TokeParser loop.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 79-80:&lt;/TT&gt;&lt;/STRONG&gt; at this point we don't need $rawHTML or $tp anymore,
and since they're not going out of scope till the end of the program,
we explicitly undef.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 82:&lt;/TT&gt;&lt;/STRONG&gt; output the number of distributions that have been uploaded,
but only if we were able to extract that information
($lastupdated contains something).&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Lines 84-91:&lt;/TT&gt;&lt;/STRONG&gt; loop through &lt;TT&gt;@newest20&lt;/TT&gt; perl style, and output html
anchors to the modules.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;TT&gt;Line 93-94:&lt;/TT&gt;&lt;/STRONG&gt; It never hurts to be explicit(end of the program).&lt;/P&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;line numbered code listing&quot;&gt;LINE NUMBERED CODE LISTING&lt;/A&gt;&lt;/H1&gt;
&lt;PRE&gt;
   1: #!/usr/bin/perl -w
   2: 
   3: use     strict          ;    # fun with whitespace
   4: use     LWP::Simple;         # what's that? {provides get($url), just `perldoc`}
   5: require HTML::TokeParser;    # Why? because
   6: 
   7: $|=1;                        # un buffer
   8: 
   9: my $cpanurl = '&lt;A HREF=&quot;http://search.cpan.org/recent&quot;&gt;http://search.cpan.org/recent&lt;/A&gt;';
  10: 
  11: my @newest20;                # the top 20 
  12: my $lastupdated = '';        # $n distributions have been uploaded since $date
  13: my $rawHTML = get($cpanurl); # attempt to d/l the page to mem
  14: 
  15: die &amp;quot;LWP::Simple messed up $!&amp;quot; unless ($rawHTML);
  16:                              # Habit.  if it's empty, TokeParser would notice
  17: 
  18: my $tp = HTML::TokeParser-&amp;gt;new(\$rawHTML) || die &amp;quot;Can't open: $!&amp;quot;;
  19: 
  20: 
  21: # And now -- a generic HTML::TokeParser loop
  22: 
  23: while (my $token = $tp-&amp;gt;get_token)
  24: {
  25:     my $ttype = shift @{ $token };
  26: 
  27:     if($ttype eq &amp;quot;S&amp;quot;)    # start tag?
  28:     {
  29:         my($tag, $attr, $attrseq, $rawtxt) = @{ $token };
  30: 
  31:         if($tag eq &amp;quot;a&amp;quot;)
  32:         {
  33:             my $a_href = $attr-&amp;gt;{'href'};
  34:             my $a_encl = $tp-&amp;gt;get_trimmed_text(&amp;quot;/$tag&amp;quot;);
  35: 
  36: # be sure you understand what get_trimmed_text or get_text are doing
  37: # calling either (as well as get_tag) can drastically change
  38: # the curser position
  39: # in general calling the no argument version, is preferable here
  40: 
  41:             push ( @newest20 , &amp;#91; $a_href, $a_encl &amp;#93; )
  42:             if( $a_href =~ /\/search\?dist\=/ );
  43:         }
  44:         elsif( ($tag eq &amp;quot;td&amp;quot;) and ($rawtxt =~ /colspan=2/m) )
  45:         {
  46:           # as opposed to checking the hash like exists $attr-&amp;gt;{colspan}
  47: 
  48:             my $p_text = $tp-&amp;gt;get_trimmed_text;  # p for potential
  49: 
  50: # fetches the &amp;quot;trimmed&amp;quot; up until the next &amp;quot;token&amp;quot;
  51: # passing /td to get_trimmed_text is not advisable, because
  52: # TokeParser would slurp all the text until the next closing /td
  53: # which would in effect cause us to skip halfway down the file
  54: # missing our target links (and pretty much all of them)
  55: # we could always call unget_token, but this is hard.
  56: # like swimming up river (but not as enojoyable)
  57: 
  58:             $lastupdated = $p_text
  59:             if($p_text =~ /distributions have been uploaded/m);
  60:         }
  61:     } # since we know what we're looking for, no need for the rest of these
  62:     elsif($ttype eq &amp;quot;T&amp;quot;) # text?
  63:     {
  64:     }
  65:     elsif($ttype eq &amp;quot;C&amp;quot;) # comment?
  66:     {
  67:     }
  68:     elsif($ttype eq &amp;quot;E&amp;quot;) # end tag?
  69:     {
  70:     }
  71:     elsif($ttype eq &amp;quot;D&amp;quot;) # declaration?
  72:     {
  73:     }
  74: 
  75:     last if(scalar @newest20 == 20); # we disappear once we get 20
  76: 
  77: } # endof while (my $token = $p-&amp;gt;get_token)
  78: 
  79: undef $rawHTML; # no more raw html
  80: undef $tp;      # destroy the HTML::TokeParser object (don't need it no more)
  81: 
  82: print &amp;quot;&amp;lt;H5&amp;gt; $lastupdated &amp;lt;/H5&amp;gt;\n&amp;quot; if($lastupdated); # just in case we miss it
  83: 
  84: for my $arayref (@newest20)
  85: {
  86:     print &amp;quot;&amp;lt;A HREF='&lt;A HREF=&quot;http://search.cpan.org&amp;quot&quot;&gt;http://search.cpan.org&amp;quot&lt;/A&gt;;,
  87:           $arayref-&amp;gt;&amp;#91;0&amp;#93;,     # the link straingt from href
  88:           &amp;quot;'&amp;gt;&amp;quot;,
  89:           $arayref-&amp;gt;&amp;#91;1&amp;#93;,     # the link text
  90:           &amp;quot;&amp;lt;/A&amp;gt;&amp;lt;BR&amp;gt;\n&amp;quot;;
  91: }
  92: 
  93: exit;
  94: __END__&lt;/PRE&gt;
&lt;P&gt;
&lt;HR&gt;
&lt;H1&gt;&lt;A NAME=&quot;song in a minor&quot;&gt;Song in A minor&lt;/A&gt;&lt;/H1&gt;
&lt;PRE&gt;
    AM came from out the maze
    Hitch-hiked on a 56k
    Scratched his head, then tickled his 'board
    Scratched his ass, and then was bored
    He said, hey baby, PLEASE! do my work for me
    She said, no way baby, i'm not that lonely&lt;/PRE&gt;
&lt;PRE&gt;
    And the perled monks go: doo doo doo..&lt;/PRE&gt;
&lt;PRE&gt;
    Crazy came from planet x
    Saw some [tye|monk] showin' his pecks
    Scratched his head, then pounded his 'board
    Checked politely, consider this node
    He said, hey troll, take a walk on to /dev/null
    Troll said, what, hey i'm not dumb&lt;/PRE&gt;
&lt;PRE&gt;
    And the pereld monks go: dasright R TT FF MM.&lt;/PRE&gt;
</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>99254</node_id>
  <author_user>10277</author_user>
  <title>HTML::TokeParser Tutorial</title>
  <createtime>2001-07-24 07:16:44</createtime>
  <nodeupdated>2005-08-14 11:51:52</nodeupdated>
</node>
