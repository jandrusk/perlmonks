<node>
  <doctext>&lt;h2&gt;Referenzen&lt;/h2&gt;
A translation of this can be found [id://137108|here].&lt;p&gt;
&lt;small&gt;(ASCII Grafik in Anlehnung an &lt;a href=http://web.archive.org/web/20031011161713/http://www.effectiveperl.com/pegs/&gt;PEGS&lt;/a&gt; (PErl Graphical Structures) von Joseph Hall)&lt;/small&gt;
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Was ist eine Referenz?&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Es gibt zwei Arten von Referenzen: 'harte' und 'weiche'. Die 'weichen' werden auch 'symbolische' genannt und werden hier nicht weiter behandelt.&lt;br&gt;
&lt;br&gt;
Eine Referenz ist eine Art Zeiger auf einen Wert:
&lt;code&gt;
+-----------+      +-----------+
|     O-----+-----&gt;|   12345   |
+-----------+      +-----------+
&lt;/code&gt;
&lt;br&gt;
Referenzen werden oft in Variablen gespeichert:
&lt;code&gt;
+----------\       +----------\
|     a     &gt;      |     b     &gt;
+----------/       +----------/
      |                  |
+-----------+      +-----------+
|     O-----+-----&gt;|   12345   |
+-----------+      +-----------+
&lt;/code&gt;
&lt;br&gt;
Die Variable $a enth&amp;auml;lt eine Referenz, die auf den Wert der Variablen $b zeigt.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Referenzen k&amp;ouml;nnen nicht nur auf Werte verweisen, sondern auch auf Arrays und Hashes. Hier ein paar Beispiele:&lt;code&gt;
+----------\
|     b     &gt;      +----------\
+----------/       |     a     &gt;
      |            +----------/
+-----------+            |
|     O-----+-----&gt;+###########+
+-----------+      +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
                   |    Foo    |
+----------\       +-----------+
|     c     &gt;      |    Bar    |
+----------/       +-----------+
      |            |    Baz    |
+-----------+      +-----------+
|     O-----+-----&gt;|    Qux    |
+-----------+      +-----------+
&lt;/code&gt;
&lt;br&gt;
Referenz $b verweist auf Array @a, Referenz $c verweist auf das vierte Element von @a, $a&amp;#091;3&amp;#093;.&lt;br&gt;
&lt;br&gt;
Auf diese Weise lassen sich beliebig komplexe Datenstrukturen aufbauen:
&lt;code&gt;
+----------\
|     a     &gt;                      +--&gt;+###########+
+----------/                       |   +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
      |                            |   |    Foo    |
+-----------+                      |   +-----------+
|     O-----+-----&gt;+###########+   |   |    Bar    |
+-----------+      +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+   |   +-----------+
                   |     O-----+---+
                   +-----------+
                   |     O-----+------&gt;+###########+
                   +-----------+       +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
                   |     O-----+---+   |    Baz    |
                   +-----------+   |   +-----------+
                                   |   |    Qux    |
                                   |   +-----------+
                                   |
                                   |
                                   +--&gt;+###########+
                                       +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
                                       |    Baz    |
                                       +-----------+

&lt;/code&gt;
Eine Referenz auf eine Liste, die Referenzen auf Listen enth&amp;auml;lt.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;code&gt;
+----------\
|     a     &gt;                 +--&gt;+###########+
+----------/                  |   +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
      |                       |   |    Foo    |
+#########################+   |   +-----------+
+&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+   |   |    Bar    |
+-----------\ +-----------+   |   +-----------+
|    aaa     &gt;|     O-----+---+
+-----------&lt; +-----------+
|    bbb     &gt;|     O-----+------&gt;+###########+
+-----------&lt; +-----------+       +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
|    ccc     &gt;|     O-----+---+   |    Baz    |
+-----------/ +-----------+   |   +-----------+
                              |   |    Qux    |
                              |   +-----------+
                              |
                              |
                              +--&gt;+###########+
                                  +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
                                  |    Baz    |
                                  +-----------+

&lt;/code&gt;
Ein Hash, das Referenzen auf Listen enth&amp;auml;lt.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Wie erzeugt man Referenzen?&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Der Backslash Operator \ erzeugt eine Referenz auf einen bestimmten Wert:&lt;br&gt;
&lt;br&gt;
                   
&lt;table cellpadding=&quot;2&quot; cellspacing=&quot;2&quot; border=&quot;0&quot;&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;Top&quot;&gt;&lt;tt&gt;$cref = \12345&lt;/tt&gt;&lt;/td&gt;
    &lt;td valign=&quot;Top&quot;&gt;Referenz auf eine Konstante&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;Top&quot;&gt;&lt;tt&gt;$sref = \$s&lt;/tt&gt;&lt;/td&gt;
    &lt;td valign=&quot;Top&quot;&gt;Referenz auf den Wert von $s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;Top&quot;&gt;&lt;tt&gt;$aref = \@a&lt;/tt&gt;&lt;/td&gt;
    &lt;td valign=&quot;Top&quot;&gt;Referenz auf das Array @a&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;Top&quot;&gt;&lt;tt&gt;$href = \%h&lt;/tt&gt;&lt;/td&gt;
    &lt;td valign=&quot;Top&quot;&gt;Referenz auf das Hash %h&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;Top&quot;&gt;&lt;tt&gt;$fref = \&amp;amp;f&lt;/tt&gt;&lt;/td&gt;
    &lt;td valign=&quot;Top&quot;&gt;Referenz auf die Subroutine &amp;amp;f&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;br&gt;
Eine Referenz auf ein anonymes Array wird wie folgt erzeugt:  
&lt;code&gt;
        $aref = [123, 456, 789];
&lt;/code&gt;

Eine Referenz auf ein anonymes Hash:
&lt;code&gt;
        $href = {NAME =&gt; 'Bernd', EMAIL =&gt; 'bdulfer@sybase.com'};
&lt;/code&gt;

Eine Referenz auf eine Anonyme Subroutine:
&lt;code&gt;
        $fref = sub { print &quot;AnonSub\n&quot; };
&lt;/code&gt;
&lt;br&gt;
&lt;b&gt;Wof&amp;uuml;r braucht man Referenzen?&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Fall 1, Parameter&amp;uuml;bergabe an Subroutines:&lt;br&gt;
Wenn mehrere Arrays an eine Subroutine &amp;uuml;bergeben werden, erzeugt 
   Perl  aus den Inhalten &lt;b&gt;eine&lt;/b&gt; Liste, erreichbar &amp;uuml;ber @_. In der
   Subroutine  besteht keine M&amp;ouml;glichkeit festzustellen welche Listenelemente 
   aus welchem  Array stammen. Wenn diese Informationen ben&amp;ouml;tigt werden, 
   kann man Referenzen auf die Arrays &amp;uuml;bergeben. Die Referenzen k&amp;ouml;nnen 
   dann &amp;uuml;ber @_ zu Arrays aufgel&amp;ouml;st werden, die Werte k&amp;ouml;nnen 
   wieder eindeutig zugeordnet werden.&lt;br&gt;
Au&amp;szlig;erdem werden wesentlich weniger Daten an die Subroutine 
   &amp;uuml;bergeben, was die Ausf&amp;uuml;hrung des Programmes beschleunigt.&lt;p&gt;
(sinnloses :-) Beispiel:
&lt;br&gt;
&lt;code&gt;
use Data::Dumper;

sub make_hash_from_arrays {
  my ($aref1, $aref2) = @_;
  
  my %hash;

  $hash{$_} = shift @$aref2 foreach (@$aref1);

  print Dumper(\%hash);
}

my @a = ('a', 'b', 'c', 'd');
my @b = (1, 2, 3, 4);

make_hash_from_arrays(\@a, \@b);
&lt;/code&gt;
Die Bedeutung von @$ wird weiter unten erkl&amp;auml;rt.&lt;p&gt;
 
Fall 2, komplexe Datenstrukturen:&lt;br&gt;
Ein Adressbuch soll in einer Datenstruktur abgebildet werden.&lt;br&gt;
   Ohne Referenzen g&amp;auml;be es folgende M&amp;ouml;glichkeiten:&lt;br&gt;&lt;br&gt;

1. Eine Adresse wird mit Trennzeichen in ein Hashelement geschrieben. Um auf einzelne Daten zuzugreifen, wird &lt;code&gt;split&lt;/code&gt; verwendet:
&lt;code&gt;
    $adresse{Bernd} = 'Bernd Dulfer|Kapellenstr. 1|bdulfer@sybase.com';
    $email = (split(/\|/, $adresse{bernd}))[2];
&lt;/code&gt;

2. Die Adresse wird auf mehrere Hashes verteilt. Um eine Adresse zu drucken, werden einzelne Elemente aus verschiedenen Hashes ben&amp;ouml;tigt:
&lt;code&gt;
    $name{Bernd}  = 'Bernd Dulfer';
    $str{Bernd}   = 'Kapellenstr. 1';
    $email{Bernd} = 'bdulfer@sybase.com';

    print_adresse($name{Bernd}, $str{Bernd});
&lt;/code&gt;
&lt;br&gt;
Beides ist unelegant und unhandlich, die L&amp;ouml;sung mit Referenzen:&lt;br&gt;
Ein Hash, das Referenzen auf die Adressen enth&amp;auml;lt; jede Adresse ist wiederum in einem Hash gespeichert.
&lt;code&gt;
+----------\
| adresse   &gt;           
+----------/             
      |
+#######################+
+&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+ 
+-----------\ +---------+  
|   Bernd    &gt;|    O----+-----&gt;+##################################+
+-----------/ +---------+      +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+ 
                               +-----------\ +--------------------+ 
                               |   Name     &gt;|  Bernd Dulfer      |

                               +-----------&lt; +--------------------+
                               |   Str      &gt;|  Kapellenstr. 1    |
                               +-----------&lt; +--------------------+ 
                               |   EMail    &gt;|  bdulfer@sybase.com|
                               +-----------/ +--------------------+ 


$adresse{Bernd} = {
                      Name    =&gt;  'Bernd Dulfer',
                      Str     =&gt;  'Kapellenstr. 1',
                      EMail   =&gt;  'bdulfer@sybase.com'
                  };

$email = $adresse{Bernd}-&gt;{EMail};
print_adresse($adresse{Bernd});
&lt;/code&gt;
Wenn zus&amp;auml;tzlich zur Adresse auch noch eine Liste mit z.B.
ausgeliehenen B&amp;uuml;chern gespeichert werden soll, ist dies ohne Referenzen
kaum noch zu handhaben. Mit Referenzen sieht es folgenderma&amp;szlig;en
aus:
&lt;code&gt;
+----------\
| adresse   &gt;
+----------/
      |
+##########+
+&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
+----\ +---+
|Bernd&gt;| O-+-&gt;+###########################+
+----/ +---+  +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
              +------\ +------------------+
              |Name   &gt;|Bernd Dulfer      |
              +------&lt; +------------------+
              |Str    &gt;|Kapellenstr. 1    |
              +------&lt; +------------------+
              |EMail  &gt;|bdulfer@sybase.com|
              +------&lt; +------------------+
              |Buecher&gt;|        O---------+-&gt;+#####################+
              +------/ +------------------+  +&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;+
                                             |Der Herr der Ringe   |
                                             +---------------------+
                                             |Per Anhalter durch...|
                                             +---------------------+
                                             |Die Farben der Magie |
                                             +---------------------+



$adresse{Bernd} = {
                      Name    =&gt;  'Bernd Dulfer',
                      Str     =&gt;  'Kapellenstr. 1',
                      EMail   =&gt;  'bdulfer@sybase.com',
                      Buecher =&gt;  [
                                   'Der Herr der Ringe',
                                   'Per Anhalter durch die Galaxie',
                                   'Die Farben der Magie'
                                  ]
                  };
&lt;/code&gt;
&lt;br&gt;
&lt;b&gt;Wie nutze ich Referenzen und Datenstrukturen?&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Referenzen werden aufgel&amp;ouml;st durch Verwendung des Sigils ($%@&amp;amp;) des Wertes und { }.&lt;br&gt;
Ist die Referenz in einer skalaren Variablen gespeichert, k&amp;ouml;nnen die geschweiften Klammern weggelassen werden.&lt;br&gt;
Beispiele:&lt;br&gt;
&lt;br&gt;
Eine Referenz auf einen skalaren Wert:
&lt;code&gt;
    $s   = 'qwertz';
    $sref = \$s;
    print ${$sref}, &quot;\n&quot;;
    print $$sref, &quot;\n&quot;;
&lt;/code&gt;
Gibt :&lt;br&gt;
&lt;code&gt;
qwertz
qwertz
&lt;/code&gt;
aus.&lt;br&gt;
&lt;br&gt;
Eine Referenz auf ein Array:
&lt;code&gt;
    $, = ':';
    @a    = (123, 456, 789);
    $aref = \@a;
    print @{$aref}, &quot;\n&quot;;
    print @$aref, &quot;\n&quot;;
&lt;/code&gt;
Gibt:
&lt;code&gt;
123:456:789
123:456:789
&lt;/code&gt;
aus.&lt;br&gt;
&lt;br&gt;
Auf einzelne Elemente wird mit
&lt;code&gt;
    ${$aref}[1]
oder
    $$aref[1]
&lt;/code&gt;
zugegriffen.&lt;br&gt;
&lt;br&gt;
Sind die Referenzen in einem Array oder Hash gespeichert, kommt der 'Dereferenzierer' &lt;tt&gt;-&amp;gt;&lt;/tt&gt; ins Spiel:
&lt;code&gt;
    $adresse{Bernd} = {
                       Name    =&gt; 'Bernd Dulfer',
                       Str     =&gt; 'Kapellenstr. 1',
                       EMail   =&gt; 'bdulfer@sybase.com',
                       Buecher =&gt; [
                                   'Der Herr der Ringe',
                                   'Per Anhalter durch die Galaxie',
                                   'Die Farben der Magie'
                                  ]
                      };
    print 'Name: ', $adresse{Bernd}-&gt;{Name}, &quot;\n&quot;;
&lt;/code&gt;
Gibt
&lt;code&gt;
Name: Bernd Dulfer
&lt;/code&gt;
aus.&lt;br&gt;
&lt;br&gt;
Auf dieselbe Weise werden Zuweisungen vorgenommen:
&lt;code&gt;
    $adresse{Bernd}-&gt;{Buecher}-&gt;[3] = 'Goedel, Escher, Bach - Ein endlos geflochtenes Band';
&lt;/code&gt;
Die Referenz in $adresse{Bernd} wird aufgel&amp;ouml;st und liefert ein Hash.
Aus diesem Hash wird das Element mit dem Schl&amp;uuml;ssel 'Bernd' genutzt, dessen Wert eine Referenz ist. 
Diese wiederum wird auch aufgel&amp;ouml;st und liefert eine Liste, deren viertes Element einen neuen Wert zugewiesen bekommt.&lt;p&gt;
&lt;br&gt;
Soll etwas dereferenziertes nicht als Skalar sondern z.B. als Array genutzt werden, mu&amp;szlig; es mit Sigil und { } dereferenziert werden:
&lt;code&gt;
    push @{$adresse{Bernd}-&gt;{Buecher}}, 'Die Eissegler von Tran-ky-ky';
&lt;/code&gt;
&lt;tt&gt;$adresse{Bernd}&lt;/tt&gt; enth&amp;auml;lt eine Referenz auf ein anonymes Hash, auf das man mittels &lt;tt&gt;-&amp;gt;&lt;/tt&gt; zugreifen kann.&lt;br&gt;
&lt;tt&gt;$adresse{Bernd}-&amp;gt;{Buecher}&lt;/tt&gt; enth&amp;auml;lt eine Referenz auf ein anonymes Array. &lt;br&gt;
Um das Array zu nutzen, mu&amp;szlig; mit &lt;tt&gt;@{ }&lt;/tt&gt; dereferenziert werden.&lt;br&gt;
&lt;br&gt;
Das ging jetzt ziemlich schnell, deshalb noch ein paar Beispiele:&lt;p&gt;
Zur Adresse soll eine Liste von Autoren und deren B&amp;uuml;chern zugef&amp;uuml;gt werden.&lt;br&gt;
Die Autoren werden in einem Hash gespeichert. Die Schl&amp;uuml;ssel sind die Namen der Autoren, die Werte sind Referenzen auf Listen mit Buchtiteln.
Will man das Hash der Autoren separat aufbauen, ergibt sich:
&lt;code&gt;
%autoren = (
            Tolkien   =&gt; [
                          'Das Silmarillion',
                          'Nachrichten aus Mittelerde'
                         ],
            Pratchett =&gt; [;
                          'Wachen, Wachen!',
                          'T&#195;&#182;nerne F&#195;&#188;&#195;&#376;e'
                         ]
           )
&lt;/code&gt;
Eine Referenz auf dieses Hash kann man dann zur Adresse zuf&amp;uuml;gen:
&lt;code&gt;
$adresse{Bernd}-&gt;{Autoren} = \%autoren;
&lt;/code&gt;
Ein neues Buch von Tolkien wird mit:
&lt;code&gt;
push @{$autoren{Tolkien}}, 'Der Kleine Hobbit';
&lt;/code&gt;
an die Liste angef&amp;uuml;gt.&lt;p&gt;

&lt;br&gt;
&lt;b&gt;Wie kann ich mir eine komplexe Datenstruktur ansehen?&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Das Modul Data::Dumper liefert eine Function &lt;tt&gt;Dumper&lt;/tt&gt;. Dieser Funktion &amp;uuml;bergibt man eine Referenz, &lt;tt&gt;Dumper&lt;/tt&gt; erzeugt Perlcode, der die gesamte Struktur wiedergibt:
&lt;code&gt;
    #!/usr/bin/perl

    use strict;
    use warnings;

    use Data::Dumper;

    my %adresse;
    $adresse{Bernd} = {
                       Name    =&gt; 'Bernd Dulfer',
                       Str     =&gt; 'Kapellenstr. 1',
                       EMail   =&gt; 'bdulfer@sybase.com',
                       Buecher =&gt; [
                                   'Der Herr der Ringe',
                                   'Per Anhalter durch die Galaxie',
                                   'Die Farben der Magie'
                                  ]
                      };

    $adresse{Bernd}-&gt;{Buecher}-&gt;[3] = 'G&amp;ouml;del, Escher, Bach - Ein endlos geflochtenes Band';
    push @{$adresse{Bernd}-&gt;{Buecher}}, 'Die Eissegler von Tran-ky-ky';

    $adresse{Bernd}-&gt;{Autoren}-&gt;{Tolkien} = ['Silmarillion', 'Unfinished Tales'];

    print Dumper(\%adresse);
&lt;/code&gt;
Interessant ist hier die Zeile, in mit &lt;tt&gt;&amp;#091;'Silmarillion', 'Unfinished Tales'&amp;#093;&lt;/tt&gt;.&lt;br&gt;
Hier wird 'on the fly' ein neues Element 'Autoren' erzeugt. Dies enth&amp;auml;lt eine Referenz auf ein anonymes Hash mit dem Element 'Tolkien'.&lt;br&gt;
Diesem wiederum wird ein anonymes Array zugewiesen.&lt;br&gt;
&lt;br&gt;
Die Ausgabe des Programmes:
&lt;code&gt;
$VAR1 = {
          'Bernd' =&gt; {
                       'Autoren' =&gt; {
                                      'Tolkien' =&gt; [
                                                     'Silmarillion',
                                                     'Unfinished Tales'
                                                   ]
                                    },
                       'Buecher' =&gt; [
                                      'Der Herr der Ringe',
                                      'Per Anhalter durch die Galaxie',
                                      'Die Farben der Magie',
                                      'G&amp;ouml;del, Escher, Bach - Ein endlos geflochtenes Band',
                                      'Die Eissegler von Tran-ky-ky'
                                    ],
                       'EMail' =&gt; 'bdulfer@sybase.com',
                       'Str' =&gt; 'Kapellenstr. 1',
                       'Name' =&gt; 'Bernd Dulfer'
                     }
        };
&lt;/code&gt;
Eine &amp;auml;hnliche Anzeige erh&amp;auml;lt man auch wenn man den Tk-Debugger verwendet.
&lt;p&gt;
&lt;b&gt;Wie kann ich Daten aus einer Datei in eine komplexe Datenstruktur laden?&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Nehmen wir an, wir haben folgende Datei:
&lt;code&gt;
#K&amp;uuml;rzel  Name          Str              EMail                Buecher
Bernd   |Bernd Dulfer  |Kapellenstr. 1  |bdulfer@sybase.com  |(Der Herr der Ringe|Per Anhalter ...|Die Farben der Magie)
Bilbo   |Bilbo Beutlin |Beutelsend      |                    |(Das Rote Buch des Hobbits)
&lt;/code&gt;
Folgender Code erzeugt aus den Daten den uns bekannten Hash:
&lt;code&gt;
 1:    my %adressen;
 2:
 3:    open ADRESSEN, 'adressen.dat' or die &quot;Konnte Datei adressen.dat nicht &amp;ouml;ffnen: $!\n&quot;;
 4:    while (&lt;ADRESSEN&gt;) {
 5:      next if /^#/;
 6:      my ($kuerzel, $name, $str, $email, $buecher) = split(/\s*\|/, $_, 5);
 7:      $adressen{$kuerzel} = {
 8:                             Name    =&gt; $name,
 9:                             Str     =&gt; $str,
10:                             EMail   =&gt; $email
11:                            };
12:      $buecher =~ tr/()//d;
13:      push @{$adressen{$kuerzel}-&gt;{Buecher}}, split /\|/, $buecher;
14:    }
15:    close ADRESSEN;
&lt;/code&gt;
Zeile  1: Hash %adressen wird deklariert.&lt;br&gt;
Zeile  3: Datei adressen.dat wird zum Lesen ge&amp;ouml;ffnet.&lt;br&gt;
Zeile  4: Die Daten werden Zeile f&amp;uuml;r Zeile gelesen. Jede Zeile wird automatisch in $_ abgelegt.&lt;br&gt;
Zeile  5: Kommentare werden ignoriert.&lt;br&gt;
Zeile  6: Zeile wird in f&amp;uuml;nf St&amp;uuml;cke aufgespalten, diese werden den entsprechenden Variablen zugewiesen.&lt;br&gt;
Zeile  7: Ein anonymes Hash mit den Schl&amp;uuml;sseln Name, Str und EMail wird erzeugt und eine Referenz darauf im Hash %adressen mit dem Schl&amp;uuml;ssel $kuerzel abgelegt.&lt;br&gt;
Zeile 12: Die Klammern werden aus der B&amp;uuml;cherliste entfernt.&lt;br&gt;
Zeile 13: Ein anonymes Array wird erzeugt und eine Referenz darauf im Hash %adressen abgelegt. Die B&amp;uuml;cher werden aufgespalten und in das anonyme Array eingef&amp;uuml;gt.&lt;br&gt;
Zeile 15: Die Datei wird geschlossen.&lt;p&gt;
Dies ist nur ein Beispiel, diverse Dinge wurden hier nicht ber&amp;uuml;cksichtigt, z.B. k&amp;ouml;nnte ein Buchtitel Klammern enthalten usw.
&lt;p&gt;
&lt;b&gt;Wie kann ich durch Arrays und Hashes in Datenstrukturen iterieren?&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Alle B&amp;uuml;cher einer Adresse:
&lt;code&gt;
foreach (@{$adresse{Bernd}-&gt;{Buecher}}) {
  print $_, &quot;\n&quot;;
}
&lt;/code&gt;
Alle Autoren mit deren B&amp;uuml;chern:
&lt;code&gt;
foreach (keys %{$adresse{Bernd}-&gt;{Autoren}}) {
  print $_, &quot;\n&quot;;
  foreach (@{$adresse{Bernd}-&gt;{Autoren}-&gt;{$_}}) {
    print &quot;\t&quot;, $_, &quot;\n&quot;;
  }
}
&lt;/code&gt;
  
&lt;p&gt;
&lt;b&gt;Wof&amp;uuml;r braucht man Referenzen auf Subroutines?&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
Referenzen auf Subroutines braucht man f&amp;uuml;r verschiedene Dinge:&lt;br&gt;
&lt;br&gt;
Callbacks:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; In einem Modul soll eine Subroutine des Programmes ausgef&amp;uuml;hrt werden, ohne da&amp;szlig; das Modul wei&amp;szlig;, wie die Subroutine hei&amp;szlig;t.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; Dem Modul wird eine Referenz auf die Subroutine &amp;uuml;bergeben. So kann diese ausgef&amp;uuml;hrt werden:
&lt;code&gt;
    Package Mod;

    my $callback;

    sub set_callback {
      $callback = shift;
    }

    sub do_something {
      do_this();
      do_that();

      &amp;$callback;

      do_something_else();
    }

    .
    .
    .

    1;

    __END__


    #!/usr/bin/perl

    use strict;
    use warnings;

    use Mod;

    Mod::set_callback(\&amp;print_rubbish);

    Mod::do_something();

    sub print_rubbish (
      print &quot;Rubbish!\n&quot;;
    }
&lt;/code&gt;
Tk Programmierer kennen die Verwendung von Callbacks besonders gut, da Events (Mouse Click, Button, ...) an Callbacks &amp;uuml;bergeben werden.&lt;p&gt;
Dispatch Listen:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Um gr&amp;ouml;&amp;szlig;ere if/elsif/else Konstruktionen zu vermeiden, werden die Code St&amp;uuml;cke in Subroutines gepackt. &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Referenzen auf die Subroutines werden in einem Hash gespeichert, dessen Keys den Bedingungen entsprechen.
&lt;code&gt;
    %dispatch = (
                 insert =&gt; \&amp;insert,
                 update =&gt; \&amp;update,
                 delete =&gt; \&amp;delete
                )

    $dispatch{$token}-&gt;($query);
&lt;/code&gt;
&lt;p&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;b&gt;Update:&lt;/b&gt; changed &amp;lt;pre&gt; to &amp;lt;code&gt;&lt;br&gt;
&lt;b&gt;Update:&lt;/b&gt; Falsche Klammern an zwei Stellen, gefunden von [petral]&lt;br&gt;
&lt;b&gt;Update:&lt;/b&gt; diverse Tippfehler&lt;br&gt;
&lt;b&gt;Update:&lt;/b&gt; Link zu (PEGS) ersetzt&lt;br&gt;</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>127521</node_id>
  <author_user>61798</author_user>
  <title>(lang: de) Referenzen</title>
  <createtime>2001-11-26 10:32:25</createtime>
  <nodeupdated>2005-08-13 02:52:11</nodeupdated>
</node>
