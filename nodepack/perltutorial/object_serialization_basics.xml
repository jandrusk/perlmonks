<node>
  <doctext>&lt;h1&gt;Object Serialization Basics&lt;/h1&gt;

&lt;h2&gt;What is serialization and why does it matter?&lt;/h2&gt;

Taking an object in memory and making it persistent -- that is, outlasting the life of its fleeting implementation in memory.  Perhaps you wish to save the state of your program to disk when it exits, and restore when it starts again.  Maybe you want to transfer objects across the network to another instance of your program.  You might even store objects in a database.
&lt;p&gt;
There are three good modules you may wish to use:
&lt;ul&gt;
	&lt;li&gt;Storable&lt;/li&gt;
	&lt;li&gt;FreezeThaw&lt;/li&gt;
	&lt;li&gt;Data::Dumper&lt;/li&gt;
&lt;/ul&gt;
&lt;code&gt;my $data = &quot;this is a string of text&quot;;
my @dataset = qw( this is an array of text );
my %datagroup = ( hash =&gt; &quot;mine&quot;, text =&gt; &quot;yours&quot; );&lt;/code&gt;

&lt;h2&gt;Storable&lt;/h2&gt;

Two main methods you'll want to study are Storable::freeze and Storable::thaw.  The following is an example of their use:
&lt;code&gt;use Storable;
my $stored = freeze [ \$data, \@dataset, \%datagroup ];

print $stored;	# just to see what it looks like, in binary encoding

my $thawed = thaw $stored;

my ($newdata, $newdataset_ref, $newdatagroup_ref) = @$thawed;	# copies of original variables
(*data, *dataset, *datagroup) = @$thawed;	# restore into the original variables&lt;/code&gt;
Other useful methods include store() and retrieve(), which provide access to a named disk file.
&lt;p&gt;
&lt;h2&gt;FreezeThaw&lt;/h2&gt;

This also provides freeze() and thaw() methods, but the interface is slightly different:
&lt;code&gt;use FreezeThaw;

my $stored = freeze (\$data, \@dataset, \%datagroup);

print $stored;	# even trickier encoding

my @thawed = thaw $stored;
my ($newdata, $newdataset_ref, $newdatagroup_ref) = @thawed;

(*data, *dataset, *datagroup) = @thawed;&lt;/code&gt;
The biggest difference right there is that these methods work on a list, not an anonymous array.
&lt;p&gt;
Even better, freeze() and thaw() called on a blessed object (what we really want to persist, right?) calls the Freeze or Thaw method, respectively, of that object.  If none is provided, FreezeThaw has already installed UNIVERSAL::Freeze and UNIVERSAL::Thaw.
&lt;p&gt;
&lt;h2&gt;DataDumper&lt;/h2&gt;

This module produces Perl output as the encoding language.
&lt;code&gt;my $stored = Data::Dumper-&gt;Dump( [ $data, \@dataset, \%datagroup ],
                                 [ qw(data *dataset   *datagroup )] );

print $stored;

eval $stored;
&lt;/code&gt;
Note that the Dump subroutine takes two anonymous arrays.  The first is a list of scalars (or references) to dump, and the second is a list of variables to which to assign the dumped data.  (You can leave off the second list, but you'll end up with autogenerated names like $VAR1, $VAR2, and so on.)
&lt;p&gt;
Dumping an object results in all of the member data of the object being stored.  There's something else magical that happens, though, as evidenced by this dump of an instance of Hello::Hi (from Jellybean):
&lt;code&gt;$hi = bless( {
		'Data' =&gt; {},
		'Container' =&gt; 'Container',
		'Info' =&gt; {
			'modified' =&gt; '0',
			'name' =&gt; 'Hi',
			'author' =&gt; 'chromatic',
			'date' =&gt; '1 March 2000',
			'desc' =&gt; 'silly demonstration for Jellybean'
		},
		'main' =&gt; sub { &quot;DUMMY&quot; },
		'say_hi' =&gt; sub { &quot;DUMMY&quot; }
	}, 'Hello::Hi' );&lt;/code&gt;
When this is run through eval() (and assuming you have Hello::Hi available in memory somewhere already), you can call the correct methods.  That is, $hi-&gt;main() and $hi-&gt;say_hi() produce the expected results as if the object had not been dumped and eval()'d.
&lt;h2&gt;What Then?&lt;/h2&gt;
Since these three methods all end up with encoded data stored in a scalar, you can write it to a file or stick it in a database somewhere.  You can send it to another process via a [Building a Simple Perl Module Database|pipe], over a socket, or even through an HTTP connection.  Decoding it on the other side is also easy.
&lt;p&gt;
&lt;em&gt;for more information, see the documentation for [Storable], [FreezeThaw], and [Data::Dumper], or &lt;a href=&quot;http://www.manning.com/conway/&quot;&gt;Object Oriented Perl&lt;/a&gt;.&lt;/em&gt;</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>8070</node_id>
  <author_user>1382</author_user>
  <title>Object Serialization Basics</title>
  <createtime>2000-04-19 19:48:59</createtime>
  <nodeupdated>2005-08-15 13:01:00</nodeupdated>
</node>
