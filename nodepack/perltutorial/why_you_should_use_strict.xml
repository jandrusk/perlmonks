<node>
  <doctext>&lt;p&gt;After you've gotten fairly comfortable with perl, I strongly recommend you always load the strict module in all your programs. Putting &lt;code&gt;use strict;&lt;/code&gt; at the top of your programs will tell perl to slap your hands with a fatal error whenever you break certain rules.  And just like the rules against playing on the roof or freebasing crystal meth, those rules are there to help you.

&lt;p&gt;This code shows some of the weird and scary places you can end up if you don't do &lt;code&gt;use strict;&lt;/code&gt; in your programs.

&lt;p&gt;After you understand it, uncomment the &lt;code&gt;use strict;&lt;/code&gt; line and watch what happens when you run the script again.

&lt;code&gt;

#!/opt/local/bin/perl -w
#you'll need to replace the above with the path
#to your perl interpreter.

#use strict; #uncomment me later!

#this demonstrates why it's good to use strict.

$ref = 'aaa';
$aaa = 99;
@aaa = (1,2,3);

#now watch as $ref points to different variables,
#depending on the context.
print &quot;scalar context: $$ref\n&quot;;
print &quot;array context: @$ref\n&quot;;

#what is $ref, anyway?
print &quot;\$ref: $ref\n&quot;;

#here's an example of the same thing using a hash instead of a ref.
#this is how I first discovered it.
$hash{aaa} = &quot;aaa&quot;;

print &quot;hash value in scalar context: $hash{aaa}\n&quot;;
print &quot;hash value in array context: @{$hash{aaa}}\n&quot;;

#Pretty weird stuff. It all makes sense once you learn symbolic
#references, which were a big part of perl4, but they can be ambiguous
#depending on context, so if you use strict, you can bar them.
&lt;/code&gt;
&lt;p&gt;&lt;small&gt;Edit by [tye], remove PRE from around CODE&lt;/small&gt;&lt;/p&gt;</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>269642</node_id>
  <author_user>131651</author_user>
  <title>Why you should use strict</title>
  <createtime>2003-06-27 12:06:38</createtime>
  <nodeupdated>2005-08-15 13:05:29</nodeupdated>
</node>
