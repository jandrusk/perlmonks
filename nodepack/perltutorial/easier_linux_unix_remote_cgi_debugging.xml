<node>
  <doctext>&lt;p&gt;The things I'll discuss here are aimed at new/intermediate perl coders that know basic *nix commands: ls,cd,chmod,chgrp,mv,cp, etc., meaning I'm not going to discuss these. I also assume you can use &lt;b&gt;man&lt;/b&gt; and understand how to use telnet/ssh to get to your server. I realize that what I discuss here isn't specific to perl (or even CGI programming with perl) but is still (IMHO) very useful. If you want to know perl tricks to ease debugging, read the other tutorials in this section.&lt;/p&gt;
&lt;p&gt;What I am going to discuss are a few *nix tricks/commands  I've found that make my life MUCH easier when I'm debugging perl CGI scripts via a command console like telnet or ssh.  I'll talk a little about &lt;b&gt;screen,  tab file/path name auto-completion, tail,&lt;/b&gt; and a couple others.  These commands work in &lt;b&gt;bash&lt;/b&gt; under Redhat 6.x and Mandrake, and probably many other distros or *nix flavors.&lt;/p&gt;
&lt;p&gt;If you want to learn more, please read the &lt;b&gt;man&lt;/b&gt; pages for any of these commands.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;P&gt;&lt;b&gt;tset:&lt;/b&gt; If you find that typing &lt;b&gt;del, control, tab&lt;/b&gt; and other keys in your console just give you funny characters,  type &lt;code&gt;tset&lt;/code&gt; in the shell. tset initializes terminals, and fixes your terminal emulation in many cases to allow these keys to function properly.&lt;/P&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;screen:&lt;/b&gt; &lt;b&gt;screen&lt;/b&gt; allows you to open multiple shell consoles in the same telnet/ssh session.  I use screen as the &quot;glue&quot; that holds a remote debugging session together.  Right after you've logged in,  type &lt;code&gt;screen&lt;/code&gt; and you'll get what looks like a blank shell prompt.&lt;/p&gt;&lt;p&gt;You can  work in this shell, however, you can open another shell within screen by typing &lt;code&gt;Control-A&lt;/code&gt; followed by &lt;code&gt;C&lt;/code&gt;, for &quot;(C)reate.&quot;  You can now cycle between the two consoles (like &quot;alt-tabbing&quot; in windows) by hitting &lt;code&gt;Control-A&lt;/code&gt; followed by &lt;code&gt;N&lt;/code&gt;, for &quot;(N)ext.&quot;&lt;/p&gt;&lt;p&gt;You can open quite a few shells and cycle through them this way. I often find that I'll &lt;b&gt;tail&lt;/b&gt; my error logs, have code open in a command-line text editor, and have a mySQL client session logged in, all in different shells via screen.&lt;/p&gt;&lt;p&gt;To kill a screen shell, just type &quot;exit&quot; at a prompt. You can also &quot;detach&quot; a screen session (which allows you to resume it later on, even in a different remote session from a different computer) by typing &lt;code&gt;screen -d&lt;/code&gt; at a prompt. After you've detached a screen session, you can log out and get back to it at your leisure. If you're on a shared server, I wouldn't leave detached screen sessions lying around, both for security reasons and because it does take up some server resources. Your server admin might not appreciate it.&lt;/p&gt;&lt;p&gt;You can &quot;resume&quot; your screen session by typing &lt;code&gt;screen -r&lt;/code&gt; in the shell. Screen is very powerful and flexible, please read the man page for all it's glory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Tab file/pathname auto-completion:&lt;/b&gt; There may be a more elegant name for this. Either way, at a shell prompt,  try typing the first few letters of a filename or path and hit the &lt;b&gt;tab&lt;/b&gt; key.  The shell will auto fill the filename/path as far as it can, and if the path/shell is unique in the path you're in, it will fill it in fully. This is pretty basic, play around with it and you'll figure it out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Up/down arrow:&lt;/b&gt; Most *nix folks know this, but hitting the up/down arrow will cycle through your most recent commands. If you get funny strings in your shell when you hit these keys, remember &lt;b&gt;tset&lt;/b&gt; above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;tail:&lt;/b&gt; Shows the last 10 lines of a file. Using the &lt;b&gt;-f&lt;/b&gt; option &quot;follows&quot; the file. So, doing &lt;code&gt;tail -f /etc/httpd/logs/error_log&lt;/code&gt; will follow your error logs (if that's where they're located, obviously) and display the last 10 lines as things are added to the file.  This is particularly useful when you're using &lt;b&gt;screen&lt;/b&gt; above.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many other great unix tricks/commands that will help you in your perl coding. Hopefully the few that I've covered will be as useful to you as they are to me.&lt;/p&gt;</doctext>
  <type_nodetype>956</type_nodetype>
  <node_id>70846</node_id>
  <author_user>59531</author_user>
  <title>Easier Linux/Unix remote CGI Debugging</title>
  <createtime>2001-04-08 16:16:04</createtime>
  <nodeupdated>2005-08-12 08:25:58</nodeupdated>
</node>
