<node>
  <doctext>&lt;h1&gt;Welcome to the &quot;[pmdev] HowTo Wiki&quot;&lt;/h1&gt;
&lt;p&gt;
This is a place for answers to the questions new [pmdev]ils tend to ask. If you have knowledge which you think is relevant to developing the PerlMonks site, please share it here.  Nothing on this page is sacred. If you see room for improvement/enhancement on anything here, please do not hesitate to do so.
&lt;/p&gt;
&lt;p&gt;
Some info collected elsewhere which should probably be brought into this wiki:&lt;br/&gt;
[id://243469], [id://297002], [id://500336].
&lt;/p&gt;

&lt;hr /&gt;
&lt;h2&gt;What do I do now that I'm a member of [pmdev]?&lt;/h2&gt;
&lt;p&gt;
Turn on the [pmdev] specific nodelets via your [Nodelet Settings]. There are several, all of which are used for different things. The most important is the [PmDev Nodelet] which is documented below.  See [id://239623] for the others.  You are encouraged to enable the [Cabalists' Nodelet].
&lt;/p&gt;
&lt;p&gt;
You will also notice the link to [id://17003] in the [Settings Nodelet]; this may be used to change your preferences for diffs, inserted/deleted code style, line numbering, ordering for the [Patch Lister], and so on. &lt;!-- Added 2005-12-01 by [planetscape] --&gt;
&lt;/p&gt;

&lt;hr /&gt;
&lt;h2&gt;What's in the PmDev Nodelet?&lt;/h2&gt;
&lt;p&gt;
The [PmDev Nodelet] is the basic control panel for doing development on PM. It is made up of a variety of links that give you access to the development support on PM. A sample of what the nodelet looks like is as follows:
&lt;/p&gt;
&lt;center&gt;
&lt;table class = &quot;nodelet_container&quot; width=&quot;40%&quot;&gt;
&lt;tbody class = &quot;nodelet&quot; id =&quot;PmDev_Nodelet&quot;&gt;                                      
      &lt;tr class=&quot;nodelet_head_row&quot; id =&quot;nodelet_head_row_PmDev_Nodelet&quot;&gt;
        &lt;th class=&quot;nodehead&quot;&gt;
          PmDev Nodelet
        &lt;/th&gt;                                                                  
      &lt;/tr&gt;

      &lt;tr class=&quot;nodelet_body_row&quot; id =&quot;nodelet_body_row_PmDev_Nodelet&quot;&gt;
        &lt;td class=&quot;nodebody&quot;&gt;

  &lt;small&gt;#&lt;a HREF=&quot;?node_id=461491&quot;&gt;461491&lt;/a&gt; = &lt;a HREF=&quot;?node_id=68046&quot;&gt;wiki&lt;/a&gt; via &lt;a HREF=&quot;?node_id=68047&quot;&gt;wiki editpage&lt;/a&gt;&lt;/small&gt;
  | &lt;a href=&quot;?type=pmdevsuperdoc;node=Dump%20node%20fields;dumpid=461491&quot;&gt;Dump Fields&lt;/a&gt;

  | View&amp;nbsp;Code
  | &lt;a href=&quot;?containers=show;node_id=461491;displaytype=editpage&quot;&gt;Show&amp;nbsp;Containers&lt;/a&gt;

  | &lt;b&gt;3&lt;/b&gt;&lt;a href=&quot;?type=strangedoc;recipient=106850;node=message%20inbox&quot;&gt;/msgs&lt;/a&gt;
  | &lt;a href=&quot;?node_id=106868&quot;&gt;Dev&amp;nbsp;Wiki&lt;/a&gt;

  | &lt;a href=&quot;?node_id=222493&quot;&gt;Todo&amp;nbsp;Wiki&lt;/a&gt;
  | &lt;a href=&quot;?node_id=110265&quot;&gt;Port&amp;nbsp;Wiki&lt;/a&gt;
  | &lt;a href=&quot;?node_id=322009&quot;&gt;Cabal&amp;nbsp;Wiki&lt;/a&gt;
  | &lt;a HREF=&quot;?node_id=386578&quot;&gt;Types&lt;/a&gt;

  | &lt;a href=&quot;?node=Node%20Lister&quot;&gt;Nodes&lt;/a&gt;
  | &lt;a href=&quot;?node=Patch%20Lister&quot;&gt;Patches&lt;/a&gt;
  | &lt;a href=&quot;?node=Search%20internal%20code&quot;&gt;Search&amp;nbsp;code&lt;/a&gt;
  | &lt;a href=&quot;http://web.archive.org/web/20080101111220/http://everydevel.com/index.pl?node=The+Everything+Bible&quot;&gt;Everything&amp;nbsp;Bible&lt;/a&gt;

  | &lt;a href=&quot;http://web.archive.org/web/20050302045849/http://www.everydevel.com/index.pl?node=chromatic&quot;&gt;chromatic's&amp;nbsp;Library&lt;/a&gt;
  | &lt;a href=&quot;?node_id=461491&quot;&gt;HowTo&amp;nbsp;Wiki&lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;

    &lt;/tbody&gt;
&lt;/table&gt;
&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;
The first three links tell you what the id is of the page you are looking at, in this case this wiki, which is #[id://461491|461491], what type the page is, (a [wiki]) and which displaytype/[htmlpage] associated to the [wiki] nodetype is being used to render it. In the case of the example it shows &quot;wiki editpage&quot;, which is the [htmlpage] which controls how the wiki will be show when it is in edit mode. 
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
The next link is used to dump information about the node in raw form. This is useful only in certain scenarios, so you probably won't need this one very often.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
The next is &quot;&lt;b&gt;View Code&lt;/b&gt;&quot;, which will render as a link when the node being viewed contains code. The example shows this as text which indicates that [wiki] nodes don't contain any code. If you thought you wanted to patch a node like this then you would actually want to view the code of the appropriate display handler (usually of type [htmlpage]) and patch that; but realize that all nodes of that type will share the patch.  [Superdoc]s are the primary type of node containing code, and you will find that many of the pages which &quot;do something&quot; are of this type. 
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
&lt;a href=&quot;?containers=show;node_id=461491;displaytype=editpage&quot;&gt;Show&amp;nbsp;Containers&lt;/a&gt; is the next link in the nodelet. It is used to show the layout structure of the page. For instance, nodelets go inside of a nodelet container which in itself is nested in several other containers. Following this link changes the render mode of the page so that each container involved is explicitly shown, along with links to the various containers' code.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
&lt;b&gt;3&lt;/b&gt;&lt;a href=&quot;?type=strangedoc;recipient=106850;node=message%20inbox&quot;&gt;/msgs&lt;/a&gt; As a member of [pmdev] you have access to messages sent to pmdev. Use this link to view the inbox. The number in bold is the number of unarchived messages it contains. When a message has been dealt with in some fashion, it should be archived; do not delete messages.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[pmdev wiki|Dev Wiki]&lt;sup&gt;1&lt;/sup&gt; for a long time this was the primary place for discussion of [pmdev] related activities. To a certain extent it has been superceded by the [Inner Scriptorium] which is a proper discussion section instead of a wiki. Nevertheless there are issues which should only be raised in this wiki, such as security issues. (It is worth noting that the [Inner Scriptorium] is world readable, and world writable except for root nodes, whereas the [pmdev wiki] is readable only by members of the [cabal] and writable only by [pmdev]ils.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[pmdev to-do wiki|Todo Wiki]&lt;sup&gt;1&lt;/sup&gt; is a underutilized place to put information about ideas, or to find information about ideas others have had. We really should use this wiki more often.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[Cabalists Wiki|Cabal Wiki]&lt;sup&gt;1&lt;/sup&gt; is the place to be able to chat with the other support groups on PM. Since different group members can't write in each others wikis, this wiki serves as the forum where everybody can talk together.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[id://386578|Types] is a link to a tree view of the nodetype heirarchy used by PM. This can be a good place to get a holistic understanding of how things are related to each other and what types are available. 
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[Node Lister|Nodes] goes to a page where you can view lists of nodes by type. This is particularly useful if you need to find all of the [settings] nodes, or [opcode]s or things like that. Note that the [id://386578|Types] page has links through to this page on a per type basis.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[Patch Lister|Patches] is the master list of all patches ever created on PM. This can be useful to see what development activity has been going on recently, it also is useful to see what patches have been written by specific authors, etc. Normally when viewing the code for a node a mini patch list is visible showing similar information, but just for the node being viewed.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[Search internal Code|Search Code] &amp;mdash; If you need to search the code database for something, this is the tool.
Note: the 'grep' checkbox on the [Search internal Code|Search Code] page doesn't really increase the search function's
grep nature. All it really does is show more context in the search results.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[http://web.archive.org/web/20080101111220/http://everydevel.com/index.pl?node=The+Everything+Bible|Everything Bible] this is the documentation for Everything. It isn't entirely accurate for PerlMonks, as we forked from the Everything codebase quite some time ago; but it is very useful for understanding the design and structure of the site.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[http://web.archive.org/web/20050302045849/http://www.everydevel.com/index.pl?node=chromatic|Chromatic's library] is similar to the Bible in usefulness. It is definitely a good idea to have a review of this before getting into the deeper parts of the site design.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
And lastly we have a link to this page here, [pmdev howto wiki|HowTo Wiki]&lt;sup&gt;1&lt;/sup&gt; :-)
&lt;/li&gt;&lt;br/&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;
There's another old wiki, the [id://110265], which you may run into. It was intended for use during a project to port PerlMonks to a later version of Everything. This project is defunct, to the best of anyone's knowledge.
&lt;/small&gt;&lt;/p&gt;

&lt;h4&gt;Notes&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Wikis will show a '(*)' next to them when new content has been added.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr/&gt;
&lt;h2&gt;About the synch nodelet&lt;/h2&gt;
&lt;p&gt;
The synch nodelet was used to &quot;pin&quot; nodes on the production and development servers together. Currently there is no dev server so this nodelet is of limited use.
&lt;/p&gt;
&lt;!-- TEXT REMOVED since the dev server is no longer accessible (commented out rather than deleted in the hopes another dev server becomes available):
&lt;p&gt;
The synch nodelet is used to &quot;pin&quot; nodes on the two servers together. Nodes from prior to the fork don't need an explicit pin so the box won't show, otherwise a textbox is provided for this purpose. Once a node is pinned you can do various things with it: View the node on the opposite machine, Diff against the node on the opposite machine, send a Patch To the opposite machine of the current state, or get a Patch From the opposite machine of its node's current state. Additionally, if you are viewing a patch that is pinned, you can Synch To or Synch From the opposite machine. 
&lt;/p&gt;
&lt;p&gt;
Yes, this description could be improved. -- [demerphq].
&lt;/p&gt;
--&gt;

&lt;hr /&gt;
&lt;h2&gt;Learn to follow the code&lt;/h2&gt;
&lt;p&gt;
When you view a page on perlmonks and you see something you want to change you should do the following:
&lt;/p&gt;
&lt;p&gt;
Look in the PmDev Nodelet in the top left hand corner. In there you will see three useful pieces of information. The nodetype and the [htmlpage] responsible for the rendering, and just a bit after that is 'View Code'. If the 'View Code' is text then there is nothing else responsible for rendering the code, and you should review the [htmlpage] directly. If the 'View Code' is a link then following it will bring you up the code which is used &lt;i&gt;by&lt;/i&gt; the [htmlpage] for rendering. For most of the &quot;interesting&quot; nodes on pm this is the link to follow.
&lt;/p&gt;
&lt;p&gt;
Once you have got the code view in front of you you will notice a few things. First some of the contents of the code will be linkified. These are usually to [htmlcode] nodes but may be to other things like settings. Second there is a form at the bottom where you can post a patch. And third you will notice at the bottom of the page a list of patches which have been created for this node, with features for diffing them against each other. 
&lt;/p&gt;
&lt;p&gt;
In addition to the DB code there is also the PM code, so you should take a look at the [pmmodule]s installed by using the [Node Lister] to find them. Everything you need to know is there. Using [Search Internal Code] will allow you to easily find where routines are used, or whatever. 
&lt;/p&gt;
&lt;p&gt;
Once you have familiarized yourself with all of this, then you are ready to make a patch!
&lt;/p&gt;
&lt;p&gt;
If you want to contribute a patch then you should do so, make whatever changes you like and post it, you will be able to edit it afterwards. Nobody will bother with your patch beyond replying to it until you &quot;write it up&quot; in the pmdev wiki, or pester a god about it in the cb, so feel free to take your time. Arrange to move the patch to the pmdev server and get one of the pmdev gods (there are a fair number) to apply it for testing. Eventually you will be happy with it and then you should write it up.
&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;A superficial list of things you should know&lt;/h2&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;[htmlcode] nodes are the &quot;subroutines&quot; of PM. They are called by using the htmlcode() subroutine, which has somewhat odd calling semantics. The first argument is the name of the [htmlcode] node being executed. The second argument is expected to be an empty string, or a string containing a comma seperated list of simple values. This string is split automatically and inserted infront of any following arguments. This means that &lt;c&gt;htmlcode('foo','foo,bar,baz')&lt;/c&gt; is equivalent to &lt;c&gt;htmlcode('foo', 'foo,bar', 'baz')&lt;/c&gt;. It is worth keeping in mind that you cannot say &lt;code&gt;my $arg = shift;&lt;/code&gt; inside of a htmlcode routine as the &lt;code&gt;shift&lt;/code&gt; will be against the wrong array as the code will be executing inside of an eval($string). Thus you must work against @_ explicitly. An additional restriction of [htmlcode] nodes is that they are expected to return a string. If you need more complex argument passing you have to do it via reference. This is one reason why some of the [htmlcode] nodes out there have the clunky interface that they do.
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[Superdoc]s are the &quot;skeleton&quot; of PerlMonks.  Most pages which do something special are [superdoc]s or derive from [superdoc]. [Superdoc]s contain a special type of templating code which does their business. In other words, they are a blend of perl code and [htmlcode]. The main type of templating you will see which you won't already be familiar with will be either embedded calls to [htmlcode] nodes, and embedded Perl code. Embedded [htmlcode] calls look like &lt;code&gt;[{foo:foo,bar,baz}]&lt;/code&gt; which should explain the weird interface to [htmlcode] nodes described in the previous point. Embedded Perl code looks like &lt;code&gt;[% my $string='this'; $string %]&lt;/code&gt;. 
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
[htmlpage]s define the way nodes get rendered; they handle the logic of converting a node hash into html. For example, the [superdoc] nodetype is itself a fairly simple type; it is the [htmlpage]s associated to the [superdoc] nodetype which make it the workhorse of the site. The distinction between these node types is important: [htmlpage]s deal with the behaviour of nodes on a generic level, whereas [superdoc]s, and other nodetypes with code, define behaviour on a per node basis.  
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
&lt;i&gt;Something about containers should go here....&lt;/i&gt;
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
&lt;i&gt;Something about nodelets should go here....&lt;/i&gt;
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
&lt;i&gt;Something about settings should go here....&lt;/i&gt;

Visit [User Settings Statistics] to review nodelet/settings usage.

&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
At the grossest level, there are two kinds of code on the site: that which is stored in modules (&quot;.pm&quot; code) and that which is stored in the database and &lt;tt&gt;eval&lt;/tt&gt;ed into existence at runtime (so-called &quot;node&quot; code or &quot;db&quot; code).  The latter, generally speaking, comes in two forms: &lt;i&gt;raw code&lt;/i&gt; and &lt;i&gt;embedded code&lt;/i&gt;. &lt;i&gt;Raw code&lt;/i&gt; includes [htmlcode] nodes, which are more or less like subroutines stored in the database. &lt;i&gt;Embedded code&lt;/i&gt; is snippets which are embedded in more complex documents, usually via the &lt;code&gt;[% $content %]&lt;/code&gt; notation. In all cases, the following variables are normally available: 
  &lt;dl&gt;

  &lt;dt&gt;&lt;c&gt;$VARS&lt;/c&gt;&lt;/dt&gt;
  &lt;dd&gt;
  a [setting] which is associated to the user. This is fetched after authentication,
  and updated at the end of the page fetch and is always available.
  &lt;/dd&gt;

  &lt;dt&gt;&lt;c&gt;$q&lt;/c&gt;&lt;/dt&gt;
  &lt;dd&gt;
  &lt;c&gt;= CGI-&gt;new()&lt;/c&gt;
  &lt;/dd&gt;

  &lt;dt&gt;&lt;c&gt;%HTMLVARS&lt;/c&gt; (or &lt;c&gt;%Everything::HTMLVARS&lt;/c&gt;)&lt;/dt&gt;
  &lt;dd&gt;
  is a special hash which is initialized from a setting at the
  beginning of a page fetch but unlike vars is not persistent.
  It is used for passing data between embedded sections, as well as a per fetch cache.
  &lt;/dd&gt;

  &lt;dt&gt;&lt;c&gt;$NODE&lt;/c&gt;&lt;/dt&gt;
  &lt;dd&gt; 
  is a nodehash of the current node being viewed.
  &lt;/dd&gt;

  &lt;dt&gt;&lt;c&gt;$USER&lt;/c&gt;&lt;/dt&gt;
  &lt;dd&gt;
  is a nodehash of the current user logged in. 
  &lt;/dd&gt;

  &lt;dt&gt;&lt;c&gt;$AUTHOR&lt;/c&gt;&lt;/dt&gt;
  &lt;dd&gt;
  is a nodehash of the author of the current node, afaik it is not always available/correctly set.
  &lt;/dd&gt;

  &lt;dt&gt;&lt;c&gt;$DB&lt;/c&gt;&lt;/dt&gt;
  &lt;dd&gt;
  An [Everything/NodeBase.pm|Everything::NodeBase] object.
  It contains the real implementation of many of the subs that [Everything.pm|Everthing] provides.
  Notably, &lt;c&gt;$DB-&gt;getDatabaseHandle()&lt;/c&gt; returns a DBI &lt;c&gt;$dbh&lt;/c&gt; object.
  &lt;/dd&gt;

  &lt;/dl&gt;
&lt;/li&gt;&lt;br/&gt;
&lt;li&gt;
  The following are routines that are commonly used:
  &lt;dl&gt;
  &lt;dt&gt;&lt;c&gt;getNodeById($id)&lt;/c&gt;&lt;/dt&gt;&lt;dd&gt;Fetches a node by its id; core routine.&lt;/dd&gt;
  &lt;dt&gt;&lt;c&gt;getNode($node,$type)&lt;/c&gt;&lt;/dt&gt;&lt;dd&gt;Fetches a node by id, name, or name and type.&lt;/dd&gt;
  &lt;dt&gt;&lt;c&gt;linkNode($node,$text,$optshash)&lt;/c&gt;&lt;/dt&gt;&lt;dd&gt;link a node by id or hash.&lt;/dd&gt;
  &lt;/dl&gt;
&lt;/li&gt;&lt;br/&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;Neat things to know&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
If you use strings like &lt;c&gt;[{nodename}]&lt;/c&gt; in comments in perl code they will autolink like &lt;c&gt;[nodename]&lt;/c&gt; would in a normal node when viewed by the end user. This makes it easy to cross ref a node.
&lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;
&lt;h2&gt;Question and Answer&lt;/h2&gt;
&lt;dl&gt;

&lt;dt&gt;&lt;b&gt;Q.&lt;/b&gt; How do i find out about the current DB tables in use and how they are related to each other&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;
&lt;b&gt;A.&lt;/b&gt; Reviewing the properties of a nodes type is the basic way to find out how it behaves and what DB tables it uses. For example, click on the wiki link in the line &lt;c&gt;( #461491=wiki: print w/ replies, xml )&lt;/c&gt; at the top of this node.&lt;br/&gt;
You can also use the [id://386578|Types] link in the PmDev Nodelet to see the nodetype heirarchy. Both ways show what tables are used, what display types are used, and whether they are inherited or not.
&lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Q.&lt;/b&gt; How do i find out what are the fields in the various DB tables and valid values for the fields&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;
&lt;b&gt;A.&lt;/b&gt; Finding out legal values for a field usually involves reviewing the code that interacts with the field in question, and is normally done via the [Search Internal Code] page.
&lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Q.&lt;/b&gt; Is adding fields to a table ok and what are the costs of doing so&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;
&lt;b&gt;A.&lt;/b&gt; Adding fields to tables is possible, but generally undesirable. There has to be a good reason to do so. Designs which don't require table modifications are preferred over ones which do.
&lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Q.&lt;/b&gt; Is there a development server where patches can be tested?  How is it accessed?&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;
&lt;b&gt;A.&lt;/b&gt; No.  There used to be, though, and there may be again.&lt;!-- ORIGINAL TEXT follows, which can be restored if the test server is re-created:  Patches can be tested at http://pmdev.flux8.com. Please speak with [Corion] or [demerphq] or one of the other testserver gods about getting your account set up. Also, often it is possible to test perfectly satisfactorily without requiring server access. This may require a bit of imagination and fudging, but can work very well. --&gt;
&lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Q.&lt;/b&gt; How do I find the code for Nodelets?&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;
&lt;b&gt;A.&lt;/b&gt; The name of the code node is the same as the name of the nodelet. You can type that into the &lt;b&gt;Search&lt;/b&gt; box at the top of any page.  Or you can use the Gigantic Node Lister and filter on nodes of type [href://?node_id=106927;whichtype=9|nodelet].
&lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Q.&lt;/b&gt; How do I view the code changes that a patch makes?&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;
&lt;b&gt;A.&lt;/b&gt; Select the patch you are interested in the [Patch Lister]. At the bottom of the page there is a table of related Patches. Click on &lt;c&gt;&lt;Diff&gt;&lt;/c&gt; for the patch you wish to compare to the currently selected patch.
&lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Q.&lt;/b&gt; What are &quot;SQL Queries&quot; and how do I use them?&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;
&lt;b&gt;A.&lt;/b&gt; The [id://397475] nodetype represents a query against the database for use by [pmdev] and the [gods]. Only [gods] can create them, and they can be configured to allow or deny [pmdev] from executing them. SQL Queries have special XML behaviour which enables them to serve as &lt;i&gt;ad hoc&lt;/i&gt; tickers. If you need an SQL Query established you can ask the [gods]. If you want to find out what queries exist you can look at
[href://?node_id=106927;whichtype=397475|the sqlquery nodelist]
&lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Q.&lt;/b&gt; Can I fix replies whose 'root' field points to the wrong node?&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;b&gt;A.&lt;/b&gt;
Yes; use [id://150940] to find and fix this situation.
&lt;/p&gt;&lt;/dd&gt;

&lt;!-- Add more here please! --&gt;
&lt;/dl&gt;

&lt;hr/&gt;














</doctext>
  <type_nodetype>68046</type_nodetype>
  <node_id>461491</node_id>
  <author_user>357600</author_user>
  <title>Pmdev HowTo Wiki</title>
  <createtime>2005-05-29 07:30:20</createtime>
  <nodeupdated>2005-08-11 08:39:51</nodeupdated>
</node>
