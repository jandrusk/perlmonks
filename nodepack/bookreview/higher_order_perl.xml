<node>
  <doctext>&lt;p&gt;I recently got a copy. and I'm deeply into it (even though I am currently just in the midst of chapter 3).&lt;/p&gt;

&lt;p&gt;This is so far probably one of the best written geek books I've come across. Not only is it clear, it's very good at building concepts and demonstrating with concise code. Every paragraph leads logically and intelligently from the previous. Digressions are informative, code examples are excellent, even the footnotes are interesting and humorous.&lt;/p&gt;

&lt;p&gt;Even the Preface was very well done:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&quot;A well-known saying in the programming racket is that a good Fortran programmer can write Fortran programs in any language. The sad truth, thought, is that Fortran programmers write Fortran programs in any language whether they mean to or not. Similarly, we, as Perl programmers, have been writing C programs in Perl whether we meant to or not. This is a shame, because Perl is a much more expressive language than C. We could be doing a lot better, using Perl in ways undereamt of by C programmers, but we're not.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&quot;Around 1993 I started reading books about Lisp, and I discovered something important: Perl is much more like Lisp than it is like C. If you pick up a good book about Lisp, there will be a section that describes Lisp's good features. In &quot;What Makes Lisp Different?&quot; Peter Norvig describes seven features of Lisp. Perl shares six of these features; C shares none of them.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Thomas J. Vilot&lt;/i&gt;&lt;/p&gt;</doctext>
  <type_nodetype>31670</type_nodetype>
  <author_user>367580</author_user>
  <createtime>2005-03-29 13:03:54</createtime>
  <itemdescription></itemdescription>
  <identifier>1-55860-701-3</identifier>
  <node_id>443215</node_id>
  <usercomment>A review posted on my blog as a comment.</usercomment>
  <title>Higher Order Perl</title>
  <nodeupdated>2005-08-13 15:55:48</nodeupdated>
</node>
