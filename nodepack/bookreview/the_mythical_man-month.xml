<node>
  <doctext>&lt;em&gt;&lt;a href=http://www.awlonline.com/product/0,2627,0201835959,00.html&gt;
The Mythical Man-Month&lt;/a&gt;&lt;/em&gt; by Frederick P. Brooks&lt;br&gt;
ISBN 0-201-83595-9&lt;br&gt;
Copyright 1995, &lt;a href=http://www.aw.com&gt;
Addison-Wesley&lt;/a&gt;
&lt;p&gt;
&lt;strong&gt;Capsule Review&lt;/strong&gt;
&lt;p&gt;
Excellent book.  5 stars out of 5.
&lt;p&gt;
Who should be interested in this book?
&lt;ul&gt;
&lt;li&gt;Everyone in the high-tech industry.  Especially managers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;strong&gt;Full Review&lt;/strong&gt;
&lt;p&gt;
It may surprise many to learn that a book about the computer
industry written in 1975 is still relevant today.  But it is
painfully relevant.  Painful because, as you read Fred
Brooks' book, you'll likely see your company in his words, and
you'll see that your management still hasn't learned what
Fred Brooks was teaching 25 years ago.
Of course, depending on your attitude, maybe you won't find
any of this book to be painful.  Maybe you'll feel
vindicated for saying what you did in that meeting three
months ago that pissed your manager off so.
&lt;p&gt;
The strength of this book is that it takes all the stray
thoughts, irritations, frustrations, and observations you've
ever had while working on a large project, and congeals them
into simple, straightforward ideas.  Paraphrasing one such
idea:
&lt;p&gt;
If you're working on a
project where a lot of communication is required, the amount
of time spent in meetings increases exponentially with the
number of people on the project.  So, you should try to
break the project up into autonomous units, or keep the
number of people on the project to a minimum so they have
time to get real work done.  Simple, right?  And he even
puts in graphs so your manager can understand it.
&lt;p&gt;
Brooks also makes some suggestions that, while they make
good sense, nobody seems to have taken seriously.  One
example is his &quot;Surgical Team&quot;.  We've all worked in teams
where there was a good division of responsibility, but
not to the degree Brooks suggests.  In his version, there's
only one person, the &quot;surgeon,&quot; who does the vast majority of the coding.
Another person is sort of an understudy whose primary purpose
is to review all of that person's code and serve as a
sounding board and devil's advocate for the surgeon.
Somebody else is responsible for unit testing everything the
surgeon produces.  And then there are other supporting roles
that I won't go into here.  A fascinating concept, and one
that would no doubt produce excellent quality.  But it just
looks too expensive for anybody to actually do it.
&lt;p&gt;
Of course, the classic unused suggestion -- probably the one
thing everybody has heard from this book -- &quot;Plan to throw
the first one away, because you will anyway.&quot;
&lt;p&gt;
In summary, an excellent book on the problems and pitfalls
of developing new systems.
&lt;p&gt;
&lt;a href=&quot;/index.pl?node=splinky&amp;lastnode_id=1072&quot;&gt;*Woof*&lt;/a&gt;
</doctext>
  <type_nodetype>31670</type_nodetype>
  <author_user>20906</author_user>
  <createtime>2000-07-14 04:55:57</createtime>
  <itemdescription></itemdescription>
  <identifier>0201835959</identifier>
  <node_id>22507</node_id>
  <usercomment></usercomment>
  <title>The Mythical Man-Month</title>
  <nodeupdated>2005-08-10 16:20:14</nodeupdated>
</node>
