<node>
  <type_nodetype>4</type_nodetype>
  <node_id>481659</node_id>
  <author_user>357600</author_user>
  <title>handle_node_edits</title>
  <createtime>2005-08-07 08:14:09</createtime>
  <code>=head1 NAME

handle_node_edits

=head1 DESCRIPTION

Provides edit display type for janitors, pedagogues and SiteDocClan,
incorporating edit histories and locking.

=cut

use Digest::MD5 qw(md5_hex);

my ($group) = @_;

my %options = (
    editors =&gt; {
        is_ok_type      =&gt; 'isJanitorable',
        not_ok_type_msg =&gt; &quot;Not a janitor editable type&quot;,
        not_member_msg  =&gt;
        &quot;You're not a janitor get away, there is no Perl Illuminati&quot;,
    },
    SiteDocClan =&gt; {
        is_ok_type      =&gt; 'CanSdcEdit',
        not_ok_type_msg =&gt; &quot;Not a SiteDocClan editable type&quot;,
        not_member_msg  =&gt;
        &quot;You're not SiteDocClan get away, there is no Perl Illuminati&quot;,
    },
    pedagogues =&gt; {
        is_ok_type      =&gt; 'CanPedagoguesEdit',
        not_ok_type_msg =&gt; &quot;Not a Pedagogues editable type&quot;,
        not_member_msg  =&gt; &quot;You're not a Pedagogue get away, there is no Perl Illuminati&quot;,
    },
    QandAEditors =&gt; {
        is_ok_type      =&gt; 'CanQAEdit',
        not_ok_type_msg =&gt; &quot;Not a QandAEditors editable type&quot;,
        not_member_msg  =&gt; &quot;You're not a QandAEditor get away, there is no Perl Illuminati&quot;,
    },
);

exists $options{$group}
    or die &quot;\$group is $group, but should be one of &quot;. join ', ', keys %options;

return $options{$group}{not_ok_type_msg}
  unless htmlcode($options{$group}{is_ok_type});

return $options{$group}{not_member_msg}
    unless Everything::isApproved($USER, getNode($group,'usergroup'));

unless(htmlcode('getOrRenewLock')){
    return &quot;Sorry, &quot; . linkNode($NODE-&gt;{lockedby_user})
       . &quot; has a lock on this node right now&quot;;
}

my $preview_on=(!$query-&gt;param('disable preview'));
my $update=($query-&gt;param('blah') eq &quot;update&quot;);
my $private = $query-&gt;param('update_private') || 0;

#
# update fields
#

my $str;
my @fields=grep{/^update_(.+)/} $query-&gt;param();

if($update){
    my @badfields;
    foreach(@fields){
        my $field;
        ($field) = /update_(.*)/;
        next if $field eq &quot;private&quot;;
        next if $field eq 'group';
        my $old_digest= $query-&gt;param(&quot;digest_$field&quot;);
        my $new_digest= md5_hex($NODE-&gt;{$field});
        if($new_digest eq $old_digest){
            if($NODE-&gt;{$field} ne $query-&gt;param(&quot;update_$field&quot;)){
                $DB-&gt;sqlInsert('edithistory',{
                    starttext=&gt;$NODE-&gt;{$field},
                    endtext=&gt;$query-&gt;param(&quot;update_$field&quot;),
                    editor_user=&gt;getId($USER),
                    -edittime=&gt;&quot;now()&quot;,
                    fieldname=&gt;$field,
                    private=&gt;$private,
                    edithistory_id=&gt;getId($NODE)});
                $NODE-&gt;{$field}=$query-&gt;param(&quot;update_$field&quot;);
                $query-&gt;param(&quot;digest_$field&quot;,md5_hex($NODE-&gt;{$field}));
            }
        } else {
            push @badfields, $field;
        }
    }
    updateNode($NODE,-1);
    $str.='&lt;br /&gt;&lt;font color=&quot;red&quot;&gt;The following fields'
        . ' weren\'t updated because they have been updated'
        . ' since you started editing: ' . join(',',@badfields)
        . '&lt;/font&gt;&lt;p&gt;'
        if @badfields;
}

my $tables = $DB-&gt;getNodetypeTables($NODE-&gt;{type_nodetype});
my %titletype;

foreach my $table (@$tables,'node')
{
    my @fields = $DB-&gt;getFieldsHash($table);

    foreach my $field (@fields)
    {
        $titletype{$field-&gt;{Field}} = $field-&gt;{Type};
    }
}

local *fieldorder = sub {
  my $f = shift;
  local $_ = $titletype{$f}||'';
  return 0 if /title/i;
  return 1 if /core/;
  return 2 if /char\(/;
  return 3 if /text/;
  return 4;
};

#
# preview section
#
if($query-&gt;param('update_title')){
    $str.=&quot;&lt;h3&gt;Preview title:&lt;/h3&gt;&quot; . $query-&gt;param('update_title') . &quot;&lt;br /&gt;&quot;
        if $preview_on;
}

my %Skip=(group=&gt;1, vars=&gt;1);

foreach( sort { fieldorder($a) &lt;=&gt; fieldorder($b) or $a cmp $b } @fields){
    my $field;
    ($field)=/update_(.*)/;
    next if $_ eq &quot;update_title&quot;;
    next if $Skip{$field};
    $HTMLVARS{embed_node}{doctext}=$query-&gt;param($_);
    if ($preview_on) {
        $str.=&quot;&lt;h3&gt;Preview $field:&lt;/h3&gt;&quot;;
        if ($NODE-&gt;{type}{title} eq &quot;perlcraft&quot;) {
            $str.=htmlcode('previewdisplayperlcraft').&quot;&lt;br /&gt;&quot;;
        } elsif ( $NODE-&gt;{type}{title} eq 'sitedoclet' ) {
            $str.=htmlcode('get_sitedoclet','',
                {   title=&gt;$query-&gt;param('update_title'),
                    doctext=&gt;$HTMLVARS{embed_node}{doctext}
                });
        } else {
            $str.=htmlcode('parselinksinstring').&quot;&lt;br /&gt;&quot;;
        }
    }
}
$str= &quot;&lt;hr /&gt;$str&lt;hr /&gt;&lt;br /&gt;&lt;br /&gt;&quot; if $str;

$str.=&quot;\n&quot;.htmlcode('openform', '', 'name' =&gt; 'edit_node');

# This edit page displays each field of a node with a
# (usually) appropriate form item in which to edit the
# contents of each field.  This is useful to edit a node's
# data that is usually not accessable through a standard
# edit page (like createtime, or hits)

local* hiddenMD5=sub{
    my($field)=@_;
    $query-&gt;hidden(
        -name=&gt;&quot;digest_$field&quot;,
        -value=&gt;($query-&gt;param(&quot;digest_$field&quot;) or md5_hex($NODE-&gt;{$field}))
    ).&quot;\n&quot;;
};

# This code generates the form fields and the stuff that
# the user sees.

foreach my $field ( sort { fieldorder($a) &lt;=&gt; fieldorder($b) or $a cmp $b } keys %titletype)
{
    next if $Skip{$field};
    if($field eq &quot;core&quot;){
    }
    elsif($titletype{$field} =~ /char\((.*)\)/)
    {
        my $size = 80;
        $str.=&quot;&lt;h3&gt;$field:&lt;/h3&gt;&quot;;
        $size = $1 if($size &gt; $1);
        $str .= $query-&gt;textfield(
            -name =&gt; &quot;update_$field&quot;,
            -default =&gt; ($query-&gt;param(&quot;pu_$field&quot;) or $NODE-&gt;{$field}),
            -size =&gt; $size,
            -maxlength =&gt; $1 ) . &quot;&lt;br&gt;\n&quot;;
        $str.=hiddenMD5($field);
    }
    elsif($titletype{$field} =~ /text/)
    {
        $str.=&quot;&lt;h3&gt;$field:&lt;/h3&gt;&quot;;
        $str .= $query-&gt;textarea(
            -name=&gt;&quot;update_$field&quot;,
            -default=&gt;($query-&gt;param(&quot;pu_$field&quot;) or $NODE-&gt;{$field}),
            -rows=&gt;20, -cols=&gt;80, -wrap=&gt;&quot;virtual&quot;) . &quot;&lt;br /&gt;\n&quot;;
        $str.=hiddenMD5($field);
    }
}
$str.=$query-&gt;checkbox('disable preview').&quot;&lt;br /&gt;\n&quot;;
$str.=$query-&gt;checkbox(
    -name =&gt; 'update_private',
    -label =&gt;'set private flag',
    -value =&gt; '1'
).&quot;&lt;br /&gt;\n&quot;
    if $group eq 'editors';
#$str.=htmlcode('groupeditor').&quot;&lt;br /&gt;&quot;
#  if $NODE-&gt;{type}{title} eq 'faqlist';
$str.=  $query-&gt;submit('blah','preview') . &quot;\n&quot;
    .   $query-&gt;submit('blah','update') . &quot;&lt;/form&gt;\n&quot;;

if(     $update
    &amp;&amp;  $group eq 'editors'
    &amp;&amp;  $NODE-&gt;{author_user} != $HTMLVARS{guest_user}
) {
   $str .= htmlcode(
        'msguser', $NODE-&gt;{'author_user'},
        &quot;I've edited &quot;. linkNode( getId($NODE) ).
        &quot;. See &quot;. linkNode( getId($NODE),
          &quot;node history&quot;, { displaytype =&gt; 'edithistory' } )
   );
}
return $str;
</code>
  <nodeupdated>2005-08-13 21:17:56</nodeupdated>
</node>
